
Can_with_it.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007fa8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  08008138  08008138  00009138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008298  08008298  0000a070  2**0
                  CONTENTS
  4 .ARM          00000008  08008298  08008298  00009298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080082a0  080082a0  0000a070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080082a0  080082a0  000092a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080082a4  080082a4  000092a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080082a8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b0  20000070  08008318  0000a070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000420  08008318  0000a420  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019c9b  00000000  00000000  0000a0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033f8  00000000  00000000  00023d3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001660  00000000  00000000  00027138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000116a  00000000  00000000  00028798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a2a7  00000000  00000000  00029902  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a42a  00000000  00000000  00053ba9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010a580  00000000  00000000  0006dfd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00178553  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000652c  00000000  00000000  00178598  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000086  00000000  00000000  0017eac4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008120 	.word	0x08008120

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08008120 	.word	0x08008120

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <canNotification>:
extern bmsData bmsDataObj;

char* rxFailure = "NO data received through can!\r\n";
char* canActivationFault = "CAN not activated!\r\n";

uint8_t canNotification(){
 8000570:	b590      	push	{r4, r7, lr}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
	uint8_t state = 0;
 8000576:	2300      	movs	r3, #0
 8000578:	71fb      	strb	r3, [r7, #7]

	if (HAL_CAN_ActivateNotification(&hcan1,CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK) {
 800057a:	2112      	movs	r1, #18
 800057c:	480f      	ldr	r0, [pc, #60]	@ (80005bc <canNotification+0x4c>)
 800057e:	f002 ff0e 	bl	800339e <HAL_CAN_ActivateNotification>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d012      	beq.n	80005ae <canNotification+0x3e>
		Error_Handler();
 8000588:	f000 fcca 	bl	8000f20 <Error_Handler>
		LOGS(canActivationFault, strlen(canActivationFault));
 800058c:	4b0c      	ldr	r3, [pc, #48]	@ (80005c0 <canNotification+0x50>)
 800058e:	681c      	ldr	r4, [r3, #0]
 8000590:	4b0b      	ldr	r3, [pc, #44]	@ (80005c0 <canNotification+0x50>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4618      	mov	r0, r3
 8000596:	f7ff fe1b 	bl	80001d0 <strlen>
 800059a:	4603      	mov	r3, r0
 800059c:	b29a      	uxth	r2, r3
 800059e:	2364      	movs	r3, #100	@ 0x64
 80005a0:	4621      	mov	r1, r4
 80005a2:	4808      	ldr	r0, [pc, #32]	@ (80005c4 <canNotification+0x54>)
 80005a4:	f006 f870 	bl	8006688 <HAL_UART_Transmit>
		state = 1;
 80005a8:	2301      	movs	r3, #1
 80005aa:	71fb      	strb	r3, [r7, #7]
 80005ac:	e001      	b.n	80005b2 <canNotification+0x42>
	} else {
		state = 0;
 80005ae:	2300      	movs	r3, #0
 80005b0:	71fb      	strb	r3, [r7, #7]
	}

	return state;
 80005b2:	79fb      	ldrb	r3, [r7, #7]
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	370c      	adds	r7, #12
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd90      	pop	{r4, r7, pc}
 80005bc:	20000138 	.word	0x20000138
 80005c0:	20000004 	.word	0x20000004
 80005c4:	20000208 	.word	0x20000208

080005c8 <HAL_CAN_RxFifo0MsgPendingCallback>:
	}


}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 80005c8:	b590      	push	{r4, r7, lr}
 80005ca:	b08f      	sub	sp, #60	@ 0x3c
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef rxHeader;

	canData data[] = {0};
 80005d0:	f107 0308 	add.w	r3, r7, #8
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]

	if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &rxHeader, data->data) != HAL_OK){
 80005de:	f107 0308 	add.w	r3, r7, #8
 80005e2:	3306      	adds	r3, #6
 80005e4:	f107 0218 	add.w	r2, r7, #24
 80005e8:	2100      	movs	r1, #0
 80005ea:	4819      	ldr	r0, [pc, #100]	@ (8000650 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 80005ec:	f002 fd8d 	bl	800310a <HAL_CAN_GetRxMessage>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d00d      	beq.n	8000612 <HAL_CAN_RxFifo0MsgPendingCallback+0x4a>
		LOGS(rxFailure,strlen(rxFailure));
 80005f6:	4b17      	ldr	r3, [pc, #92]	@ (8000654 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 80005f8:	681c      	ldr	r4, [r3, #0]
 80005fa:	4b16      	ldr	r3, [pc, #88]	@ (8000654 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4618      	mov	r0, r3
 8000600:	f7ff fde6 	bl	80001d0 <strlen>
 8000604:	4603      	mov	r3, r0
 8000606:	b29a      	uxth	r2, r3
 8000608:	2364      	movs	r3, #100	@ 0x64
 800060a:	4621      	mov	r1, r4
 800060c:	4812      	ldr	r0, [pc, #72]	@ (8000658 <HAL_CAN_RxFifo0MsgPendingCallback+0x90>)
 800060e:	f006 f83b 	bl	8006688 <HAL_UART_Transmit>
	}
	if(rxHeader.ExtId == 0x1806EEEE){
 8000612:	69fb      	ldr	r3, [r7, #28]
 8000614:	4a11      	ldr	r2, [pc, #68]	@ (800065c <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 8000616:	4293      	cmp	r3, r2
 8000618:	d103      	bne.n	8000622 <HAL_CAN_RxFifo0MsgPendingCallback+0x5a>
		data->ID = rxHeader.ExtId;
 800061a:	69fb      	ldr	r3, [r7, #28]
 800061c:	60bb      	str	r3, [r7, #8]
		data->IDE = CAN_ID_EXT;
 800061e:	2304      	movs	r3, #4
 8000620:	733b      	strb	r3, [r7, #12]
	}
	data->DLC = rxHeader.DLC;
 8000622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000624:	b2db      	uxtb	r3, r3
 8000626:	737b      	strb	r3, [r7, #13]
	data->Fifo = 0;
 8000628:	2300      	movs	r3, #0
 800062a:	75bb      	strb	r3, [r7, #22]

	processCanMsg(data);
 800062c:	f107 0308 	add.w	r3, r7, #8
 8000630:	4618      	mov	r0, r3
 8000632:	f000 f861 	bl	80006f8 <processCanMsg>

	uint8_t fill0 = HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0);
 8000636:	2100      	movs	r1, #0
 8000638:	4805      	ldr	r0, [pc, #20]	@ (8000650 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 800063a:	f002 fe88 	bl	800334e <HAL_CAN_GetRxFifoFillLevel>
 800063e:	4603      	mov	r3, r0
 8000640:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if(fill0 == 0){
 8000644:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000648:	2b00      	cmp	r3, #0
		return;
	}
}
 800064a:	373c      	adds	r7, #60	@ 0x3c
 800064c:	46bd      	mov	sp, r7
 800064e:	bd90      	pop	{r4, r7, pc}
 8000650:	20000138 	.word	0x20000138
 8000654:	20000000 	.word	0x20000000
 8000658:	20000208 	.word	0x20000208
 800065c:	1806eeee 	.word	0x1806eeee

08000660 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8000660:	b590      	push	{r4, r7, lr}
 8000662:	b08f      	sub	sp, #60	@ 0x3c
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef rxHeader;

	canData data[] = {0};
 8000668:	f107 0308 	add.w	r3, r7, #8
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	60da      	str	r2, [r3, #12]

	if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &rxHeader, data->data) != HAL_OK){
 8000676:	f107 0308 	add.w	r3, r7, #8
 800067a:	3306      	adds	r3, #6
 800067c:	f107 0218 	add.w	r2, r7, #24
 8000680:	2100      	movs	r1, #0
 8000682:	4819      	ldr	r0, [pc, #100]	@ (80006e8 <HAL_CAN_RxFifo1MsgPendingCallback+0x88>)
 8000684:	f002 fd41 	bl	800310a <HAL_CAN_GetRxMessage>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d00d      	beq.n	80006aa <HAL_CAN_RxFifo1MsgPendingCallback+0x4a>
		LOGS(rxFailure,strlen(rxFailure));
 800068e:	4b17      	ldr	r3, [pc, #92]	@ (80006ec <HAL_CAN_RxFifo1MsgPendingCallback+0x8c>)
 8000690:	681c      	ldr	r4, [r3, #0]
 8000692:	4b16      	ldr	r3, [pc, #88]	@ (80006ec <HAL_CAN_RxFifo1MsgPendingCallback+0x8c>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	4618      	mov	r0, r3
 8000698:	f7ff fd9a 	bl	80001d0 <strlen>
 800069c:	4603      	mov	r3, r0
 800069e:	b29a      	uxth	r2, r3
 80006a0:	2364      	movs	r3, #100	@ 0x64
 80006a2:	4621      	mov	r1, r4
 80006a4:	4812      	ldr	r0, [pc, #72]	@ (80006f0 <HAL_CAN_RxFifo1MsgPendingCallback+0x90>)
 80006a6:	f005 ffef 	bl	8006688 <HAL_UART_Transmit>
	}
	if(rxHeader.ExtId == 0x1806EEEE){
 80006aa:	69fb      	ldr	r3, [r7, #28]
 80006ac:	4a11      	ldr	r2, [pc, #68]	@ (80006f4 <HAL_CAN_RxFifo1MsgPendingCallback+0x94>)
 80006ae:	4293      	cmp	r3, r2
 80006b0:	d103      	bne.n	80006ba <HAL_CAN_RxFifo1MsgPendingCallback+0x5a>
		data->ID = rxHeader.ExtId;
 80006b2:	69fb      	ldr	r3, [r7, #28]
 80006b4:	60bb      	str	r3, [r7, #8]
		data->IDE = CAN_ID_EXT;
 80006b6:	2304      	movs	r3, #4
 80006b8:	733b      	strb	r3, [r7, #12]
	}
	data->DLC = rxHeader.DLC;
 80006ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	737b      	strb	r3, [r7, #13]
	data->Fifo = 1;
 80006c0:	2301      	movs	r3, #1
 80006c2:	75bb      	strb	r3, [r7, #22]

	processCanMsg(data);
 80006c4:	f107 0308 	add.w	r3, r7, #8
 80006c8:	4618      	mov	r0, r3
 80006ca:	f000 f815 	bl	80006f8 <processCanMsg>

	uint8_t fill1 = HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0);
 80006ce:	2100      	movs	r1, #0
 80006d0:	4805      	ldr	r0, [pc, #20]	@ (80006e8 <HAL_CAN_RxFifo1MsgPendingCallback+0x88>)
 80006d2:	f002 fe3c 	bl	800334e <HAL_CAN_GetRxFifoFillLevel>
 80006d6:	4603      	mov	r3, r0
 80006d8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if(fill1 == 0){
 80006dc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80006e0:	2b00      	cmp	r3, #0
		return;
	}
}
 80006e2:	373c      	adds	r7, #60	@ 0x3c
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd90      	pop	{r4, r7, pc}
 80006e8:	20000138 	.word	0x20000138
 80006ec:	20000000 	.word	0x20000000
 80006f0:	20000208 	.word	0x20000208
 80006f4:	1806eeee 	.word	0x1806eeee

080006f8 <processCanMsg>:

void processCanMsg(canData *data){
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b086      	sub	sp, #24
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
	if(data->ID == 0x1806EEEE){
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a10      	ldr	r2, [pc, #64]	@ (8000748 <processCanMsg+0x50>)
 8000706:	4293      	cmp	r3, r2
 8000708:	d11a      	bne.n	8000740 <processCanMsg+0x48>
		bmsDataObj.soc = data->data;
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	3306      	adds	r3, #6
 800070e:	b2da      	uxtb	r2, r3
 8000710:	4b0e      	ldr	r3, [pc, #56]	@ (800074c <processCanMsg+0x54>)
 8000712:	701a      	strb	r2, [r3, #0]
		char msg[16];
		sprintf(msg,"%hu",bmsDataObj.soc);
 8000714:	4b0d      	ldr	r3, [pc, #52]	@ (800074c <processCanMsg+0x54>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	461a      	mov	r2, r3
 800071a:	f107 0308 	add.w	r3, r7, #8
 800071e:	490c      	ldr	r1, [pc, #48]	@ (8000750 <processCanMsg+0x58>)
 8000720:	4618      	mov	r0, r3
 8000722:	f007 f85d 	bl	80077e0 <siprintf>
		LOGS(msg,strlen(msg));
 8000726:	f107 0308 	add.w	r3, r7, #8
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff fd50 	bl	80001d0 <strlen>
 8000730:	4603      	mov	r3, r0
 8000732:	b29a      	uxth	r2, r3
 8000734:	f107 0108 	add.w	r1, r7, #8
 8000738:	2364      	movs	r3, #100	@ 0x64
 800073a:	4806      	ldr	r0, [pc, #24]	@ (8000754 <processCanMsg+0x5c>)
 800073c:	f005 ffa4 	bl	8006688 <HAL_UART_Transmit>
	}
}
 8000740:	bf00      	nop
 8000742:	3718      	adds	r7, #24
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	1806eeee 	.word	0x1806eeee
 800074c:	200002c0 	.word	0x200002c0
 8000750:	0800817c 	.word	0x0800817c
 8000754:	20000208 	.word	0x20000208

08000758 <HAL_TIM_PeriodElapsedCallback>:
static void MX_DAC1_Init(void);
static void MX_ADC1_Init(void);
/* USER CODE BEGIN PFP */
uint32_t dacInput(uint16_t adcinput1, uint16_t adcinput2);

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
	dac_val = dacInput(rawValues[0], rawValues[1]);
 8000760:	4b08      	ldr	r3, [pc, #32]	@ (8000784 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	b29b      	uxth	r3, r3
 8000766:	4a07      	ldr	r2, [pc, #28]	@ (8000784 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000768:	6852      	ldr	r2, [r2, #4]
 800076a:	b292      	uxth	r2, r2
 800076c:	4611      	mov	r1, r2
 800076e:	4618      	mov	r0, r3
 8000770:	f000 fb42 	bl	8000df8 <dacInput>
 8000774:	4603      	mov	r3, r0
 8000776:	4a04      	ldr	r2, [pc, #16]	@ (8000788 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000778:	6013      	str	r3, [r2, #0]
}
 800077a:	bf00      	nop
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	20000290 	.word	0x20000290
 8000788:	20000298 	.word	0x20000298

0800078c <ErrorLedBlink>:

void ErrorLedBlink(){
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000790:	2201      	movs	r2, #1
 8000792:	2120      	movs	r1, #32
 8000794:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000798:	f004 f8be 	bl	8004918 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 800079c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80007a0:	f000 ff6a 	bl	8001678 <HAL_Delay>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007a4:	2200      	movs	r2, #0
 80007a6:	2120      	movs	r1, #32
 80007a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007ac:	f004 f8b4 	bl	8004918 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80007b0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80007b4:	f000 ff60 	bl	8001678 <HAL_Delay>
}
 80007b8:	bf00      	nop
 80007ba:	bd80      	pop	{r7, pc}

080007bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007bc:	b590      	push	{r4, r7, lr}
 80007be:	b085      	sub	sp, #20
 80007c0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007c2:	f000 fedd 	bl	8001580 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007c6:	f000 f8a5 	bl	8000914 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ca:	f000 faaf 	bl	8000d2c <MX_GPIO_Init>
  MX_DMA_Init();
 80007ce:	f000 fa87 	bl	8000ce0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80007d2:	f000 fa55 	bl	8000c80 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 80007d6:	f000 f975 	bl	8000ac4 <MX_CAN1_Init>
  MX_TIM6_Init();
 80007da:	f000 fa1b 	bl	8000c14 <MX_TIM6_Init>
  MX_DAC1_Init();
 80007de:	f000 f9e7 	bl	8000bb0 <MX_DAC1_Init>
  MX_ADC1_Init();
 80007e2:	f000 f8e7 	bl	80009b4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  if(HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED)!=HAL_OK){
 80007e6:	217f      	movs	r1, #127	@ 0x7f
 80007e8:	483d      	ldr	r0, [pc, #244]	@ (80008e0 <main+0x124>)
 80007ea:	f002 f965 	bl	8002ab8 <HAL_ADCEx_Calibration_Start>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d013      	beq.n	800081c <main+0x60>
	  LOGS(adcNcalib,strlen(adcNcalib));
 80007f4:	4b3b      	ldr	r3, [pc, #236]	@ (80008e4 <main+0x128>)
 80007f6:	681c      	ldr	r4, [r3, #0]
 80007f8:	4b3a      	ldr	r3, [pc, #232]	@ (80008e4 <main+0x128>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4618      	mov	r0, r3
 80007fe:	f7ff fce7 	bl	80001d0 <strlen>
 8000802:	4603      	mov	r3, r0
 8000804:	b29a      	uxth	r2, r3
 8000806:	2364      	movs	r3, #100	@ 0x64
 8000808:	4621      	mov	r1, r4
 800080a:	4837      	ldr	r0, [pc, #220]	@ (80008e8 <main+0x12c>)
 800080c:	f005 ff3c 	bl	8006688 <HAL_UART_Transmit>
	  ErrorLedBlink();
 8000810:	f7ff ffbc 	bl	800078c <ErrorLedBlink>
	  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000814:	217f      	movs	r1, #127	@ 0x7f
 8000816:	4832      	ldr	r0, [pc, #200]	@ (80008e0 <main+0x124>)
 8000818:	f002 f94e 	bl	8002ab8 <HAL_ADCEx_Calibration_Start>
  }

  uint32_t calibrationValue = HAL_ADCEx_Calibration_GetValue(&hadc1, ADC_SINGLE_ENDED);
 800081c:	217f      	movs	r1, #127	@ 0x7f
 800081e:	4830      	ldr	r0, [pc, #192]	@ (80008e0 <main+0x124>)
 8000820:	f002 f9aa 	bl	8002b78 <HAL_ADCEx_Calibration_GetValue>
 8000824:	6078      	str	r0, [r7, #4]
  sprintf(msg,"%lu\r\n",calibrationValue);
 8000826:	687a      	ldr	r2, [r7, #4]
 8000828:	4930      	ldr	r1, [pc, #192]	@ (80008ec <main+0x130>)
 800082a:	4831      	ldr	r0, [pc, #196]	@ (80008f0 <main+0x134>)
 800082c:	f006 ffd8 	bl	80077e0 <siprintf>
  LOGS(msg,strlen(msg));
 8000830:	482f      	ldr	r0, [pc, #188]	@ (80008f0 <main+0x134>)
 8000832:	f7ff fccd 	bl	80001d0 <strlen>
 8000836:	4603      	mov	r3, r0
 8000838:	b29a      	uxth	r2, r3
 800083a:	2364      	movs	r3, #100	@ 0x64
 800083c:	492c      	ldr	r1, [pc, #176]	@ (80008f0 <main+0x134>)
 800083e:	482a      	ldr	r0, [pc, #168]	@ (80008e8 <main+0x12c>)
 8000840:	f005 ff22 	bl	8006688 <HAL_UART_Transmit>

  HAL_CAN_Start(&hcan1);
 8000844:	482b      	ldr	r0, [pc, #172]	@ (80008f4 <main+0x138>)
 8000846:	f002 fc1c 	bl	8003082 <HAL_CAN_Start>
  if(canNotification()!=0){
 800084a:	f7ff fe91 	bl	8000570 <canNotification>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <main+0x9c>
	  Error_Handler();
 8000854:	f000 fb64 	bl	8000f20 <Error_Handler>
  }

  HAL_ADC_Start_DMA(&hadc1, rawValues, 2);
 8000858:	2202      	movs	r2, #2
 800085a:	4927      	ldr	r1, [pc, #156]	@ (80008f8 <main+0x13c>)
 800085c:	4820      	ldr	r0, [pc, #128]	@ (80008e0 <main+0x124>)
 800085e:	f001 fa7b 	bl	8001d58 <HAL_ADC_Start_DMA>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, &dac_val, 1, DAC_ALIGN_12B_R);
 8000862:	2300      	movs	r3, #0
 8000864:	9300      	str	r3, [sp, #0]
 8000866:	2301      	movs	r3, #1
 8000868:	4a24      	ldr	r2, [pc, #144]	@ (80008fc <main+0x140>)
 800086a:	2100      	movs	r1, #0
 800086c:	4824      	ldr	r0, [pc, #144]	@ (8000900 <main+0x144>)
 800086e:	f003 f915 	bl	8003a9c <HAL_DAC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim6);
 8000872:	4824      	ldr	r0, [pc, #144]	@ (8000904 <main+0x148>)
 8000874:	f005 fbe0 	bl	8006038 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  sprintf(msg,"adc1 val: %hu\r\nadc2 val: %hu\r\n",(uint16_t)rawValues[0],(uint16_t)rawValues[1]);
 8000878:	4b1f      	ldr	r3, [pc, #124]	@ (80008f8 <main+0x13c>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	b29b      	uxth	r3, r3
 800087e:	461a      	mov	r2, r3
 8000880:	4b1d      	ldr	r3, [pc, #116]	@ (80008f8 <main+0x13c>)
 8000882:	685b      	ldr	r3, [r3, #4]
 8000884:	b29b      	uxth	r3, r3
 8000886:	4920      	ldr	r1, [pc, #128]	@ (8000908 <main+0x14c>)
 8000888:	4819      	ldr	r0, [pc, #100]	@ (80008f0 <main+0x134>)
 800088a:	f006 ffa9 	bl	80077e0 <siprintf>
	  LOGS(msg,strlen(msg));
 800088e:	4818      	ldr	r0, [pc, #96]	@ (80008f0 <main+0x134>)
 8000890:	f7ff fc9e 	bl	80001d0 <strlen>
 8000894:	4603      	mov	r3, r0
 8000896:	b29a      	uxth	r2, r3
 8000898:	2364      	movs	r3, #100	@ 0x64
 800089a:	4915      	ldr	r1, [pc, #84]	@ (80008f0 <main+0x134>)
 800089c:	4812      	ldr	r0, [pc, #72]	@ (80008e8 <main+0x12c>)
 800089e:	f005 fef3 	bl	8006688 <HAL_UART_Transmit>

	  getDac = HAL_DAC_GetValue(&hdac1, DAC_CHANNEL_1);
 80008a2:	2100      	movs	r1, #0
 80008a4:	4816      	ldr	r0, [pc, #88]	@ (8000900 <main+0x144>)
 80008a6:	f003 fa47 	bl	8003d38 <HAL_DAC_GetValue>
 80008aa:	4603      	mov	r3, r0
 80008ac:	4a17      	ldr	r2, [pc, #92]	@ (800090c <main+0x150>)
 80008ae:	6013      	str	r3, [r2, #0]

	  sprintf(msg,"dac val: %hu\r\n",(uint16_t)getDac);
 80008b0:	4b16      	ldr	r3, [pc, #88]	@ (800090c <main+0x150>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	b29b      	uxth	r3, r3
 80008b6:	461a      	mov	r2, r3
 80008b8:	4915      	ldr	r1, [pc, #84]	@ (8000910 <main+0x154>)
 80008ba:	480d      	ldr	r0, [pc, #52]	@ (80008f0 <main+0x134>)
 80008bc:	f006 ff90 	bl	80077e0 <siprintf>
	  LOGS(msg,strlen(msg));
 80008c0:	480b      	ldr	r0, [pc, #44]	@ (80008f0 <main+0x134>)
 80008c2:	f7ff fc85 	bl	80001d0 <strlen>
 80008c6:	4603      	mov	r3, r0
 80008c8:	b29a      	uxth	r2, r3
 80008ca:	2364      	movs	r3, #100	@ 0x64
 80008cc:	4908      	ldr	r1, [pc, #32]	@ (80008f0 <main+0x134>)
 80008ce:	4806      	ldr	r0, [pc, #24]	@ (80008e8 <main+0x12c>)
 80008d0:	f005 feda 	bl	8006688 <HAL_UART_Transmit>

	  HAL_Delay(1000);
 80008d4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008d8:	f000 fece 	bl	8001678 <HAL_Delay>
	  sprintf(msg,"adc1 val: %hu\r\nadc2 val: %hu\r\n",(uint16_t)rawValues[0],(uint16_t)rawValues[1]);
 80008dc:	bf00      	nop
 80008de:	e7cb      	b.n	8000878 <main+0xbc>
 80008e0:	2000008c 	.word	0x2000008c
 80008e4:	20000008 	.word	0x20000008
 80008e8:	20000208 	.word	0x20000208
 80008ec:	080081e4 	.word	0x080081e4
 80008f0:	200002a0 	.word	0x200002a0
 80008f4:	20000138 	.word	0x20000138
 80008f8:	20000290 	.word	0x20000290
 80008fc:	20000298 	.word	0x20000298
 8000900:	20000160 	.word	0x20000160
 8000904:	200001bc 	.word	0x200001bc
 8000908:	080081ec 	.word	0x080081ec
 800090c:	2000029c 	.word	0x2000029c
 8000910:	0800820c 	.word	0x0800820c

08000914 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b096      	sub	sp, #88	@ 0x58
 8000918:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800091a:	f107 0314 	add.w	r3, r7, #20
 800091e:	2244      	movs	r2, #68	@ 0x44
 8000920:	2100      	movs	r1, #0
 8000922:	4618      	mov	r0, r3
 8000924:	f006 ff7c 	bl	8007820 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000928:	463b      	mov	r3, r7
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	605a      	str	r2, [r3, #4]
 8000930:	609a      	str	r2, [r3, #8]
 8000932:	60da      	str	r2, [r3, #12]
 8000934:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000936:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800093a:	f004 f813 	bl	8004964 <HAL_PWREx_ControlVoltageScaling>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000944:	f000 faec 	bl	8000f20 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000948:	2301      	movs	r3, #1
 800094a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800094c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000950:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000952:	2302      	movs	r3, #2
 8000954:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000956:	2303      	movs	r3, #3
 8000958:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800095a:	2301      	movs	r3, #1
 800095c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 800095e:	2314      	movs	r3, #20
 8000960:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000962:	2307      	movs	r3, #7
 8000964:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000966:	2302      	movs	r3, #2
 8000968:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800096a:	2302      	movs	r3, #2
 800096c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800096e:	f107 0314 	add.w	r3, r7, #20
 8000972:	4618      	mov	r0, r3
 8000974:	f004 f84c 	bl	8004a10 <HAL_RCC_OscConfig>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800097e:	f000 facf 	bl	8000f20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000982:	230f      	movs	r3, #15
 8000984:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000986:	2303      	movs	r3, #3
 8000988:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800098a:	2300      	movs	r3, #0
 800098c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800098e:	2300      	movs	r3, #0
 8000990:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000992:	2300      	movs	r3, #0
 8000994:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000996:	463b      	mov	r3, r7
 8000998:	2104      	movs	r1, #4
 800099a:	4618      	mov	r0, r3
 800099c:	f004 fc14 	bl	80051c8 <HAL_RCC_ClockConfig>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <SystemClock_Config+0x96>
  {
    Error_Handler();
 80009a6:	f000 fabb 	bl	8000f20 <Error_Handler>
  }
}
 80009aa:	bf00      	nop
 80009ac:	3758      	adds	r7, #88	@ 0x58
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
	...

080009b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b08a      	sub	sp, #40	@ 0x28
 80009b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80009ba:	f107 031c 	add.w	r3, r7, #28
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	605a      	str	r2, [r3, #4]
 80009c4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80009c6:	1d3b      	adds	r3, r7, #4
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	605a      	str	r2, [r3, #4]
 80009ce:	609a      	str	r2, [r3, #8]
 80009d0:	60da      	str	r2, [r3, #12]
 80009d2:	611a      	str	r2, [r3, #16]
 80009d4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80009d6:	4b37      	ldr	r3, [pc, #220]	@ (8000ab4 <MX_ADC1_Init+0x100>)
 80009d8:	4a37      	ldr	r2, [pc, #220]	@ (8000ab8 <MX_ADC1_Init+0x104>)
 80009da:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80009dc:	4b35      	ldr	r3, [pc, #212]	@ (8000ab4 <MX_ADC1_Init+0x100>)
 80009de:	2200      	movs	r2, #0
 80009e0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009e2:	4b34      	ldr	r3, [pc, #208]	@ (8000ab4 <MX_ADC1_Init+0x100>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009e8:	4b32      	ldr	r3, [pc, #200]	@ (8000ab4 <MX_ADC1_Init+0x100>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80009ee:	4b31      	ldr	r3, [pc, #196]	@ (8000ab4 <MX_ADC1_Init+0x100>)
 80009f0:	2201      	movs	r2, #1
 80009f2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009f4:	4b2f      	ldr	r3, [pc, #188]	@ (8000ab4 <MX_ADC1_Init+0x100>)
 80009f6:	2204      	movs	r2, #4
 80009f8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80009fa:	4b2e      	ldr	r3, [pc, #184]	@ (8000ab4 <MX_ADC1_Init+0x100>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000a00:	4b2c      	ldr	r3, [pc, #176]	@ (8000ab4 <MX_ADC1_Init+0x100>)
 8000a02:	2201      	movs	r2, #1
 8000a04:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8000a06:	4b2b      	ldr	r3, [pc, #172]	@ (8000ab4 <MX_ADC1_Init+0x100>)
 8000a08:	2202      	movs	r2, #2
 8000a0a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a0c:	4b29      	ldr	r3, [pc, #164]	@ (8000ab4 <MX_ADC1_Init+0x100>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8000a14:	4b27      	ldr	r3, [pc, #156]	@ (8000ab4 <MX_ADC1_Init+0x100>)
 8000a16:	f44f 62e8 	mov.w	r2, #1856	@ 0x740
 8000a1a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 8000a1c:	4b25      	ldr	r3, [pc, #148]	@ (8000ab4 <MX_ADC1_Init+0x100>)
 8000a1e:	f44f 6240 	mov.w	r2, #3072	@ 0xc00
 8000a22:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000a24:	4b23      	ldr	r3, [pc, #140]	@ (8000ab4 <MX_ADC1_Init+0x100>)
 8000a26:	2201      	movs	r2, #1
 8000a28:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a2c:	4b21      	ldr	r3, [pc, #132]	@ (8000ab4 <MX_ADC1_Init+0x100>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000a32:	4b20      	ldr	r3, [pc, #128]	@ (8000ab4 <MX_ADC1_Init+0x100>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a3a:	481e      	ldr	r0, [pc, #120]	@ (8000ab4 <MX_ADC1_Init+0x100>)
 8000a3c:	f001 f83c 	bl	8001ab8 <HAL_ADC_Init>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8000a46:	f000 fa6b 	bl	8000f20 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000a4e:	f107 031c 	add.w	r3, r7, #28
 8000a52:	4619      	mov	r1, r3
 8000a54:	4817      	ldr	r0, [pc, #92]	@ (8000ab4 <MX_ADC1_Init+0x100>)
 8000a56:	f002 f89f 	bl	8002b98 <HAL_ADCEx_MultiModeConfigChannel>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000a60:	f000 fa5e 	bl	8000f20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000a64:	4b15      	ldr	r3, [pc, #84]	@ (8000abc <MX_ADC1_Init+0x108>)
 8000a66:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a68:	2306      	movs	r3, #6
 8000a6a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8000a6c:	2306      	movs	r3, #6
 8000a6e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a70:	237f      	movs	r3, #127	@ 0x7f
 8000a72:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a74:	2304      	movs	r3, #4
 8000a76:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a7c:	1d3b      	adds	r3, r7, #4
 8000a7e:	4619      	mov	r1, r3
 8000a80:	480c      	ldr	r0, [pc, #48]	@ (8000ab4 <MX_ADC1_Init+0x100>)
 8000a82:	f001 fa43 	bl	8001f0c <HAL_ADC_ConfigChannel>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000a8c:	f000 fa48 	bl	8000f20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000a90:	4b0b      	ldr	r3, [pc, #44]	@ (8000ac0 <MX_ADC1_Init+0x10c>)
 8000a92:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000a94:	230c      	movs	r3, #12
 8000a96:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a98:	1d3b      	adds	r3, r7, #4
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4805      	ldr	r0, [pc, #20]	@ (8000ab4 <MX_ADC1_Init+0x100>)
 8000a9e:	f001 fa35 	bl	8001f0c <HAL_ADC_ConfigChannel>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 8000aa8:	f000 fa3a 	bl	8000f20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000aac:	bf00      	nop
 8000aae:	3728      	adds	r7, #40	@ 0x28
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	2000008c 	.word	0x2000008c
 8000ab8:	50040000 	.word	0x50040000
 8000abc:	14f00020 	.word	0x14f00020
 8000ac0:	19200040 	.word	0x19200040

08000ac4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08a      	sub	sp, #40	@ 0x28
 8000ac8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN CAN1_Init 1 */
	CAN_FilterTypeDef sFilterConfig;

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000aca:	4b37      	ldr	r3, [pc, #220]	@ (8000ba8 <MX_CAN1_Init+0xe4>)
 8000acc:	4a37      	ldr	r2, [pc, #220]	@ (8000bac <MX_CAN1_Init+0xe8>)
 8000ace:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 10;
 8000ad0:	4b35      	ldr	r3, [pc, #212]	@ (8000ba8 <MX_CAN1_Init+0xe4>)
 8000ad2:	220a      	movs	r2, #10
 8000ad4:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000ad6:	4b34      	ldr	r3, [pc, #208]	@ (8000ba8 <MX_CAN1_Init+0xe4>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000adc:	4b32      	ldr	r3, [pc, #200]	@ (8000ba8 <MX_CAN1_Init+0xe4>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000ae2:	4b31      	ldr	r3, [pc, #196]	@ (8000ba8 <MX_CAN1_Init+0xe4>)
 8000ae4:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 8000ae8:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000aea:	4b2f      	ldr	r3, [pc, #188]	@ (8000ba8 <MX_CAN1_Init+0xe4>)
 8000aec:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000af0:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000af2:	4b2d      	ldr	r3, [pc, #180]	@ (8000ba8 <MX_CAN1_Init+0xe4>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000af8:	4b2b      	ldr	r3, [pc, #172]	@ (8000ba8 <MX_CAN1_Init+0xe4>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000afe:	4b2a      	ldr	r3, [pc, #168]	@ (8000ba8 <MX_CAN1_Init+0xe4>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000b04:	4b28      	ldr	r3, [pc, #160]	@ (8000ba8 <MX_CAN1_Init+0xe4>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000b0a:	4b27      	ldr	r3, [pc, #156]	@ (8000ba8 <MX_CAN1_Init+0xe4>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000b10:	4b25      	ldr	r3, [pc, #148]	@ (8000ba8 <MX_CAN1_Init+0xe4>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000b16:	4824      	ldr	r0, [pc, #144]	@ (8000ba8 <MX_CAN1_Init+0xe4>)
 8000b18:	f002 f8ee 	bl	8002cf8 <HAL_CAN_Init>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000b22:	f000 f9fd 	bl	8000f20 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  sFilterConfig.FilterBank = 0;
 8000b26:	2300      	movs	r3, #0
 8000b28:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 8000b32:	2300      	movs	r3, #0
 8000b34:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 8000b36:	2300      	movs	r3, #0
 8000b38:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000b42:	2300      	movs	r3, #0
 8000b44:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 8000b46:	2301      	movs	r3, #1
 8000b48:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 8000b4a:	230e      	movs	r3, #14
 8000b4c:	627b      	str	r3, [r7, #36]	@ 0x24

  if(HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK){
 8000b4e:	463b      	mov	r3, r7
 8000b50:	4619      	mov	r1, r3
 8000b52:	4815      	ldr	r0, [pc, #84]	@ (8000ba8 <MX_CAN1_Init+0xe4>)
 8000b54:	f002 f9cb 	bl	8002eee <HAL_CAN_ConfigFilter>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_CAN1_Init+0x9e>
      /* Filter configuration Error */
      Error_Handler();
 8000b5e:	f000 f9df 	bl	8000f20 <Error_Handler>
    }

  sFilterConfig.FilterBank = 1;
 8000b62:	2301      	movs	r3, #1
 8000b64:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000b66:	2300      	movs	r3, #0
 8000b68:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 8000b72:	2300      	movs	r3, #0
 8000b74:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 8000b76:	2300      	movs	r3, #0
 8000b78:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO1;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 8000b82:	2301      	movs	r3, #1
 8000b84:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 8000b86:	230e      	movs	r3, #14
 8000b88:	627b      	str	r3, [r7, #36]	@ 0x24

    if(HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK){
 8000b8a:	463b      	mov	r3, r7
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4806      	ldr	r0, [pc, #24]	@ (8000ba8 <MX_CAN1_Init+0xe4>)
 8000b90:	f002 f9ad 	bl	8002eee <HAL_CAN_ConfigFilter>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_CAN1_Init+0xda>
        /* Filter configuration Error */
        Error_Handler();
 8000b9a:	f000 f9c1 	bl	8000f20 <Error_Handler>
      }
  /* USER CODE END CAN1_Init 2 */

}
 8000b9e:	bf00      	nop
 8000ba0:	3728      	adds	r7, #40	@ 0x28
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	20000138 	.word	0x20000138
 8000bac:	40006400 	.word	0x40006400

08000bb0 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08a      	sub	sp, #40	@ 0x28
 8000bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000bb6:	1d3b      	adds	r3, r7, #4
 8000bb8:	2224      	movs	r2, #36	@ 0x24
 8000bba:	2100      	movs	r1, #0
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f006 fe2f 	bl	8007820 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000bc2:	4b12      	ldr	r3, [pc, #72]	@ (8000c0c <MX_DAC1_Init+0x5c>)
 8000bc4:	4a12      	ldr	r2, [pc, #72]	@ (8000c10 <MX_DAC1_Init+0x60>)
 8000bc6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000bc8:	4810      	ldr	r0, [pc, #64]	@ (8000c0c <MX_DAC1_Init+0x5c>)
 8000bca:	f002 ff44 	bl	8003a56 <HAL_DAC_Init>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000bd4:	f000 f9a4 	bl	8000f20 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8000bdc:	2304      	movs	r3, #4
 8000bde:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000be0:	2300      	movs	r3, #0
 8000be2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000be4:	2300      	movs	r3, #0
 8000be6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000be8:	2300      	movs	r3, #0
 8000bea:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000bec:	1d3b      	adds	r3, r7, #4
 8000bee:	2200      	movs	r2, #0
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4806      	ldr	r0, [pc, #24]	@ (8000c0c <MX_DAC1_Init+0x5c>)
 8000bf4:	f003 f8b5 	bl	8003d62 <HAL_DAC_ConfigChannel>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000bfe:	f000 f98f 	bl	8000f20 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000c02:	bf00      	nop
 8000c04:	3728      	adds	r7, #40	@ 0x28
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20000160 	.word	0x20000160
 8000c10:	40007400 	.word	0x40007400

08000c14 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c1a:	1d3b      	adds	r3, r7, #4
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	605a      	str	r2, [r3, #4]
 8000c22:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000c24:	4b14      	ldr	r3, [pc, #80]	@ (8000c78 <MX_TIM6_Init+0x64>)
 8000c26:	4a15      	ldr	r2, [pc, #84]	@ (8000c7c <MX_TIM6_Init+0x68>)
 8000c28:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000c2a:	4b13      	ldr	r3, [pc, #76]	@ (8000c78 <MX_TIM6_Init+0x64>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c30:	4b11      	ldr	r3, [pc, #68]	@ (8000c78 <MX_TIM6_Init+0x64>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000c36:	4b10      	ldr	r3, [pc, #64]	@ (8000c78 <MX_TIM6_Init+0x64>)
 8000c38:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c3c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c78 <MX_TIM6_Init+0x64>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000c44:	480c      	ldr	r0, [pc, #48]	@ (8000c78 <MX_TIM6_Init+0x64>)
 8000c46:	f005 f99f 	bl	8005f88 <HAL_TIM_Base_Init>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000c50:	f000 f966 	bl	8000f20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000c54:	2320      	movs	r3, #32
 8000c56:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000c5c:	1d3b      	adds	r3, r7, #4
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4805      	ldr	r0, [pc, #20]	@ (8000c78 <MX_TIM6_Init+0x64>)
 8000c62:	f005 fc1d 	bl	80064a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000c6c:	f000 f958 	bl	8000f20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000c70:	bf00      	nop
 8000c72:	3710      	adds	r7, #16
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	200001bc 	.word	0x200001bc
 8000c7c:	40001000 	.word	0x40001000

08000c80 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c84:	4b14      	ldr	r3, [pc, #80]	@ (8000cd8 <MX_USART2_UART_Init+0x58>)
 8000c86:	4a15      	ldr	r2, [pc, #84]	@ (8000cdc <MX_USART2_UART_Init+0x5c>)
 8000c88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c8a:	4b13      	ldr	r3, [pc, #76]	@ (8000cd8 <MX_USART2_UART_Init+0x58>)
 8000c8c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c90:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c92:	4b11      	ldr	r3, [pc, #68]	@ (8000cd8 <MX_USART2_UART_Init+0x58>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c98:	4b0f      	ldr	r3, [pc, #60]	@ (8000cd8 <MX_USART2_UART_Init+0x58>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd8 <MX_USART2_UART_Init+0x58>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ca4:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd8 <MX_USART2_UART_Init+0x58>)
 8000ca6:	220c      	movs	r2, #12
 8000ca8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000caa:	4b0b      	ldr	r3, [pc, #44]	@ (8000cd8 <MX_USART2_UART_Init+0x58>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cb0:	4b09      	ldr	r3, [pc, #36]	@ (8000cd8 <MX_USART2_UART_Init+0x58>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cb6:	4b08      	ldr	r3, [pc, #32]	@ (8000cd8 <MX_USART2_UART_Init+0x58>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cbc:	4b06      	ldr	r3, [pc, #24]	@ (8000cd8 <MX_USART2_UART_Init+0x58>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cc2:	4805      	ldr	r0, [pc, #20]	@ (8000cd8 <MX_USART2_UART_Init+0x58>)
 8000cc4:	f005 fc92 	bl	80065ec <HAL_UART_Init>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000cce:	f000 f927 	bl	8000f20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	20000208 	.word	0x20000208
 8000cdc:	40004400 	.word	0x40004400

08000ce0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ce6:	4b10      	ldr	r3, [pc, #64]	@ (8000d28 <MX_DMA_Init+0x48>)
 8000ce8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000cea:	4a0f      	ldr	r2, [pc, #60]	@ (8000d28 <MX_DMA_Init+0x48>)
 8000cec:	f043 0301 	orr.w	r3, r3, #1
 8000cf0:	6493      	str	r3, [r2, #72]	@ 0x48
 8000cf2:	4b0d      	ldr	r3, [pc, #52]	@ (8000d28 <MX_DMA_Init+0x48>)
 8000cf4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000cf6:	f003 0301 	and.w	r3, r3, #1
 8000cfa:	607b      	str	r3, [r7, #4]
 8000cfc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2100      	movs	r1, #0
 8000d02:	200b      	movs	r0, #11
 8000d04:	f002 fe71 	bl	80039ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000d08:	200b      	movs	r0, #11
 8000d0a:	f002 fe8a 	bl	8003a22 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	2100      	movs	r1, #0
 8000d12:	200d      	movs	r0, #13
 8000d14:	f002 fe69 	bl	80039ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000d18:	200d      	movs	r0, #13
 8000d1a:	f002 fe82 	bl	8003a22 <HAL_NVIC_EnableIRQ>

}
 8000d1e:	bf00      	nop
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40021000 	.word	0x40021000

08000d2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b08a      	sub	sp, #40	@ 0x28
 8000d30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d32:	f107 0314 	add.w	r3, r7, #20
 8000d36:	2200      	movs	r2, #0
 8000d38:	601a      	str	r2, [r3, #0]
 8000d3a:	605a      	str	r2, [r3, #4]
 8000d3c:	609a      	str	r2, [r3, #8]
 8000d3e:	60da      	str	r2, [r3, #12]
 8000d40:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d42:	4b2b      	ldr	r3, [pc, #172]	@ (8000df0 <MX_GPIO_Init+0xc4>)
 8000d44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d46:	4a2a      	ldr	r2, [pc, #168]	@ (8000df0 <MX_GPIO_Init+0xc4>)
 8000d48:	f043 0304 	orr.w	r3, r3, #4
 8000d4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d4e:	4b28      	ldr	r3, [pc, #160]	@ (8000df0 <MX_GPIO_Init+0xc4>)
 8000d50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d52:	f003 0304 	and.w	r3, r3, #4
 8000d56:	613b      	str	r3, [r7, #16]
 8000d58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d5a:	4b25      	ldr	r3, [pc, #148]	@ (8000df0 <MX_GPIO_Init+0xc4>)
 8000d5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d5e:	4a24      	ldr	r2, [pc, #144]	@ (8000df0 <MX_GPIO_Init+0xc4>)
 8000d60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d66:	4b22      	ldr	r3, [pc, #136]	@ (8000df0 <MX_GPIO_Init+0xc4>)
 8000d68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d72:	4b1f      	ldr	r3, [pc, #124]	@ (8000df0 <MX_GPIO_Init+0xc4>)
 8000d74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d76:	4a1e      	ldr	r2, [pc, #120]	@ (8000df0 <MX_GPIO_Init+0xc4>)
 8000d78:	f043 0301 	orr.w	r3, r3, #1
 8000d7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d7e:	4b1c      	ldr	r3, [pc, #112]	@ (8000df0 <MX_GPIO_Init+0xc4>)
 8000d80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d82:	f003 0301 	and.w	r3, r3, #1
 8000d86:	60bb      	str	r3, [r7, #8]
 8000d88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d8a:	4b19      	ldr	r3, [pc, #100]	@ (8000df0 <MX_GPIO_Init+0xc4>)
 8000d8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d8e:	4a18      	ldr	r2, [pc, #96]	@ (8000df0 <MX_GPIO_Init+0xc4>)
 8000d90:	f043 0302 	orr.w	r3, r3, #2
 8000d94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d96:	4b16      	ldr	r3, [pc, #88]	@ (8000df0 <MX_GPIO_Init+0xc4>)
 8000d98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d9a:	f003 0302 	and.w	r3, r3, #2
 8000d9e:	607b      	str	r3, [r7, #4]
 8000da0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000da2:	2200      	movs	r2, #0
 8000da4:	2120      	movs	r1, #32
 8000da6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000daa:	f003 fdb5 	bl	8004918 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000dae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000db2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000db4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000db8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000dbe:	f107 0314 	add.w	r3, r7, #20
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	480b      	ldr	r0, [pc, #44]	@ (8000df4 <MX_GPIO_Init+0xc8>)
 8000dc6:	f003 fbfd 	bl	80045c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000dca:	2320      	movs	r3, #32
 8000dcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000dda:	f107 0314 	add.w	r3, r7, #20
 8000dde:	4619      	mov	r1, r3
 8000de0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000de4:	f003 fbee 	bl	80045c4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000de8:	bf00      	nop
 8000dea:	3728      	adds	r7, #40	@ 0x28
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	40021000 	.word	0x40021000
 8000df4:	48000800 	.word	0x48000800

08000df8 <dacInput>:
//	}
//
//	return out;
//}

uint32_t dacInput(uint16_t adcinput1, uint16_t adcinput2){
 8000df8:	b590      	push	{r4, r7, lr}
 8000dfa:	b087      	sub	sp, #28
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	460a      	mov	r2, r1
 8000e02:	80fb      	strh	r3, [r7, #6]
 8000e04:	4613      	mov	r3, r2
 8000e06:	80bb      	strh	r3, [r7, #4]
	static uint16_t counter = 0;
	static uint32_t rawcheck1 = 0;
	static uint32_t rawcheck2 = 0;

	uint32_t out = 0;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	617b      	str	r3, [r7, #20]

	uint32_t raw1 = adcinput1;
 8000e0c:	88fb      	ldrh	r3, [r7, #6]
 8000e0e:	613b      	str	r3, [r7, #16]
	uint32_t raw2 = (9/8)*adcinput2;
 8000e10:	88bb      	ldrh	r3, [r7, #4]
 8000e12:	60fb      	str	r3, [r7, #12]

	uint32_t deviationCheck = abs(raw1-raw2)/100;
 8000e14:	693a      	ldr	r2, [r7, #16]
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	1ad3      	subs	r3, r2, r3
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	bfb8      	it	lt
 8000e1e:	425b      	neglt	r3, r3
 8000e20:	4a38      	ldr	r2, [pc, #224]	@ (8000f04 <dacInput+0x10c>)
 8000e22:	fb82 1203 	smull	r1, r2, r2, r3
 8000e26:	1152      	asrs	r2, r2, #5
 8000e28:	17db      	asrs	r3, r3, #31
 8000e2a:	1ad3      	subs	r3, r2, r3
 8000e2c:	60bb      	str	r3, [r7, #8]

	//check if both values are same for 1 second
	if((raw1!=0) && (raw2!=0) && raw1 == raw2){
 8000e2e:	693b      	ldr	r3, [r7, #16]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d044      	beq.n	8000ebe <dacInput+0xc6>
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d041      	beq.n	8000ebe <dacInput+0xc6>
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d13d      	bne.n	8000ebe <dacInput+0xc6>
		//check if raw1 is continuously the same
		if((raw1 != rawcheck1) && (raw2 != rawcheck2)){
 8000e42:	4b31      	ldr	r3, [pc, #196]	@ (8000f08 <dacInput+0x110>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d007      	beq.n	8000e5c <dacInput+0x64>
 8000e4c:	4b2f      	ldr	r3, [pc, #188]	@ (8000f0c <dacInput+0x114>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	68fa      	ldr	r2, [r7, #12]
 8000e52:	429a      	cmp	r2, r3
 8000e54:	d002      	beq.n	8000e5c <dacInput+0x64>
			counter = 0;
 8000e56:	4b2e      	ldr	r3, [pc, #184]	@ (8000f10 <dacInput+0x118>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	801a      	strh	r2, [r3, #0]
		}
		//set static value to be compared later
		rawcheck1 = raw1;
 8000e5c:	4a2a      	ldr	r2, [pc, #168]	@ (8000f08 <dacInput+0x110>)
 8000e5e:	693b      	ldr	r3, [r7, #16]
 8000e60:	6013      	str	r3, [r2, #0]
		rawcheck2 = raw2;
 8000e62:	4a2a      	ldr	r2, [pc, #168]	@ (8000f0c <dacInput+0x114>)
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	6013      	str	r3, [r2, #0]

		counter++;
 8000e68:	4b29      	ldr	r3, [pc, #164]	@ (8000f10 <dacInput+0x118>)
 8000e6a:	881b      	ldrh	r3, [r3, #0]
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	b29a      	uxth	r2, r3
 8000e70:	4b27      	ldr	r3, [pc, #156]	@ (8000f10 <dacInput+0x118>)
 8000e72:	801a      	strh	r2, [r3, #0]

		if(counter > 999){
 8000e74:	4b26      	ldr	r3, [pc, #152]	@ (8000f10 <dacInput+0x118>)
 8000e76:	881b      	ldrh	r3, [r3, #0]
 8000e78:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000e7c:	d33b      	bcc.n	8000ef6 <dacInput+0xfe>
			counter = 0;
 8000e7e:	4b24      	ldr	r3, [pc, #144]	@ (8000f10 <dacInput+0x118>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	801a      	strh	r2, [r3, #0]
			//compare to see if they are still the same
			if(rawcheck1 == raw1 && rawcheck2 == raw2){
 8000e84:	4b20      	ldr	r3, [pc, #128]	@ (8000f08 <dacInput+0x110>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	693a      	ldr	r2, [r7, #16]
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	d133      	bne.n	8000ef6 <dacInput+0xfe>
 8000e8e:	4b1f      	ldr	r3, [pc, #124]	@ (8000f0c <dacInput+0x114>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	68fa      	ldr	r2, [r7, #12]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d12e      	bne.n	8000ef6 <dacInput+0xfe>
				out = 0;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	617b      	str	r3, [r7, #20]
				LOGS(potShortPedal,strlen(potShortPedal));
 8000e9c:	4b1d      	ldr	r3, [pc, #116]	@ (8000f14 <dacInput+0x11c>)
 8000e9e:	681c      	ldr	r4, [r3, #0]
 8000ea0:	4b1c      	ldr	r3, [pc, #112]	@ (8000f14 <dacInput+0x11c>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff f993 	bl	80001d0 <strlen>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	b29a      	uxth	r2, r3
 8000eae:	2364      	movs	r3, #100	@ 0x64
 8000eb0:	4621      	mov	r1, r4
 8000eb2:	4819      	ldr	r0, [pc, #100]	@ (8000f18 <dacInput+0x120>)
 8000eb4:	f005 fbe8 	bl	8006688 <HAL_UART_Transmit>
				Error_Handler();
 8000eb8:	f000 f832 	bl	8000f20 <Error_Handler>
		if(counter > 999){
 8000ebc:	e01b      	b.n	8000ef6 <dacInput+0xfe>
			}
		}
	}
	//check deviation
	else if(deviationCheck>0.1){
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d012      	beq.n	8000eea <dacInput+0xf2>
		out = 0;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	617b      	str	r3, [r7, #20]
		LOGS(deviationCheckFail,strlen(deviationCheckFail));
 8000ec8:	4b14      	ldr	r3, [pc, #80]	@ (8000f1c <dacInput+0x124>)
 8000eca:	681c      	ldr	r4, [r3, #0]
 8000ecc:	4b13      	ldr	r3, [pc, #76]	@ (8000f1c <dacInput+0x124>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff f97d 	bl	80001d0 <strlen>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	b29a      	uxth	r2, r3
 8000eda:	2364      	movs	r3, #100	@ 0x64
 8000edc:	4621      	mov	r1, r4
 8000ede:	480e      	ldr	r0, [pc, #56]	@ (8000f18 <dacInput+0x120>)
 8000ee0:	f005 fbd2 	bl	8006688 <HAL_UART_Transmit>
		Error_Handler();
 8000ee4:	f000 f81c 	bl	8000f20 <Error_Handler>
 8000ee8:	e006      	b.n	8000ef8 <dacInput+0x100>
	}
	//regular output function(average value)
	else{
		out = ((raw1+raw2)/2);
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	4413      	add	r3, r2
 8000ef0:	085b      	lsrs	r3, r3, #1
 8000ef2:	617b      	str	r3, [r7, #20]
 8000ef4:	e000      	b.n	8000ef8 <dacInput+0x100>
		if(counter > 999){
 8000ef6:	bf00      	nop
	}

	return out;
 8000ef8:	697b      	ldr	r3, [r7, #20]
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	371c      	adds	r7, #28
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd90      	pop	{r4, r7, pc}
 8000f02:	bf00      	nop
 8000f04:	51eb851f 	.word	0x51eb851f
 8000f08:	200002c4 	.word	0x200002c4
 8000f0c:	200002c8 	.word	0x200002c8
 8000f10:	200002cc 	.word	0x200002cc
 8000f14:	2000000c 	.word	0x2000000c
 8000f18:	20000208 	.word	0x20000208
 8000f1c:	20000010 	.word	0x20000010

08000f20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f24:	b672      	cpsid	i
}
 8000f26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  ErrorLedBlink();
 8000f28:	f7ff fc30 	bl	800078c <ErrorLedBlink>
 8000f2c:	e7fc      	b.n	8000f28 <Error_Handler+0x8>
	...

08000f30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f36:	4b0f      	ldr	r3, [pc, #60]	@ (8000f74 <HAL_MspInit+0x44>)
 8000f38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f3a:	4a0e      	ldr	r2, [pc, #56]	@ (8000f74 <HAL_MspInit+0x44>)
 8000f3c:	f043 0301 	orr.w	r3, r3, #1
 8000f40:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f42:	4b0c      	ldr	r3, [pc, #48]	@ (8000f74 <HAL_MspInit+0x44>)
 8000f44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	607b      	str	r3, [r7, #4]
 8000f4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f4e:	4b09      	ldr	r3, [pc, #36]	@ (8000f74 <HAL_MspInit+0x44>)
 8000f50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f52:	4a08      	ldr	r2, [pc, #32]	@ (8000f74 <HAL_MspInit+0x44>)
 8000f54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f58:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f5a:	4b06      	ldr	r3, [pc, #24]	@ (8000f74 <HAL_MspInit+0x44>)
 8000f5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f62:	603b      	str	r3, [r7, #0]
 8000f64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f66:	bf00      	nop
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	40021000 	.word	0x40021000

08000f78 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b0ac      	sub	sp, #176	@ 0xb0
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f80:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]
 8000f8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f90:	f107 0314 	add.w	r3, r7, #20
 8000f94:	2288      	movs	r2, #136	@ 0x88
 8000f96:	2100      	movs	r1, #0
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f006 fc41 	bl	8007820 <memset>
  if(hadc->Instance==ADC1)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a3d      	ldr	r2, [pc, #244]	@ (8001098 <HAL_ADC_MspInit+0x120>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d173      	bne.n	8001090 <HAL_ADC_MspInit+0x118>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000fa8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000fac:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000fae:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000fb2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000fbe:	2310      	movs	r3, #16
 8000fc0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000fc2:	2307      	movs	r3, #7
 8000fc4:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000fce:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000fd2:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fd4:	f107 0314 	add.w	r3, r7, #20
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f004 fb19 	bl	8005610 <HAL_RCCEx_PeriphCLKConfig>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000fe4:	f7ff ff9c 	bl	8000f20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000fe8:	4b2c      	ldr	r3, [pc, #176]	@ (800109c <HAL_ADC_MspInit+0x124>)
 8000fea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fec:	4a2b      	ldr	r2, [pc, #172]	@ (800109c <HAL_ADC_MspInit+0x124>)
 8000fee:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000ff2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ff4:	4b29      	ldr	r3, [pc, #164]	@ (800109c <HAL_ADC_MspInit+0x124>)
 8000ff6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ff8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ffc:	613b      	str	r3, [r7, #16]
 8000ffe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001000:	4b26      	ldr	r3, [pc, #152]	@ (800109c <HAL_ADC_MspInit+0x124>)
 8001002:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001004:	4a25      	ldr	r2, [pc, #148]	@ (800109c <HAL_ADC_MspInit+0x124>)
 8001006:	f043 0301 	orr.w	r3, r3, #1
 800100a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800100c:	4b23      	ldr	r3, [pc, #140]	@ (800109c <HAL_ADC_MspInit+0x124>)
 800100e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001010:	f003 0301 	and.w	r3, r3, #1
 8001014:	60fb      	str	r3, [r7, #12]
 8001016:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001018:	2303      	movs	r3, #3
 800101a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800101e:	230b      	movs	r3, #11
 8001020:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001024:	2300      	movs	r3, #0
 8001026:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800102e:	4619      	mov	r1, r3
 8001030:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001034:	f003 fac6 	bl	80045c4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001038:	4b19      	ldr	r3, [pc, #100]	@ (80010a0 <HAL_ADC_MspInit+0x128>)
 800103a:	4a1a      	ldr	r2, [pc, #104]	@ (80010a4 <HAL_ADC_MspInit+0x12c>)
 800103c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 800103e:	4b18      	ldr	r3, [pc, #96]	@ (80010a0 <HAL_ADC_MspInit+0x128>)
 8001040:	2200      	movs	r2, #0
 8001042:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001044:	4b16      	ldr	r3, [pc, #88]	@ (80010a0 <HAL_ADC_MspInit+0x128>)
 8001046:	2200      	movs	r2, #0
 8001048:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800104a:	4b15      	ldr	r3, [pc, #84]	@ (80010a0 <HAL_ADC_MspInit+0x128>)
 800104c:	2200      	movs	r2, #0
 800104e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001050:	4b13      	ldr	r3, [pc, #76]	@ (80010a0 <HAL_ADC_MspInit+0x128>)
 8001052:	2280      	movs	r2, #128	@ 0x80
 8001054:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001056:	4b12      	ldr	r3, [pc, #72]	@ (80010a0 <HAL_ADC_MspInit+0x128>)
 8001058:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800105c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800105e:	4b10      	ldr	r3, [pc, #64]	@ (80010a0 <HAL_ADC_MspInit+0x128>)
 8001060:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001064:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001066:	4b0e      	ldr	r3, [pc, #56]	@ (80010a0 <HAL_ADC_MspInit+0x128>)
 8001068:	2220      	movs	r2, #32
 800106a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800106c:	4b0c      	ldr	r3, [pc, #48]	@ (80010a0 <HAL_ADC_MspInit+0x128>)
 800106e:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8001072:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001074:	480a      	ldr	r0, [pc, #40]	@ (80010a0 <HAL_ADC_MspInit+0x128>)
 8001076:	f003 f82f 	bl	80040d8 <HAL_DMA_Init>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <HAL_ADC_MspInit+0x10c>
    {
      Error_Handler();
 8001080:	f7ff ff4e 	bl	8000f20 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	4a06      	ldr	r2, [pc, #24]	@ (80010a0 <HAL_ADC_MspInit+0x128>)
 8001088:	64da      	str	r2, [r3, #76]	@ 0x4c
 800108a:	4a05      	ldr	r2, [pc, #20]	@ (80010a0 <HAL_ADC_MspInit+0x128>)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001090:	bf00      	nop
 8001092:	37b0      	adds	r7, #176	@ 0xb0
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	50040000 	.word	0x50040000
 800109c:	40021000 	.word	0x40021000
 80010a0:	200000f0 	.word	0x200000f0
 80010a4:	40020008 	.word	0x40020008

080010a8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b08a      	sub	sp, #40	@ 0x28
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b0:	f107 0314 	add.w	r3, r7, #20
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
 80010be:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a31      	ldr	r2, [pc, #196]	@ (800118c <HAL_CAN_MspInit+0xe4>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d15b      	bne.n	8001182 <HAL_CAN_MspInit+0xda>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80010ca:	4b31      	ldr	r3, [pc, #196]	@ (8001190 <HAL_CAN_MspInit+0xe8>)
 80010cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010ce:	4a30      	ldr	r2, [pc, #192]	@ (8001190 <HAL_CAN_MspInit+0xe8>)
 80010d0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80010d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80010d6:	4b2e      	ldr	r3, [pc, #184]	@ (8001190 <HAL_CAN_MspInit+0xe8>)
 80010d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010de:	613b      	str	r3, [r7, #16]
 80010e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e2:	4b2b      	ldr	r3, [pc, #172]	@ (8001190 <HAL_CAN_MspInit+0xe8>)
 80010e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010e6:	4a2a      	ldr	r2, [pc, #168]	@ (8001190 <HAL_CAN_MspInit+0xe8>)
 80010e8:	f043 0301 	orr.w	r3, r3, #1
 80010ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010ee:	4b28      	ldr	r3, [pc, #160]	@ (8001190 <HAL_CAN_MspInit+0xe8>)
 80010f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80010fa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80010fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001100:	2302      	movs	r3, #2
 8001102:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001104:	2300      	movs	r3, #0
 8001106:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001108:	2303      	movs	r3, #3
 800110a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800110c:	2309      	movs	r3, #9
 800110e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001110:	f107 0314 	add.w	r3, r7, #20
 8001114:	4619      	mov	r1, r3
 8001116:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800111a:	f003 fa53 	bl	80045c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800111e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001122:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001124:	2302      	movs	r3, #2
 8001126:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001128:	2301      	movs	r3, #1
 800112a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800112c:	2303      	movs	r3, #3
 800112e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001130:	2309      	movs	r3, #9
 8001132:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001134:	f107 0314 	add.w	r3, r7, #20
 8001138:	4619      	mov	r1, r3
 800113a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800113e:	f003 fa41 	bl	80045c4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 1, 0);
 8001142:	2200      	movs	r2, #0
 8001144:	2101      	movs	r1, #1
 8001146:	2013      	movs	r0, #19
 8001148:	f002 fc4f 	bl	80039ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 800114c:	2013      	movs	r0, #19
 800114e:	f002 fc68 	bl	8003a22 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 1, 0);
 8001152:	2200      	movs	r2, #0
 8001154:	2101      	movs	r1, #1
 8001156:	2014      	movs	r0, #20
 8001158:	f002 fc47 	bl	80039ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800115c:	2014      	movs	r0, #20
 800115e:	f002 fc60 	bl	8003a22 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 1, 0);
 8001162:	2200      	movs	r2, #0
 8001164:	2101      	movs	r1, #1
 8001166:	2015      	movs	r0, #21
 8001168:	f002 fc3f 	bl	80039ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800116c:	2015      	movs	r0, #21
 800116e:	f002 fc58 	bl	8003a22 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 1, 0);
 8001172:	2200      	movs	r2, #0
 8001174:	2101      	movs	r1, #1
 8001176:	2016      	movs	r0, #22
 8001178:	f002 fc37 	bl	80039ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 800117c:	2016      	movs	r0, #22
 800117e:	f002 fc50 	bl	8003a22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001182:	bf00      	nop
 8001184:	3728      	adds	r7, #40	@ 0x28
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	40006400 	.word	0x40006400
 8001190:	40021000 	.word	0x40021000

08001194 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b08a      	sub	sp, #40	@ 0x28
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119c:	f107 0314 	add.w	r3, r7, #20
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	60da      	str	r2, [r3, #12]
 80011aa:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a2f      	ldr	r2, [pc, #188]	@ (8001270 <HAL_DAC_MspInit+0xdc>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d158      	bne.n	8001268 <HAL_DAC_MspInit+0xd4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80011b6:	4b2f      	ldr	r3, [pc, #188]	@ (8001274 <HAL_DAC_MspInit+0xe0>)
 80011b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011ba:	4a2e      	ldr	r2, [pc, #184]	@ (8001274 <HAL_DAC_MspInit+0xe0>)
 80011bc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80011c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80011c2:	4b2c      	ldr	r3, [pc, #176]	@ (8001274 <HAL_DAC_MspInit+0xe0>)
 80011c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011c6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80011ca:	613b      	str	r3, [r7, #16]
 80011cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ce:	4b29      	ldr	r3, [pc, #164]	@ (8001274 <HAL_DAC_MspInit+0xe0>)
 80011d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011d2:	4a28      	ldr	r2, [pc, #160]	@ (8001274 <HAL_DAC_MspInit+0xe0>)
 80011d4:	f043 0301 	orr.w	r3, r3, #1
 80011d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011da:	4b26      	ldr	r3, [pc, #152]	@ (8001274 <HAL_DAC_MspInit+0xe0>)
 80011dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011de:	f003 0301 	and.w	r3, r3, #1
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80011e6:	2310      	movs	r3, #16
 80011e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011ea:	2303      	movs	r3, #3
 80011ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f2:	f107 0314 	add.w	r3, r7, #20
 80011f6:	4619      	mov	r1, r3
 80011f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011fc:	f003 f9e2 	bl	80045c4 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8001200:	4b1d      	ldr	r3, [pc, #116]	@ (8001278 <HAL_DAC_MspInit+0xe4>)
 8001202:	4a1e      	ldr	r2, [pc, #120]	@ (800127c <HAL_DAC_MspInit+0xe8>)
 8001204:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 8001206:	4b1c      	ldr	r3, [pc, #112]	@ (8001278 <HAL_DAC_MspInit+0xe4>)
 8001208:	2206      	movs	r2, #6
 800120a:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800120c:	4b1a      	ldr	r3, [pc, #104]	@ (8001278 <HAL_DAC_MspInit+0xe4>)
 800120e:	2210      	movs	r2, #16
 8001210:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001212:	4b19      	ldr	r3, [pc, #100]	@ (8001278 <HAL_DAC_MspInit+0xe4>)
 8001214:	2200      	movs	r2, #0
 8001216:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001218:	4b17      	ldr	r3, [pc, #92]	@ (8001278 <HAL_DAC_MspInit+0xe4>)
 800121a:	2280      	movs	r2, #128	@ 0x80
 800121c:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800121e:	4b16      	ldr	r3, [pc, #88]	@ (8001278 <HAL_DAC_MspInit+0xe4>)
 8001220:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001224:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001226:	4b14      	ldr	r3, [pc, #80]	@ (8001278 <HAL_DAC_MspInit+0xe4>)
 8001228:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800122c:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 800122e:	4b12      	ldr	r3, [pc, #72]	@ (8001278 <HAL_DAC_MspInit+0xe4>)
 8001230:	2220      	movs	r2, #32
 8001232:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8001234:	4b10      	ldr	r3, [pc, #64]	@ (8001278 <HAL_DAC_MspInit+0xe4>)
 8001236:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800123a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 800123c:	480e      	ldr	r0, [pc, #56]	@ (8001278 <HAL_DAC_MspInit+0xe4>)
 800123e:	f002 ff4b 	bl	80040d8 <HAL_DMA_Init>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <HAL_DAC_MspInit+0xb8>
    {
      Error_Handler();
 8001248:	f7ff fe6a 	bl	8000f20 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	4a0a      	ldr	r2, [pc, #40]	@ (8001278 <HAL_DAC_MspInit+0xe4>)
 8001250:	609a      	str	r2, [r3, #8]
 8001252:	4a09      	ldr	r2, [pc, #36]	@ (8001278 <HAL_DAC_MspInit+0xe4>)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6293      	str	r3, [r2, #40]	@ 0x28

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001258:	2200      	movs	r2, #0
 800125a:	2100      	movs	r1, #0
 800125c:	2036      	movs	r0, #54	@ 0x36
 800125e:	f002 fbc4 	bl	80039ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001262:	2036      	movs	r0, #54	@ 0x36
 8001264:	f002 fbdd 	bl	8003a22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001268:	bf00      	nop
 800126a:	3728      	adds	r7, #40	@ 0x28
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	40007400 	.word	0x40007400
 8001274:	40021000 	.word	0x40021000
 8001278:	20000174 	.word	0x20000174
 800127c:	40020030 	.word	0x40020030

08001280 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a0d      	ldr	r2, [pc, #52]	@ (80012c4 <HAL_TIM_Base_MspInit+0x44>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d113      	bne.n	80012ba <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001292:	4b0d      	ldr	r3, [pc, #52]	@ (80012c8 <HAL_TIM_Base_MspInit+0x48>)
 8001294:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001296:	4a0c      	ldr	r2, [pc, #48]	@ (80012c8 <HAL_TIM_Base_MspInit+0x48>)
 8001298:	f043 0310 	orr.w	r3, r3, #16
 800129c:	6593      	str	r3, [r2, #88]	@ 0x58
 800129e:	4b0a      	ldr	r3, [pc, #40]	@ (80012c8 <HAL_TIM_Base_MspInit+0x48>)
 80012a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012a2:	f003 0310 	and.w	r3, r3, #16
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80012aa:	2200      	movs	r2, #0
 80012ac:	2100      	movs	r1, #0
 80012ae:	2036      	movs	r0, #54	@ 0x36
 80012b0:	f002 fb9b 	bl	80039ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80012b4:	2036      	movs	r0, #54	@ 0x36
 80012b6:	f002 fbb4 	bl	8003a22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80012ba:	bf00      	nop
 80012bc:	3710      	adds	r7, #16
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40001000 	.word	0x40001000
 80012c8:	40021000 	.word	0x40021000

080012cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b0ac      	sub	sp, #176	@ 0xb0
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]
 80012e0:	60da      	str	r2, [r3, #12]
 80012e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012e4:	f107 0314 	add.w	r3, r7, #20
 80012e8:	2288      	movs	r2, #136	@ 0x88
 80012ea:	2100      	movs	r1, #0
 80012ec:	4618      	mov	r0, r3
 80012ee:	f006 fa97 	bl	8007820 <memset>
  if(huart->Instance==USART2)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a25      	ldr	r2, [pc, #148]	@ (800138c <HAL_UART_MspInit+0xc0>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d143      	bne.n	8001384 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80012fc:	2302      	movs	r3, #2
 80012fe:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001300:	2300      	movs	r3, #0
 8001302:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001304:	f107 0314 	add.w	r3, r7, #20
 8001308:	4618      	mov	r0, r3
 800130a:	f004 f981 	bl	8005610 <HAL_RCCEx_PeriphCLKConfig>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001314:	f7ff fe04 	bl	8000f20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001318:	4b1d      	ldr	r3, [pc, #116]	@ (8001390 <HAL_UART_MspInit+0xc4>)
 800131a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800131c:	4a1c      	ldr	r2, [pc, #112]	@ (8001390 <HAL_UART_MspInit+0xc4>)
 800131e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001322:	6593      	str	r3, [r2, #88]	@ 0x58
 8001324:	4b1a      	ldr	r3, [pc, #104]	@ (8001390 <HAL_UART_MspInit+0xc4>)
 8001326:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001328:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800132c:	613b      	str	r3, [r7, #16]
 800132e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001330:	4b17      	ldr	r3, [pc, #92]	@ (8001390 <HAL_UART_MspInit+0xc4>)
 8001332:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001334:	4a16      	ldr	r2, [pc, #88]	@ (8001390 <HAL_UART_MspInit+0xc4>)
 8001336:	f043 0301 	orr.w	r3, r3, #1
 800133a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800133c:	4b14      	ldr	r3, [pc, #80]	@ (8001390 <HAL_UART_MspInit+0xc4>)
 800133e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001340:	f003 0301 	and.w	r3, r3, #1
 8001344:	60fb      	str	r3, [r7, #12]
 8001346:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001348:	230c      	movs	r3, #12
 800134a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134e:	2302      	movs	r3, #2
 8001350:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001354:	2300      	movs	r3, #0
 8001356:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135a:	2303      	movs	r3, #3
 800135c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001360:	2307      	movs	r3, #7
 8001362:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001366:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800136a:	4619      	mov	r1, r3
 800136c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001370:	f003 f928 	bl	80045c4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8001374:	2200      	movs	r2, #0
 8001376:	2102      	movs	r1, #2
 8001378:	2026      	movs	r0, #38	@ 0x26
 800137a:	f002 fb36 	bl	80039ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800137e:	2026      	movs	r0, #38	@ 0x26
 8001380:	f002 fb4f 	bl	8003a22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001384:	bf00      	nop
 8001386:	37b0      	adds	r7, #176	@ 0xb0
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	40004400 	.word	0x40004400
 8001390:	40021000 	.word	0x40021000

08001394 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8001398:	bf00      	nop
 800139a:	e7fd      	b.n	8001398 <NMI_Handler+0x4>

0800139c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013a0:	bf00      	nop
 80013a2:	e7fd      	b.n	80013a0 <HardFault_Handler+0x4>

080013a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013a8:	bf00      	nop
 80013aa:	e7fd      	b.n	80013a8 <MemManage_Handler+0x4>

080013ac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013b0:	bf00      	nop
 80013b2:	e7fd      	b.n	80013b0 <BusFault_Handler+0x4>

080013b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013b8:	bf00      	nop
 80013ba:	e7fd      	b.n	80013b8 <UsageFault_Handler+0x4>

080013bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013c0:	bf00      	nop
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr

080013ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013ca:	b480      	push	{r7}
 80013cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013ce:	bf00      	nop
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr

080013d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013dc:	bf00      	nop
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr

080013e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013ea:	f000 f925 	bl	8001638 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}
	...

080013f4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80013f8:	4802      	ldr	r0, [pc, #8]	@ (8001404 <DMA1_Channel1_IRQHandler+0x10>)
 80013fa:	f003 f804 	bl	8004406 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	200000f0 	.word	0x200000f0

08001408 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 800140c:	4802      	ldr	r0, [pc, #8]	@ (8001418 <DMA1_Channel3_IRQHandler+0x10>)
 800140e:	f002 fffa 	bl	8004406 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	20000174 	.word	0x20000174

0800141c <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001420:	4802      	ldr	r0, [pc, #8]	@ (800142c <CAN1_TX_IRQHandler+0x10>)
 8001422:	f001 ffe2 	bl	80033ea <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	20000138 	.word	0x20000138

08001430 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001434:	4802      	ldr	r0, [pc, #8]	@ (8001440 <CAN1_RX0_IRQHandler+0x10>)
 8001436:	f001 ffd8 	bl	80033ea <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	20000138 	.word	0x20000138

08001444 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001448:	4802      	ldr	r0, [pc, #8]	@ (8001454 <CAN1_RX1_IRQHandler+0x10>)
 800144a:	f001 ffce 	bl	80033ea <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	20000138 	.word	0x20000138

08001458 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800145c:	4802      	ldr	r0, [pc, #8]	@ (8001468 <CAN1_SCE_IRQHandler+0x10>)
 800145e:	f001 ffc4 	bl	80033ea <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	20000138 	.word	0x20000138

0800146c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001470:	4802      	ldr	r0, [pc, #8]	@ (800147c <USART2_IRQHandler+0x10>)
 8001472:	f005 f993 	bl	800679c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	20000208 	.word	0x20000208

08001480 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001484:	4803      	ldr	r0, [pc, #12]	@ (8001494 <TIM6_DAC_IRQHandler+0x14>)
 8001486:	f004 fe47 	bl	8006118 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 800148a:	4803      	ldr	r0, [pc, #12]	@ (8001498 <TIM6_DAC_IRQHandler+0x18>)
 800148c:	f002 fbd2 	bl	8003c34 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001490:	bf00      	nop
 8001492:	bd80      	pop	{r7, pc}
 8001494:	200001bc 	.word	0x200001bc
 8001498:	20000160 	.word	0x20000160

0800149c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014a4:	4a14      	ldr	r2, [pc, #80]	@ (80014f8 <_sbrk+0x5c>)
 80014a6:	4b15      	ldr	r3, [pc, #84]	@ (80014fc <_sbrk+0x60>)
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014b0:	4b13      	ldr	r3, [pc, #76]	@ (8001500 <_sbrk+0x64>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d102      	bne.n	80014be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014b8:	4b11      	ldr	r3, [pc, #68]	@ (8001500 <_sbrk+0x64>)
 80014ba:	4a12      	ldr	r2, [pc, #72]	@ (8001504 <_sbrk+0x68>)
 80014bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014be:	4b10      	ldr	r3, [pc, #64]	@ (8001500 <_sbrk+0x64>)
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4413      	add	r3, r2
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d207      	bcs.n	80014dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014cc:	f006 f9b0 	bl	8007830 <__errno>
 80014d0:	4603      	mov	r3, r0
 80014d2:	220c      	movs	r2, #12
 80014d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014d6:	f04f 33ff 	mov.w	r3, #4294967295
 80014da:	e009      	b.n	80014f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014dc:	4b08      	ldr	r3, [pc, #32]	@ (8001500 <_sbrk+0x64>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014e2:	4b07      	ldr	r3, [pc, #28]	@ (8001500 <_sbrk+0x64>)
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4413      	add	r3, r2
 80014ea:	4a05      	ldr	r2, [pc, #20]	@ (8001500 <_sbrk+0x64>)
 80014ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014ee:	68fb      	ldr	r3, [r7, #12]
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3718      	adds	r7, #24
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	20018000 	.word	0x20018000
 80014fc:	00000400 	.word	0x00000400
 8001500:	200002d0 	.word	0x200002d0
 8001504:	20000420 	.word	0x20000420

08001508 <SystemInit>:
/**
 * @brief  Setup the microcontroller system.
 * @retval None
 */

void SystemInit(void) {
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 20U) | (3UL << 22U)); /* set CP10 and CP11 Full Access */
 800150c:	4b06      	ldr	r3, [pc, #24]	@ (8001528 <SystemInit+0x20>)
 800150e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001512:	4a05      	ldr	r2, [pc, #20]	@ (8001528 <SystemInit+0x20>)
 8001514:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001518:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800151c:	bf00      	nop
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	e000ed00 	.word	0xe000ed00

0800152c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800152c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001564 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001530:	f7ff ffea 	bl	8001508 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001534:	480c      	ldr	r0, [pc, #48]	@ (8001568 <LoopForever+0x6>)
  ldr r1, =_edata
 8001536:	490d      	ldr	r1, [pc, #52]	@ (800156c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001538:	4a0d      	ldr	r2, [pc, #52]	@ (8001570 <LoopForever+0xe>)
  movs r3, #0
 800153a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800153c:	e002      	b.n	8001544 <LoopCopyDataInit>

0800153e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800153e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001540:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001542:	3304      	adds	r3, #4

08001544 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001544:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001546:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001548:	d3f9      	bcc.n	800153e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800154a:	4a0a      	ldr	r2, [pc, #40]	@ (8001574 <LoopForever+0x12>)
  ldr r4, =_ebss
 800154c:	4c0a      	ldr	r4, [pc, #40]	@ (8001578 <LoopForever+0x16>)
  movs r3, #0
 800154e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001550:	e001      	b.n	8001556 <LoopFillZerobss>

08001552 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001552:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001554:	3204      	adds	r2, #4

08001556 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001556:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001558:	d3fb      	bcc.n	8001552 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800155a:	f006 f96f 	bl	800783c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800155e:	f7ff f92d 	bl	80007bc <main>

08001562 <LoopForever>:

LoopForever:
    b LoopForever
 8001562:	e7fe      	b.n	8001562 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001564:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001568:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800156c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001570:	080082a8 	.word	0x080082a8
  ldr r2, =_sbss
 8001574:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001578:	20000420 	.word	0x20000420

0800157c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800157c:	e7fe      	b.n	800157c <ADC1_2_IRQHandler>
	...

08001580 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001586:	2300      	movs	r3, #0
 8001588:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800158a:	4b0c      	ldr	r3, [pc, #48]	@ (80015bc <HAL_Init+0x3c>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a0b      	ldr	r2, [pc, #44]	@ (80015bc <HAL_Init+0x3c>)
 8001590:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001594:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001596:	2003      	movs	r0, #3
 8001598:	f002 fa1c 	bl	80039d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800159c:	2000      	movs	r0, #0
 800159e:	f000 f80f 	bl	80015c0 <HAL_InitTick>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d002      	beq.n	80015ae <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	71fb      	strb	r3, [r7, #7]
 80015ac:	e001      	b.n	80015b2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80015ae:	f7ff fcbf 	bl	8000f30 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80015b2:	79fb      	ldrb	r3, [r7, #7]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	40022000 	.word	0x40022000

080015c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80015c8:	2300      	movs	r3, #0
 80015ca:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80015cc:	4b17      	ldr	r3, [pc, #92]	@ (800162c <HAL_InitTick+0x6c>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d023      	beq.n	800161c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80015d4:	4b16      	ldr	r3, [pc, #88]	@ (8001630 <HAL_InitTick+0x70>)
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	4b14      	ldr	r3, [pc, #80]	@ (800162c <HAL_InitTick+0x6c>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	4619      	mov	r1, r3
 80015de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ea:	4618      	mov	r0, r3
 80015ec:	f002 fa27 	bl	8003a3e <HAL_SYSTICK_Config>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d10f      	bne.n	8001616 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2b0f      	cmp	r3, #15
 80015fa:	d809      	bhi.n	8001610 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015fc:	2200      	movs	r2, #0
 80015fe:	6879      	ldr	r1, [r7, #4]
 8001600:	f04f 30ff 	mov.w	r0, #4294967295
 8001604:	f002 f9f1 	bl	80039ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001608:	4a0a      	ldr	r2, [pc, #40]	@ (8001634 <HAL_InitTick+0x74>)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6013      	str	r3, [r2, #0]
 800160e:	e007      	b.n	8001620 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	73fb      	strb	r3, [r7, #15]
 8001614:	e004      	b.n	8001620 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	73fb      	strb	r3, [r7, #15]
 800161a:	e001      	b.n	8001620 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001620:	7bfb      	ldrb	r3, [r7, #15]
}
 8001622:	4618      	mov	r0, r3
 8001624:	3710      	adds	r7, #16
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	2000001c 	.word	0x2000001c
 8001630:	20000014 	.word	0x20000014
 8001634:	20000018 	.word	0x20000018

08001638 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800163c:	4b06      	ldr	r3, [pc, #24]	@ (8001658 <HAL_IncTick+0x20>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	461a      	mov	r2, r3
 8001642:	4b06      	ldr	r3, [pc, #24]	@ (800165c <HAL_IncTick+0x24>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4413      	add	r3, r2
 8001648:	4a04      	ldr	r2, [pc, #16]	@ (800165c <HAL_IncTick+0x24>)
 800164a:	6013      	str	r3, [r2, #0]
}
 800164c:	bf00      	nop
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	2000001c 	.word	0x2000001c
 800165c:	200002d4 	.word	0x200002d4

08001660 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  return uwTick;
 8001664:	4b03      	ldr	r3, [pc, #12]	@ (8001674 <HAL_GetTick+0x14>)
 8001666:	681b      	ldr	r3, [r3, #0]
}
 8001668:	4618      	mov	r0, r3
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	200002d4 	.word	0x200002d4

08001678 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001680:	f7ff ffee 	bl	8001660 <HAL_GetTick>
 8001684:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001690:	d005      	beq.n	800169e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001692:	4b0a      	ldr	r3, [pc, #40]	@ (80016bc <HAL_Delay+0x44>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	461a      	mov	r2, r3
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	4413      	add	r3, r2
 800169c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800169e:	bf00      	nop
 80016a0:	f7ff ffde 	bl	8001660 <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	68fa      	ldr	r2, [r7, #12]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d8f7      	bhi.n	80016a0 <HAL_Delay+0x28>
  {
  }
}
 80016b0:	bf00      	nop
 80016b2:	bf00      	nop
 80016b4:	3710      	adds	r7, #16
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	2000001c 	.word	0x2000001c

080016c0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	431a      	orrs	r2, r3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	609a      	str	r2, [r3, #8]
}
 80016da:	bf00      	nop
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr

080016e6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80016e6:	b480      	push	{r7}
 80016e8:	b083      	sub	sp, #12
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
 80016ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	431a      	orrs	r2, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	609a      	str	r2, [r3, #8]
}
 8001700:	bf00      	nop
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800171c:	4618      	mov	r0, r3
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001728:	b480      	push	{r7}
 800172a:	b087      	sub	sp, #28
 800172c:	af00      	add	r7, sp, #0
 800172e:	60f8      	str	r0, [r7, #12]
 8001730:	60b9      	str	r1, [r7, #8]
 8001732:	607a      	str	r2, [r7, #4]
 8001734:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	3360      	adds	r3, #96	@ 0x60
 800173a:	461a      	mov	r2, r3
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	4413      	add	r3, r2
 8001742:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	4b08      	ldr	r3, [pc, #32]	@ (800176c <LL_ADC_SetOffset+0x44>)
 800174a:	4013      	ands	r3, r2
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001752:	683a      	ldr	r2, [r7, #0]
 8001754:	430a      	orrs	r2, r1
 8001756:	4313      	orrs	r3, r2
 8001758:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001760:	bf00      	nop
 8001762:	371c      	adds	r7, #28
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	03fff000 	.word	0x03fff000

08001770 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001770:	b480      	push	{r7}
 8001772:	b085      	sub	sp, #20
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	3360      	adds	r3, #96	@ 0x60
 800177e:	461a      	mov	r2, r3
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	4413      	add	r3, r2
 8001786:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001790:	4618      	mov	r0, r3
 8001792:	3714      	adds	r7, #20
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800179c:	b480      	push	{r7}
 800179e:	b087      	sub	sp, #28
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	60b9      	str	r1, [r7, #8]
 80017a6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	3360      	adds	r3, #96	@ 0x60
 80017ac:	461a      	mov	r2, r3
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	4413      	add	r3, r2
 80017b4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	431a      	orrs	r2, r3
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80017c6:	bf00      	nop
 80017c8:	371c      	adds	r7, #28
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr

080017d2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80017d2:	b480      	push	{r7}
 80017d4:	b083      	sub	sp, #12
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	68db      	ldr	r3, [r3, #12]
 80017de:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d101      	bne.n	80017ea <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80017e6:	2301      	movs	r3, #1
 80017e8:	e000      	b.n	80017ec <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80017ea:	2300      	movs	r3, #0
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr

080017f8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b087      	sub	sp, #28
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	60f8      	str	r0, [r7, #12]
 8001800:	60b9      	str	r1, [r7, #8]
 8001802:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	3330      	adds	r3, #48	@ 0x30
 8001808:	461a      	mov	r2, r3
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	0a1b      	lsrs	r3, r3, #8
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	f003 030c 	and.w	r3, r3, #12
 8001814:	4413      	add	r3, r2
 8001816:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	f003 031f 	and.w	r3, r3, #31
 8001822:	211f      	movs	r1, #31
 8001824:	fa01 f303 	lsl.w	r3, r1, r3
 8001828:	43db      	mvns	r3, r3
 800182a:	401a      	ands	r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	0e9b      	lsrs	r3, r3, #26
 8001830:	f003 011f 	and.w	r1, r3, #31
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	f003 031f 	and.w	r3, r3, #31
 800183a:	fa01 f303 	lsl.w	r3, r1, r3
 800183e:	431a      	orrs	r2, r3
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001844:	bf00      	nop
 8001846:	371c      	adds	r7, #28
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001850:	b480      	push	{r7}
 8001852:	b087      	sub	sp, #28
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	3314      	adds	r3, #20
 8001860:	461a      	mov	r2, r3
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	0e5b      	lsrs	r3, r3, #25
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	f003 0304 	and.w	r3, r3, #4
 800186c:	4413      	add	r3, r2
 800186e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	0d1b      	lsrs	r3, r3, #20
 8001878:	f003 031f 	and.w	r3, r3, #31
 800187c:	2107      	movs	r1, #7
 800187e:	fa01 f303 	lsl.w	r3, r1, r3
 8001882:	43db      	mvns	r3, r3
 8001884:	401a      	ands	r2, r3
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	0d1b      	lsrs	r3, r3, #20
 800188a:	f003 031f 	and.w	r3, r3, #31
 800188e:	6879      	ldr	r1, [r7, #4]
 8001890:	fa01 f303 	lsl.w	r3, r1, r3
 8001894:	431a      	orrs	r2, r3
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800189a:	bf00      	nop
 800189c:	371c      	adds	r7, #28
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
	...

080018a8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	60b9      	str	r1, [r7, #8]
 80018b2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018c0:	43db      	mvns	r3, r3
 80018c2:	401a      	ands	r2, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f003 0318 	and.w	r3, r3, #24
 80018ca:	4908      	ldr	r1, [pc, #32]	@ (80018ec <LL_ADC_SetChannelSingleDiff+0x44>)
 80018cc:	40d9      	lsrs	r1, r3
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	400b      	ands	r3, r1
 80018d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018d6:	431a      	orrs	r2, r3
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80018de:	bf00      	nop
 80018e0:	3714      	adds	r7, #20
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	0007ffff 	.word	0x0007ffff

080018f0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	f003 031f 	and.w	r3, r3, #31
}
 8001900:	4618      	mov	r0, r3
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800191c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	6093      	str	r3, [r2, #8]
}
 8001924:	bf00      	nop
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001940:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001944:	d101      	bne.n	800194a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001946:	2301      	movs	r3, #1
 8001948:	e000      	b.n	800194c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800194a:	2300      	movs	r3, #0
}
 800194c:	4618      	mov	r0, r3
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001968:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800196c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001974:	bf00      	nop
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001990:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001994:	d101      	bne.n	800199a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001996:	2301      	movs	r3, #1
 8001998:	e000      	b.n	800199c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800199a:	2300      	movs	r3, #0
}
 800199c:	4618      	mov	r0, r3
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80019b8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80019bc:	f043 0201 	orr.w	r2, r3, #1
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80019c4:	bf00      	nop
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80019e0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80019e4:	f043 0202 	orr.w	r2, r3, #2
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80019ec:	bf00      	nop
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f003 0301 	and.w	r3, r3, #1
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d101      	bne.n	8001a10 <LL_ADC_IsEnabled+0x18>
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e000      	b.n	8001a12 <LL_ADC_IsEnabled+0x1a>
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr

08001a1e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	b083      	sub	sp, #12
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d101      	bne.n	8001a36 <LL_ADC_IsDisableOngoing+0x18>
 8001a32:	2301      	movs	r3, #1
 8001a34:	e000      	b.n	8001a38 <LL_ADC_IsDisableOngoing+0x1a>
 8001a36:	2300      	movs	r3, #0
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001a54:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001a58:	f043 0204 	orr.w	r2, r3, #4
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001a60:	bf00      	nop
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	f003 0304 	and.w	r3, r3, #4
 8001a7c:	2b04      	cmp	r3, #4
 8001a7e:	d101      	bne.n	8001a84 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001a80:	2301      	movs	r3, #1
 8001a82:	e000      	b.n	8001a86 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr

08001a92 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001a92:	b480      	push	{r7}
 8001a94:	b083      	sub	sp, #12
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	f003 0308 	and.w	r3, r3, #8
 8001aa2:	2b08      	cmp	r3, #8
 8001aa4:	d101      	bne.n	8001aaa <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e000      	b.n	8001aac <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001aaa:	2300      	movs	r3, #0
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ab8:	b590      	push	{r4, r7, lr}
 8001aba:	b089      	sub	sp, #36	@ 0x24
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d101      	bne.n	8001ad2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e130      	b.n	8001d34 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	691b      	ldr	r3, [r3, #16]
 8001ad6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d109      	bne.n	8001af4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f7ff fa49 	bl	8000f78 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7ff ff19 	bl	8001930 <LL_ADC_IsDeepPowerDownEnabled>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d004      	beq.n	8001b0e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff feff 	bl	800190c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff ff34 	bl	8001980 <LL_ADC_IsInternalRegulatorEnabled>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d115      	bne.n	8001b4a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7ff ff18 	bl	8001958 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b28:	4b84      	ldr	r3, [pc, #528]	@ (8001d3c <HAL_ADC_Init+0x284>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	099b      	lsrs	r3, r3, #6
 8001b2e:	4a84      	ldr	r2, [pc, #528]	@ (8001d40 <HAL_ADC_Init+0x288>)
 8001b30:	fba2 2303 	umull	r2, r3, r2, r3
 8001b34:	099b      	lsrs	r3, r3, #6
 8001b36:	3301      	adds	r3, #1
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001b3c:	e002      	b.n	8001b44 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	3b01      	subs	r3, #1
 8001b42:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1f9      	bne.n	8001b3e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7ff ff16 	bl	8001980 <LL_ADC_IsInternalRegulatorEnabled>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d10d      	bne.n	8001b76 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b5e:	f043 0210 	orr.w	r2, r3, #16
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b6a:	f043 0201 	orr.w	r2, r3, #1
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7ff ff76 	bl	8001a6c <LL_ADC_REG_IsConversionOngoing>
 8001b80:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b86:	f003 0310 	and.w	r3, r3, #16
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	f040 80c9 	bne.w	8001d22 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	f040 80c5 	bne.w	8001d22 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b9c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001ba0:	f043 0202 	orr.w	r2, r3, #2
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff ff23 	bl	80019f8 <LL_ADC_IsEnabled>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d115      	bne.n	8001be4 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001bb8:	4862      	ldr	r0, [pc, #392]	@ (8001d44 <HAL_ADC_Init+0x28c>)
 8001bba:	f7ff ff1d 	bl	80019f8 <LL_ADC_IsEnabled>
 8001bbe:	4604      	mov	r4, r0
 8001bc0:	4861      	ldr	r0, [pc, #388]	@ (8001d48 <HAL_ADC_Init+0x290>)
 8001bc2:	f7ff ff19 	bl	80019f8 <LL_ADC_IsEnabled>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	431c      	orrs	r4, r3
 8001bca:	4860      	ldr	r0, [pc, #384]	@ (8001d4c <HAL_ADC_Init+0x294>)
 8001bcc:	f7ff ff14 	bl	80019f8 <LL_ADC_IsEnabled>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	4323      	orrs	r3, r4
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d105      	bne.n	8001be4 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	4619      	mov	r1, r3
 8001bde:	485c      	ldr	r0, [pc, #368]	@ (8001d50 <HAL_ADC_Init+0x298>)
 8001be0:	f7ff fd6e 	bl	80016c0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	7e5b      	ldrb	r3, [r3, #25]
 8001be8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001bee:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001bf4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001bfa:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c02:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c04:	4313      	orrs	r3, r2
 8001c06:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d106      	bne.n	8001c20 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c16:	3b01      	subs	r3, #1
 8001c18:	045b      	lsls	r3, r3, #17
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d009      	beq.n	8001c3c <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c2c:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c34:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	68da      	ldr	r2, [r3, #12]
 8001c42:	4b44      	ldr	r3, [pc, #272]	@ (8001d54 <HAL_ADC_Init+0x29c>)
 8001c44:	4013      	ands	r3, r2
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	6812      	ldr	r2, [r2, #0]
 8001c4a:	69b9      	ldr	r1, [r7, #24]
 8001c4c:	430b      	orrs	r3, r1
 8001c4e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff ff1c 	bl	8001a92 <LL_ADC_INJ_IsConversionOngoing>
 8001c5a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d13d      	bne.n	8001cde <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d13a      	bne.n	8001cde <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001c6c:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001c74:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001c76:	4313      	orrs	r3, r2
 8001c78:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001c84:	f023 0302 	bic.w	r3, r3, #2
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	6812      	ldr	r2, [r2, #0]
 8001c8c:	69b9      	ldr	r1, [r7, #24]
 8001c8e:	430b      	orrs	r3, r1
 8001c90:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d118      	bne.n	8001cce <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	691b      	ldr	r3, [r3, #16]
 8001ca2:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001ca6:	f023 0304 	bic.w	r3, r3, #4
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001cb2:	4311      	orrs	r1, r2
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001cb8:	4311      	orrs	r1, r2
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001cbe:	430a      	orrs	r2, r1
 8001cc0:	431a      	orrs	r2, r3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f042 0201 	orr.w	r2, r2, #1
 8001cca:	611a      	str	r2, [r3, #16]
 8001ccc:	e007      	b.n	8001cde <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	691a      	ldr	r2, [r3, #16]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f022 0201 	bic.w	r2, r2, #1
 8001cdc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	691b      	ldr	r3, [r3, #16]
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d10c      	bne.n	8001d00 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cec:	f023 010f 	bic.w	r1, r3, #15
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	69db      	ldr	r3, [r3, #28]
 8001cf4:	1e5a      	subs	r2, r3, #1
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	430a      	orrs	r2, r1
 8001cfc:	631a      	str	r2, [r3, #48]	@ 0x30
 8001cfe:	e007      	b.n	8001d10 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f022 020f 	bic.w	r2, r2, #15
 8001d0e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d14:	f023 0303 	bic.w	r3, r3, #3
 8001d18:	f043 0201 	orr.w	r2, r3, #1
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	655a      	str	r2, [r3, #84]	@ 0x54
 8001d20:	e007      	b.n	8001d32 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d26:	f043 0210 	orr.w	r2, r3, #16
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d32:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3724      	adds	r7, #36	@ 0x24
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd90      	pop	{r4, r7, pc}
 8001d3c:	20000014 	.word	0x20000014
 8001d40:	053e2d63 	.word	0x053e2d63
 8001d44:	50040000 	.word	0x50040000
 8001d48:	50040100 	.word	0x50040100
 8001d4c:	50040200 	.word	0x50040200
 8001d50:	50040300 	.word	0x50040300
 8001d54:	fff0c007 	.word	0xfff0c007

08001d58 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	60b9      	str	r1, [r7, #8]
 8001d62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d64:	4853      	ldr	r0, [pc, #332]	@ (8001eb4 <HAL_ADC_Start_DMA+0x15c>)
 8001d66:	f7ff fdc3 	bl	80018f0 <LL_ADC_GetMultimode>
 8001d6a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7ff fe7b 	bl	8001a6c <LL_ADC_REG_IsConversionOngoing>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	f040 8093 	bne.w	8001ea4 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d101      	bne.n	8001d8c <HAL_ADC_Start_DMA+0x34>
 8001d88:	2302      	movs	r3, #2
 8001d8a:	e08e      	b.n	8001eaa <HAL_ADC_Start_DMA+0x152>
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a47      	ldr	r2, [pc, #284]	@ (8001eb8 <HAL_ADC_Start_DMA+0x160>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d008      	beq.n	8001db0 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d005      	beq.n	8001db0 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	2b05      	cmp	r3, #5
 8001da8:	d002      	beq.n	8001db0 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	2b09      	cmp	r3, #9
 8001dae:	d172      	bne.n	8001e96 <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001db0:	68f8      	ldr	r0, [r7, #12]
 8001db2:	f000 fc9d 	bl	80026f0 <ADC_Enable>
 8001db6:	4603      	mov	r3, r0
 8001db8:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001dba:	7dfb      	ldrb	r3, [r7, #23]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d165      	bne.n	8001e8c <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dc4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001dc8:	f023 0301 	bic.w	r3, r3, #1
 8001dcc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a38      	ldr	r2, [pc, #224]	@ (8001ebc <HAL_ADC_Start_DMA+0x164>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d002      	beq.n	8001de4 <HAL_ADC_Start_DMA+0x8c>
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	e000      	b.n	8001de6 <HAL_ADC_Start_DMA+0x8e>
 8001de4:	4b36      	ldr	r3, [pc, #216]	@ (8001ec0 <HAL_ADC_Start_DMA+0x168>)
 8001de6:	68fa      	ldr	r2, [r7, #12]
 8001de8:	6812      	ldr	r2, [r2, #0]
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d002      	beq.n	8001df4 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d105      	bne.n	8001e00 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001df8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	655a      	str	r2, [r3, #84]	@ 0x54
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e04:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d006      	beq.n	8001e1a <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e10:	f023 0206 	bic.w	r2, r3, #6
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	659a      	str	r2, [r3, #88]	@ 0x58
 8001e18:	e002      	b.n	8001e20 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e24:	4a27      	ldr	r2, [pc, #156]	@ (8001ec4 <HAL_ADC_Start_DMA+0x16c>)
 8001e26:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e2c:	4a26      	ldr	r2, [pc, #152]	@ (8001ec8 <HAL_ADC_Start_DMA+0x170>)
 8001e2e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e34:	4a25      	ldr	r2, [pc, #148]	@ (8001ecc <HAL_ADC_Start_DMA+0x174>)
 8001e36:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	221c      	movs	r2, #28
 8001e3e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2200      	movs	r2, #0
 8001e44:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	685a      	ldr	r2, [r3, #4]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f042 0210 	orr.w	r2, r2, #16
 8001e56:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	68da      	ldr	r2, [r3, #12]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f042 0201 	orr.w	r2, r2, #1
 8001e66:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	3340      	adds	r3, #64	@ 0x40
 8001e72:	4619      	mov	r1, r3
 8001e74:	68ba      	ldr	r2, [r7, #8]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f002 f9e6 	bl	8004248 <HAL_DMA_Start_IT>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff fddd 	bl	8001a44 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001e8a:	e00d      	b.n	8001ea8 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8001e94:	e008      	b.n	8001ea8 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8001ea2:	e001      	b.n	8001ea8 <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ea8:	7dfb      	ldrb	r3, [r7, #23]
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3718      	adds	r7, #24
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	50040300 	.word	0x50040300
 8001eb8:	50040200 	.word	0x50040200
 8001ebc:	50040100 	.word	0x50040100
 8001ec0:	50040000 	.word	0x50040000
 8001ec4:	080028bb 	.word	0x080028bb
 8001ec8:	08002993 	.word	0x08002993
 8001ecc:	080029af 	.word	0x080029af

08001ed0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001ed8:	bf00      	nop
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001eec:	bf00      	nop
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b0b6      	sub	sp, #216	@ 0xd8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f16:	2300      	movs	r3, #0
 8001f18:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d101      	bne.n	8001f2e <HAL_ADC_ConfigChannel+0x22>
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	e3c9      	b.n	80026c2 <HAL_ADC_ConfigChannel+0x7b6>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2201      	movs	r2, #1
 8001f32:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7ff fd96 	bl	8001a6c <LL_ADC_REG_IsConversionOngoing>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	f040 83aa 	bne.w	800269c <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	2b05      	cmp	r3, #5
 8001f56:	d824      	bhi.n	8001fa2 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	3b02      	subs	r3, #2
 8001f5e:	2b03      	cmp	r3, #3
 8001f60:	d81b      	bhi.n	8001f9a <HAL_ADC_ConfigChannel+0x8e>
 8001f62:	a201      	add	r2, pc, #4	@ (adr r2, 8001f68 <HAL_ADC_ConfigChannel+0x5c>)
 8001f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f68:	08001f79 	.word	0x08001f79
 8001f6c:	08001f81 	.word	0x08001f81
 8001f70:	08001f89 	.word	0x08001f89
 8001f74:	08001f91 	.word	0x08001f91
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001f78:	230c      	movs	r3, #12
 8001f7a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001f7e:	e010      	b.n	8001fa2 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001f80:	2312      	movs	r3, #18
 8001f82:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001f86:	e00c      	b.n	8001fa2 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001f88:	2318      	movs	r3, #24
 8001f8a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001f8e:	e008      	b.n	8001fa2 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001f90:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f94:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001f98:	e003      	b.n	8001fa2 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001f9a:	2306      	movs	r3, #6
 8001f9c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001fa0:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6818      	ldr	r0, [r3, #0]
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	461a      	mov	r2, r3
 8001fac:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001fb0:	f7ff fc22 	bl	80017f8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7ff fd57 	bl	8001a6c <LL_ADC_REG_IsConversionOngoing>
 8001fbe:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7ff fd63 	bl	8001a92 <LL_ADC_INJ_IsConversionOngoing>
 8001fcc:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001fd0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	f040 81a4 	bne.w	8002322 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001fda:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	f040 819f 	bne.w	8002322 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6818      	ldr	r0, [r3, #0]
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	6819      	ldr	r1, [r3, #0]
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	f7ff fc2d 	bl	8001850 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	695a      	ldr	r2, [r3, #20]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	08db      	lsrs	r3, r3, #3
 8002002:	f003 0303 	and.w	r3, r3, #3
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	fa02 f303 	lsl.w	r3, r2, r3
 800200c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	691b      	ldr	r3, [r3, #16]
 8002014:	2b04      	cmp	r3, #4
 8002016:	d00a      	beq.n	800202e <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6818      	ldr	r0, [r3, #0]
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	6919      	ldr	r1, [r3, #16]
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002028:	f7ff fb7e 	bl	8001728 <LL_ADC_SetOffset>
 800202c:	e179      	b.n	8002322 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	2100      	movs	r1, #0
 8002034:	4618      	mov	r0, r3
 8002036:	f7ff fb9b 	bl	8001770 <LL_ADC_GetOffsetChannel>
 800203a:	4603      	mov	r3, r0
 800203c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002040:	2b00      	cmp	r3, #0
 8002042:	d10a      	bne.n	800205a <HAL_ADC_ConfigChannel+0x14e>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2100      	movs	r1, #0
 800204a:	4618      	mov	r0, r3
 800204c:	f7ff fb90 	bl	8001770 <LL_ADC_GetOffsetChannel>
 8002050:	4603      	mov	r3, r0
 8002052:	0e9b      	lsrs	r3, r3, #26
 8002054:	f003 021f 	and.w	r2, r3, #31
 8002058:	e01e      	b.n	8002098 <HAL_ADC_ConfigChannel+0x18c>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	2100      	movs	r1, #0
 8002060:	4618      	mov	r0, r3
 8002062:	f7ff fb85 	bl	8001770 <LL_ADC_GetOffsetChannel>
 8002066:	4603      	mov	r3, r0
 8002068:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800206c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002070:	fa93 f3a3 	rbit	r3, r3
 8002074:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002078:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800207c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002080:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002084:	2b00      	cmp	r3, #0
 8002086:	d101      	bne.n	800208c <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002088:	2320      	movs	r3, #32
 800208a:	e004      	b.n	8002096 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 800208c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002090:	fab3 f383 	clz	r3, r3
 8002094:	b2db      	uxtb	r3, r3
 8002096:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d105      	bne.n	80020b0 <HAL_ADC_ConfigChannel+0x1a4>
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	0e9b      	lsrs	r3, r3, #26
 80020aa:	f003 031f 	and.w	r3, r3, #31
 80020ae:	e018      	b.n	80020e2 <HAL_ADC_ConfigChannel+0x1d6>
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80020bc:	fa93 f3a3 	rbit	r3, r3
 80020c0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80020c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80020c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80020cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d101      	bne.n	80020d8 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80020d4:	2320      	movs	r3, #32
 80020d6:	e004      	b.n	80020e2 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80020d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80020dc:	fab3 f383 	clz	r3, r3
 80020e0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d106      	bne.n	80020f4 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2200      	movs	r2, #0
 80020ec:	2100      	movs	r1, #0
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7ff fb54 	bl	800179c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2101      	movs	r1, #1
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7ff fb38 	bl	8001770 <LL_ADC_GetOffsetChannel>
 8002100:	4603      	mov	r3, r0
 8002102:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002106:	2b00      	cmp	r3, #0
 8002108:	d10a      	bne.n	8002120 <HAL_ADC_ConfigChannel+0x214>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	2101      	movs	r1, #1
 8002110:	4618      	mov	r0, r3
 8002112:	f7ff fb2d 	bl	8001770 <LL_ADC_GetOffsetChannel>
 8002116:	4603      	mov	r3, r0
 8002118:	0e9b      	lsrs	r3, r3, #26
 800211a:	f003 021f 	and.w	r2, r3, #31
 800211e:	e01e      	b.n	800215e <HAL_ADC_ConfigChannel+0x252>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2101      	movs	r1, #1
 8002126:	4618      	mov	r0, r3
 8002128:	f7ff fb22 	bl	8001770 <LL_ADC_GetOffsetChannel>
 800212c:	4603      	mov	r3, r0
 800212e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002132:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002136:	fa93 f3a3 	rbit	r3, r3
 800213a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800213e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002142:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002146:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800214a:	2b00      	cmp	r3, #0
 800214c:	d101      	bne.n	8002152 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800214e:	2320      	movs	r3, #32
 8002150:	e004      	b.n	800215c <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002152:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002156:	fab3 f383 	clz	r3, r3
 800215a:	b2db      	uxtb	r3, r3
 800215c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002166:	2b00      	cmp	r3, #0
 8002168:	d105      	bne.n	8002176 <HAL_ADC_ConfigChannel+0x26a>
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	0e9b      	lsrs	r3, r3, #26
 8002170:	f003 031f 	and.w	r3, r3, #31
 8002174:	e018      	b.n	80021a8 <HAL_ADC_ConfigChannel+0x29c>
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800217e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002182:	fa93 f3a3 	rbit	r3, r3
 8002186:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800218a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800218e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002192:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002196:	2b00      	cmp	r3, #0
 8002198:	d101      	bne.n	800219e <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800219a:	2320      	movs	r3, #32
 800219c:	e004      	b.n	80021a8 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800219e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80021a2:	fab3 f383 	clz	r3, r3
 80021a6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d106      	bne.n	80021ba <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2200      	movs	r2, #0
 80021b2:	2101      	movs	r1, #1
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7ff faf1 	bl	800179c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2102      	movs	r1, #2
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7ff fad5 	bl	8001770 <LL_ADC_GetOffsetChannel>
 80021c6:	4603      	mov	r3, r0
 80021c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d10a      	bne.n	80021e6 <HAL_ADC_ConfigChannel+0x2da>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2102      	movs	r1, #2
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7ff faca 	bl	8001770 <LL_ADC_GetOffsetChannel>
 80021dc:	4603      	mov	r3, r0
 80021de:	0e9b      	lsrs	r3, r3, #26
 80021e0:	f003 021f 	and.w	r2, r3, #31
 80021e4:	e01e      	b.n	8002224 <HAL_ADC_ConfigChannel+0x318>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2102      	movs	r1, #2
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7ff fabf 	bl	8001770 <LL_ADC_GetOffsetChannel>
 80021f2:	4603      	mov	r3, r0
 80021f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80021fc:	fa93 f3a3 	rbit	r3, r3
 8002200:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002204:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002208:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800220c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002210:	2b00      	cmp	r3, #0
 8002212:	d101      	bne.n	8002218 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002214:	2320      	movs	r3, #32
 8002216:	e004      	b.n	8002222 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002218:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800221c:	fab3 f383 	clz	r3, r3
 8002220:	b2db      	uxtb	r3, r3
 8002222:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800222c:	2b00      	cmp	r3, #0
 800222e:	d105      	bne.n	800223c <HAL_ADC_ConfigChannel+0x330>
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	0e9b      	lsrs	r3, r3, #26
 8002236:	f003 031f 	and.w	r3, r3, #31
 800223a:	e014      	b.n	8002266 <HAL_ADC_ConfigChannel+0x35a>
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002242:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002244:	fa93 f3a3 	rbit	r3, r3
 8002248:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800224a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800224c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002250:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002254:	2b00      	cmp	r3, #0
 8002256:	d101      	bne.n	800225c <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002258:	2320      	movs	r3, #32
 800225a:	e004      	b.n	8002266 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 800225c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002260:	fab3 f383 	clz	r3, r3
 8002264:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002266:	429a      	cmp	r2, r3
 8002268:	d106      	bne.n	8002278 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2200      	movs	r2, #0
 8002270:	2102      	movs	r1, #2
 8002272:	4618      	mov	r0, r3
 8002274:	f7ff fa92 	bl	800179c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2103      	movs	r1, #3
 800227e:	4618      	mov	r0, r3
 8002280:	f7ff fa76 	bl	8001770 <LL_ADC_GetOffsetChannel>
 8002284:	4603      	mov	r3, r0
 8002286:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800228a:	2b00      	cmp	r3, #0
 800228c:	d10a      	bne.n	80022a4 <HAL_ADC_ConfigChannel+0x398>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	2103      	movs	r1, #3
 8002294:	4618      	mov	r0, r3
 8002296:	f7ff fa6b 	bl	8001770 <LL_ADC_GetOffsetChannel>
 800229a:	4603      	mov	r3, r0
 800229c:	0e9b      	lsrs	r3, r3, #26
 800229e:	f003 021f 	and.w	r2, r3, #31
 80022a2:	e017      	b.n	80022d4 <HAL_ADC_ConfigChannel+0x3c8>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2103      	movs	r1, #3
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7ff fa60 	bl	8001770 <LL_ADC_GetOffsetChannel>
 80022b0:	4603      	mov	r3, r0
 80022b2:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80022b6:	fa93 f3a3 	rbit	r3, r3
 80022ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80022bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80022be:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80022c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d101      	bne.n	80022ca <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80022c6:	2320      	movs	r3, #32
 80022c8:	e003      	b.n	80022d2 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80022ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80022cc:	fab3 f383 	clz	r3, r3
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d105      	bne.n	80022ec <HAL_ADC_ConfigChannel+0x3e0>
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	0e9b      	lsrs	r3, r3, #26
 80022e6:	f003 031f 	and.w	r3, r3, #31
 80022ea:	e011      	b.n	8002310 <HAL_ADC_ConfigChannel+0x404>
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80022f4:	fa93 f3a3 	rbit	r3, r3
 80022f8:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80022fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80022fc:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80022fe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002300:	2b00      	cmp	r3, #0
 8002302:	d101      	bne.n	8002308 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002304:	2320      	movs	r3, #32
 8002306:	e003      	b.n	8002310 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002308:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800230a:	fab3 f383 	clz	r3, r3
 800230e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002310:	429a      	cmp	r2, r3
 8002312:	d106      	bne.n	8002322 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2200      	movs	r2, #0
 800231a:	2103      	movs	r1, #3
 800231c:	4618      	mov	r0, r3
 800231e:	f7ff fa3d 	bl	800179c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4618      	mov	r0, r3
 8002328:	f7ff fb66 	bl	80019f8 <LL_ADC_IsEnabled>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	f040 8140 	bne.w	80025b4 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6818      	ldr	r0, [r3, #0]
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	6819      	ldr	r1, [r3, #0]
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	461a      	mov	r2, r3
 8002342:	f7ff fab1 	bl	80018a8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	4a8f      	ldr	r2, [pc, #572]	@ (8002588 <HAL_ADC_ConfigChannel+0x67c>)
 800234c:	4293      	cmp	r3, r2
 800234e:	f040 8131 	bne.w	80025b4 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800235e:	2b00      	cmp	r3, #0
 8002360:	d10b      	bne.n	800237a <HAL_ADC_ConfigChannel+0x46e>
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	0e9b      	lsrs	r3, r3, #26
 8002368:	3301      	adds	r3, #1
 800236a:	f003 031f 	and.w	r3, r3, #31
 800236e:	2b09      	cmp	r3, #9
 8002370:	bf94      	ite	ls
 8002372:	2301      	movls	r3, #1
 8002374:	2300      	movhi	r3, #0
 8002376:	b2db      	uxtb	r3, r3
 8002378:	e019      	b.n	80023ae <HAL_ADC_ConfigChannel+0x4a2>
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002380:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002382:	fa93 f3a3 	rbit	r3, r3
 8002386:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002388:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800238a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800238c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800238e:	2b00      	cmp	r3, #0
 8002390:	d101      	bne.n	8002396 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002392:	2320      	movs	r3, #32
 8002394:	e003      	b.n	800239e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002396:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002398:	fab3 f383 	clz	r3, r3
 800239c:	b2db      	uxtb	r3, r3
 800239e:	3301      	adds	r3, #1
 80023a0:	f003 031f 	and.w	r3, r3, #31
 80023a4:	2b09      	cmp	r3, #9
 80023a6:	bf94      	ite	ls
 80023a8:	2301      	movls	r3, #1
 80023aa:	2300      	movhi	r3, #0
 80023ac:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d079      	beq.n	80024a6 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d107      	bne.n	80023ce <HAL_ADC_ConfigChannel+0x4c2>
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	0e9b      	lsrs	r3, r3, #26
 80023c4:	3301      	adds	r3, #1
 80023c6:	069b      	lsls	r3, r3, #26
 80023c8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80023cc:	e015      	b.n	80023fa <HAL_ADC_ConfigChannel+0x4ee>
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80023d6:	fa93 f3a3 	rbit	r3, r3
 80023da:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80023dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80023de:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80023e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d101      	bne.n	80023ea <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80023e6:	2320      	movs	r3, #32
 80023e8:	e003      	b.n	80023f2 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80023ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80023ec:	fab3 f383 	clz	r3, r3
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	3301      	adds	r3, #1
 80023f4:	069b      	lsls	r3, r3, #26
 80023f6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002402:	2b00      	cmp	r3, #0
 8002404:	d109      	bne.n	800241a <HAL_ADC_ConfigChannel+0x50e>
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	0e9b      	lsrs	r3, r3, #26
 800240c:	3301      	adds	r3, #1
 800240e:	f003 031f 	and.w	r3, r3, #31
 8002412:	2101      	movs	r1, #1
 8002414:	fa01 f303 	lsl.w	r3, r1, r3
 8002418:	e017      	b.n	800244a <HAL_ADC_ConfigChannel+0x53e>
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002420:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002422:	fa93 f3a3 	rbit	r3, r3
 8002426:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002428:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800242a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800242c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800242e:	2b00      	cmp	r3, #0
 8002430:	d101      	bne.n	8002436 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002432:	2320      	movs	r3, #32
 8002434:	e003      	b.n	800243e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002436:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002438:	fab3 f383 	clz	r3, r3
 800243c:	b2db      	uxtb	r3, r3
 800243e:	3301      	adds	r3, #1
 8002440:	f003 031f 	and.w	r3, r3, #31
 8002444:	2101      	movs	r1, #1
 8002446:	fa01 f303 	lsl.w	r3, r1, r3
 800244a:	ea42 0103 	orr.w	r1, r2, r3
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002456:	2b00      	cmp	r3, #0
 8002458:	d10a      	bne.n	8002470 <HAL_ADC_ConfigChannel+0x564>
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	0e9b      	lsrs	r3, r3, #26
 8002460:	3301      	adds	r3, #1
 8002462:	f003 021f 	and.w	r2, r3, #31
 8002466:	4613      	mov	r3, r2
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	4413      	add	r3, r2
 800246c:	051b      	lsls	r3, r3, #20
 800246e:	e018      	b.n	80024a2 <HAL_ADC_ConfigChannel+0x596>
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002476:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002478:	fa93 f3a3 	rbit	r3, r3
 800247c:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800247e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002480:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002482:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002484:	2b00      	cmp	r3, #0
 8002486:	d101      	bne.n	800248c <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002488:	2320      	movs	r3, #32
 800248a:	e003      	b.n	8002494 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 800248c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800248e:	fab3 f383 	clz	r3, r3
 8002492:	b2db      	uxtb	r3, r3
 8002494:	3301      	adds	r3, #1
 8002496:	f003 021f 	and.w	r2, r3, #31
 800249a:	4613      	mov	r3, r2
 800249c:	005b      	lsls	r3, r3, #1
 800249e:	4413      	add	r3, r2
 80024a0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024a2:	430b      	orrs	r3, r1
 80024a4:	e081      	b.n	80025aa <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d107      	bne.n	80024c2 <HAL_ADC_ConfigChannel+0x5b6>
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	0e9b      	lsrs	r3, r3, #26
 80024b8:	3301      	adds	r3, #1
 80024ba:	069b      	lsls	r3, r3, #26
 80024bc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80024c0:	e015      	b.n	80024ee <HAL_ADC_ConfigChannel+0x5e2>
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024ca:	fa93 f3a3 	rbit	r3, r3
 80024ce:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80024d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80024d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d101      	bne.n	80024de <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80024da:	2320      	movs	r3, #32
 80024dc:	e003      	b.n	80024e6 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80024de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024e0:	fab3 f383 	clz	r3, r3
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	3301      	adds	r3, #1
 80024e8:	069b      	lsls	r3, r3, #26
 80024ea:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d109      	bne.n	800250e <HAL_ADC_ConfigChannel+0x602>
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	0e9b      	lsrs	r3, r3, #26
 8002500:	3301      	adds	r3, #1
 8002502:	f003 031f 	and.w	r3, r3, #31
 8002506:	2101      	movs	r1, #1
 8002508:	fa01 f303 	lsl.w	r3, r1, r3
 800250c:	e017      	b.n	800253e <HAL_ADC_ConfigChannel+0x632>
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	fa93 f3a3 	rbit	r3, r3
 800251a:	61bb      	str	r3, [r7, #24]
  return result;
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002520:	6a3b      	ldr	r3, [r7, #32]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d101      	bne.n	800252a <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002526:	2320      	movs	r3, #32
 8002528:	e003      	b.n	8002532 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800252a:	6a3b      	ldr	r3, [r7, #32]
 800252c:	fab3 f383 	clz	r3, r3
 8002530:	b2db      	uxtb	r3, r3
 8002532:	3301      	adds	r3, #1
 8002534:	f003 031f 	and.w	r3, r3, #31
 8002538:	2101      	movs	r1, #1
 800253a:	fa01 f303 	lsl.w	r3, r1, r3
 800253e:	ea42 0103 	orr.w	r1, r2, r3
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800254a:	2b00      	cmp	r3, #0
 800254c:	d10d      	bne.n	800256a <HAL_ADC_ConfigChannel+0x65e>
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	0e9b      	lsrs	r3, r3, #26
 8002554:	3301      	adds	r3, #1
 8002556:	f003 021f 	and.w	r2, r3, #31
 800255a:	4613      	mov	r3, r2
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	4413      	add	r3, r2
 8002560:	3b1e      	subs	r3, #30
 8002562:	051b      	lsls	r3, r3, #20
 8002564:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002568:	e01e      	b.n	80025a8 <HAL_ADC_ConfigChannel+0x69c>
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	fa93 f3a3 	rbit	r3, r3
 8002576:	60fb      	str	r3, [r7, #12]
  return result;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d104      	bne.n	800258c <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002582:	2320      	movs	r3, #32
 8002584:	e006      	b.n	8002594 <HAL_ADC_ConfigChannel+0x688>
 8002586:	bf00      	nop
 8002588:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	fab3 f383 	clz	r3, r3
 8002592:	b2db      	uxtb	r3, r3
 8002594:	3301      	adds	r3, #1
 8002596:	f003 021f 	and.w	r2, r3, #31
 800259a:	4613      	mov	r3, r2
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	4413      	add	r3, r2
 80025a0:	3b1e      	subs	r3, #30
 80025a2:	051b      	lsls	r3, r3, #20
 80025a4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025a8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80025aa:	683a      	ldr	r2, [r7, #0]
 80025ac:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025ae:	4619      	mov	r1, r3
 80025b0:	f7ff f94e 	bl	8001850 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	4b44      	ldr	r3, [pc, #272]	@ (80026cc <HAL_ADC_ConfigChannel+0x7c0>)
 80025ba:	4013      	ands	r3, r2
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d07a      	beq.n	80026b6 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80025c0:	4843      	ldr	r0, [pc, #268]	@ (80026d0 <HAL_ADC_ConfigChannel+0x7c4>)
 80025c2:	f7ff f8a3 	bl	800170c <LL_ADC_GetCommonPathInternalCh>
 80025c6:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a41      	ldr	r2, [pc, #260]	@ (80026d4 <HAL_ADC_ConfigChannel+0x7c8>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d12c      	bne.n	800262e <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80025d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80025d8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d126      	bne.n	800262e <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a3c      	ldr	r2, [pc, #240]	@ (80026d8 <HAL_ADC_ConfigChannel+0x7cc>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d004      	beq.n	80025f4 <HAL_ADC_ConfigChannel+0x6e8>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a3b      	ldr	r2, [pc, #236]	@ (80026dc <HAL_ADC_ConfigChannel+0x7d0>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d15d      	bne.n	80026b0 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80025f8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80025fc:	4619      	mov	r1, r3
 80025fe:	4834      	ldr	r0, [pc, #208]	@ (80026d0 <HAL_ADC_ConfigChannel+0x7c4>)
 8002600:	f7ff f871 	bl	80016e6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002604:	4b36      	ldr	r3, [pc, #216]	@ (80026e0 <HAL_ADC_ConfigChannel+0x7d4>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	099b      	lsrs	r3, r3, #6
 800260a:	4a36      	ldr	r2, [pc, #216]	@ (80026e4 <HAL_ADC_ConfigChannel+0x7d8>)
 800260c:	fba2 2303 	umull	r2, r3, r2, r3
 8002610:	099b      	lsrs	r3, r3, #6
 8002612:	1c5a      	adds	r2, r3, #1
 8002614:	4613      	mov	r3, r2
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	4413      	add	r3, r2
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800261e:	e002      	b.n	8002626 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	3b01      	subs	r3, #1
 8002624:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d1f9      	bne.n	8002620 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800262c:	e040      	b.n	80026b0 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a2d      	ldr	r2, [pc, #180]	@ (80026e8 <HAL_ADC_ConfigChannel+0x7dc>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d118      	bne.n	800266a <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002638:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800263c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d112      	bne.n	800266a <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a23      	ldr	r2, [pc, #140]	@ (80026d8 <HAL_ADC_ConfigChannel+0x7cc>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d004      	beq.n	8002658 <HAL_ADC_ConfigChannel+0x74c>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a22      	ldr	r2, [pc, #136]	@ (80026dc <HAL_ADC_ConfigChannel+0x7d0>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d12d      	bne.n	80026b4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002658:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800265c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002660:	4619      	mov	r1, r3
 8002662:	481b      	ldr	r0, [pc, #108]	@ (80026d0 <HAL_ADC_ConfigChannel+0x7c4>)
 8002664:	f7ff f83f 	bl	80016e6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002668:	e024      	b.n	80026b4 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a1f      	ldr	r2, [pc, #124]	@ (80026ec <HAL_ADC_ConfigChannel+0x7e0>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d120      	bne.n	80026b6 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002674:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002678:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d11a      	bne.n	80026b6 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a14      	ldr	r2, [pc, #80]	@ (80026d8 <HAL_ADC_ConfigChannel+0x7cc>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d115      	bne.n	80026b6 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800268a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800268e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002692:	4619      	mov	r1, r3
 8002694:	480e      	ldr	r0, [pc, #56]	@ (80026d0 <HAL_ADC_ConfigChannel+0x7c4>)
 8002696:	f7ff f826 	bl	80016e6 <LL_ADC_SetCommonPathInternalCh>
 800269a:	e00c      	b.n	80026b6 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026a0:	f043 0220 	orr.w	r2, r3, #32
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80026ae:	e002      	b.n	80026b6 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80026b0:	bf00      	nop
 80026b2:	e000      	b.n	80026b6 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80026b4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2200      	movs	r2, #0
 80026ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80026be:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	37d8      	adds	r7, #216	@ 0xd8
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	80080000 	.word	0x80080000
 80026d0:	50040300 	.word	0x50040300
 80026d4:	c7520000 	.word	0xc7520000
 80026d8:	50040000 	.word	0x50040000
 80026dc:	50040200 	.word	0x50040200
 80026e0:	20000014 	.word	0x20000014
 80026e4:	053e2d63 	.word	0x053e2d63
 80026e8:	cb840000 	.word	0xcb840000
 80026ec:	80000001 	.word	0x80000001

080026f0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80026f8:	2300      	movs	r3, #0
 80026fa:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4618      	mov	r0, r3
 8002702:	f7ff f979 	bl	80019f8 <LL_ADC_IsEnabled>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d169      	bne.n	80027e0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	689a      	ldr	r2, [r3, #8]
 8002712:	4b36      	ldr	r3, [pc, #216]	@ (80027ec <ADC_Enable+0xfc>)
 8002714:	4013      	ands	r3, r2
 8002716:	2b00      	cmp	r3, #0
 8002718:	d00d      	beq.n	8002736 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800271e:	f043 0210 	orr.w	r2, r3, #16
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800272a:	f043 0201 	orr.w	r2, r3, #1
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e055      	b.n	80027e2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4618      	mov	r0, r3
 800273c:	f7ff f934 	bl	80019a8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002740:	482b      	ldr	r0, [pc, #172]	@ (80027f0 <ADC_Enable+0x100>)
 8002742:	f7fe ffe3 	bl	800170c <LL_ADC_GetCommonPathInternalCh>
 8002746:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002748:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800274c:	2b00      	cmp	r3, #0
 800274e:	d013      	beq.n	8002778 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002750:	4b28      	ldr	r3, [pc, #160]	@ (80027f4 <ADC_Enable+0x104>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	099b      	lsrs	r3, r3, #6
 8002756:	4a28      	ldr	r2, [pc, #160]	@ (80027f8 <ADC_Enable+0x108>)
 8002758:	fba2 2303 	umull	r2, r3, r2, r3
 800275c:	099b      	lsrs	r3, r3, #6
 800275e:	1c5a      	adds	r2, r3, #1
 8002760:	4613      	mov	r3, r2
 8002762:	005b      	lsls	r3, r3, #1
 8002764:	4413      	add	r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800276a:	e002      	b.n	8002772 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	3b01      	subs	r3, #1
 8002770:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d1f9      	bne.n	800276c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002778:	f7fe ff72 	bl	8001660 <HAL_GetTick>
 800277c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800277e:	e028      	b.n	80027d2 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4618      	mov	r0, r3
 8002786:	f7ff f937 	bl	80019f8 <LL_ADC_IsEnabled>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d104      	bne.n	800279a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4618      	mov	r0, r3
 8002796:	f7ff f907 	bl	80019a8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800279a:	f7fe ff61 	bl	8001660 <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d914      	bls.n	80027d2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d00d      	beq.n	80027d2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027ba:	f043 0210 	orr.w	r2, r3, #16
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027c6:	f043 0201 	orr.w	r2, r3, #1
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e007      	b.n	80027e2 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0301 	and.w	r3, r3, #1
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d1cf      	bne.n	8002780 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3710      	adds	r7, #16
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	8000003f 	.word	0x8000003f
 80027f0:	50040300 	.word	0x50040300
 80027f4:	20000014 	.word	0x20000014
 80027f8:	053e2d63 	.word	0x053e2d63

080027fc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4618      	mov	r0, r3
 800280a:	f7ff f908 	bl	8001a1e <LL_ADC_IsDisableOngoing>
 800280e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4618      	mov	r0, r3
 8002816:	f7ff f8ef 	bl	80019f8 <LL_ADC_IsEnabled>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d047      	beq.n	80028b0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d144      	bne.n	80028b0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f003 030d 	and.w	r3, r3, #13
 8002830:	2b01      	cmp	r3, #1
 8002832:	d10c      	bne.n	800284e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4618      	mov	r0, r3
 800283a:	f7ff f8c9 	bl	80019d0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2203      	movs	r2, #3
 8002844:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002846:	f7fe ff0b 	bl	8001660 <HAL_GetTick>
 800284a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800284c:	e029      	b.n	80028a2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002852:	f043 0210 	orr.w	r2, r3, #16
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800285e:	f043 0201 	orr.w	r2, r3, #1
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e023      	b.n	80028b2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800286a:	f7fe fef9 	bl	8001660 <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d914      	bls.n	80028a2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	f003 0301 	and.w	r3, r3, #1
 8002882:	2b00      	cmp	r3, #0
 8002884:	d00d      	beq.n	80028a2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800288a:	f043 0210 	orr.w	r2, r3, #16
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002896:	f043 0201 	orr.w	r2, r3, #1
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e007      	b.n	80028b2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	f003 0301 	and.w	r3, r3, #1
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d1dc      	bne.n	800286a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3710      	adds	r7, #16
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}

080028ba <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80028ba:	b580      	push	{r7, lr}
 80028bc:	b084      	sub	sp, #16
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028c6:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028cc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d14b      	bne.n	800296c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028d8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0308 	and.w	r3, r3, #8
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d021      	beq.n	8002932 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7fe ff6d 	bl	80017d2 <LL_ADC_REG_IsTriggerSourceSWStart>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d032      	beq.n	8002964 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d12b      	bne.n	8002964 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002910:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800291c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d11f      	bne.n	8002964 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002928:	f043 0201 	orr.w	r2, r3, #1
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	655a      	str	r2, [r3, #84]	@ 0x54
 8002930:	e018      	b.n	8002964 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	f003 0302 	and.w	r3, r3, #2
 800293c:	2b00      	cmp	r3, #0
 800293e:	d111      	bne.n	8002964 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002944:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002950:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d105      	bne.n	8002964 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800295c:	f043 0201 	orr.w	r2, r3, #1
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002964:	68f8      	ldr	r0, [r7, #12]
 8002966:	f7ff fab3 	bl	8001ed0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800296a:	e00e      	b.n	800298a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002970:	f003 0310 	and.w	r3, r3, #16
 8002974:	2b00      	cmp	r3, #0
 8002976:	d003      	beq.n	8002980 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002978:	68f8      	ldr	r0, [r7, #12]
 800297a:	f7ff fabd 	bl	8001ef8 <HAL_ADC_ErrorCallback>
}
 800297e:	e004      	b.n	800298a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002984:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	4798      	blx	r3
}
 800298a:	bf00      	nop
 800298c:	3710      	adds	r7, #16
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002992:	b580      	push	{r7, lr}
 8002994:	b084      	sub	sp, #16
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800299e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80029a0:	68f8      	ldr	r0, [r7, #12]
 80029a2:	f7ff fa9f 	bl	8001ee4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80029a6:	bf00      	nop
 80029a8:	3710      	adds	r7, #16
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}

080029ae <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80029ae:	b580      	push	{r7, lr}
 80029b0:	b084      	sub	sp, #16
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029ba:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029c0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029cc:	f043 0204 	orr.w	r2, r3, #4
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80029d4:	68f8      	ldr	r0, [r7, #12]
 80029d6:	f7ff fa8f 	bl	8001ef8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80029da:	bf00      	nop
 80029dc:	3710      	adds	r7, #16
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <LL_ADC_GetCalibrationFactor>:
{
 80029e2:	b480      	push	{r7}
 80029e4:	b083      	sub	sp, #12
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
 80029ea:	6039      	str	r1, [r7, #0]
  return (uint32_t)(READ_BIT(ADCx->CALFACT,
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	4013      	ands	r3, r2
 80029f6:	f003 127f 	and.w	r2, r3, #8323199	@ 0x7f007f
                    >> ((SingleDiff & ADC_SINGLEDIFF_CALIB_F_BIT_D_MASK) >>
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	0b1b      	lsrs	r3, r3, #12
 80029fe:	f003 0310 	and.w	r3, r3, #16
  return (uint32_t)(READ_BIT(ADCx->CALFACT,
 8002a02:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	370c      	adds	r7, #12
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr

08002a12 <LL_ADC_IsEnabled>:
{
 8002a12:	b480      	push	{r7}
 8002a14:	b083      	sub	sp, #12
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d101      	bne.n	8002a2a <LL_ADC_IsEnabled+0x18>
 8002a26:	2301      	movs	r3, #1
 8002a28:	e000      	b.n	8002a2c <LL_ADC_IsEnabled+0x1a>
 8002a2a:	2300      	movs	r3, #0
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	370c      	adds	r7, #12
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr

08002a38 <LL_ADC_StartCalibration>:
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8002a4a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a4e:	683a      	ldr	r2, [r7, #0]
 8002a50:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002a54:	4313      	orrs	r3, r2
 8002a56:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	609a      	str	r2, [r3, #8]
}
 8002a5e:	bf00      	nop
 8002a60:	370c      	adds	r7, #12
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr

08002a6a <LL_ADC_IsCalibrationOnGoing>:
{
 8002a6a:	b480      	push	{r7}
 8002a6c:	b083      	sub	sp, #12
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002a7a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002a7e:	d101      	bne.n	8002a84 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002a80:	2301      	movs	r3, #1
 8002a82:	e000      	b.n	8002a86 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr

08002a92 <LL_ADC_REG_IsConversionOngoing>:
{
 8002a92:	b480      	push	{r7}
 8002a94:	b083      	sub	sp, #12
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f003 0304 	and.w	r3, r3, #4
 8002aa2:	2b04      	cmp	r3, #4
 8002aa4:	d101      	bne.n	8002aaa <LL_ADC_REG_IsConversionOngoing+0x18>
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e000      	b.n	8002aac <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002aaa:	2300      	movs	r3, #0
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d101      	bne.n	8002ad4 <HAL_ADCEx_Calibration_Start+0x1c>
 8002ad0:	2302      	movs	r3, #2
 8002ad2:	e04d      	b.n	8002b70 <HAL_ADCEx_Calibration_Start+0xb8>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f7ff fe8d 	bl	80027fc <ADC_Disable>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002ae6:	7bfb      	ldrb	r3, [r7, #15]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d136      	bne.n	8002b5a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002af0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002af4:	f023 0302 	bic.w	r3, r3, #2
 8002af8:	f043 0202 	orr.w	r2, r3, #2
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	6839      	ldr	r1, [r7, #0]
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7ff ff96 	bl	8002a38 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002b0c:	e014      	b.n	8002b38 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	3301      	adds	r3, #1
 8002b12:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 8002b1a:	d30d      	bcc.n	8002b38 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b20:	f023 0312 	bic.w	r3, r3, #18
 8002b24:	f043 0210 	orr.w	r2, r3, #16
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e01b      	b.n	8002b70 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7ff ff94 	bl	8002a6a <LL_ADC_IsCalibrationOnGoing>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d1e2      	bne.n	8002b0e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b4c:	f023 0303 	bic.w	r3, r3, #3
 8002b50:	f043 0201 	orr.w	r2, r3, #1
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	655a      	str	r2, [r3, #84]	@ 0x54
 8002b58:	e005      	b.n	8002b66 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b5e:	f043 0210 	orr.w	r2, r3, #16
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3710      	adds	r7, #16
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <HAL_ADCEx_Calibration_GetValue>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval Calibration value.
  */
uint32_t HAL_ADCEx_Calibration_GetValue(const ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Return the selected ADC calibration value */
  return LL_ADC_GetCalibrationFactor(hadc->Instance, SingleDiff);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	6839      	ldr	r1, [r7, #0]
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7ff ff2a 	bl	80029e2 <LL_ADC_GetCalibrationFactor>
 8002b8e:	4603      	mov	r3, r0
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3708      	adds	r7, #8
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002b98:	b590      	push	{r4, r7, lr}
 8002b9a:	b09f      	sub	sp, #124	@ 0x7c
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d101      	bne.n	8002bb6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002bb2:	2302      	movs	r3, #2
 8002bb4:	e093      	b.n	8002cde <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2201      	movs	r2, #1
 8002bba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a47      	ldr	r2, [pc, #284]	@ (8002ce8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d102      	bne.n	8002bd6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002bd0:	4b46      	ldr	r3, [pc, #280]	@ (8002cec <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002bd2:	60bb      	str	r3, [r7, #8]
 8002bd4:	e001      	b.n	8002bda <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d10b      	bne.n	8002bf8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002be4:	f043 0220 	orr.w	r2, r3, #32
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e072      	b.n	8002cde <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f7ff ff49 	bl	8002a92 <LL_ADC_REG_IsConversionOngoing>
 8002c00:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7ff ff43 	bl	8002a92 <LL_ADC_REG_IsConversionOngoing>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d154      	bne.n	8002cbc <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002c12:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d151      	bne.n	8002cbc <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002c18:	4b35      	ldr	r3, [pc, #212]	@ (8002cf0 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002c1a:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d02c      	beq.n	8002c7e <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002c24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	6859      	ldr	r1, [r3, #4]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002c36:	035b      	lsls	r3, r3, #13
 8002c38:	430b      	orrs	r3, r1
 8002c3a:	431a      	orrs	r2, r3
 8002c3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c3e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c40:	4829      	ldr	r0, [pc, #164]	@ (8002ce8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002c42:	f7ff fee6 	bl	8002a12 <LL_ADC_IsEnabled>
 8002c46:	4604      	mov	r4, r0
 8002c48:	4828      	ldr	r0, [pc, #160]	@ (8002cec <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002c4a:	f7ff fee2 	bl	8002a12 <LL_ADC_IsEnabled>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	431c      	orrs	r4, r3
 8002c52:	4828      	ldr	r0, [pc, #160]	@ (8002cf4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002c54:	f7ff fedd 	bl	8002a12 <LL_ADC_IsEnabled>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	4323      	orrs	r3, r4
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d137      	bne.n	8002cd0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002c60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002c68:	f023 030f 	bic.w	r3, r3, #15
 8002c6c:	683a      	ldr	r2, [r7, #0]
 8002c6e:	6811      	ldr	r1, [r2, #0]
 8002c70:	683a      	ldr	r2, [r7, #0]
 8002c72:	6892      	ldr	r2, [r2, #8]
 8002c74:	430a      	orrs	r2, r1
 8002c76:	431a      	orrs	r2, r3
 8002c78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c7a:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002c7c:	e028      	b.n	8002cd0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002c7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002c86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c88:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c8a:	4817      	ldr	r0, [pc, #92]	@ (8002ce8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002c8c:	f7ff fec1 	bl	8002a12 <LL_ADC_IsEnabled>
 8002c90:	4604      	mov	r4, r0
 8002c92:	4816      	ldr	r0, [pc, #88]	@ (8002cec <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002c94:	f7ff febd 	bl	8002a12 <LL_ADC_IsEnabled>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	431c      	orrs	r4, r3
 8002c9c:	4815      	ldr	r0, [pc, #84]	@ (8002cf4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002c9e:	f7ff feb8 	bl	8002a12 <LL_ADC_IsEnabled>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	4323      	orrs	r3, r4
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d112      	bne.n	8002cd0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002caa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002cb2:	f023 030f 	bic.w	r3, r3, #15
 8002cb6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002cb8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002cba:	e009      	b.n	8002cd0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cc0:	f043 0220 	orr.w	r2, r3, #32
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002cce:	e000      	b.n	8002cd2 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002cd0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002cda:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	377c      	adds	r7, #124	@ 0x7c
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd90      	pop	{r4, r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	50040000 	.word	0x50040000
 8002cec:	50040100 	.word	0x50040100
 8002cf0:	50040300 	.word	0x50040300
 8002cf4:	50040200 	.word	0x50040200

08002cf8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d101      	bne.n	8002d0a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e0ed      	b.n	8002ee6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d102      	bne.n	8002d1c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f7fe f9c6 	bl	80010a8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f042 0201 	orr.w	r2, r2, #1
 8002d2a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d2c:	f7fe fc98 	bl	8001660 <HAL_GetTick>
 8002d30:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002d32:	e012      	b.n	8002d5a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002d34:	f7fe fc94 	bl	8001660 <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	2b0a      	cmp	r3, #10
 8002d40:	d90b      	bls.n	8002d5a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d46:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2205      	movs	r2, #5
 8002d52:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e0c5      	b.n	8002ee6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f003 0301 	and.w	r3, r3, #1
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d0e5      	beq.n	8002d34 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f022 0202 	bic.w	r2, r2, #2
 8002d76:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d78:	f7fe fc72 	bl	8001660 <HAL_GetTick>
 8002d7c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002d7e:	e012      	b.n	8002da6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002d80:	f7fe fc6e 	bl	8001660 <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	2b0a      	cmp	r3, #10
 8002d8c:	d90b      	bls.n	8002da6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d92:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2205      	movs	r2, #5
 8002d9e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e09f      	b.n	8002ee6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f003 0302 	and.w	r3, r3, #2
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d1e5      	bne.n	8002d80 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	7e1b      	ldrb	r3, [r3, #24]
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d108      	bne.n	8002dce <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002dca:	601a      	str	r2, [r3, #0]
 8002dcc:	e007      	b.n	8002dde <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002ddc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	7e5b      	ldrb	r3, [r3, #25]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d108      	bne.n	8002df8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002df4:	601a      	str	r2, [r3, #0]
 8002df6:	e007      	b.n	8002e08 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e06:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	7e9b      	ldrb	r3, [r3, #26]
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d108      	bne.n	8002e22 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f042 0220 	orr.w	r2, r2, #32
 8002e1e:	601a      	str	r2, [r3, #0]
 8002e20:	e007      	b.n	8002e32 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f022 0220 	bic.w	r2, r2, #32
 8002e30:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	7edb      	ldrb	r3, [r3, #27]
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d108      	bne.n	8002e4c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f022 0210 	bic.w	r2, r2, #16
 8002e48:	601a      	str	r2, [r3, #0]
 8002e4a:	e007      	b.n	8002e5c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f042 0210 	orr.w	r2, r2, #16
 8002e5a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	7f1b      	ldrb	r3, [r3, #28]
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d108      	bne.n	8002e76 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f042 0208 	orr.w	r2, r2, #8
 8002e72:	601a      	str	r2, [r3, #0]
 8002e74:	e007      	b.n	8002e86 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f022 0208 	bic.w	r2, r2, #8
 8002e84:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	7f5b      	ldrb	r3, [r3, #29]
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d108      	bne.n	8002ea0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f042 0204 	orr.w	r2, r2, #4
 8002e9c:	601a      	str	r2, [r3, #0]
 8002e9e:	e007      	b.n	8002eb0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f022 0204 	bic.w	r2, r2, #4
 8002eae:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	689a      	ldr	r2, [r3, #8]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	431a      	orrs	r2, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	431a      	orrs	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	695b      	ldr	r3, [r3, #20]
 8002ec4:	ea42 0103 	orr.w	r1, r2, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	1e5a      	subs	r2, r3, #1
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3710      	adds	r7, #16
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}

08002eee <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002eee:	b480      	push	{r7}
 8002ef0:	b087      	sub	sp, #28
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
 8002ef6:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f04:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002f06:	7cfb      	ldrb	r3, [r7, #19]
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d003      	beq.n	8002f14 <HAL_CAN_ConfigFilter+0x26>
 8002f0c:	7cfb      	ldrb	r3, [r7, #19]
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	f040 80aa 	bne.w	8003068 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002f1a:	f043 0201 	orr.w	r2, r3, #1
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	695b      	ldr	r3, [r3, #20]
 8002f28:	f003 031f 	and.w	r3, r3, #31
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f32:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	43db      	mvns	r3, r3
 8002f3e:	401a      	ands	r2, r3
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	69db      	ldr	r3, [r3, #28]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d123      	bne.n	8002f96 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	43db      	mvns	r3, r3
 8002f58:	401a      	ands	r2, r3
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002f6c:	683a      	ldr	r2, [r7, #0]
 8002f6e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002f70:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	3248      	adds	r2, #72	@ 0x48
 8002f76:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002f8a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002f8c:	6979      	ldr	r1, [r7, #20]
 8002f8e:	3348      	adds	r3, #72	@ 0x48
 8002f90:	00db      	lsls	r3, r3, #3
 8002f92:	440b      	add	r3, r1
 8002f94:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	69db      	ldr	r3, [r3, #28]
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d122      	bne.n	8002fe4 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	431a      	orrs	r2, r3
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002fba:	683a      	ldr	r2, [r7, #0]
 8002fbc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002fbe:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	3248      	adds	r2, #72	@ 0x48
 8002fc4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002fd8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002fda:	6979      	ldr	r1, [r7, #20]
 8002fdc:	3348      	adds	r3, #72	@ 0x48
 8002fde:	00db      	lsls	r3, r3, #3
 8002fe0:	440b      	add	r3, r1
 8002fe2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	699b      	ldr	r3, [r3, #24]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d109      	bne.n	8003000 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	43db      	mvns	r3, r3
 8002ff6:	401a      	ands	r2, r3
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8002ffe:	e007      	b.n	8003010 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	431a      	orrs	r2, r3
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	691b      	ldr	r3, [r3, #16]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d109      	bne.n	800302c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	43db      	mvns	r3, r3
 8003022:	401a      	ands	r2, r3
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800302a:	e007      	b.n	800303c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	431a      	orrs	r2, r3
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	6a1b      	ldr	r3, [r3, #32]
 8003040:	2b01      	cmp	r3, #1
 8003042:	d107      	bne.n	8003054 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	431a      	orrs	r2, r3
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800305a:	f023 0201 	bic.w	r2, r3, #1
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8003064:	2300      	movs	r3, #0
 8003066:	e006      	b.n	8003076 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800306c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
  }
}
 8003076:	4618      	mov	r0, r3
 8003078:	371c      	adds	r7, #28
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr

08003082 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003082:	b580      	push	{r7, lr}
 8003084:	b084      	sub	sp, #16
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003090:	b2db      	uxtb	r3, r3
 8003092:	2b01      	cmp	r3, #1
 8003094:	d12e      	bne.n	80030f4 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2202      	movs	r2, #2
 800309a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f022 0201 	bic.w	r2, r2, #1
 80030ac:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80030ae:	f7fe fad7 	bl	8001660 <HAL_GetTick>
 80030b2:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80030b4:	e012      	b.n	80030dc <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80030b6:	f7fe fad3 	bl	8001660 <HAL_GetTick>
 80030ba:	4602      	mov	r2, r0
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	2b0a      	cmp	r3, #10
 80030c2:	d90b      	bls.n	80030dc <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c8:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2205      	movs	r2, #5
 80030d4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e012      	b.n	8003102 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f003 0301 	and.w	r3, r3, #1
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d1e5      	bne.n	80030b6 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80030f0:	2300      	movs	r3, #0
 80030f2:	e006      	b.n	8003102 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030f8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
  }
}
 8003102:	4618      	mov	r0, r3
 8003104:	3710      	adds	r7, #16
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}

0800310a <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800310a:	b480      	push	{r7}
 800310c:	b087      	sub	sp, #28
 800310e:	af00      	add	r7, sp, #0
 8003110:	60f8      	str	r0, [r7, #12]
 8003112:	60b9      	str	r1, [r7, #8]
 8003114:	607a      	str	r2, [r7, #4]
 8003116:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800311e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003120:	7dfb      	ldrb	r3, [r7, #23]
 8003122:	2b01      	cmp	r3, #1
 8003124:	d003      	beq.n	800312e <HAL_CAN_GetRxMessage+0x24>
 8003126:	7dfb      	ldrb	r3, [r7, #23]
 8003128:	2b02      	cmp	r3, #2
 800312a:	f040 8103 	bne.w	8003334 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d10e      	bne.n	8003152 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	f003 0303 	and.w	r3, r3, #3
 800313e:	2b00      	cmp	r3, #0
 8003140:	d116      	bne.n	8003170 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003146:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e0f7      	b.n	8003342 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	691b      	ldr	r3, [r3, #16]
 8003158:	f003 0303 	and.w	r3, r3, #3
 800315c:	2b00      	cmp	r3, #0
 800315e:	d107      	bne.n	8003170 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003164:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e0e8      	b.n	8003342 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	331b      	adds	r3, #27
 8003178:	011b      	lsls	r3, r3, #4
 800317a:	4413      	add	r3, r2
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0204 	and.w	r2, r3, #4
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d10c      	bne.n	80031a8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	331b      	adds	r3, #27
 8003196:	011b      	lsls	r3, r3, #4
 8003198:	4413      	add	r3, r2
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	0d5b      	lsrs	r3, r3, #21
 800319e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	601a      	str	r2, [r3, #0]
 80031a6:	e00b      	b.n	80031c0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	331b      	adds	r3, #27
 80031b0:	011b      	lsls	r3, r3, #4
 80031b2:	4413      	add	r3, r2
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	08db      	lsrs	r3, r3, #3
 80031b8:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	331b      	adds	r3, #27
 80031c8:	011b      	lsls	r3, r3, #4
 80031ca:	4413      	add	r3, r2
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0202 	and.w	r2, r3, #2
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	331b      	adds	r3, #27
 80031de:	011b      	lsls	r3, r3, #4
 80031e0:	4413      	add	r3, r2
 80031e2:	3304      	adds	r3, #4
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0308 	and.w	r3, r3, #8
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d003      	beq.n	80031f6 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2208      	movs	r2, #8
 80031f2:	611a      	str	r2, [r3, #16]
 80031f4:	e00b      	b.n	800320e <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	331b      	adds	r3, #27
 80031fe:	011b      	lsls	r3, r3, #4
 8003200:	4413      	add	r3, r2
 8003202:	3304      	adds	r3, #4
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 020f 	and.w	r2, r3, #15
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	331b      	adds	r3, #27
 8003216:	011b      	lsls	r3, r3, #4
 8003218:	4413      	add	r3, r2
 800321a:	3304      	adds	r3, #4
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	0a1b      	lsrs	r3, r3, #8
 8003220:	b2da      	uxtb	r2, r3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	331b      	adds	r3, #27
 800322e:	011b      	lsls	r3, r3, #4
 8003230:	4413      	add	r3, r2
 8003232:	3304      	adds	r3, #4
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	0c1b      	lsrs	r3, r3, #16
 8003238:	b29a      	uxth	r2, r3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	011b      	lsls	r3, r3, #4
 8003246:	4413      	add	r3, r2
 8003248:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	b2da      	uxtb	r2, r3
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	011b      	lsls	r3, r3, #4
 800325c:	4413      	add	r3, r2
 800325e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	0a1a      	lsrs	r2, r3, #8
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	3301      	adds	r3, #1
 800326a:	b2d2      	uxtb	r2, r2
 800326c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	011b      	lsls	r3, r3, #4
 8003276:	4413      	add	r3, r2
 8003278:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	0c1a      	lsrs	r2, r3, #16
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	3302      	adds	r3, #2
 8003284:	b2d2      	uxtb	r2, r2
 8003286:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	011b      	lsls	r3, r3, #4
 8003290:	4413      	add	r3, r2
 8003292:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	0e1a      	lsrs	r2, r3, #24
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	3303      	adds	r3, #3
 800329e:	b2d2      	uxtb	r2, r2
 80032a0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	011b      	lsls	r3, r3, #4
 80032aa:	4413      	add	r3, r2
 80032ac:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	3304      	adds	r3, #4
 80032b6:	b2d2      	uxtb	r2, r2
 80032b8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	011b      	lsls	r3, r3, #4
 80032c2:	4413      	add	r3, r2
 80032c4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	0a1a      	lsrs	r2, r3, #8
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	3305      	adds	r3, #5
 80032d0:	b2d2      	uxtb	r2, r2
 80032d2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	011b      	lsls	r3, r3, #4
 80032dc:	4413      	add	r3, r2
 80032de:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	0c1a      	lsrs	r2, r3, #16
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	3306      	adds	r3, #6
 80032ea:	b2d2      	uxtb	r2, r2
 80032ec:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	011b      	lsls	r3, r3, #4
 80032f6:	4413      	add	r3, r2
 80032f8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	0e1a      	lsrs	r2, r3, #24
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	3307      	adds	r3, #7
 8003304:	b2d2      	uxtb	r2, r2
 8003306:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d108      	bne.n	8003320 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	68da      	ldr	r2, [r3, #12]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f042 0220 	orr.w	r2, r2, #32
 800331c:	60da      	str	r2, [r3, #12]
 800331e:	e007      	b.n	8003330 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	691a      	ldr	r2, [r3, #16]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f042 0220 	orr.w	r2, r2, #32
 800332e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003330:	2300      	movs	r3, #0
 8003332:	e006      	b.n	8003342 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003338:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
  }
}
 8003342:	4618      	mov	r0, r3
 8003344:	371c      	adds	r7, #28
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr

0800334e <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 800334e:	b480      	push	{r7}
 8003350:	b085      	sub	sp, #20
 8003352:	af00      	add	r7, sp, #0
 8003354:	6078      	str	r0, [r7, #4]
 8003356:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8003358:	2300      	movs	r3, #0
 800335a:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003362:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003364:	7afb      	ldrb	r3, [r7, #11]
 8003366:	2b01      	cmp	r3, #1
 8003368:	d002      	beq.n	8003370 <HAL_CAN_GetRxFifoFillLevel+0x22>
 800336a:	7afb      	ldrb	r3, [r7, #11]
 800336c:	2b02      	cmp	r3, #2
 800336e:	d10f      	bne.n	8003390 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d106      	bne.n	8003384 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	f003 0303 	and.w	r3, r3, #3
 8003380:	60fb      	str	r3, [r7, #12]
 8003382:	e005      	b.n	8003390 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	f003 0303 	and.w	r3, r3, #3
 800338e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8003390:	68fb      	ldr	r3, [r7, #12]
}
 8003392:	4618      	mov	r0, r3
 8003394:	3714      	adds	r7, #20
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr

0800339e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800339e:	b480      	push	{r7}
 80033a0:	b085      	sub	sp, #20
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
 80033a6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033ae:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80033b0:	7bfb      	ldrb	r3, [r7, #15]
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d002      	beq.n	80033bc <HAL_CAN_ActivateNotification+0x1e>
 80033b6:	7bfb      	ldrb	r3, [r7, #15]
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	d109      	bne.n	80033d0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	6959      	ldr	r1, [r3, #20]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	683a      	ldr	r2, [r7, #0]
 80033c8:	430a      	orrs	r2, r1
 80033ca:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80033cc:	2300      	movs	r3, #0
 80033ce:	e006      	b.n	80033de <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
  }
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3714      	adds	r7, #20
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr

080033ea <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80033ea:	b580      	push	{r7, lr}
 80033ec:	b08a      	sub	sp, #40	@ 0x28
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80033f2:	2300      	movs	r3, #0
 80033f4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	695b      	ldr	r3, [r3, #20]
 80033fc:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	699b      	ldr	r3, [r3, #24]
 8003424:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003426:	6a3b      	ldr	r3, [r7, #32]
 8003428:	f003 0301 	and.w	r3, r3, #1
 800342c:	2b00      	cmp	r3, #0
 800342e:	d07c      	beq.n	800352a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	f003 0301 	and.w	r3, r3, #1
 8003436:	2b00      	cmp	r3, #0
 8003438:	d023      	beq.n	8003482 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2201      	movs	r2, #1
 8003440:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	f003 0302 	and.w	r3, r3, #2
 8003448:	2b00      	cmp	r3, #0
 800344a:	d003      	beq.n	8003454 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f000 f983 	bl	8003758 <HAL_CAN_TxMailbox0CompleteCallback>
 8003452:	e016      	b.n	8003482 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003454:	69bb      	ldr	r3, [r7, #24]
 8003456:	f003 0304 	and.w	r3, r3, #4
 800345a:	2b00      	cmp	r3, #0
 800345c:	d004      	beq.n	8003468 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800345e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003460:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003464:	627b      	str	r3, [r7, #36]	@ 0x24
 8003466:	e00c      	b.n	8003482 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	f003 0308 	and.w	r3, r3, #8
 800346e:	2b00      	cmp	r3, #0
 8003470:	d004      	beq.n	800347c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003474:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003478:	627b      	str	r3, [r7, #36]	@ 0x24
 800347a:	e002      	b.n	8003482 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f000 f989 	bl	8003794 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003488:	2b00      	cmp	r3, #0
 800348a:	d024      	beq.n	80034d6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003494:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800349c:	2b00      	cmp	r3, #0
 800349e:	d003      	beq.n	80034a8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f000 f963 	bl	800376c <HAL_CAN_TxMailbox1CompleteCallback>
 80034a6:	e016      	b.n	80034d6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d004      	beq.n	80034bc <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80034b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034b4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80034b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80034ba:	e00c      	b.n	80034d6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d004      	beq.n	80034d0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80034c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80034cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80034ce:	e002      	b.n	80034d6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f000 f969 	bl	80037a8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80034d6:	69bb      	ldr	r3, [r7, #24]
 80034d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d024      	beq.n	800352a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80034e8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d003      	beq.n	80034fc <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f000 f943 	bl	8003780 <HAL_CAN_TxMailbox2CompleteCallback>
 80034fa:	e016      	b.n	800352a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d004      	beq.n	8003510 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003508:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800350c:	627b      	str	r3, [r7, #36]	@ 0x24
 800350e:	e00c      	b.n	800352a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003510:	69bb      	ldr	r3, [r7, #24]
 8003512:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d004      	beq.n	8003524 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800351a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800351c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003520:	627b      	str	r3, [r7, #36]	@ 0x24
 8003522:	e002      	b.n	800352a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f000 f949 	bl	80037bc <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800352a:	6a3b      	ldr	r3, [r7, #32]
 800352c:	f003 0308 	and.w	r3, r3, #8
 8003530:	2b00      	cmp	r3, #0
 8003532:	d00c      	beq.n	800354e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	f003 0310 	and.w	r3, r3, #16
 800353a:	2b00      	cmp	r3, #0
 800353c:	d007      	beq.n	800354e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800353e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003540:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003544:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2210      	movs	r2, #16
 800354c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800354e:	6a3b      	ldr	r3, [r7, #32]
 8003550:	f003 0304 	and.w	r3, r3, #4
 8003554:	2b00      	cmp	r3, #0
 8003556:	d00b      	beq.n	8003570 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	f003 0308 	and.w	r3, r3, #8
 800355e:	2b00      	cmp	r3, #0
 8003560:	d006      	beq.n	8003570 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2208      	movs	r2, #8
 8003568:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f000 f930 	bl	80037d0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003570:	6a3b      	ldr	r3, [r7, #32]
 8003572:	f003 0302 	and.w	r3, r3, #2
 8003576:	2b00      	cmp	r3, #0
 8003578:	d009      	beq.n	800358e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	f003 0303 	and.w	r3, r3, #3
 8003584:	2b00      	cmp	r3, #0
 8003586:	d002      	beq.n	800358e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f7fd f81d 	bl	80005c8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800358e:	6a3b      	ldr	r3, [r7, #32]
 8003590:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003594:	2b00      	cmp	r3, #0
 8003596:	d00c      	beq.n	80035b2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	f003 0310 	and.w	r3, r3, #16
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d007      	beq.n	80035b2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80035a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035a4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80035a8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	2210      	movs	r2, #16
 80035b0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80035b2:	6a3b      	ldr	r3, [r7, #32]
 80035b4:	f003 0320 	and.w	r3, r3, #32
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d00b      	beq.n	80035d4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	f003 0308 	and.w	r3, r3, #8
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d006      	beq.n	80035d4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	2208      	movs	r2, #8
 80035cc:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 f908 	bl	80037e4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80035d4:	6a3b      	ldr	r3, [r7, #32]
 80035d6:	f003 0310 	and.w	r3, r3, #16
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d009      	beq.n	80035f2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	691b      	ldr	r3, [r3, #16]
 80035e4:	f003 0303 	and.w	r3, r3, #3
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d002      	beq.n	80035f2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f7fd f837 	bl	8000660 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80035f2:	6a3b      	ldr	r3, [r7, #32]
 80035f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d00b      	beq.n	8003614 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80035fc:	69fb      	ldr	r3, [r7, #28]
 80035fe:	f003 0310 	and.w	r3, r3, #16
 8003602:	2b00      	cmp	r3, #0
 8003604:	d006      	beq.n	8003614 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	2210      	movs	r2, #16
 800360c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 f8f2 	bl	80037f8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003614:	6a3b      	ldr	r3, [r7, #32]
 8003616:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d00b      	beq.n	8003636 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	f003 0308 	and.w	r3, r3, #8
 8003624:	2b00      	cmp	r3, #0
 8003626:	d006      	beq.n	8003636 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2208      	movs	r2, #8
 800362e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f000 f8eb 	bl	800380c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003636:	6a3b      	ldr	r3, [r7, #32]
 8003638:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800363c:	2b00      	cmp	r3, #0
 800363e:	d07b      	beq.n	8003738 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	f003 0304 	and.w	r3, r3, #4
 8003646:	2b00      	cmp	r3, #0
 8003648:	d072      	beq.n	8003730 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800364a:	6a3b      	ldr	r3, [r7, #32]
 800364c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003650:	2b00      	cmp	r3, #0
 8003652:	d008      	beq.n	8003666 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800365a:	2b00      	cmp	r3, #0
 800365c:	d003      	beq.n	8003666 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800365e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003660:	f043 0301 	orr.w	r3, r3, #1
 8003664:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003666:	6a3b      	ldr	r3, [r7, #32]
 8003668:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800366c:	2b00      	cmp	r3, #0
 800366e:	d008      	beq.n	8003682 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003676:	2b00      	cmp	r3, #0
 8003678:	d003      	beq.n	8003682 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800367a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800367c:	f043 0302 	orr.w	r3, r3, #2
 8003680:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003682:	6a3b      	ldr	r3, [r7, #32]
 8003684:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003688:	2b00      	cmp	r3, #0
 800368a:	d008      	beq.n	800369e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003692:	2b00      	cmp	r3, #0
 8003694:	d003      	beq.n	800369e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003698:	f043 0304 	orr.w	r3, r3, #4
 800369c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800369e:	6a3b      	ldr	r3, [r7, #32]
 80036a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d043      	beq.n	8003730 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d03e      	beq.n	8003730 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80036b8:	2b60      	cmp	r3, #96	@ 0x60
 80036ba:	d02b      	beq.n	8003714 <HAL_CAN_IRQHandler+0x32a>
 80036bc:	2b60      	cmp	r3, #96	@ 0x60
 80036be:	d82e      	bhi.n	800371e <HAL_CAN_IRQHandler+0x334>
 80036c0:	2b50      	cmp	r3, #80	@ 0x50
 80036c2:	d022      	beq.n	800370a <HAL_CAN_IRQHandler+0x320>
 80036c4:	2b50      	cmp	r3, #80	@ 0x50
 80036c6:	d82a      	bhi.n	800371e <HAL_CAN_IRQHandler+0x334>
 80036c8:	2b40      	cmp	r3, #64	@ 0x40
 80036ca:	d019      	beq.n	8003700 <HAL_CAN_IRQHandler+0x316>
 80036cc:	2b40      	cmp	r3, #64	@ 0x40
 80036ce:	d826      	bhi.n	800371e <HAL_CAN_IRQHandler+0x334>
 80036d0:	2b30      	cmp	r3, #48	@ 0x30
 80036d2:	d010      	beq.n	80036f6 <HAL_CAN_IRQHandler+0x30c>
 80036d4:	2b30      	cmp	r3, #48	@ 0x30
 80036d6:	d822      	bhi.n	800371e <HAL_CAN_IRQHandler+0x334>
 80036d8:	2b10      	cmp	r3, #16
 80036da:	d002      	beq.n	80036e2 <HAL_CAN_IRQHandler+0x2f8>
 80036dc:	2b20      	cmp	r3, #32
 80036de:	d005      	beq.n	80036ec <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80036e0:	e01d      	b.n	800371e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80036e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e4:	f043 0308 	orr.w	r3, r3, #8
 80036e8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80036ea:	e019      	b.n	8003720 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80036ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ee:	f043 0310 	orr.w	r3, r3, #16
 80036f2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80036f4:	e014      	b.n	8003720 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80036f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036f8:	f043 0320 	orr.w	r3, r3, #32
 80036fc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80036fe:	e00f      	b.n	8003720 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003702:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003706:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003708:	e00a      	b.n	8003720 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800370a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800370c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003710:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003712:	e005      	b.n	8003720 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003716:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800371a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800371c:	e000      	b.n	8003720 <HAL_CAN_IRQHandler+0x336>
            break;
 800371e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	699a      	ldr	r2, [r3, #24]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800372e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2204      	movs	r2, #4
 8003736:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800373a:	2b00      	cmp	r3, #0
 800373c:	d008      	beq.n	8003750 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003744:	431a      	orrs	r2, r3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f000 f868 	bl	8003820 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003750:	bf00      	nop
 8003752:	3728      	adds	r7, #40	@ 0x28
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}

08003758 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003760:	bf00      	nop
 8003762:	370c      	adds	r7, #12
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003774:	bf00      	nop
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003788:	bf00      	nop
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800379c:	bf00      	nop
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80037b0:	bf00      	nop
 80037b2:	370c      	adds	r7, #12
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80037c4:	bf00      	nop
 80037c6:	370c      	adds	r7, #12
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80037d8:	bf00      	nop
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80037ec:	bf00      	nop
 80037ee:	370c      	adds	r7, #12
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003800:	bf00      	nop
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003814:	bf00      	nop
 8003816:	370c      	adds	r7, #12
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr

08003820 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003828:	bf00      	nop
 800382a:	370c      	adds	r7, #12
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr

08003834 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003834:	b480      	push	{r7}
 8003836:	b085      	sub	sp, #20
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f003 0307 	and.w	r3, r3, #7
 8003842:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003844:	4b0c      	ldr	r3, [pc, #48]	@ (8003878 <__NVIC_SetPriorityGrouping+0x44>)
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800384a:	68ba      	ldr	r2, [r7, #8]
 800384c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003850:	4013      	ands	r3, r2
 8003852:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800385c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003860:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003864:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003866:	4a04      	ldr	r2, [pc, #16]	@ (8003878 <__NVIC_SetPriorityGrouping+0x44>)
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	60d3      	str	r3, [r2, #12]
}
 800386c:	bf00      	nop
 800386e:	3714      	adds	r7, #20
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr
 8003878:	e000ed00 	.word	0xe000ed00

0800387c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800387c:	b480      	push	{r7}
 800387e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003880:	4b04      	ldr	r3, [pc, #16]	@ (8003894 <__NVIC_GetPriorityGrouping+0x18>)
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	0a1b      	lsrs	r3, r3, #8
 8003886:	f003 0307 	and.w	r3, r3, #7
}
 800388a:	4618      	mov	r0, r3
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr
 8003894:	e000ed00 	.word	0xe000ed00

08003898 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	4603      	mov	r3, r0
 80038a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	db0b      	blt.n	80038c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038aa:	79fb      	ldrb	r3, [r7, #7]
 80038ac:	f003 021f 	and.w	r2, r3, #31
 80038b0:	4907      	ldr	r1, [pc, #28]	@ (80038d0 <__NVIC_EnableIRQ+0x38>)
 80038b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038b6:	095b      	lsrs	r3, r3, #5
 80038b8:	2001      	movs	r0, #1
 80038ba:	fa00 f202 	lsl.w	r2, r0, r2
 80038be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80038c2:	bf00      	nop
 80038c4:	370c      	adds	r7, #12
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr
 80038ce:	bf00      	nop
 80038d0:	e000e100 	.word	0xe000e100

080038d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	4603      	mov	r3, r0
 80038dc:	6039      	str	r1, [r7, #0]
 80038de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	db0a      	blt.n	80038fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	b2da      	uxtb	r2, r3
 80038ec:	490c      	ldr	r1, [pc, #48]	@ (8003920 <__NVIC_SetPriority+0x4c>)
 80038ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038f2:	0112      	lsls	r2, r2, #4
 80038f4:	b2d2      	uxtb	r2, r2
 80038f6:	440b      	add	r3, r1
 80038f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038fc:	e00a      	b.n	8003914 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	b2da      	uxtb	r2, r3
 8003902:	4908      	ldr	r1, [pc, #32]	@ (8003924 <__NVIC_SetPriority+0x50>)
 8003904:	79fb      	ldrb	r3, [r7, #7]
 8003906:	f003 030f 	and.w	r3, r3, #15
 800390a:	3b04      	subs	r3, #4
 800390c:	0112      	lsls	r2, r2, #4
 800390e:	b2d2      	uxtb	r2, r2
 8003910:	440b      	add	r3, r1
 8003912:	761a      	strb	r2, [r3, #24]
}
 8003914:	bf00      	nop
 8003916:	370c      	adds	r7, #12
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr
 8003920:	e000e100 	.word	0xe000e100
 8003924:	e000ed00 	.word	0xe000ed00

08003928 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003928:	b480      	push	{r7}
 800392a:	b089      	sub	sp, #36	@ 0x24
 800392c:	af00      	add	r7, sp, #0
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f003 0307 	and.w	r3, r3, #7
 800393a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	f1c3 0307 	rsb	r3, r3, #7
 8003942:	2b04      	cmp	r3, #4
 8003944:	bf28      	it	cs
 8003946:	2304      	movcs	r3, #4
 8003948:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	3304      	adds	r3, #4
 800394e:	2b06      	cmp	r3, #6
 8003950:	d902      	bls.n	8003958 <NVIC_EncodePriority+0x30>
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	3b03      	subs	r3, #3
 8003956:	e000      	b.n	800395a <NVIC_EncodePriority+0x32>
 8003958:	2300      	movs	r3, #0
 800395a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800395c:	f04f 32ff 	mov.w	r2, #4294967295
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	fa02 f303 	lsl.w	r3, r2, r3
 8003966:	43da      	mvns	r2, r3
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	401a      	ands	r2, r3
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003970:	f04f 31ff 	mov.w	r1, #4294967295
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	fa01 f303 	lsl.w	r3, r1, r3
 800397a:	43d9      	mvns	r1, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003980:	4313      	orrs	r3, r2
         );
}
 8003982:	4618      	mov	r0, r3
 8003984:	3724      	adds	r7, #36	@ 0x24
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr
	...

08003990 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	3b01      	subs	r3, #1
 800399c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80039a0:	d301      	bcc.n	80039a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039a2:	2301      	movs	r3, #1
 80039a4:	e00f      	b.n	80039c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039a6:	4a0a      	ldr	r2, [pc, #40]	@ (80039d0 <SysTick_Config+0x40>)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	3b01      	subs	r3, #1
 80039ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039ae:	210f      	movs	r1, #15
 80039b0:	f04f 30ff 	mov.w	r0, #4294967295
 80039b4:	f7ff ff8e 	bl	80038d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039b8:	4b05      	ldr	r3, [pc, #20]	@ (80039d0 <SysTick_Config+0x40>)
 80039ba:	2200      	movs	r2, #0
 80039bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039be:	4b04      	ldr	r3, [pc, #16]	@ (80039d0 <SysTick_Config+0x40>)
 80039c0:	2207      	movs	r2, #7
 80039c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3708      	adds	r7, #8
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	e000e010 	.word	0xe000e010

080039d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b082      	sub	sp, #8
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f7ff ff29 	bl	8003834 <__NVIC_SetPriorityGrouping>
}
 80039e2:	bf00      	nop
 80039e4:	3708      	adds	r7, #8
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}

080039ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039ea:	b580      	push	{r7, lr}
 80039ec:	b086      	sub	sp, #24
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	4603      	mov	r3, r0
 80039f2:	60b9      	str	r1, [r7, #8]
 80039f4:	607a      	str	r2, [r7, #4]
 80039f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80039f8:	2300      	movs	r3, #0
 80039fa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80039fc:	f7ff ff3e 	bl	800387c <__NVIC_GetPriorityGrouping>
 8003a00:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	68b9      	ldr	r1, [r7, #8]
 8003a06:	6978      	ldr	r0, [r7, #20]
 8003a08:	f7ff ff8e 	bl	8003928 <NVIC_EncodePriority>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a12:	4611      	mov	r1, r2
 8003a14:	4618      	mov	r0, r3
 8003a16:	f7ff ff5d 	bl	80038d4 <__NVIC_SetPriority>
}
 8003a1a:	bf00      	nop
 8003a1c:	3718      	adds	r7, #24
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}

08003a22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a22:	b580      	push	{r7, lr}
 8003a24:	b082      	sub	sp, #8
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	4603      	mov	r3, r0
 8003a2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a30:	4618      	mov	r0, r3
 8003a32:	f7ff ff31 	bl	8003898 <__NVIC_EnableIRQ>
}
 8003a36:	bf00      	nop
 8003a38:	3708      	adds	r7, #8
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}

08003a3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a3e:	b580      	push	{r7, lr}
 8003a40:	b082      	sub	sp, #8
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f7ff ffa2 	bl	8003990 <SysTick_Config>
 8003a4c:	4603      	mov	r3, r0
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3708      	adds	r7, #8
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}

08003a56 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003a56:	b580      	push	{r7, lr}
 8003a58:	b082      	sub	sp, #8
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d101      	bne.n	8003a68 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e014      	b.n	8003a92 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	791b      	ldrb	r3, [r3, #4]
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d105      	bne.n	8003a7e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f7fd fb8b 	bl	8001194 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2202      	movs	r2, #2
 8003a82:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3708      	adds	r7, #8
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
	...

08003a9c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b086      	sub	sp, #24
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	60f8      	str	r0, [r7, #12]
 8003aa4:	60b9      	str	r1, [r7, #8]
 8003aa6:	607a      	str	r2, [r7, #4]
 8003aa8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	795b      	ldrb	r3, [r3, #5]
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d101      	bne.n	8003aba <HAL_DAC_Start_DMA+0x1e>
 8003ab6:	2302      	movs	r3, #2
 8003ab8:	e0ab      	b.n	8003c12 <HAL_DAC_Start_DMA+0x176>
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2201      	movs	r2, #1
 8003abe:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2202      	movs	r2, #2
 8003ac4:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d12f      	bne.n	8003b2c <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	4a52      	ldr	r2, [pc, #328]	@ (8003c1c <HAL_DAC_Start_DMA+0x180>)
 8003ad2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	4a51      	ldr	r2, [pc, #324]	@ (8003c20 <HAL_DAC_Start_DMA+0x184>)
 8003ada:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	4a50      	ldr	r2, [pc, #320]	@ (8003c24 <HAL_DAC_Start_DMA+0x188>)
 8003ae2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003af2:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8003af4:	6a3b      	ldr	r3, [r7, #32]
 8003af6:	2b08      	cmp	r3, #8
 8003af8:	d013      	beq.n	8003b22 <HAL_DAC_Start_DMA+0x86>
 8003afa:	6a3b      	ldr	r3, [r7, #32]
 8003afc:	2b08      	cmp	r3, #8
 8003afe:	d845      	bhi.n	8003b8c <HAL_DAC_Start_DMA+0xf0>
 8003b00:	6a3b      	ldr	r3, [r7, #32]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d003      	beq.n	8003b0e <HAL_DAC_Start_DMA+0x72>
 8003b06:	6a3b      	ldr	r3, [r7, #32]
 8003b08:	2b04      	cmp	r3, #4
 8003b0a:	d005      	beq.n	8003b18 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8003b0c:	e03e      	b.n	8003b8c <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	3308      	adds	r3, #8
 8003b14:	613b      	str	r3, [r7, #16]
        break;
 8003b16:	e03c      	b.n	8003b92 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	330c      	adds	r3, #12
 8003b1e:	613b      	str	r3, [r7, #16]
        break;
 8003b20:	e037      	b.n	8003b92 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	3310      	adds	r3, #16
 8003b28:	613b      	str	r3, [r7, #16]
        break;
 8003b2a:	e032      	b.n	8003b92 <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	4a3d      	ldr	r2, [pc, #244]	@ (8003c28 <HAL_DAC_Start_DMA+0x18c>)
 8003b32:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	4a3c      	ldr	r2, [pc, #240]	@ (8003c2c <HAL_DAC_Start_DMA+0x190>)
 8003b3a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	4a3b      	ldr	r2, [pc, #236]	@ (8003c30 <HAL_DAC_Start_DMA+0x194>)
 8003b42:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003b52:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8003b54:	6a3b      	ldr	r3, [r7, #32]
 8003b56:	2b08      	cmp	r3, #8
 8003b58:	d013      	beq.n	8003b82 <HAL_DAC_Start_DMA+0xe6>
 8003b5a:	6a3b      	ldr	r3, [r7, #32]
 8003b5c:	2b08      	cmp	r3, #8
 8003b5e:	d817      	bhi.n	8003b90 <HAL_DAC_Start_DMA+0xf4>
 8003b60:	6a3b      	ldr	r3, [r7, #32]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d003      	beq.n	8003b6e <HAL_DAC_Start_DMA+0xd2>
 8003b66:	6a3b      	ldr	r3, [r7, #32]
 8003b68:	2b04      	cmp	r3, #4
 8003b6a:	d005      	beq.n	8003b78 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8003b6c:	e010      	b.n	8003b90 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	3314      	adds	r3, #20
 8003b74:	613b      	str	r3, [r7, #16]
        break;
 8003b76:	e00c      	b.n	8003b92 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	3318      	adds	r3, #24
 8003b7e:	613b      	str	r3, [r7, #16]
        break;
 8003b80:	e007      	b.n	8003b92 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	331c      	adds	r3, #28
 8003b88:	613b      	str	r3, [r7, #16]
        break;
 8003b8a:	e002      	b.n	8003b92 <HAL_DAC_Start_DMA+0xf6>
        break;
 8003b8c:	bf00      	nop
 8003b8e:	e000      	b.n	8003b92 <HAL_DAC_Start_DMA+0xf6>
        break;
 8003b90:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d111      	bne.n	8003bbc <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003ba6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6898      	ldr	r0, [r3, #8]
 8003bac:	6879      	ldr	r1, [r7, #4]
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	693a      	ldr	r2, [r7, #16]
 8003bb2:	f000 fb49 	bl	8004248 <HAL_DMA_Start_IT>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	75fb      	strb	r3, [r7, #23]
 8003bba:	e010      	b.n	8003bde <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8003bca:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	68d8      	ldr	r0, [r3, #12]
 8003bd0:	6879      	ldr	r1, [r7, #4]
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	693a      	ldr	r2, [r7, #16]
 8003bd6:	f000 fb37 	bl	8004248 <HAL_DMA_Start_IT>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2200      	movs	r2, #0
 8003be2:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8003be4:	7dfb      	ldrb	r3, [r7, #23]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d10c      	bne.n	8003c04 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	6819      	ldr	r1, [r3, #0]
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	f003 0310 	and.w	r3, r3, #16
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	409a      	lsls	r2, r3
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	430a      	orrs	r2, r1
 8003c00:	601a      	str	r2, [r3, #0]
 8003c02:	e005      	b.n	8003c10 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	691b      	ldr	r3, [r3, #16]
 8003c08:	f043 0204 	orr.w	r2, r3, #4
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8003c10:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3718      	adds	r7, #24
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	08003fb1 	.word	0x08003fb1
 8003c20:	08003fd3 	.word	0x08003fd3
 8003c24:	08003fef 	.word	0x08003fef
 8003c28:	0800406d 	.word	0x0800406d
 8003c2c:	0800408f 	.word	0x0800408f
 8003c30:	080040ab 	.word	0x080040ab

08003c34 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b082      	sub	sp, #8
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c4a:	d120      	bne.n	8003c8e <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c5a:	d118      	bne.n	8003c8e <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2204      	movs	r2, #4
 8003c60:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	f043 0201 	orr.w	r2, r3, #1
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003c76:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003c86:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f000 f84b 	bl	8003d24 <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003c98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c9c:	d120      	bne.n	8003ce0 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ca4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003ca8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003cac:	d118      	bne.n	8003ce0 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2204      	movs	r2, #4
 8003cb2:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	691b      	ldr	r3, [r3, #16]
 8003cb8:	f043 0202 	orr.w	r2, r3, #2
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8003cc8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8003cd8:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f000 f9bc 	bl	8004058 <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 8003ce0:	bf00      	nop
 8003ce2:	3708      	adds	r7, #8
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8003cf0:	bf00      	nop
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8003d04:	bf00      	nop
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8003d18:	bf00      	nop
 8003d1a:	370c      	adds	r7, #12
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8003d2c:	bf00      	nop
 8003d2e:	370c      	adds	r7, #12
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <HAL_DAC_GetValue>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval The selected DAC channel data output value.
  */
uint32_t HAL_DAC_GetValue(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(Channel == DAC_CHANNEL_1)
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d103      	bne.n	8003d50 <HAL_DAC_GetValue+0x18>
  {
    return hdac->Instance->DOR1;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d4e:	e002      	b.n	8003d56 <HAL_DAC_GetValue+0x1e>
  }
  else
  {
    return hdac->Instance->DOR2;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	370c      	adds	r7, #12
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr

08003d62 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003d62:	b580      	push	{r7, lr}
 8003d64:	b088      	sub	sp, #32
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	60f8      	str	r0, [r7, #12]
 8003d6a:	60b9      	str	r1, [r7, #8]
 8003d6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	795b      	ldrb	r3, [r3, #5]
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d101      	bne.n	8003d7e <HAL_DAC_ConfigChannel+0x1c>
 8003d7a:	2302      	movs	r3, #2
 8003d7c:	e114      	b.n	8003fa8 <HAL_DAC_ConfigChannel+0x246>
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2201      	movs	r2, #1
 8003d82:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2202      	movs	r2, #2
 8003d88:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	2b04      	cmp	r3, #4
 8003d90:	f040 8081 	bne.w	8003e96 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003d94:	f7fd fc64 	bl	8001660 <HAL_GetTick>
 8003d98:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d140      	bne.n	8003e22 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003da0:	e018      	b.n	8003dd4 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003da2:	f7fd fc5d 	bl	8001660 <HAL_GetTick>
 8003da6:	4602      	mov	r2, r0
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d911      	bls.n	8003dd4 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003db6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d00a      	beq.n	8003dd4 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	691b      	ldr	r3, [r3, #16]
 8003dc2:	f043 0208 	orr.w	r2, r3, #8
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2203      	movs	r2, #3
 8003dce:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e0e9      	b.n	8003fa8 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dda:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d1df      	bne.n	8003da2 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8003de2:	2001      	movs	r0, #1
 8003de4:	f7fd fc48 	bl	8001678 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	68ba      	ldr	r2, [r7, #8]
 8003dee:	6992      	ldr	r2, [r2, #24]
 8003df0:	641a      	str	r2, [r3, #64]	@ 0x40
 8003df2:	e023      	b.n	8003e3c <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003df4:	f7fd fc34 	bl	8001660 <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d90f      	bls.n	8003e22 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	da0a      	bge.n	8003e22 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	691b      	ldr	r3, [r3, #16]
 8003e10:	f043 0208 	orr.w	r2, r3, #8
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2203      	movs	r2, #3
 8003e1c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e0c2      	b.n	8003fa8 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	dbe3      	blt.n	8003df4 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8003e2c:	2001      	movs	r0, #1
 8003e2e:	f7fd fc23 	bl	8001678 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68ba      	ldr	r2, [r7, #8]
 8003e38:	6992      	ldr	r2, [r2, #24]
 8003e3a:	645a      	str	r2, [r3, #68]	@ 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f003 0310 	and.w	r3, r3, #16
 8003e48:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8003e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e50:	43db      	mvns	r3, r3
 8003e52:	ea02 0103 	and.w	r1, r2, r3
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	69da      	ldr	r2, [r3, #28]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f003 0310 	and.w	r3, r3, #16
 8003e60:	409a      	lsls	r2, r3
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	430a      	orrs	r2, r1
 8003e68:	649a      	str	r2, [r3, #72]	@ 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f003 0310 	and.w	r3, r3, #16
 8003e76:	21ff      	movs	r1, #255	@ 0xff
 8003e78:	fa01 f303 	lsl.w	r3, r1, r3
 8003e7c:	43db      	mvns	r3, r3
 8003e7e:	ea02 0103 	and.w	r1, r2, r3
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	6a1a      	ldr	r2, [r3, #32]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f003 0310 	and.w	r3, r3, #16
 8003e8c:	409a      	lsls	r2, r3
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	430a      	orrs	r2, r1
 8003e94:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d11d      	bne.n	8003eda <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ea4:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f003 0310 	and.w	r3, r3, #16
 8003eac:	221f      	movs	r2, #31
 8003eae:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb2:	43db      	mvns	r3, r3
 8003eb4:	69ba      	ldr	r2, [r7, #24]
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	695b      	ldr	r3, [r3, #20]
 8003ebe:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f003 0310 	and.w	r3, r3, #16
 8003ec6:	697a      	ldr	r2, [r7, #20]
 8003ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ecc:	69ba      	ldr	r2, [r7, #24]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	69ba      	ldr	r2, [r7, #24]
 8003ed8:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ee0:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f003 0310 	and.w	r3, r3, #16
 8003ee8:	2207      	movs	r2, #7
 8003eea:	fa02 f303 	lsl.w	r3, r2, r3
 8003eee:	43db      	mvns	r3, r3
 8003ef0:	69ba      	ldr	r2, [r7, #24]
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	431a      	orrs	r2, r3
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f003 0310 	and.w	r3, r3, #16
 8003f0e:	697a      	ldr	r2, [r7, #20]
 8003f10:	fa02 f303 	lsl.w	r3, r2, r3
 8003f14:	69ba      	ldr	r2, [r7, #24]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	69ba      	ldr	r2, [r7, #24]
 8003f20:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	6819      	ldr	r1, [r3, #0]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f003 0310 	and.w	r3, r3, #16
 8003f2e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003f32:	fa02 f303 	lsl.w	r3, r2, r3
 8003f36:	43da      	mvns	r2, r3
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	400a      	ands	r2, r1
 8003f3e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f003 0310 	and.w	r3, r3, #16
 8003f4e:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8003f52:	fa02 f303 	lsl.w	r3, r2, r3
 8003f56:	43db      	mvns	r3, r3
 8003f58:	69ba      	ldr	r2, [r7, #24]
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f003 0310 	and.w	r3, r3, #16
 8003f6a:	697a      	ldr	r2, [r7, #20]
 8003f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f70:	69ba      	ldr	r2, [r7, #24]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	69ba      	ldr	r2, [r7, #24]
 8003f7c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	6819      	ldr	r1, [r3, #0]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f003 0310 	and.w	r3, r3, #16
 8003f8a:	22c0      	movs	r2, #192	@ 0xc0
 8003f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f90:	43da      	mvns	r2, r3
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	400a      	ands	r2, r1
 8003f98:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003fa6:	2300      	movs	r3, #0
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3720      	adds	r7, #32
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fbc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8003fbe:	68f8      	ldr	r0, [r7, #12]
 8003fc0:	f7ff fe92 	bl	8003ce8 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	711a      	strb	r2, [r3, #4]
}
 8003fca:	bf00      	nop
 8003fcc:	3710      	adds	r7, #16
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}

08003fd2 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003fd2:	b580      	push	{r7, lr}
 8003fd4:	b084      	sub	sp, #16
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fde:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8003fe0:	68f8      	ldr	r0, [r7, #12]
 8003fe2:	f7ff fe8b 	bl	8003cfc <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003fe6:	bf00      	nop
 8003fe8:	3710      	adds	r7, #16
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}

08003fee <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8003fee:	b580      	push	{r7, lr}
 8003ff0:	b084      	sub	sp, #16
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ffa:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	691b      	ldr	r3, [r3, #16]
 8004000:	f043 0204 	orr.w	r2, r3, #4
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8004008:	68f8      	ldr	r0, [r7, #12]
 800400a:	f7ff fe81 	bl	8003d10 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2201      	movs	r2, #1
 8004012:	711a      	strb	r2, [r3, #4]
}
 8004014:	bf00      	nop
 8004016:	3710      	adds	r7, #16
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}

0800401c <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800401c:	b480      	push	{r7}
 800401e:	b083      	sub	sp, #12
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8004024:	bf00      	nop
 8004026:	370c      	adds	r7, #12
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr

08004030 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8004038:	bf00      	nop
 800403a:	370c      	adds	r7, #12
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr

08004044 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800404c:	bf00      	nop
 800404e:	370c      	adds	r7, #12
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004058:	b480      	push	{r7}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8004060:	bf00      	nop
 8004062:	370c      	adds	r7, #12
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr

0800406c <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004078:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800407a:	68f8      	ldr	r0, [r7, #12]
 800407c:	f7ff ffce 	bl	800401c <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2201      	movs	r2, #1
 8004084:	711a      	strb	r2, [r3, #4]
}
 8004086:	bf00      	nop
 8004088:	3710      	adds	r7, #16
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}

0800408e <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800408e:	b580      	push	{r7, lr}
 8004090:	b084      	sub	sp, #16
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800409a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800409c:	68f8      	ldr	r0, [r7, #12]
 800409e:	f7ff ffc7 	bl	8004030 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80040a2:	bf00      	nop
 80040a4:	3710      	adds	r7, #16
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}

080040aa <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80040aa:	b580      	push	{r7, lr}
 80040ac:	b084      	sub	sp, #16
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040b6:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	f043 0204 	orr.w	r2, r3, #4
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80040c4:	68f8      	ldr	r0, [r7, #12]
 80040c6:	f7ff ffbd 	bl	8004044 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2201      	movs	r2, #1
 80040ce:	711a      	strb	r2, [r3, #4]
}
 80040d0:	bf00      	nop
 80040d2:	3710      	adds	r7, #16
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}

080040d8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80040d8:	b480      	push	{r7}
 80040da:	b085      	sub	sp, #20
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d101      	bne.n	80040ea <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e098      	b.n	800421c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	461a      	mov	r2, r3
 80040f0:	4b4d      	ldr	r3, [pc, #308]	@ (8004228 <HAL_DMA_Init+0x150>)
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d80f      	bhi.n	8004116 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	461a      	mov	r2, r3
 80040fc:	4b4b      	ldr	r3, [pc, #300]	@ (800422c <HAL_DMA_Init+0x154>)
 80040fe:	4413      	add	r3, r2
 8004100:	4a4b      	ldr	r2, [pc, #300]	@ (8004230 <HAL_DMA_Init+0x158>)
 8004102:	fba2 2303 	umull	r2, r3, r2, r3
 8004106:	091b      	lsrs	r3, r3, #4
 8004108:	009a      	lsls	r2, r3, #2
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4a48      	ldr	r2, [pc, #288]	@ (8004234 <HAL_DMA_Init+0x15c>)
 8004112:	641a      	str	r2, [r3, #64]	@ 0x40
 8004114:	e00e      	b.n	8004134 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	461a      	mov	r2, r3
 800411c:	4b46      	ldr	r3, [pc, #280]	@ (8004238 <HAL_DMA_Init+0x160>)
 800411e:	4413      	add	r3, r2
 8004120:	4a43      	ldr	r2, [pc, #268]	@ (8004230 <HAL_DMA_Init+0x158>)
 8004122:	fba2 2303 	umull	r2, r3, r2, r3
 8004126:	091b      	lsrs	r3, r3, #4
 8004128:	009a      	lsls	r2, r3, #2
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a42      	ldr	r2, [pc, #264]	@ (800423c <HAL_DMA_Init+0x164>)
 8004132:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2202      	movs	r2, #2
 8004138:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800414a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800414e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004158:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004164:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	699b      	ldr	r3, [r3, #24]
 800416a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004170:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a1b      	ldr	r3, [r3, #32]
 8004176:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004178:	68fa      	ldr	r2, [r7, #12]
 800417a:	4313      	orrs	r3, r2
 800417c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	68fa      	ldr	r2, [r7, #12]
 8004184:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800418e:	d039      	beq.n	8004204 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004194:	4a27      	ldr	r2, [pc, #156]	@ (8004234 <HAL_DMA_Init+0x15c>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d11a      	bne.n	80041d0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800419a:	4b29      	ldr	r3, [pc, #164]	@ (8004240 <HAL_DMA_Init+0x168>)
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041a2:	f003 031c 	and.w	r3, r3, #28
 80041a6:	210f      	movs	r1, #15
 80041a8:	fa01 f303 	lsl.w	r3, r1, r3
 80041ac:	43db      	mvns	r3, r3
 80041ae:	4924      	ldr	r1, [pc, #144]	@ (8004240 <HAL_DMA_Init+0x168>)
 80041b0:	4013      	ands	r3, r2
 80041b2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80041b4:	4b22      	ldr	r3, [pc, #136]	@ (8004240 <HAL_DMA_Init+0x168>)
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6859      	ldr	r1, [r3, #4]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041c0:	f003 031c 	and.w	r3, r3, #28
 80041c4:	fa01 f303 	lsl.w	r3, r1, r3
 80041c8:	491d      	ldr	r1, [pc, #116]	@ (8004240 <HAL_DMA_Init+0x168>)
 80041ca:	4313      	orrs	r3, r2
 80041cc:	600b      	str	r3, [r1, #0]
 80041ce:	e019      	b.n	8004204 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80041d0:	4b1c      	ldr	r3, [pc, #112]	@ (8004244 <HAL_DMA_Init+0x16c>)
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041d8:	f003 031c 	and.w	r3, r3, #28
 80041dc:	210f      	movs	r1, #15
 80041de:	fa01 f303 	lsl.w	r3, r1, r3
 80041e2:	43db      	mvns	r3, r3
 80041e4:	4917      	ldr	r1, [pc, #92]	@ (8004244 <HAL_DMA_Init+0x16c>)
 80041e6:	4013      	ands	r3, r2
 80041e8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80041ea:	4b16      	ldr	r3, [pc, #88]	@ (8004244 <HAL_DMA_Init+0x16c>)
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6859      	ldr	r1, [r3, #4]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041f6:	f003 031c 	and.w	r3, r3, #28
 80041fa:	fa01 f303 	lsl.w	r3, r1, r3
 80041fe:	4911      	ldr	r1, [pc, #68]	@ (8004244 <HAL_DMA_Init+0x16c>)
 8004200:	4313      	orrs	r3, r2
 8004202:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2201      	movs	r2, #1
 800420e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800421a:	2300      	movs	r3, #0
}
 800421c:	4618      	mov	r0, r3
 800421e:	3714      	adds	r7, #20
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr
 8004228:	40020407 	.word	0x40020407
 800422c:	bffdfff8 	.word	0xbffdfff8
 8004230:	cccccccd 	.word	0xcccccccd
 8004234:	40020000 	.word	0x40020000
 8004238:	bffdfbf8 	.word	0xbffdfbf8
 800423c:	40020400 	.word	0x40020400
 8004240:	400200a8 	.word	0x400200a8
 8004244:	400204a8 	.word	0x400204a8

08004248 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b086      	sub	sp, #24
 800424c:	af00      	add	r7, sp, #0
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	60b9      	str	r1, [r7, #8]
 8004252:	607a      	str	r2, [r7, #4]
 8004254:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004256:	2300      	movs	r3, #0
 8004258:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004260:	2b01      	cmp	r3, #1
 8004262:	d101      	bne.n	8004268 <HAL_DMA_Start_IT+0x20>
 8004264:	2302      	movs	r3, #2
 8004266:	e04b      	b.n	8004300 <HAL_DMA_Start_IT+0xb8>
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004276:	b2db      	uxtb	r3, r3
 8004278:	2b01      	cmp	r3, #1
 800427a:	d13a      	bne.n	80042f2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2202      	movs	r2, #2
 8004280:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2200      	movs	r2, #0
 8004288:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f022 0201 	bic.w	r2, r2, #1
 8004298:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	68b9      	ldr	r1, [r7, #8]
 80042a0:	68f8      	ldr	r0, [r7, #12]
 80042a2:	f000 f95f 	bl	8004564 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d008      	beq.n	80042c0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f042 020e 	orr.w	r2, r2, #14
 80042bc:	601a      	str	r2, [r3, #0]
 80042be:	e00f      	b.n	80042e0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f022 0204 	bic.w	r2, r2, #4
 80042ce:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f042 020a 	orr.w	r2, r2, #10
 80042de:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f042 0201 	orr.w	r2, r2, #1
 80042ee:	601a      	str	r2, [r3, #0]
 80042f0:	e005      	b.n	80042fe <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2200      	movs	r2, #0
 80042f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80042fa:	2302      	movs	r3, #2
 80042fc:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80042fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004300:	4618      	mov	r0, r3
 8004302:	3718      	adds	r7, #24
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004308:	b480      	push	{r7}
 800430a:	b085      	sub	sp, #20
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004310:	2300      	movs	r3, #0
 8004312:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800431a:	b2db      	uxtb	r3, r3
 800431c:	2b02      	cmp	r3, #2
 800431e:	d008      	beq.n	8004332 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2204      	movs	r2, #4
 8004324:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e022      	b.n	8004378 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f022 020e 	bic.w	r2, r2, #14
 8004340:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f022 0201 	bic.w	r2, r2, #1
 8004350:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004356:	f003 021c 	and.w	r2, r3, #28
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800435e:	2101      	movs	r1, #1
 8004360:	fa01 f202 	lsl.w	r2, r1, r2
 8004364:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2201      	movs	r2, #1
 800436a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8004376:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004378:	4618      	mov	r0, r3
 800437a:	3714      	adds	r7, #20
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr

08004384 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800438c:	2300      	movs	r3, #0
 800438e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004396:	b2db      	uxtb	r3, r3
 8004398:	2b02      	cmp	r3, #2
 800439a:	d005      	beq.n	80043a8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2204      	movs	r2, #4
 80043a0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	73fb      	strb	r3, [r7, #15]
 80043a6:	e029      	b.n	80043fc <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f022 020e 	bic.w	r2, r2, #14
 80043b6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f022 0201 	bic.w	r2, r2, #1
 80043c6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043cc:	f003 021c 	and.w	r2, r3, #28
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043d4:	2101      	movs	r1, #1
 80043d6:	fa01 f202 	lsl.w	r2, r1, r2
 80043da:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d003      	beq.n	80043fc <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	4798      	blx	r3
    }
  }
  return status;
 80043fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3710      	adds	r7, #16
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}

08004406 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004406:	b580      	push	{r7, lr}
 8004408:	b084      	sub	sp, #16
 800440a:	af00      	add	r7, sp, #0
 800440c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004422:	f003 031c 	and.w	r3, r3, #28
 8004426:	2204      	movs	r2, #4
 8004428:	409a      	lsls	r2, r3
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	4013      	ands	r3, r2
 800442e:	2b00      	cmp	r3, #0
 8004430:	d026      	beq.n	8004480 <HAL_DMA_IRQHandler+0x7a>
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	f003 0304 	and.w	r3, r3, #4
 8004438:	2b00      	cmp	r3, #0
 800443a:	d021      	beq.n	8004480 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0320 	and.w	r3, r3, #32
 8004446:	2b00      	cmp	r3, #0
 8004448:	d107      	bne.n	800445a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f022 0204 	bic.w	r2, r2, #4
 8004458:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800445e:	f003 021c 	and.w	r2, r3, #28
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004466:	2104      	movs	r1, #4
 8004468:	fa01 f202 	lsl.w	r2, r1, r2
 800446c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004472:	2b00      	cmp	r3, #0
 8004474:	d071      	beq.n	800455a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800447e:	e06c      	b.n	800455a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004484:	f003 031c 	and.w	r3, r3, #28
 8004488:	2202      	movs	r2, #2
 800448a:	409a      	lsls	r2, r3
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	4013      	ands	r3, r2
 8004490:	2b00      	cmp	r3, #0
 8004492:	d02e      	beq.n	80044f2 <HAL_DMA_IRQHandler+0xec>
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	f003 0302 	and.w	r3, r3, #2
 800449a:	2b00      	cmp	r3, #0
 800449c:	d029      	beq.n	80044f2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 0320 	and.w	r3, r3, #32
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d10b      	bne.n	80044c4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f022 020a 	bic.w	r2, r2, #10
 80044ba:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044c8:	f003 021c 	and.w	r2, r3, #28
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d0:	2102      	movs	r1, #2
 80044d2:	fa01 f202 	lsl.w	r2, r1, r2
 80044d6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d038      	beq.n	800455a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80044f0:	e033      	b.n	800455a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044f6:	f003 031c 	and.w	r3, r3, #28
 80044fa:	2208      	movs	r2, #8
 80044fc:	409a      	lsls	r2, r3
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	4013      	ands	r3, r2
 8004502:	2b00      	cmp	r3, #0
 8004504:	d02a      	beq.n	800455c <HAL_DMA_IRQHandler+0x156>
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	f003 0308 	and.w	r3, r3, #8
 800450c:	2b00      	cmp	r3, #0
 800450e:	d025      	beq.n	800455c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f022 020e 	bic.w	r2, r2, #14
 800451e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004524:	f003 021c 	and.w	r2, r3, #28
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800452c:	2101      	movs	r1, #1
 800452e:	fa01 f202 	lsl.w	r2, r1, r2
 8004532:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2201      	movs	r2, #1
 800453e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800454e:	2b00      	cmp	r3, #0
 8004550:	d004      	beq.n	800455c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800455a:	bf00      	nop
 800455c:	bf00      	nop
}
 800455e:	3710      	adds	r7, #16
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}

08004564 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004564:	b480      	push	{r7}
 8004566:	b085      	sub	sp, #20
 8004568:	af00      	add	r7, sp, #0
 800456a:	60f8      	str	r0, [r7, #12]
 800456c:	60b9      	str	r1, [r7, #8]
 800456e:	607a      	str	r2, [r7, #4]
 8004570:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004576:	f003 021c 	and.w	r2, r3, #28
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800457e:	2101      	movs	r1, #1
 8004580:	fa01 f202 	lsl.w	r2, r1, r2
 8004584:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	683a      	ldr	r2, [r7, #0]
 800458c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	2b10      	cmp	r3, #16
 8004594:	d108      	bne.n	80045a8 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	68ba      	ldr	r2, [r7, #8]
 80045a4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80045a6:	e007      	b.n	80045b8 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	68ba      	ldr	r2, [r7, #8]
 80045ae:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	60da      	str	r2, [r3, #12]
}
 80045b8:	bf00      	nop
 80045ba:	3714      	adds	r7, #20
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr

080045c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b087      	sub	sp, #28
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80045ce:	2300      	movs	r3, #0
 80045d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80045d2:	e17f      	b.n	80048d4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	2101      	movs	r1, #1
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	fa01 f303 	lsl.w	r3, r1, r3
 80045e0:	4013      	ands	r3, r2
 80045e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	f000 8171 	beq.w	80048ce <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	f003 0303 	and.w	r3, r3, #3
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d005      	beq.n	8004604 <HAL_GPIO_Init+0x40>
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	f003 0303 	and.w	r3, r3, #3
 8004600:	2b02      	cmp	r3, #2
 8004602:	d130      	bne.n	8004666 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	005b      	lsls	r3, r3, #1
 800460e:	2203      	movs	r2, #3
 8004610:	fa02 f303 	lsl.w	r3, r2, r3
 8004614:	43db      	mvns	r3, r3
 8004616:	693a      	ldr	r2, [r7, #16]
 8004618:	4013      	ands	r3, r2
 800461a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	68da      	ldr	r2, [r3, #12]
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	005b      	lsls	r3, r3, #1
 8004624:	fa02 f303 	lsl.w	r3, r2, r3
 8004628:	693a      	ldr	r2, [r7, #16]
 800462a:	4313      	orrs	r3, r2
 800462c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	693a      	ldr	r2, [r7, #16]
 8004632:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800463a:	2201      	movs	r2, #1
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	fa02 f303 	lsl.w	r3, r2, r3
 8004642:	43db      	mvns	r3, r3
 8004644:	693a      	ldr	r2, [r7, #16]
 8004646:	4013      	ands	r3, r2
 8004648:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	091b      	lsrs	r3, r3, #4
 8004650:	f003 0201 	and.w	r2, r3, #1
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	fa02 f303 	lsl.w	r3, r2, r3
 800465a:	693a      	ldr	r2, [r7, #16]
 800465c:	4313      	orrs	r3, r2
 800465e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	693a      	ldr	r2, [r7, #16]
 8004664:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	f003 0303 	and.w	r3, r3, #3
 800466e:	2b03      	cmp	r3, #3
 8004670:	d118      	bne.n	80046a4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004676:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004678:	2201      	movs	r2, #1
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	fa02 f303 	lsl.w	r3, r2, r3
 8004680:	43db      	mvns	r3, r3
 8004682:	693a      	ldr	r2, [r7, #16]
 8004684:	4013      	ands	r3, r2
 8004686:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	08db      	lsrs	r3, r3, #3
 800468e:	f003 0201 	and.w	r2, r3, #1
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	fa02 f303 	lsl.w	r3, r2, r3
 8004698:	693a      	ldr	r2, [r7, #16]
 800469a:	4313      	orrs	r3, r2
 800469c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	693a      	ldr	r2, [r7, #16]
 80046a2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	f003 0303 	and.w	r3, r3, #3
 80046ac:	2b03      	cmp	r3, #3
 80046ae:	d017      	beq.n	80046e0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	005b      	lsls	r3, r3, #1
 80046ba:	2203      	movs	r2, #3
 80046bc:	fa02 f303 	lsl.w	r3, r2, r3
 80046c0:	43db      	mvns	r3, r3
 80046c2:	693a      	ldr	r2, [r7, #16]
 80046c4:	4013      	ands	r3, r2
 80046c6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	689a      	ldr	r2, [r3, #8]
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	005b      	lsls	r3, r3, #1
 80046d0:	fa02 f303 	lsl.w	r3, r2, r3
 80046d4:	693a      	ldr	r2, [r7, #16]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	693a      	ldr	r2, [r7, #16]
 80046de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	f003 0303 	and.w	r3, r3, #3
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d123      	bne.n	8004734 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	08da      	lsrs	r2, r3, #3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	3208      	adds	r2, #8
 80046f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	f003 0307 	and.w	r3, r3, #7
 8004700:	009b      	lsls	r3, r3, #2
 8004702:	220f      	movs	r2, #15
 8004704:	fa02 f303 	lsl.w	r3, r2, r3
 8004708:	43db      	mvns	r3, r3
 800470a:	693a      	ldr	r2, [r7, #16]
 800470c:	4013      	ands	r3, r2
 800470e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	691a      	ldr	r2, [r3, #16]
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	f003 0307 	and.w	r3, r3, #7
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	fa02 f303 	lsl.w	r3, r2, r3
 8004720:	693a      	ldr	r2, [r7, #16]
 8004722:	4313      	orrs	r3, r2
 8004724:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	08da      	lsrs	r2, r3, #3
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	3208      	adds	r2, #8
 800472e:	6939      	ldr	r1, [r7, #16]
 8004730:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	005b      	lsls	r3, r3, #1
 800473e:	2203      	movs	r2, #3
 8004740:	fa02 f303 	lsl.w	r3, r2, r3
 8004744:	43db      	mvns	r3, r3
 8004746:	693a      	ldr	r2, [r7, #16]
 8004748:	4013      	ands	r3, r2
 800474a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	f003 0203 	and.w	r2, r3, #3
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	005b      	lsls	r3, r3, #1
 8004758:	fa02 f303 	lsl.w	r3, r2, r3
 800475c:	693a      	ldr	r2, [r7, #16]
 800475e:	4313      	orrs	r3, r2
 8004760:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	693a      	ldr	r2, [r7, #16]
 8004766:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004770:	2b00      	cmp	r3, #0
 8004772:	f000 80ac 	beq.w	80048ce <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004776:	4b5f      	ldr	r3, [pc, #380]	@ (80048f4 <HAL_GPIO_Init+0x330>)
 8004778:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800477a:	4a5e      	ldr	r2, [pc, #376]	@ (80048f4 <HAL_GPIO_Init+0x330>)
 800477c:	f043 0301 	orr.w	r3, r3, #1
 8004780:	6613      	str	r3, [r2, #96]	@ 0x60
 8004782:	4b5c      	ldr	r3, [pc, #368]	@ (80048f4 <HAL_GPIO_Init+0x330>)
 8004784:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004786:	f003 0301 	and.w	r3, r3, #1
 800478a:	60bb      	str	r3, [r7, #8]
 800478c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800478e:	4a5a      	ldr	r2, [pc, #360]	@ (80048f8 <HAL_GPIO_Init+0x334>)
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	089b      	lsrs	r3, r3, #2
 8004794:	3302      	adds	r3, #2
 8004796:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800479a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	f003 0303 	and.w	r3, r3, #3
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	220f      	movs	r2, #15
 80047a6:	fa02 f303 	lsl.w	r3, r2, r3
 80047aa:	43db      	mvns	r3, r3
 80047ac:	693a      	ldr	r2, [r7, #16]
 80047ae:	4013      	ands	r3, r2
 80047b0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80047b8:	d025      	beq.n	8004806 <HAL_GPIO_Init+0x242>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4a4f      	ldr	r2, [pc, #316]	@ (80048fc <HAL_GPIO_Init+0x338>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d01f      	beq.n	8004802 <HAL_GPIO_Init+0x23e>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4a4e      	ldr	r2, [pc, #312]	@ (8004900 <HAL_GPIO_Init+0x33c>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d019      	beq.n	80047fe <HAL_GPIO_Init+0x23a>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a4d      	ldr	r2, [pc, #308]	@ (8004904 <HAL_GPIO_Init+0x340>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d013      	beq.n	80047fa <HAL_GPIO_Init+0x236>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4a4c      	ldr	r2, [pc, #304]	@ (8004908 <HAL_GPIO_Init+0x344>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d00d      	beq.n	80047f6 <HAL_GPIO_Init+0x232>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4a4b      	ldr	r2, [pc, #300]	@ (800490c <HAL_GPIO_Init+0x348>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d007      	beq.n	80047f2 <HAL_GPIO_Init+0x22e>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a4a      	ldr	r2, [pc, #296]	@ (8004910 <HAL_GPIO_Init+0x34c>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d101      	bne.n	80047ee <HAL_GPIO_Init+0x22a>
 80047ea:	2306      	movs	r3, #6
 80047ec:	e00c      	b.n	8004808 <HAL_GPIO_Init+0x244>
 80047ee:	2307      	movs	r3, #7
 80047f0:	e00a      	b.n	8004808 <HAL_GPIO_Init+0x244>
 80047f2:	2305      	movs	r3, #5
 80047f4:	e008      	b.n	8004808 <HAL_GPIO_Init+0x244>
 80047f6:	2304      	movs	r3, #4
 80047f8:	e006      	b.n	8004808 <HAL_GPIO_Init+0x244>
 80047fa:	2303      	movs	r3, #3
 80047fc:	e004      	b.n	8004808 <HAL_GPIO_Init+0x244>
 80047fe:	2302      	movs	r3, #2
 8004800:	e002      	b.n	8004808 <HAL_GPIO_Init+0x244>
 8004802:	2301      	movs	r3, #1
 8004804:	e000      	b.n	8004808 <HAL_GPIO_Init+0x244>
 8004806:	2300      	movs	r3, #0
 8004808:	697a      	ldr	r2, [r7, #20]
 800480a:	f002 0203 	and.w	r2, r2, #3
 800480e:	0092      	lsls	r2, r2, #2
 8004810:	4093      	lsls	r3, r2
 8004812:	693a      	ldr	r2, [r7, #16]
 8004814:	4313      	orrs	r3, r2
 8004816:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004818:	4937      	ldr	r1, [pc, #220]	@ (80048f8 <HAL_GPIO_Init+0x334>)
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	089b      	lsrs	r3, r3, #2
 800481e:	3302      	adds	r3, #2
 8004820:	693a      	ldr	r2, [r7, #16]
 8004822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004826:	4b3b      	ldr	r3, [pc, #236]	@ (8004914 <HAL_GPIO_Init+0x350>)
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	43db      	mvns	r3, r3
 8004830:	693a      	ldr	r2, [r7, #16]
 8004832:	4013      	ands	r3, r2
 8004834:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800483e:	2b00      	cmp	r3, #0
 8004840:	d003      	beq.n	800484a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004842:	693a      	ldr	r2, [r7, #16]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	4313      	orrs	r3, r2
 8004848:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800484a:	4a32      	ldr	r2, [pc, #200]	@ (8004914 <HAL_GPIO_Init+0x350>)
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004850:	4b30      	ldr	r3, [pc, #192]	@ (8004914 <HAL_GPIO_Init+0x350>)
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	43db      	mvns	r3, r3
 800485a:	693a      	ldr	r2, [r7, #16]
 800485c:	4013      	ands	r3, r2
 800485e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004868:	2b00      	cmp	r3, #0
 800486a:	d003      	beq.n	8004874 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800486c:	693a      	ldr	r2, [r7, #16]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	4313      	orrs	r3, r2
 8004872:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004874:	4a27      	ldr	r2, [pc, #156]	@ (8004914 <HAL_GPIO_Init+0x350>)
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800487a:	4b26      	ldr	r3, [pc, #152]	@ (8004914 <HAL_GPIO_Init+0x350>)
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	43db      	mvns	r3, r3
 8004884:	693a      	ldr	r2, [r7, #16]
 8004886:	4013      	ands	r3, r2
 8004888:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004892:	2b00      	cmp	r3, #0
 8004894:	d003      	beq.n	800489e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004896:	693a      	ldr	r2, [r7, #16]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	4313      	orrs	r3, r2
 800489c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800489e:	4a1d      	ldr	r2, [pc, #116]	@ (8004914 <HAL_GPIO_Init+0x350>)
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80048a4:	4b1b      	ldr	r3, [pc, #108]	@ (8004914 <HAL_GPIO_Init+0x350>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	43db      	mvns	r3, r3
 80048ae:	693a      	ldr	r2, [r7, #16]
 80048b0:	4013      	ands	r3, r2
 80048b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d003      	beq.n	80048c8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80048c0:	693a      	ldr	r2, [r7, #16]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	4313      	orrs	r3, r2
 80048c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80048c8:	4a12      	ldr	r2, [pc, #72]	@ (8004914 <HAL_GPIO_Init+0x350>)
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	3301      	adds	r3, #1
 80048d2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	fa22 f303 	lsr.w	r3, r2, r3
 80048de:	2b00      	cmp	r3, #0
 80048e0:	f47f ae78 	bne.w	80045d4 <HAL_GPIO_Init+0x10>
  }
}
 80048e4:	bf00      	nop
 80048e6:	bf00      	nop
 80048e8:	371c      	adds	r7, #28
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr
 80048f2:	bf00      	nop
 80048f4:	40021000 	.word	0x40021000
 80048f8:	40010000 	.word	0x40010000
 80048fc:	48000400 	.word	0x48000400
 8004900:	48000800 	.word	0x48000800
 8004904:	48000c00 	.word	0x48000c00
 8004908:	48001000 	.word	0x48001000
 800490c:	48001400 	.word	0x48001400
 8004910:	48001800 	.word	0x48001800
 8004914:	40010400 	.word	0x40010400

08004918 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004918:	b480      	push	{r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	460b      	mov	r3, r1
 8004922:	807b      	strh	r3, [r7, #2]
 8004924:	4613      	mov	r3, r2
 8004926:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004928:	787b      	ldrb	r3, [r7, #1]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d003      	beq.n	8004936 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800492e:	887a      	ldrh	r2, [r7, #2]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004934:	e002      	b.n	800493c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004936:	887a      	ldrh	r2, [r7, #2]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800493c:	bf00      	nop
 800493e:	370c      	adds	r7, #12
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr

08004948 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004948:	b480      	push	{r7}
 800494a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800494c:	4b04      	ldr	r3, [pc, #16]	@ (8004960 <HAL_PWREx_GetVoltageRange+0x18>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004954:	4618      	mov	r0, r3
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr
 800495e:	bf00      	nop
 8004960:	40007000 	.word	0x40007000

08004964 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004964:	b480      	push	{r7}
 8004966:	b085      	sub	sp, #20
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004972:	d130      	bne.n	80049d6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004974:	4b23      	ldr	r3, [pc, #140]	@ (8004a04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800497c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004980:	d038      	beq.n	80049f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004982:	4b20      	ldr	r3, [pc, #128]	@ (8004a04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800498a:	4a1e      	ldr	r2, [pc, #120]	@ (8004a04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800498c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004990:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004992:	4b1d      	ldr	r3, [pc, #116]	@ (8004a08 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	2232      	movs	r2, #50	@ 0x32
 8004998:	fb02 f303 	mul.w	r3, r2, r3
 800499c:	4a1b      	ldr	r2, [pc, #108]	@ (8004a0c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800499e:	fba2 2303 	umull	r2, r3, r2, r3
 80049a2:	0c9b      	lsrs	r3, r3, #18
 80049a4:	3301      	adds	r3, #1
 80049a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80049a8:	e002      	b.n	80049b0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	3b01      	subs	r3, #1
 80049ae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80049b0:	4b14      	ldr	r3, [pc, #80]	@ (8004a04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80049b2:	695b      	ldr	r3, [r3, #20]
 80049b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049bc:	d102      	bne.n	80049c4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d1f2      	bne.n	80049aa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80049c4:	4b0f      	ldr	r3, [pc, #60]	@ (8004a04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80049c6:	695b      	ldr	r3, [r3, #20]
 80049c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049d0:	d110      	bne.n	80049f4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80049d2:	2303      	movs	r3, #3
 80049d4:	e00f      	b.n	80049f6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80049d6:	4b0b      	ldr	r3, [pc, #44]	@ (8004a04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80049de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049e2:	d007      	beq.n	80049f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80049e4:	4b07      	ldr	r3, [pc, #28]	@ (8004a04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80049ec:	4a05      	ldr	r2, [pc, #20]	@ (8004a04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80049ee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80049f2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80049f4:	2300      	movs	r3, #0
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3714      	adds	r7, #20
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr
 8004a02:	bf00      	nop
 8004a04:	40007000 	.word	0x40007000
 8004a08:	20000014 	.word	0x20000014
 8004a0c:	431bde83 	.word	0x431bde83

08004a10 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b088      	sub	sp, #32
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d101      	bne.n	8004a22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e3ca      	b.n	80051b8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a22:	4b97      	ldr	r3, [pc, #604]	@ (8004c80 <HAL_RCC_OscConfig+0x270>)
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	f003 030c 	and.w	r3, r3, #12
 8004a2a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a2c:	4b94      	ldr	r3, [pc, #592]	@ (8004c80 <HAL_RCC_OscConfig+0x270>)
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	f003 0303 	and.w	r3, r3, #3
 8004a34:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 0310 	and.w	r3, r3, #16
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	f000 80e4 	beq.w	8004c0c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004a44:	69bb      	ldr	r3, [r7, #24]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d007      	beq.n	8004a5a <HAL_RCC_OscConfig+0x4a>
 8004a4a:	69bb      	ldr	r3, [r7, #24]
 8004a4c:	2b0c      	cmp	r3, #12
 8004a4e:	f040 808b 	bne.w	8004b68 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	f040 8087 	bne.w	8004b68 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004a5a:	4b89      	ldr	r3, [pc, #548]	@ (8004c80 <HAL_RCC_OscConfig+0x270>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 0302 	and.w	r3, r3, #2
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d005      	beq.n	8004a72 <HAL_RCC_OscConfig+0x62>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	699b      	ldr	r3, [r3, #24]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d101      	bne.n	8004a72 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e3a2      	b.n	80051b8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a1a      	ldr	r2, [r3, #32]
 8004a76:	4b82      	ldr	r3, [pc, #520]	@ (8004c80 <HAL_RCC_OscConfig+0x270>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 0308 	and.w	r3, r3, #8
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d004      	beq.n	8004a8c <HAL_RCC_OscConfig+0x7c>
 8004a82:	4b7f      	ldr	r3, [pc, #508]	@ (8004c80 <HAL_RCC_OscConfig+0x270>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a8a:	e005      	b.n	8004a98 <HAL_RCC_OscConfig+0x88>
 8004a8c:	4b7c      	ldr	r3, [pc, #496]	@ (8004c80 <HAL_RCC_OscConfig+0x270>)
 8004a8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a92:	091b      	lsrs	r3, r3, #4
 8004a94:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d223      	bcs.n	8004ae4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6a1b      	ldr	r3, [r3, #32]
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f000 fd55 	bl	8005550 <RCC_SetFlashLatencyFromMSIRange>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d001      	beq.n	8004ab0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e383      	b.n	80051b8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ab0:	4b73      	ldr	r3, [pc, #460]	@ (8004c80 <HAL_RCC_OscConfig+0x270>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a72      	ldr	r2, [pc, #456]	@ (8004c80 <HAL_RCC_OscConfig+0x270>)
 8004ab6:	f043 0308 	orr.w	r3, r3, #8
 8004aba:	6013      	str	r3, [r2, #0]
 8004abc:	4b70      	ldr	r3, [pc, #448]	@ (8004c80 <HAL_RCC_OscConfig+0x270>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6a1b      	ldr	r3, [r3, #32]
 8004ac8:	496d      	ldr	r1, [pc, #436]	@ (8004c80 <HAL_RCC_OscConfig+0x270>)
 8004aca:	4313      	orrs	r3, r2
 8004acc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ace:	4b6c      	ldr	r3, [pc, #432]	@ (8004c80 <HAL_RCC_OscConfig+0x270>)
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	69db      	ldr	r3, [r3, #28]
 8004ada:	021b      	lsls	r3, r3, #8
 8004adc:	4968      	ldr	r1, [pc, #416]	@ (8004c80 <HAL_RCC_OscConfig+0x270>)
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	604b      	str	r3, [r1, #4]
 8004ae2:	e025      	b.n	8004b30 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ae4:	4b66      	ldr	r3, [pc, #408]	@ (8004c80 <HAL_RCC_OscConfig+0x270>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a65      	ldr	r2, [pc, #404]	@ (8004c80 <HAL_RCC_OscConfig+0x270>)
 8004aea:	f043 0308 	orr.w	r3, r3, #8
 8004aee:	6013      	str	r3, [r2, #0]
 8004af0:	4b63      	ldr	r3, [pc, #396]	@ (8004c80 <HAL_RCC_OscConfig+0x270>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6a1b      	ldr	r3, [r3, #32]
 8004afc:	4960      	ldr	r1, [pc, #384]	@ (8004c80 <HAL_RCC_OscConfig+0x270>)
 8004afe:	4313      	orrs	r3, r2
 8004b00:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b02:	4b5f      	ldr	r3, [pc, #380]	@ (8004c80 <HAL_RCC_OscConfig+0x270>)
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	69db      	ldr	r3, [r3, #28]
 8004b0e:	021b      	lsls	r3, r3, #8
 8004b10:	495b      	ldr	r1, [pc, #364]	@ (8004c80 <HAL_RCC_OscConfig+0x270>)
 8004b12:	4313      	orrs	r3, r2
 8004b14:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b16:	69bb      	ldr	r3, [r7, #24]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d109      	bne.n	8004b30 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6a1b      	ldr	r3, [r3, #32]
 8004b20:	4618      	mov	r0, r3
 8004b22:	f000 fd15 	bl	8005550 <RCC_SetFlashLatencyFromMSIRange>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d001      	beq.n	8004b30 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e343      	b.n	80051b8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004b30:	f000 fc4a 	bl	80053c8 <HAL_RCC_GetSysClockFreq>
 8004b34:	4602      	mov	r2, r0
 8004b36:	4b52      	ldr	r3, [pc, #328]	@ (8004c80 <HAL_RCC_OscConfig+0x270>)
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	091b      	lsrs	r3, r3, #4
 8004b3c:	f003 030f 	and.w	r3, r3, #15
 8004b40:	4950      	ldr	r1, [pc, #320]	@ (8004c84 <HAL_RCC_OscConfig+0x274>)
 8004b42:	5ccb      	ldrb	r3, [r1, r3]
 8004b44:	f003 031f 	and.w	r3, r3, #31
 8004b48:	fa22 f303 	lsr.w	r3, r2, r3
 8004b4c:	4a4e      	ldr	r2, [pc, #312]	@ (8004c88 <HAL_RCC_OscConfig+0x278>)
 8004b4e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004b50:	4b4e      	ldr	r3, [pc, #312]	@ (8004c8c <HAL_RCC_OscConfig+0x27c>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4618      	mov	r0, r3
 8004b56:	f7fc fd33 	bl	80015c0 <HAL_InitTick>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004b5e:	7bfb      	ldrb	r3, [r7, #15]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d052      	beq.n	8004c0a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004b64:	7bfb      	ldrb	r3, [r7, #15]
 8004b66:	e327      	b.n	80051b8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	699b      	ldr	r3, [r3, #24]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d032      	beq.n	8004bd6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004b70:	4b43      	ldr	r3, [pc, #268]	@ (8004c80 <HAL_RCC_OscConfig+0x270>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a42      	ldr	r2, [pc, #264]	@ (8004c80 <HAL_RCC_OscConfig+0x270>)
 8004b76:	f043 0301 	orr.w	r3, r3, #1
 8004b7a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004b7c:	f7fc fd70 	bl	8001660 <HAL_GetTick>
 8004b80:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004b82:	e008      	b.n	8004b96 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004b84:	f7fc fd6c 	bl	8001660 <HAL_GetTick>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	2b02      	cmp	r3, #2
 8004b90:	d901      	bls.n	8004b96 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004b92:	2303      	movs	r3, #3
 8004b94:	e310      	b.n	80051b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004b96:	4b3a      	ldr	r3, [pc, #232]	@ (8004c80 <HAL_RCC_OscConfig+0x270>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 0302 	and.w	r3, r3, #2
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d0f0      	beq.n	8004b84 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ba2:	4b37      	ldr	r3, [pc, #220]	@ (8004c80 <HAL_RCC_OscConfig+0x270>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a36      	ldr	r2, [pc, #216]	@ (8004c80 <HAL_RCC_OscConfig+0x270>)
 8004ba8:	f043 0308 	orr.w	r3, r3, #8
 8004bac:	6013      	str	r3, [r2, #0]
 8004bae:	4b34      	ldr	r3, [pc, #208]	@ (8004c80 <HAL_RCC_OscConfig+0x270>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a1b      	ldr	r3, [r3, #32]
 8004bba:	4931      	ldr	r1, [pc, #196]	@ (8004c80 <HAL_RCC_OscConfig+0x270>)
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004bc0:	4b2f      	ldr	r3, [pc, #188]	@ (8004c80 <HAL_RCC_OscConfig+0x270>)
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	69db      	ldr	r3, [r3, #28]
 8004bcc:	021b      	lsls	r3, r3, #8
 8004bce:	492c      	ldr	r1, [pc, #176]	@ (8004c80 <HAL_RCC_OscConfig+0x270>)
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	604b      	str	r3, [r1, #4]
 8004bd4:	e01a      	b.n	8004c0c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004bd6:	4b2a      	ldr	r3, [pc, #168]	@ (8004c80 <HAL_RCC_OscConfig+0x270>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a29      	ldr	r2, [pc, #164]	@ (8004c80 <HAL_RCC_OscConfig+0x270>)
 8004bdc:	f023 0301 	bic.w	r3, r3, #1
 8004be0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004be2:	f7fc fd3d 	bl	8001660 <HAL_GetTick>
 8004be6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004be8:	e008      	b.n	8004bfc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004bea:	f7fc fd39 	bl	8001660 <HAL_GetTick>
 8004bee:	4602      	mov	r2, r0
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	1ad3      	subs	r3, r2, r3
 8004bf4:	2b02      	cmp	r3, #2
 8004bf6:	d901      	bls.n	8004bfc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004bf8:	2303      	movs	r3, #3
 8004bfa:	e2dd      	b.n	80051b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004bfc:	4b20      	ldr	r3, [pc, #128]	@ (8004c80 <HAL_RCC_OscConfig+0x270>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 0302 	and.w	r3, r3, #2
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d1f0      	bne.n	8004bea <HAL_RCC_OscConfig+0x1da>
 8004c08:	e000      	b.n	8004c0c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004c0a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 0301 	and.w	r3, r3, #1
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d074      	beq.n	8004d02 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004c18:	69bb      	ldr	r3, [r7, #24]
 8004c1a:	2b08      	cmp	r3, #8
 8004c1c:	d005      	beq.n	8004c2a <HAL_RCC_OscConfig+0x21a>
 8004c1e:	69bb      	ldr	r3, [r7, #24]
 8004c20:	2b0c      	cmp	r3, #12
 8004c22:	d10e      	bne.n	8004c42 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	2b03      	cmp	r3, #3
 8004c28:	d10b      	bne.n	8004c42 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c2a:	4b15      	ldr	r3, [pc, #84]	@ (8004c80 <HAL_RCC_OscConfig+0x270>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d064      	beq.n	8004d00 <HAL_RCC_OscConfig+0x2f0>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d160      	bne.n	8004d00 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e2ba      	b.n	80051b8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c4a:	d106      	bne.n	8004c5a <HAL_RCC_OscConfig+0x24a>
 8004c4c:	4b0c      	ldr	r3, [pc, #48]	@ (8004c80 <HAL_RCC_OscConfig+0x270>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a0b      	ldr	r2, [pc, #44]	@ (8004c80 <HAL_RCC_OscConfig+0x270>)
 8004c52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c56:	6013      	str	r3, [r2, #0]
 8004c58:	e026      	b.n	8004ca8 <HAL_RCC_OscConfig+0x298>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c62:	d115      	bne.n	8004c90 <HAL_RCC_OscConfig+0x280>
 8004c64:	4b06      	ldr	r3, [pc, #24]	@ (8004c80 <HAL_RCC_OscConfig+0x270>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a05      	ldr	r2, [pc, #20]	@ (8004c80 <HAL_RCC_OscConfig+0x270>)
 8004c6a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c6e:	6013      	str	r3, [r2, #0]
 8004c70:	4b03      	ldr	r3, [pc, #12]	@ (8004c80 <HAL_RCC_OscConfig+0x270>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a02      	ldr	r2, [pc, #8]	@ (8004c80 <HAL_RCC_OscConfig+0x270>)
 8004c76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c7a:	6013      	str	r3, [r2, #0]
 8004c7c:	e014      	b.n	8004ca8 <HAL_RCC_OscConfig+0x298>
 8004c7e:	bf00      	nop
 8004c80:	40021000 	.word	0x40021000
 8004c84:	0800821c 	.word	0x0800821c
 8004c88:	20000014 	.word	0x20000014
 8004c8c:	20000018 	.word	0x20000018
 8004c90:	4ba0      	ldr	r3, [pc, #640]	@ (8004f14 <HAL_RCC_OscConfig+0x504>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a9f      	ldr	r2, [pc, #636]	@ (8004f14 <HAL_RCC_OscConfig+0x504>)
 8004c96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c9a:	6013      	str	r3, [r2, #0]
 8004c9c:	4b9d      	ldr	r3, [pc, #628]	@ (8004f14 <HAL_RCC_OscConfig+0x504>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a9c      	ldr	r2, [pc, #624]	@ (8004f14 <HAL_RCC_OscConfig+0x504>)
 8004ca2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ca6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d013      	beq.n	8004cd8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cb0:	f7fc fcd6 	bl	8001660 <HAL_GetTick>
 8004cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004cb6:	e008      	b.n	8004cca <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cb8:	f7fc fcd2 	bl	8001660 <HAL_GetTick>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	2b64      	cmp	r3, #100	@ 0x64
 8004cc4:	d901      	bls.n	8004cca <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004cc6:	2303      	movs	r3, #3
 8004cc8:	e276      	b.n	80051b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004cca:	4b92      	ldr	r3, [pc, #584]	@ (8004f14 <HAL_RCC_OscConfig+0x504>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d0f0      	beq.n	8004cb8 <HAL_RCC_OscConfig+0x2a8>
 8004cd6:	e014      	b.n	8004d02 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cd8:	f7fc fcc2 	bl	8001660 <HAL_GetTick>
 8004cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004cde:	e008      	b.n	8004cf2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ce0:	f7fc fcbe 	bl	8001660 <HAL_GetTick>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	2b64      	cmp	r3, #100	@ 0x64
 8004cec:	d901      	bls.n	8004cf2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004cee:	2303      	movs	r3, #3
 8004cf0:	e262      	b.n	80051b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004cf2:	4b88      	ldr	r3, [pc, #544]	@ (8004f14 <HAL_RCC_OscConfig+0x504>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d1f0      	bne.n	8004ce0 <HAL_RCC_OscConfig+0x2d0>
 8004cfe:	e000      	b.n	8004d02 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 0302 	and.w	r3, r3, #2
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d060      	beq.n	8004dd0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004d0e:	69bb      	ldr	r3, [r7, #24]
 8004d10:	2b04      	cmp	r3, #4
 8004d12:	d005      	beq.n	8004d20 <HAL_RCC_OscConfig+0x310>
 8004d14:	69bb      	ldr	r3, [r7, #24]
 8004d16:	2b0c      	cmp	r3, #12
 8004d18:	d119      	bne.n	8004d4e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	2b02      	cmp	r3, #2
 8004d1e:	d116      	bne.n	8004d4e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d20:	4b7c      	ldr	r3, [pc, #496]	@ (8004f14 <HAL_RCC_OscConfig+0x504>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d005      	beq.n	8004d38 <HAL_RCC_OscConfig+0x328>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d101      	bne.n	8004d38 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e23f      	b.n	80051b8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d38:	4b76      	ldr	r3, [pc, #472]	@ (8004f14 <HAL_RCC_OscConfig+0x504>)
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	691b      	ldr	r3, [r3, #16]
 8004d44:	061b      	lsls	r3, r3, #24
 8004d46:	4973      	ldr	r1, [pc, #460]	@ (8004f14 <HAL_RCC_OscConfig+0x504>)
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d4c:	e040      	b.n	8004dd0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	68db      	ldr	r3, [r3, #12]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d023      	beq.n	8004d9e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d56:	4b6f      	ldr	r3, [pc, #444]	@ (8004f14 <HAL_RCC_OscConfig+0x504>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a6e      	ldr	r2, [pc, #440]	@ (8004f14 <HAL_RCC_OscConfig+0x504>)
 8004d5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d62:	f7fc fc7d 	bl	8001660 <HAL_GetTick>
 8004d66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d68:	e008      	b.n	8004d7c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d6a:	f7fc fc79 	bl	8001660 <HAL_GetTick>
 8004d6e:	4602      	mov	r2, r0
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	1ad3      	subs	r3, r2, r3
 8004d74:	2b02      	cmp	r3, #2
 8004d76:	d901      	bls.n	8004d7c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004d78:	2303      	movs	r3, #3
 8004d7a:	e21d      	b.n	80051b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d7c:	4b65      	ldr	r3, [pc, #404]	@ (8004f14 <HAL_RCC_OscConfig+0x504>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d0f0      	beq.n	8004d6a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d88:	4b62      	ldr	r3, [pc, #392]	@ (8004f14 <HAL_RCC_OscConfig+0x504>)
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	691b      	ldr	r3, [r3, #16]
 8004d94:	061b      	lsls	r3, r3, #24
 8004d96:	495f      	ldr	r1, [pc, #380]	@ (8004f14 <HAL_RCC_OscConfig+0x504>)
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	604b      	str	r3, [r1, #4]
 8004d9c:	e018      	b.n	8004dd0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d9e:	4b5d      	ldr	r3, [pc, #372]	@ (8004f14 <HAL_RCC_OscConfig+0x504>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a5c      	ldr	r2, [pc, #368]	@ (8004f14 <HAL_RCC_OscConfig+0x504>)
 8004da4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004da8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004daa:	f7fc fc59 	bl	8001660 <HAL_GetTick>
 8004dae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004db0:	e008      	b.n	8004dc4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004db2:	f7fc fc55 	bl	8001660 <HAL_GetTick>
 8004db6:	4602      	mov	r2, r0
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	1ad3      	subs	r3, r2, r3
 8004dbc:	2b02      	cmp	r3, #2
 8004dbe:	d901      	bls.n	8004dc4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	e1f9      	b.n	80051b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004dc4:	4b53      	ldr	r3, [pc, #332]	@ (8004f14 <HAL_RCC_OscConfig+0x504>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d1f0      	bne.n	8004db2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 0308 	and.w	r3, r3, #8
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d03c      	beq.n	8004e56 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	695b      	ldr	r3, [r3, #20]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d01c      	beq.n	8004e1e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004de4:	4b4b      	ldr	r3, [pc, #300]	@ (8004f14 <HAL_RCC_OscConfig+0x504>)
 8004de6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004dea:	4a4a      	ldr	r2, [pc, #296]	@ (8004f14 <HAL_RCC_OscConfig+0x504>)
 8004dec:	f043 0301 	orr.w	r3, r3, #1
 8004df0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004df4:	f7fc fc34 	bl	8001660 <HAL_GetTick>
 8004df8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004dfa:	e008      	b.n	8004e0e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004dfc:	f7fc fc30 	bl	8001660 <HAL_GetTick>
 8004e00:	4602      	mov	r2, r0
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	2b02      	cmp	r3, #2
 8004e08:	d901      	bls.n	8004e0e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	e1d4      	b.n	80051b8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004e0e:	4b41      	ldr	r3, [pc, #260]	@ (8004f14 <HAL_RCC_OscConfig+0x504>)
 8004e10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e14:	f003 0302 	and.w	r3, r3, #2
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d0ef      	beq.n	8004dfc <HAL_RCC_OscConfig+0x3ec>
 8004e1c:	e01b      	b.n	8004e56 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e1e:	4b3d      	ldr	r3, [pc, #244]	@ (8004f14 <HAL_RCC_OscConfig+0x504>)
 8004e20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e24:	4a3b      	ldr	r2, [pc, #236]	@ (8004f14 <HAL_RCC_OscConfig+0x504>)
 8004e26:	f023 0301 	bic.w	r3, r3, #1
 8004e2a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e2e:	f7fc fc17 	bl	8001660 <HAL_GetTick>
 8004e32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004e34:	e008      	b.n	8004e48 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e36:	f7fc fc13 	bl	8001660 <HAL_GetTick>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	1ad3      	subs	r3, r2, r3
 8004e40:	2b02      	cmp	r3, #2
 8004e42:	d901      	bls.n	8004e48 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004e44:	2303      	movs	r3, #3
 8004e46:	e1b7      	b.n	80051b8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004e48:	4b32      	ldr	r3, [pc, #200]	@ (8004f14 <HAL_RCC_OscConfig+0x504>)
 8004e4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e4e:	f003 0302 	and.w	r3, r3, #2
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d1ef      	bne.n	8004e36 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 0304 	and.w	r3, r3, #4
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	f000 80a6 	beq.w	8004fb0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e64:	2300      	movs	r3, #0
 8004e66:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004e68:	4b2a      	ldr	r3, [pc, #168]	@ (8004f14 <HAL_RCC_OscConfig+0x504>)
 8004e6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d10d      	bne.n	8004e90 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e74:	4b27      	ldr	r3, [pc, #156]	@ (8004f14 <HAL_RCC_OscConfig+0x504>)
 8004e76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e78:	4a26      	ldr	r2, [pc, #152]	@ (8004f14 <HAL_RCC_OscConfig+0x504>)
 8004e7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e7e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e80:	4b24      	ldr	r3, [pc, #144]	@ (8004f14 <HAL_RCC_OscConfig+0x504>)
 8004e82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e88:	60bb      	str	r3, [r7, #8]
 8004e8a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e90:	4b21      	ldr	r3, [pc, #132]	@ (8004f18 <HAL_RCC_OscConfig+0x508>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d118      	bne.n	8004ece <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e9c:	4b1e      	ldr	r3, [pc, #120]	@ (8004f18 <HAL_RCC_OscConfig+0x508>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a1d      	ldr	r2, [pc, #116]	@ (8004f18 <HAL_RCC_OscConfig+0x508>)
 8004ea2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ea6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ea8:	f7fc fbda 	bl	8001660 <HAL_GetTick>
 8004eac:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004eae:	e008      	b.n	8004ec2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004eb0:	f7fc fbd6 	bl	8001660 <HAL_GetTick>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	2b02      	cmp	r3, #2
 8004ebc:	d901      	bls.n	8004ec2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004ebe:	2303      	movs	r3, #3
 8004ec0:	e17a      	b.n	80051b8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ec2:	4b15      	ldr	r3, [pc, #84]	@ (8004f18 <HAL_RCC_OscConfig+0x508>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d0f0      	beq.n	8004eb0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d108      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x4d8>
 8004ed6:	4b0f      	ldr	r3, [pc, #60]	@ (8004f14 <HAL_RCC_OscConfig+0x504>)
 8004ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004edc:	4a0d      	ldr	r2, [pc, #52]	@ (8004f14 <HAL_RCC_OscConfig+0x504>)
 8004ede:	f043 0301 	orr.w	r3, r3, #1
 8004ee2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ee6:	e029      	b.n	8004f3c <HAL_RCC_OscConfig+0x52c>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	2b05      	cmp	r3, #5
 8004eee:	d115      	bne.n	8004f1c <HAL_RCC_OscConfig+0x50c>
 8004ef0:	4b08      	ldr	r3, [pc, #32]	@ (8004f14 <HAL_RCC_OscConfig+0x504>)
 8004ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ef6:	4a07      	ldr	r2, [pc, #28]	@ (8004f14 <HAL_RCC_OscConfig+0x504>)
 8004ef8:	f043 0304 	orr.w	r3, r3, #4
 8004efc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004f00:	4b04      	ldr	r3, [pc, #16]	@ (8004f14 <HAL_RCC_OscConfig+0x504>)
 8004f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f06:	4a03      	ldr	r2, [pc, #12]	@ (8004f14 <HAL_RCC_OscConfig+0x504>)
 8004f08:	f043 0301 	orr.w	r3, r3, #1
 8004f0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004f10:	e014      	b.n	8004f3c <HAL_RCC_OscConfig+0x52c>
 8004f12:	bf00      	nop
 8004f14:	40021000 	.word	0x40021000
 8004f18:	40007000 	.word	0x40007000
 8004f1c:	4b9c      	ldr	r3, [pc, #624]	@ (8005190 <HAL_RCC_OscConfig+0x780>)
 8004f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f22:	4a9b      	ldr	r2, [pc, #620]	@ (8005190 <HAL_RCC_OscConfig+0x780>)
 8004f24:	f023 0301 	bic.w	r3, r3, #1
 8004f28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004f2c:	4b98      	ldr	r3, [pc, #608]	@ (8005190 <HAL_RCC_OscConfig+0x780>)
 8004f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f32:	4a97      	ldr	r2, [pc, #604]	@ (8005190 <HAL_RCC_OscConfig+0x780>)
 8004f34:	f023 0304 	bic.w	r3, r3, #4
 8004f38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d016      	beq.n	8004f72 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f44:	f7fc fb8c 	bl	8001660 <HAL_GetTick>
 8004f48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f4a:	e00a      	b.n	8004f62 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f4c:	f7fc fb88 	bl	8001660 <HAL_GetTick>
 8004f50:	4602      	mov	r2, r0
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d901      	bls.n	8004f62 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	e12a      	b.n	80051b8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f62:	4b8b      	ldr	r3, [pc, #556]	@ (8005190 <HAL_RCC_OscConfig+0x780>)
 8004f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f68:	f003 0302 	and.w	r3, r3, #2
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d0ed      	beq.n	8004f4c <HAL_RCC_OscConfig+0x53c>
 8004f70:	e015      	b.n	8004f9e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f72:	f7fc fb75 	bl	8001660 <HAL_GetTick>
 8004f76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f78:	e00a      	b.n	8004f90 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f7a:	f7fc fb71 	bl	8001660 <HAL_GetTick>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	1ad3      	subs	r3, r2, r3
 8004f84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d901      	bls.n	8004f90 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004f8c:	2303      	movs	r3, #3
 8004f8e:	e113      	b.n	80051b8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f90:	4b7f      	ldr	r3, [pc, #508]	@ (8005190 <HAL_RCC_OscConfig+0x780>)
 8004f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f96:	f003 0302 	and.w	r3, r3, #2
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d1ed      	bne.n	8004f7a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f9e:	7ffb      	ldrb	r3, [r7, #31]
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d105      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fa4:	4b7a      	ldr	r3, [pc, #488]	@ (8005190 <HAL_RCC_OscConfig+0x780>)
 8004fa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fa8:	4a79      	ldr	r2, [pc, #484]	@ (8005190 <HAL_RCC_OscConfig+0x780>)
 8004faa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004fae:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	f000 80fe 	beq.w	80051b6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fbe:	2b02      	cmp	r3, #2
 8004fc0:	f040 80d0 	bne.w	8005164 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004fc4:	4b72      	ldr	r3, [pc, #456]	@ (8005190 <HAL_RCC_OscConfig+0x780>)
 8004fc6:	68db      	ldr	r3, [r3, #12]
 8004fc8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	f003 0203 	and.w	r2, r3, #3
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d130      	bne.n	800503a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fe2:	3b01      	subs	r3, #1
 8004fe4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	d127      	bne.n	800503a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ff4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d11f      	bne.n	800503a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005004:	2a07      	cmp	r2, #7
 8005006:	bf14      	ite	ne
 8005008:	2201      	movne	r2, #1
 800500a:	2200      	moveq	r2, #0
 800500c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800500e:	4293      	cmp	r3, r2
 8005010:	d113      	bne.n	800503a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800501c:	085b      	lsrs	r3, r3, #1
 800501e:	3b01      	subs	r3, #1
 8005020:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005022:	429a      	cmp	r2, r3
 8005024:	d109      	bne.n	800503a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005030:	085b      	lsrs	r3, r3, #1
 8005032:	3b01      	subs	r3, #1
 8005034:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005036:	429a      	cmp	r2, r3
 8005038:	d06e      	beq.n	8005118 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800503a:	69bb      	ldr	r3, [r7, #24]
 800503c:	2b0c      	cmp	r3, #12
 800503e:	d069      	beq.n	8005114 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005040:	4b53      	ldr	r3, [pc, #332]	@ (8005190 <HAL_RCC_OscConfig+0x780>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005048:	2b00      	cmp	r3, #0
 800504a:	d105      	bne.n	8005058 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800504c:	4b50      	ldr	r3, [pc, #320]	@ (8005190 <HAL_RCC_OscConfig+0x780>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005054:	2b00      	cmp	r3, #0
 8005056:	d001      	beq.n	800505c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	e0ad      	b.n	80051b8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800505c:	4b4c      	ldr	r3, [pc, #304]	@ (8005190 <HAL_RCC_OscConfig+0x780>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a4b      	ldr	r2, [pc, #300]	@ (8005190 <HAL_RCC_OscConfig+0x780>)
 8005062:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005066:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005068:	f7fc fafa 	bl	8001660 <HAL_GetTick>
 800506c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800506e:	e008      	b.n	8005082 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005070:	f7fc faf6 	bl	8001660 <HAL_GetTick>
 8005074:	4602      	mov	r2, r0
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	2b02      	cmp	r3, #2
 800507c:	d901      	bls.n	8005082 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	e09a      	b.n	80051b8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005082:	4b43      	ldr	r3, [pc, #268]	@ (8005190 <HAL_RCC_OscConfig+0x780>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800508a:	2b00      	cmp	r3, #0
 800508c:	d1f0      	bne.n	8005070 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800508e:	4b40      	ldr	r3, [pc, #256]	@ (8005190 <HAL_RCC_OscConfig+0x780>)
 8005090:	68da      	ldr	r2, [r3, #12]
 8005092:	4b40      	ldr	r3, [pc, #256]	@ (8005194 <HAL_RCC_OscConfig+0x784>)
 8005094:	4013      	ands	r3, r2
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800509e:	3a01      	subs	r2, #1
 80050a0:	0112      	lsls	r2, r2, #4
 80050a2:	4311      	orrs	r1, r2
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80050a8:	0212      	lsls	r2, r2, #8
 80050aa:	4311      	orrs	r1, r2
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80050b0:	0852      	lsrs	r2, r2, #1
 80050b2:	3a01      	subs	r2, #1
 80050b4:	0552      	lsls	r2, r2, #21
 80050b6:	4311      	orrs	r1, r2
 80050b8:	687a      	ldr	r2, [r7, #4]
 80050ba:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80050bc:	0852      	lsrs	r2, r2, #1
 80050be:	3a01      	subs	r2, #1
 80050c0:	0652      	lsls	r2, r2, #25
 80050c2:	4311      	orrs	r1, r2
 80050c4:	687a      	ldr	r2, [r7, #4]
 80050c6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80050c8:	0912      	lsrs	r2, r2, #4
 80050ca:	0452      	lsls	r2, r2, #17
 80050cc:	430a      	orrs	r2, r1
 80050ce:	4930      	ldr	r1, [pc, #192]	@ (8005190 <HAL_RCC_OscConfig+0x780>)
 80050d0:	4313      	orrs	r3, r2
 80050d2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80050d4:	4b2e      	ldr	r3, [pc, #184]	@ (8005190 <HAL_RCC_OscConfig+0x780>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a2d      	ldr	r2, [pc, #180]	@ (8005190 <HAL_RCC_OscConfig+0x780>)
 80050da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80050de:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80050e0:	4b2b      	ldr	r3, [pc, #172]	@ (8005190 <HAL_RCC_OscConfig+0x780>)
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	4a2a      	ldr	r2, [pc, #168]	@ (8005190 <HAL_RCC_OscConfig+0x780>)
 80050e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80050ea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80050ec:	f7fc fab8 	bl	8001660 <HAL_GetTick>
 80050f0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050f2:	e008      	b.n	8005106 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050f4:	f7fc fab4 	bl	8001660 <HAL_GetTick>
 80050f8:	4602      	mov	r2, r0
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	2b02      	cmp	r3, #2
 8005100:	d901      	bls.n	8005106 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005102:	2303      	movs	r3, #3
 8005104:	e058      	b.n	80051b8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005106:	4b22      	ldr	r3, [pc, #136]	@ (8005190 <HAL_RCC_OscConfig+0x780>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800510e:	2b00      	cmp	r3, #0
 8005110:	d0f0      	beq.n	80050f4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005112:	e050      	b.n	80051b6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e04f      	b.n	80051b8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005118:	4b1d      	ldr	r3, [pc, #116]	@ (8005190 <HAL_RCC_OscConfig+0x780>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005120:	2b00      	cmp	r3, #0
 8005122:	d148      	bne.n	80051b6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005124:	4b1a      	ldr	r3, [pc, #104]	@ (8005190 <HAL_RCC_OscConfig+0x780>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a19      	ldr	r2, [pc, #100]	@ (8005190 <HAL_RCC_OscConfig+0x780>)
 800512a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800512e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005130:	4b17      	ldr	r3, [pc, #92]	@ (8005190 <HAL_RCC_OscConfig+0x780>)
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	4a16      	ldr	r2, [pc, #88]	@ (8005190 <HAL_RCC_OscConfig+0x780>)
 8005136:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800513a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800513c:	f7fc fa90 	bl	8001660 <HAL_GetTick>
 8005140:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005142:	e008      	b.n	8005156 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005144:	f7fc fa8c 	bl	8001660 <HAL_GetTick>
 8005148:	4602      	mov	r2, r0
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	2b02      	cmp	r3, #2
 8005150:	d901      	bls.n	8005156 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005152:	2303      	movs	r3, #3
 8005154:	e030      	b.n	80051b8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005156:	4b0e      	ldr	r3, [pc, #56]	@ (8005190 <HAL_RCC_OscConfig+0x780>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800515e:	2b00      	cmp	r3, #0
 8005160:	d0f0      	beq.n	8005144 <HAL_RCC_OscConfig+0x734>
 8005162:	e028      	b.n	80051b6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005164:	69bb      	ldr	r3, [r7, #24]
 8005166:	2b0c      	cmp	r3, #12
 8005168:	d023      	beq.n	80051b2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800516a:	4b09      	ldr	r3, [pc, #36]	@ (8005190 <HAL_RCC_OscConfig+0x780>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a08      	ldr	r2, [pc, #32]	@ (8005190 <HAL_RCC_OscConfig+0x780>)
 8005170:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005174:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005176:	f7fc fa73 	bl	8001660 <HAL_GetTick>
 800517a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800517c:	e00c      	b.n	8005198 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800517e:	f7fc fa6f 	bl	8001660 <HAL_GetTick>
 8005182:	4602      	mov	r2, r0
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	1ad3      	subs	r3, r2, r3
 8005188:	2b02      	cmp	r3, #2
 800518a:	d905      	bls.n	8005198 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800518c:	2303      	movs	r3, #3
 800518e:	e013      	b.n	80051b8 <HAL_RCC_OscConfig+0x7a8>
 8005190:	40021000 	.word	0x40021000
 8005194:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005198:	4b09      	ldr	r3, [pc, #36]	@ (80051c0 <HAL_RCC_OscConfig+0x7b0>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d1ec      	bne.n	800517e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80051a4:	4b06      	ldr	r3, [pc, #24]	@ (80051c0 <HAL_RCC_OscConfig+0x7b0>)
 80051a6:	68da      	ldr	r2, [r3, #12]
 80051a8:	4905      	ldr	r1, [pc, #20]	@ (80051c0 <HAL_RCC_OscConfig+0x7b0>)
 80051aa:	4b06      	ldr	r3, [pc, #24]	@ (80051c4 <HAL_RCC_OscConfig+0x7b4>)
 80051ac:	4013      	ands	r3, r2
 80051ae:	60cb      	str	r3, [r1, #12]
 80051b0:	e001      	b.n	80051b6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	e000      	b.n	80051b8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80051b6:	2300      	movs	r3, #0
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3720      	adds	r7, #32
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}
 80051c0:	40021000 	.word	0x40021000
 80051c4:	feeefffc 	.word	0xfeeefffc

080051c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d101      	bne.n	80051dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	e0e7      	b.n	80053ac <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80051dc:	4b75      	ldr	r3, [pc, #468]	@ (80053b4 <HAL_RCC_ClockConfig+0x1ec>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 0307 	and.w	r3, r3, #7
 80051e4:	683a      	ldr	r2, [r7, #0]
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d910      	bls.n	800520c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051ea:	4b72      	ldr	r3, [pc, #456]	@ (80053b4 <HAL_RCC_ClockConfig+0x1ec>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f023 0207 	bic.w	r2, r3, #7
 80051f2:	4970      	ldr	r1, [pc, #448]	@ (80053b4 <HAL_RCC_ClockConfig+0x1ec>)
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051fa:	4b6e      	ldr	r3, [pc, #440]	@ (80053b4 <HAL_RCC_ClockConfig+0x1ec>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f003 0307 	and.w	r3, r3, #7
 8005202:	683a      	ldr	r2, [r7, #0]
 8005204:	429a      	cmp	r2, r3
 8005206:	d001      	beq.n	800520c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	e0cf      	b.n	80053ac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f003 0302 	and.w	r3, r3, #2
 8005214:	2b00      	cmp	r3, #0
 8005216:	d010      	beq.n	800523a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	689a      	ldr	r2, [r3, #8]
 800521c:	4b66      	ldr	r3, [pc, #408]	@ (80053b8 <HAL_RCC_ClockConfig+0x1f0>)
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005224:	429a      	cmp	r2, r3
 8005226:	d908      	bls.n	800523a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005228:	4b63      	ldr	r3, [pc, #396]	@ (80053b8 <HAL_RCC_ClockConfig+0x1f0>)
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	4960      	ldr	r1, [pc, #384]	@ (80053b8 <HAL_RCC_ClockConfig+0x1f0>)
 8005236:	4313      	orrs	r3, r2
 8005238:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 0301 	and.w	r3, r3, #1
 8005242:	2b00      	cmp	r3, #0
 8005244:	d04c      	beq.n	80052e0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	2b03      	cmp	r3, #3
 800524c:	d107      	bne.n	800525e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800524e:	4b5a      	ldr	r3, [pc, #360]	@ (80053b8 <HAL_RCC_ClockConfig+0x1f0>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005256:	2b00      	cmp	r3, #0
 8005258:	d121      	bne.n	800529e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e0a6      	b.n	80053ac <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	2b02      	cmp	r3, #2
 8005264:	d107      	bne.n	8005276 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005266:	4b54      	ldr	r3, [pc, #336]	@ (80053b8 <HAL_RCC_ClockConfig+0x1f0>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800526e:	2b00      	cmp	r3, #0
 8005270:	d115      	bne.n	800529e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e09a      	b.n	80053ac <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d107      	bne.n	800528e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800527e:	4b4e      	ldr	r3, [pc, #312]	@ (80053b8 <HAL_RCC_ClockConfig+0x1f0>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 0302 	and.w	r3, r3, #2
 8005286:	2b00      	cmp	r3, #0
 8005288:	d109      	bne.n	800529e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e08e      	b.n	80053ac <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800528e:	4b4a      	ldr	r3, [pc, #296]	@ (80053b8 <HAL_RCC_ClockConfig+0x1f0>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005296:	2b00      	cmp	r3, #0
 8005298:	d101      	bne.n	800529e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e086      	b.n	80053ac <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800529e:	4b46      	ldr	r3, [pc, #280]	@ (80053b8 <HAL_RCC_ClockConfig+0x1f0>)
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	f023 0203 	bic.w	r2, r3, #3
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	4943      	ldr	r1, [pc, #268]	@ (80053b8 <HAL_RCC_ClockConfig+0x1f0>)
 80052ac:	4313      	orrs	r3, r2
 80052ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052b0:	f7fc f9d6 	bl	8001660 <HAL_GetTick>
 80052b4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052b6:	e00a      	b.n	80052ce <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052b8:	f7fc f9d2 	bl	8001660 <HAL_GetTick>
 80052bc:	4602      	mov	r2, r0
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d901      	bls.n	80052ce <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	e06e      	b.n	80053ac <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052ce:	4b3a      	ldr	r3, [pc, #232]	@ (80053b8 <HAL_RCC_ClockConfig+0x1f0>)
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	f003 020c 	and.w	r2, r3, #12
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	429a      	cmp	r2, r3
 80052de:	d1eb      	bne.n	80052b8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 0302 	and.w	r3, r3, #2
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d010      	beq.n	800530e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	689a      	ldr	r2, [r3, #8]
 80052f0:	4b31      	ldr	r3, [pc, #196]	@ (80053b8 <HAL_RCC_ClockConfig+0x1f0>)
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d208      	bcs.n	800530e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052fc:	4b2e      	ldr	r3, [pc, #184]	@ (80053b8 <HAL_RCC_ClockConfig+0x1f0>)
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	492b      	ldr	r1, [pc, #172]	@ (80053b8 <HAL_RCC_ClockConfig+0x1f0>)
 800530a:	4313      	orrs	r3, r2
 800530c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800530e:	4b29      	ldr	r3, [pc, #164]	@ (80053b4 <HAL_RCC_ClockConfig+0x1ec>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 0307 	and.w	r3, r3, #7
 8005316:	683a      	ldr	r2, [r7, #0]
 8005318:	429a      	cmp	r2, r3
 800531a:	d210      	bcs.n	800533e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800531c:	4b25      	ldr	r3, [pc, #148]	@ (80053b4 <HAL_RCC_ClockConfig+0x1ec>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f023 0207 	bic.w	r2, r3, #7
 8005324:	4923      	ldr	r1, [pc, #140]	@ (80053b4 <HAL_RCC_ClockConfig+0x1ec>)
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	4313      	orrs	r3, r2
 800532a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800532c:	4b21      	ldr	r3, [pc, #132]	@ (80053b4 <HAL_RCC_ClockConfig+0x1ec>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f003 0307 	and.w	r3, r3, #7
 8005334:	683a      	ldr	r2, [r7, #0]
 8005336:	429a      	cmp	r2, r3
 8005338:	d001      	beq.n	800533e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e036      	b.n	80053ac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f003 0304 	and.w	r3, r3, #4
 8005346:	2b00      	cmp	r3, #0
 8005348:	d008      	beq.n	800535c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800534a:	4b1b      	ldr	r3, [pc, #108]	@ (80053b8 <HAL_RCC_ClockConfig+0x1f0>)
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	68db      	ldr	r3, [r3, #12]
 8005356:	4918      	ldr	r1, [pc, #96]	@ (80053b8 <HAL_RCC_ClockConfig+0x1f0>)
 8005358:	4313      	orrs	r3, r2
 800535a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f003 0308 	and.w	r3, r3, #8
 8005364:	2b00      	cmp	r3, #0
 8005366:	d009      	beq.n	800537c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005368:	4b13      	ldr	r3, [pc, #76]	@ (80053b8 <HAL_RCC_ClockConfig+0x1f0>)
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	691b      	ldr	r3, [r3, #16]
 8005374:	00db      	lsls	r3, r3, #3
 8005376:	4910      	ldr	r1, [pc, #64]	@ (80053b8 <HAL_RCC_ClockConfig+0x1f0>)
 8005378:	4313      	orrs	r3, r2
 800537a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800537c:	f000 f824 	bl	80053c8 <HAL_RCC_GetSysClockFreq>
 8005380:	4602      	mov	r2, r0
 8005382:	4b0d      	ldr	r3, [pc, #52]	@ (80053b8 <HAL_RCC_ClockConfig+0x1f0>)
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	091b      	lsrs	r3, r3, #4
 8005388:	f003 030f 	and.w	r3, r3, #15
 800538c:	490b      	ldr	r1, [pc, #44]	@ (80053bc <HAL_RCC_ClockConfig+0x1f4>)
 800538e:	5ccb      	ldrb	r3, [r1, r3]
 8005390:	f003 031f 	and.w	r3, r3, #31
 8005394:	fa22 f303 	lsr.w	r3, r2, r3
 8005398:	4a09      	ldr	r2, [pc, #36]	@ (80053c0 <HAL_RCC_ClockConfig+0x1f8>)
 800539a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800539c:	4b09      	ldr	r3, [pc, #36]	@ (80053c4 <HAL_RCC_ClockConfig+0x1fc>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4618      	mov	r0, r3
 80053a2:	f7fc f90d 	bl	80015c0 <HAL_InitTick>
 80053a6:	4603      	mov	r3, r0
 80053a8:	72fb      	strb	r3, [r7, #11]

  return status;
 80053aa:	7afb      	ldrb	r3, [r7, #11]
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3710      	adds	r7, #16
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	40022000 	.word	0x40022000
 80053b8:	40021000 	.word	0x40021000
 80053bc:	0800821c 	.word	0x0800821c
 80053c0:	20000014 	.word	0x20000014
 80053c4:	20000018 	.word	0x20000018

080053c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b089      	sub	sp, #36	@ 0x24
 80053cc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80053ce:	2300      	movs	r3, #0
 80053d0:	61fb      	str	r3, [r7, #28]
 80053d2:	2300      	movs	r3, #0
 80053d4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053d6:	4b3e      	ldr	r3, [pc, #248]	@ (80054d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	f003 030c 	and.w	r3, r3, #12
 80053de:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80053e0:	4b3b      	ldr	r3, [pc, #236]	@ (80054d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	f003 0303 	and.w	r3, r3, #3
 80053e8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d005      	beq.n	80053fc <HAL_RCC_GetSysClockFreq+0x34>
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	2b0c      	cmp	r3, #12
 80053f4:	d121      	bne.n	800543a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d11e      	bne.n	800543a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80053fc:	4b34      	ldr	r3, [pc, #208]	@ (80054d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 0308 	and.w	r3, r3, #8
 8005404:	2b00      	cmp	r3, #0
 8005406:	d107      	bne.n	8005418 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005408:	4b31      	ldr	r3, [pc, #196]	@ (80054d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800540a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800540e:	0a1b      	lsrs	r3, r3, #8
 8005410:	f003 030f 	and.w	r3, r3, #15
 8005414:	61fb      	str	r3, [r7, #28]
 8005416:	e005      	b.n	8005424 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005418:	4b2d      	ldr	r3, [pc, #180]	@ (80054d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	091b      	lsrs	r3, r3, #4
 800541e:	f003 030f 	and.w	r3, r3, #15
 8005422:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005424:	4a2b      	ldr	r2, [pc, #172]	@ (80054d4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800542c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d10d      	bne.n	8005450 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005434:	69fb      	ldr	r3, [r7, #28]
 8005436:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005438:	e00a      	b.n	8005450 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	2b04      	cmp	r3, #4
 800543e:	d102      	bne.n	8005446 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005440:	4b25      	ldr	r3, [pc, #148]	@ (80054d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005442:	61bb      	str	r3, [r7, #24]
 8005444:	e004      	b.n	8005450 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	2b08      	cmp	r3, #8
 800544a:	d101      	bne.n	8005450 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800544c:	4b23      	ldr	r3, [pc, #140]	@ (80054dc <HAL_RCC_GetSysClockFreq+0x114>)
 800544e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	2b0c      	cmp	r3, #12
 8005454:	d134      	bne.n	80054c0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005456:	4b1e      	ldr	r3, [pc, #120]	@ (80054d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	f003 0303 	and.w	r3, r3, #3
 800545e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	2b02      	cmp	r3, #2
 8005464:	d003      	beq.n	800546e <HAL_RCC_GetSysClockFreq+0xa6>
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	2b03      	cmp	r3, #3
 800546a:	d003      	beq.n	8005474 <HAL_RCC_GetSysClockFreq+0xac>
 800546c:	e005      	b.n	800547a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800546e:	4b1a      	ldr	r3, [pc, #104]	@ (80054d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005470:	617b      	str	r3, [r7, #20]
      break;
 8005472:	e005      	b.n	8005480 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005474:	4b19      	ldr	r3, [pc, #100]	@ (80054dc <HAL_RCC_GetSysClockFreq+0x114>)
 8005476:	617b      	str	r3, [r7, #20]
      break;
 8005478:	e002      	b.n	8005480 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800547a:	69fb      	ldr	r3, [r7, #28]
 800547c:	617b      	str	r3, [r7, #20]
      break;
 800547e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005480:	4b13      	ldr	r3, [pc, #76]	@ (80054d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	091b      	lsrs	r3, r3, #4
 8005486:	f003 0307 	and.w	r3, r3, #7
 800548a:	3301      	adds	r3, #1
 800548c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800548e:	4b10      	ldr	r3, [pc, #64]	@ (80054d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005490:	68db      	ldr	r3, [r3, #12]
 8005492:	0a1b      	lsrs	r3, r3, #8
 8005494:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005498:	697a      	ldr	r2, [r7, #20]
 800549a:	fb03 f202 	mul.w	r2, r3, r2
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80054a4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80054a6:	4b0a      	ldr	r3, [pc, #40]	@ (80054d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80054a8:	68db      	ldr	r3, [r3, #12]
 80054aa:	0e5b      	lsrs	r3, r3, #25
 80054ac:	f003 0303 	and.w	r3, r3, #3
 80054b0:	3301      	adds	r3, #1
 80054b2:	005b      	lsls	r3, r3, #1
 80054b4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80054b6:	697a      	ldr	r2, [r7, #20]
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80054be:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80054c0:	69bb      	ldr	r3, [r7, #24]
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3724      	adds	r7, #36	@ 0x24
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr
 80054ce:	bf00      	nop
 80054d0:	40021000 	.word	0x40021000
 80054d4:	08008234 	.word	0x08008234
 80054d8:	00f42400 	.word	0x00f42400
 80054dc:	007a1200 	.word	0x007a1200

080054e0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054e0:	b480      	push	{r7}
 80054e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054e4:	4b03      	ldr	r3, [pc, #12]	@ (80054f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80054e6:	681b      	ldr	r3, [r3, #0]
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr
 80054f2:	bf00      	nop
 80054f4:	20000014 	.word	0x20000014

080054f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80054fc:	f7ff fff0 	bl	80054e0 <HAL_RCC_GetHCLKFreq>
 8005500:	4602      	mov	r2, r0
 8005502:	4b06      	ldr	r3, [pc, #24]	@ (800551c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	0a1b      	lsrs	r3, r3, #8
 8005508:	f003 0307 	and.w	r3, r3, #7
 800550c:	4904      	ldr	r1, [pc, #16]	@ (8005520 <HAL_RCC_GetPCLK1Freq+0x28>)
 800550e:	5ccb      	ldrb	r3, [r1, r3]
 8005510:	f003 031f 	and.w	r3, r3, #31
 8005514:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005518:	4618      	mov	r0, r3
 800551a:	bd80      	pop	{r7, pc}
 800551c:	40021000 	.word	0x40021000
 8005520:	0800822c 	.word	0x0800822c

08005524 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005528:	f7ff ffda 	bl	80054e0 <HAL_RCC_GetHCLKFreq>
 800552c:	4602      	mov	r2, r0
 800552e:	4b06      	ldr	r3, [pc, #24]	@ (8005548 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	0adb      	lsrs	r3, r3, #11
 8005534:	f003 0307 	and.w	r3, r3, #7
 8005538:	4904      	ldr	r1, [pc, #16]	@ (800554c <HAL_RCC_GetPCLK2Freq+0x28>)
 800553a:	5ccb      	ldrb	r3, [r1, r3]
 800553c:	f003 031f 	and.w	r3, r3, #31
 8005540:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005544:	4618      	mov	r0, r3
 8005546:	bd80      	pop	{r7, pc}
 8005548:	40021000 	.word	0x40021000
 800554c:	0800822c 	.word	0x0800822c

08005550 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b086      	sub	sp, #24
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005558:	2300      	movs	r3, #0
 800555a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800555c:	4b2a      	ldr	r3, [pc, #168]	@ (8005608 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800555e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005560:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005564:	2b00      	cmp	r3, #0
 8005566:	d003      	beq.n	8005570 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005568:	f7ff f9ee 	bl	8004948 <HAL_PWREx_GetVoltageRange>
 800556c:	6178      	str	r0, [r7, #20]
 800556e:	e014      	b.n	800559a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005570:	4b25      	ldr	r3, [pc, #148]	@ (8005608 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005572:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005574:	4a24      	ldr	r2, [pc, #144]	@ (8005608 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005576:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800557a:	6593      	str	r3, [r2, #88]	@ 0x58
 800557c:	4b22      	ldr	r3, [pc, #136]	@ (8005608 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800557e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005580:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005584:	60fb      	str	r3, [r7, #12]
 8005586:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005588:	f7ff f9de 	bl	8004948 <HAL_PWREx_GetVoltageRange>
 800558c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800558e:	4b1e      	ldr	r3, [pc, #120]	@ (8005608 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005590:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005592:	4a1d      	ldr	r2, [pc, #116]	@ (8005608 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005594:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005598:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80055a0:	d10b      	bne.n	80055ba <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2b80      	cmp	r3, #128	@ 0x80
 80055a6:	d919      	bls.n	80055dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2ba0      	cmp	r3, #160	@ 0xa0
 80055ac:	d902      	bls.n	80055b4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80055ae:	2302      	movs	r3, #2
 80055b0:	613b      	str	r3, [r7, #16]
 80055b2:	e013      	b.n	80055dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80055b4:	2301      	movs	r3, #1
 80055b6:	613b      	str	r3, [r7, #16]
 80055b8:	e010      	b.n	80055dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2b80      	cmp	r3, #128	@ 0x80
 80055be:	d902      	bls.n	80055c6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80055c0:	2303      	movs	r3, #3
 80055c2:	613b      	str	r3, [r7, #16]
 80055c4:	e00a      	b.n	80055dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2b80      	cmp	r3, #128	@ 0x80
 80055ca:	d102      	bne.n	80055d2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80055cc:	2302      	movs	r3, #2
 80055ce:	613b      	str	r3, [r7, #16]
 80055d0:	e004      	b.n	80055dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2b70      	cmp	r3, #112	@ 0x70
 80055d6:	d101      	bne.n	80055dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80055d8:	2301      	movs	r3, #1
 80055da:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80055dc:	4b0b      	ldr	r3, [pc, #44]	@ (800560c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f023 0207 	bic.w	r2, r3, #7
 80055e4:	4909      	ldr	r1, [pc, #36]	@ (800560c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	4313      	orrs	r3, r2
 80055ea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80055ec:	4b07      	ldr	r3, [pc, #28]	@ (800560c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f003 0307 	and.w	r3, r3, #7
 80055f4:	693a      	ldr	r2, [r7, #16]
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d001      	beq.n	80055fe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e000      	b.n	8005600 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80055fe:	2300      	movs	r3, #0
}
 8005600:	4618      	mov	r0, r3
 8005602:	3718      	adds	r7, #24
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}
 8005608:	40021000 	.word	0x40021000
 800560c:	40022000 	.word	0x40022000

08005610 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b086      	sub	sp, #24
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005618:	2300      	movs	r3, #0
 800561a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800561c:	2300      	movs	r3, #0
 800561e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005628:	2b00      	cmp	r3, #0
 800562a:	d041      	beq.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005630:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005634:	d02a      	beq.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005636:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800563a:	d824      	bhi.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800563c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005640:	d008      	beq.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005642:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005646:	d81e      	bhi.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005648:	2b00      	cmp	r3, #0
 800564a:	d00a      	beq.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800564c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005650:	d010      	beq.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005652:	e018      	b.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005654:	4b86      	ldr	r3, [pc, #536]	@ (8005870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005656:	68db      	ldr	r3, [r3, #12]
 8005658:	4a85      	ldr	r2, [pc, #532]	@ (8005870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800565a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800565e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005660:	e015      	b.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	3304      	adds	r3, #4
 8005666:	2100      	movs	r1, #0
 8005668:	4618      	mov	r0, r3
 800566a:	f000 fabb 	bl	8005be4 <RCCEx_PLLSAI1_Config>
 800566e:	4603      	mov	r3, r0
 8005670:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005672:	e00c      	b.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	3320      	adds	r3, #32
 8005678:	2100      	movs	r1, #0
 800567a:	4618      	mov	r0, r3
 800567c:	f000 fba6 	bl	8005dcc <RCCEx_PLLSAI2_Config>
 8005680:	4603      	mov	r3, r0
 8005682:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005684:	e003      	b.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	74fb      	strb	r3, [r7, #19]
      break;
 800568a:	e000      	b.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800568c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800568e:	7cfb      	ldrb	r3, [r7, #19]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d10b      	bne.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005694:	4b76      	ldr	r3, [pc, #472]	@ (8005870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005696:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800569a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80056a2:	4973      	ldr	r1, [pc, #460]	@ (8005870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056a4:	4313      	orrs	r3, r2
 80056a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80056aa:	e001      	b.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056ac:	7cfb      	ldrb	r3, [r7, #19]
 80056ae:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d041      	beq.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80056c0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80056c4:	d02a      	beq.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80056c6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80056ca:	d824      	bhi.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80056cc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80056d0:	d008      	beq.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80056d2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80056d6:	d81e      	bhi.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d00a      	beq.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80056dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80056e0:	d010      	beq.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80056e2:	e018      	b.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80056e4:	4b62      	ldr	r3, [pc, #392]	@ (8005870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	4a61      	ldr	r2, [pc, #388]	@ (8005870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056ee:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80056f0:	e015      	b.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	3304      	adds	r3, #4
 80056f6:	2100      	movs	r1, #0
 80056f8:	4618      	mov	r0, r3
 80056fa:	f000 fa73 	bl	8005be4 <RCCEx_PLLSAI1_Config>
 80056fe:	4603      	mov	r3, r0
 8005700:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005702:	e00c      	b.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	3320      	adds	r3, #32
 8005708:	2100      	movs	r1, #0
 800570a:	4618      	mov	r0, r3
 800570c:	f000 fb5e 	bl	8005dcc <RCCEx_PLLSAI2_Config>
 8005710:	4603      	mov	r3, r0
 8005712:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005714:	e003      	b.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	74fb      	strb	r3, [r7, #19]
      break;
 800571a:	e000      	b.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800571c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800571e:	7cfb      	ldrb	r3, [r7, #19]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d10b      	bne.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005724:	4b52      	ldr	r3, [pc, #328]	@ (8005870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005726:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800572a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005732:	494f      	ldr	r1, [pc, #316]	@ (8005870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005734:	4313      	orrs	r3, r2
 8005736:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800573a:	e001      	b.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800573c:	7cfb      	ldrb	r3, [r7, #19]
 800573e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005748:	2b00      	cmp	r3, #0
 800574a:	f000 80a0 	beq.w	800588e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800574e:	2300      	movs	r3, #0
 8005750:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005752:	4b47      	ldr	r3, [pc, #284]	@ (8005870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005754:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005756:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800575a:	2b00      	cmp	r3, #0
 800575c:	d101      	bne.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800575e:	2301      	movs	r3, #1
 8005760:	e000      	b.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005762:	2300      	movs	r3, #0
 8005764:	2b00      	cmp	r3, #0
 8005766:	d00d      	beq.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005768:	4b41      	ldr	r3, [pc, #260]	@ (8005870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800576a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800576c:	4a40      	ldr	r2, [pc, #256]	@ (8005870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800576e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005772:	6593      	str	r3, [r2, #88]	@ 0x58
 8005774:	4b3e      	ldr	r3, [pc, #248]	@ (8005870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005776:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005778:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800577c:	60bb      	str	r3, [r7, #8]
 800577e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005780:	2301      	movs	r3, #1
 8005782:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005784:	4b3b      	ldr	r3, [pc, #236]	@ (8005874 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a3a      	ldr	r2, [pc, #232]	@ (8005874 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800578a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800578e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005790:	f7fb ff66 	bl	8001660 <HAL_GetTick>
 8005794:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005796:	e009      	b.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005798:	f7fb ff62 	bl	8001660 <HAL_GetTick>
 800579c:	4602      	mov	r2, r0
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	1ad3      	subs	r3, r2, r3
 80057a2:	2b02      	cmp	r3, #2
 80057a4:	d902      	bls.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80057a6:	2303      	movs	r3, #3
 80057a8:	74fb      	strb	r3, [r7, #19]
        break;
 80057aa:	e005      	b.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80057ac:	4b31      	ldr	r3, [pc, #196]	@ (8005874 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d0ef      	beq.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80057b8:	7cfb      	ldrb	r3, [r7, #19]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d15c      	bne.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80057be:	4b2c      	ldr	r3, [pc, #176]	@ (8005870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057c4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057c8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d01f      	beq.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80057d6:	697a      	ldr	r2, [r7, #20]
 80057d8:	429a      	cmp	r2, r3
 80057da:	d019      	beq.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80057dc:	4b24      	ldr	r3, [pc, #144]	@ (8005870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057e6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80057e8:	4b21      	ldr	r3, [pc, #132]	@ (8005870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057ee:	4a20      	ldr	r2, [pc, #128]	@ (8005870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80057f8:	4b1d      	ldr	r3, [pc, #116]	@ (8005870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057fe:	4a1c      	ldr	r2, [pc, #112]	@ (8005870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005800:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005804:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005808:	4a19      	ldr	r2, [pc, #100]	@ (8005870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	f003 0301 	and.w	r3, r3, #1
 8005816:	2b00      	cmp	r3, #0
 8005818:	d016      	beq.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800581a:	f7fb ff21 	bl	8001660 <HAL_GetTick>
 800581e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005820:	e00b      	b.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005822:	f7fb ff1d 	bl	8001660 <HAL_GetTick>
 8005826:	4602      	mov	r2, r0
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	1ad3      	subs	r3, r2, r3
 800582c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005830:	4293      	cmp	r3, r2
 8005832:	d902      	bls.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005834:	2303      	movs	r3, #3
 8005836:	74fb      	strb	r3, [r7, #19]
            break;
 8005838:	e006      	b.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800583a:	4b0d      	ldr	r3, [pc, #52]	@ (8005870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800583c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005840:	f003 0302 	and.w	r3, r3, #2
 8005844:	2b00      	cmp	r3, #0
 8005846:	d0ec      	beq.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005848:	7cfb      	ldrb	r3, [r7, #19]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d10c      	bne.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800584e:	4b08      	ldr	r3, [pc, #32]	@ (8005870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005850:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005854:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800585e:	4904      	ldr	r1, [pc, #16]	@ (8005870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005860:	4313      	orrs	r3, r2
 8005862:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005866:	e009      	b.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005868:	7cfb      	ldrb	r3, [r7, #19]
 800586a:	74bb      	strb	r3, [r7, #18]
 800586c:	e006      	b.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800586e:	bf00      	nop
 8005870:	40021000 	.word	0x40021000
 8005874:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005878:	7cfb      	ldrb	r3, [r7, #19]
 800587a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800587c:	7c7b      	ldrb	r3, [r7, #17]
 800587e:	2b01      	cmp	r3, #1
 8005880:	d105      	bne.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005882:	4b9e      	ldr	r3, [pc, #632]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005884:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005886:	4a9d      	ldr	r2, [pc, #628]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005888:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800588c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 0301 	and.w	r3, r3, #1
 8005896:	2b00      	cmp	r3, #0
 8005898:	d00a      	beq.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800589a:	4b98      	ldr	r3, [pc, #608]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800589c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058a0:	f023 0203 	bic.w	r2, r3, #3
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058a8:	4994      	ldr	r1, [pc, #592]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058aa:	4313      	orrs	r3, r2
 80058ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f003 0302 	and.w	r3, r3, #2
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d00a      	beq.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80058bc:	4b8f      	ldr	r3, [pc, #572]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058c2:	f023 020c 	bic.w	r2, r3, #12
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058ca:	498c      	ldr	r1, [pc, #560]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058cc:	4313      	orrs	r3, r2
 80058ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f003 0304 	and.w	r3, r3, #4
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d00a      	beq.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80058de:	4b87      	ldr	r3, [pc, #540]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058e4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058ec:	4983      	ldr	r1, [pc, #524]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058ee:	4313      	orrs	r3, r2
 80058f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f003 0308 	and.w	r3, r3, #8
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d00a      	beq.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005900:	4b7e      	ldr	r3, [pc, #504]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005902:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005906:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800590e:	497b      	ldr	r1, [pc, #492]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005910:	4313      	orrs	r3, r2
 8005912:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 0310 	and.w	r3, r3, #16
 800591e:	2b00      	cmp	r3, #0
 8005920:	d00a      	beq.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005922:	4b76      	ldr	r3, [pc, #472]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005924:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005928:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005930:	4972      	ldr	r1, [pc, #456]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005932:	4313      	orrs	r3, r2
 8005934:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f003 0320 	and.w	r3, r3, #32
 8005940:	2b00      	cmp	r3, #0
 8005942:	d00a      	beq.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005944:	4b6d      	ldr	r3, [pc, #436]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005946:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800594a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005952:	496a      	ldr	r1, [pc, #424]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005954:	4313      	orrs	r3, r2
 8005956:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005962:	2b00      	cmp	r3, #0
 8005964:	d00a      	beq.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005966:	4b65      	ldr	r3, [pc, #404]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005968:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800596c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005974:	4961      	ldr	r1, [pc, #388]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005976:	4313      	orrs	r3, r2
 8005978:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005984:	2b00      	cmp	r3, #0
 8005986:	d00a      	beq.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005988:	4b5c      	ldr	r3, [pc, #368]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800598a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800598e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005996:	4959      	ldr	r1, [pc, #356]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005998:	4313      	orrs	r3, r2
 800599a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d00a      	beq.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80059aa:	4b54      	ldr	r3, [pc, #336]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059b0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059b8:	4950      	ldr	r1, [pc, #320]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059ba:	4313      	orrs	r3, r2
 80059bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d00a      	beq.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80059cc:	4b4b      	ldr	r3, [pc, #300]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059d2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059da:	4948      	ldr	r1, [pc, #288]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059dc:	4313      	orrs	r3, r2
 80059de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d00a      	beq.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80059ee:	4b43      	ldr	r3, [pc, #268]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059f4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059fc:	493f      	ldr	r1, [pc, #252]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059fe:	4313      	orrs	r3, r2
 8005a00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d028      	beq.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a10:	4b3a      	ldr	r3, [pc, #232]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a16:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a1e:	4937      	ldr	r1, [pc, #220]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a20:	4313      	orrs	r3, r2
 8005a22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a2a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005a2e:	d106      	bne.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a30:	4b32      	ldr	r3, [pc, #200]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	4a31      	ldr	r2, [pc, #196]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a3a:	60d3      	str	r3, [r2, #12]
 8005a3c:	e011      	b.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a42:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005a46:	d10c      	bne.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	3304      	adds	r3, #4
 8005a4c:	2101      	movs	r1, #1
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f000 f8c8 	bl	8005be4 <RCCEx_PLLSAI1_Config>
 8005a54:	4603      	mov	r3, r0
 8005a56:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005a58:	7cfb      	ldrb	r3, [r7, #19]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d001      	beq.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005a5e:	7cfb      	ldrb	r3, [r7, #19]
 8005a60:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d028      	beq.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005a6e:	4b23      	ldr	r3, [pc, #140]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a74:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a7c:	491f      	ldr	r1, [pc, #124]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a88:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005a8c:	d106      	bne.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a8e:	4b1b      	ldr	r3, [pc, #108]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a90:	68db      	ldr	r3, [r3, #12]
 8005a92:	4a1a      	ldr	r2, [pc, #104]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a94:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a98:	60d3      	str	r3, [r2, #12]
 8005a9a:	e011      	b.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005aa0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005aa4:	d10c      	bne.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	3304      	adds	r3, #4
 8005aaa:	2101      	movs	r1, #1
 8005aac:	4618      	mov	r0, r3
 8005aae:	f000 f899 	bl	8005be4 <RCCEx_PLLSAI1_Config>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005ab6:	7cfb      	ldrb	r3, [r7, #19]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d001      	beq.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005abc:	7cfb      	ldrb	r3, [r7, #19]
 8005abe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d02b      	beq.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005acc:	4b0b      	ldr	r3, [pc, #44]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ad2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ada:	4908      	ldr	r1, [pc, #32]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005adc:	4313      	orrs	r3, r2
 8005ade:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ae6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005aea:	d109      	bne.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005aec:	4b03      	ldr	r3, [pc, #12]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005aee:	68db      	ldr	r3, [r3, #12]
 8005af0:	4a02      	ldr	r2, [pc, #8]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005af2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005af6:	60d3      	str	r3, [r2, #12]
 8005af8:	e014      	b.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005afa:	bf00      	nop
 8005afc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b04:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005b08:	d10c      	bne.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	3304      	adds	r3, #4
 8005b0e:	2101      	movs	r1, #1
 8005b10:	4618      	mov	r0, r3
 8005b12:	f000 f867 	bl	8005be4 <RCCEx_PLLSAI1_Config>
 8005b16:	4603      	mov	r3, r0
 8005b18:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005b1a:	7cfb      	ldrb	r3, [r7, #19]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d001      	beq.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005b20:	7cfb      	ldrb	r3, [r7, #19]
 8005b22:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d02f      	beq.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005b30:	4b2b      	ldr	r3, [pc, #172]	@ (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b36:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005b3e:	4928      	ldr	r1, [pc, #160]	@ (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005b40:	4313      	orrs	r3, r2
 8005b42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005b4a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005b4e:	d10d      	bne.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	3304      	adds	r3, #4
 8005b54:	2102      	movs	r1, #2
 8005b56:	4618      	mov	r0, r3
 8005b58:	f000 f844 	bl	8005be4 <RCCEx_PLLSAI1_Config>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005b60:	7cfb      	ldrb	r3, [r7, #19]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d014      	beq.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005b66:	7cfb      	ldrb	r3, [r7, #19]
 8005b68:	74bb      	strb	r3, [r7, #18]
 8005b6a:	e011      	b.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005b70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b74:	d10c      	bne.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	3320      	adds	r3, #32
 8005b7a:	2102      	movs	r1, #2
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f000 f925 	bl	8005dcc <RCCEx_PLLSAI2_Config>
 8005b82:	4603      	mov	r3, r0
 8005b84:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005b86:	7cfb      	ldrb	r3, [r7, #19]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d001      	beq.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005b8c:	7cfb      	ldrb	r3, [r7, #19]
 8005b8e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d00a      	beq.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005b9c:	4b10      	ldr	r3, [pc, #64]	@ (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ba2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005baa:	490d      	ldr	r1, [pc, #52]	@ (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005bac:	4313      	orrs	r3, r2
 8005bae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d00b      	beq.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005bbe:	4b08      	ldr	r3, [pc, #32]	@ (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bc4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005bce:	4904      	ldr	r1, [pc, #16]	@ (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005bd6:	7cbb      	ldrb	r3, [r7, #18]
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3718      	adds	r7, #24
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}
 8005be0:	40021000 	.word	0x40021000

08005be4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b084      	sub	sp, #16
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005bf2:	4b75      	ldr	r3, [pc, #468]	@ (8005dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005bf4:	68db      	ldr	r3, [r3, #12]
 8005bf6:	f003 0303 	and.w	r3, r3, #3
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d018      	beq.n	8005c30 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005bfe:	4b72      	ldr	r3, [pc, #456]	@ (8005dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c00:	68db      	ldr	r3, [r3, #12]
 8005c02:	f003 0203 	and.w	r2, r3, #3
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d10d      	bne.n	8005c2a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
       ||
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d009      	beq.n	8005c2a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005c16:	4b6c      	ldr	r3, [pc, #432]	@ (8005dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c18:	68db      	ldr	r3, [r3, #12]
 8005c1a:	091b      	lsrs	r3, r3, #4
 8005c1c:	f003 0307 	and.w	r3, r3, #7
 8005c20:	1c5a      	adds	r2, r3, #1
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	685b      	ldr	r3, [r3, #4]
       ||
 8005c26:	429a      	cmp	r2, r3
 8005c28:	d047      	beq.n	8005cba <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	73fb      	strb	r3, [r7, #15]
 8005c2e:	e044      	b.n	8005cba <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	2b03      	cmp	r3, #3
 8005c36:	d018      	beq.n	8005c6a <RCCEx_PLLSAI1_Config+0x86>
 8005c38:	2b03      	cmp	r3, #3
 8005c3a:	d825      	bhi.n	8005c88 <RCCEx_PLLSAI1_Config+0xa4>
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d002      	beq.n	8005c46 <RCCEx_PLLSAI1_Config+0x62>
 8005c40:	2b02      	cmp	r3, #2
 8005c42:	d009      	beq.n	8005c58 <RCCEx_PLLSAI1_Config+0x74>
 8005c44:	e020      	b.n	8005c88 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005c46:	4b60      	ldr	r3, [pc, #384]	@ (8005dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f003 0302 	and.w	r3, r3, #2
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d11d      	bne.n	8005c8e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c56:	e01a      	b.n	8005c8e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005c58:	4b5b      	ldr	r3, [pc, #364]	@ (8005dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d116      	bne.n	8005c92 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c68:	e013      	b.n	8005c92 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005c6a:	4b57      	ldr	r3, [pc, #348]	@ (8005dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d10f      	bne.n	8005c96 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005c76:	4b54      	ldr	r3, [pc, #336]	@ (8005dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d109      	bne.n	8005c96 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005c86:	e006      	b.n	8005c96 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	73fb      	strb	r3, [r7, #15]
      break;
 8005c8c:	e004      	b.n	8005c98 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005c8e:	bf00      	nop
 8005c90:	e002      	b.n	8005c98 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005c92:	bf00      	nop
 8005c94:	e000      	b.n	8005c98 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005c96:	bf00      	nop
    }

    if(status == HAL_OK)
 8005c98:	7bfb      	ldrb	r3, [r7, #15]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d10d      	bne.n	8005cba <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005c9e:	4b4a      	ldr	r3, [pc, #296]	@ (8005dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ca0:	68db      	ldr	r3, [r3, #12]
 8005ca2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6819      	ldr	r1, [r3, #0]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	3b01      	subs	r3, #1
 8005cb0:	011b      	lsls	r3, r3, #4
 8005cb2:	430b      	orrs	r3, r1
 8005cb4:	4944      	ldr	r1, [pc, #272]	@ (8005dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005cba:	7bfb      	ldrb	r3, [r7, #15]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d17d      	bne.n	8005dbc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005cc0:	4b41      	ldr	r3, [pc, #260]	@ (8005dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a40      	ldr	r2, [pc, #256]	@ (8005dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005cc6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005cca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ccc:	f7fb fcc8 	bl	8001660 <HAL_GetTick>
 8005cd0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005cd2:	e009      	b.n	8005ce8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005cd4:	f7fb fcc4 	bl	8001660 <HAL_GetTick>
 8005cd8:	4602      	mov	r2, r0
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	1ad3      	subs	r3, r2, r3
 8005cde:	2b02      	cmp	r3, #2
 8005ce0:	d902      	bls.n	8005ce8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005ce2:	2303      	movs	r3, #3
 8005ce4:	73fb      	strb	r3, [r7, #15]
        break;
 8005ce6:	e005      	b.n	8005cf4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005ce8:	4b37      	ldr	r3, [pc, #220]	@ (8005dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d1ef      	bne.n	8005cd4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005cf4:	7bfb      	ldrb	r3, [r7, #15]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d160      	bne.n	8005dbc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d111      	bne.n	8005d24 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005d00:	4b31      	ldr	r3, [pc, #196]	@ (8005dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d02:	691b      	ldr	r3, [r3, #16]
 8005d04:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005d08:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d0c:	687a      	ldr	r2, [r7, #4]
 8005d0e:	6892      	ldr	r2, [r2, #8]
 8005d10:	0211      	lsls	r1, r2, #8
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	68d2      	ldr	r2, [r2, #12]
 8005d16:	0912      	lsrs	r2, r2, #4
 8005d18:	0452      	lsls	r2, r2, #17
 8005d1a:	430a      	orrs	r2, r1
 8005d1c:	492a      	ldr	r1, [pc, #168]	@ (8005dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	610b      	str	r3, [r1, #16]
 8005d22:	e027      	b.n	8005d74 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	d112      	bne.n	8005d50 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005d2a:	4b27      	ldr	r3, [pc, #156]	@ (8005dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d2c:	691b      	ldr	r3, [r3, #16]
 8005d2e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005d32:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005d36:	687a      	ldr	r2, [r7, #4]
 8005d38:	6892      	ldr	r2, [r2, #8]
 8005d3a:	0211      	lsls	r1, r2, #8
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	6912      	ldr	r2, [r2, #16]
 8005d40:	0852      	lsrs	r2, r2, #1
 8005d42:	3a01      	subs	r2, #1
 8005d44:	0552      	lsls	r2, r2, #21
 8005d46:	430a      	orrs	r2, r1
 8005d48:	491f      	ldr	r1, [pc, #124]	@ (8005dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	610b      	str	r3, [r1, #16]
 8005d4e:	e011      	b.n	8005d74 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005d50:	4b1d      	ldr	r3, [pc, #116]	@ (8005dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d52:	691b      	ldr	r3, [r3, #16]
 8005d54:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005d58:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005d5c:	687a      	ldr	r2, [r7, #4]
 8005d5e:	6892      	ldr	r2, [r2, #8]
 8005d60:	0211      	lsls	r1, r2, #8
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	6952      	ldr	r2, [r2, #20]
 8005d66:	0852      	lsrs	r2, r2, #1
 8005d68:	3a01      	subs	r2, #1
 8005d6a:	0652      	lsls	r2, r2, #25
 8005d6c:	430a      	orrs	r2, r1
 8005d6e:	4916      	ldr	r1, [pc, #88]	@ (8005dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d70:	4313      	orrs	r3, r2
 8005d72:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005d74:	4b14      	ldr	r3, [pc, #80]	@ (8005dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a13      	ldr	r2, [pc, #76]	@ (8005dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d7a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005d7e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d80:	f7fb fc6e 	bl	8001660 <HAL_GetTick>
 8005d84:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005d86:	e009      	b.n	8005d9c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005d88:	f7fb fc6a 	bl	8001660 <HAL_GetTick>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	1ad3      	subs	r3, r2, r3
 8005d92:	2b02      	cmp	r3, #2
 8005d94:	d902      	bls.n	8005d9c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005d96:	2303      	movs	r3, #3
 8005d98:	73fb      	strb	r3, [r7, #15]
          break;
 8005d9a:	e005      	b.n	8005da8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005d9c:	4b0a      	ldr	r3, [pc, #40]	@ (8005dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d0ef      	beq.n	8005d88 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005da8:	7bfb      	ldrb	r3, [r7, #15]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d106      	bne.n	8005dbc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005dae:	4b06      	ldr	r3, [pc, #24]	@ (8005dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005db0:	691a      	ldr	r2, [r3, #16]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	699b      	ldr	r3, [r3, #24]
 8005db6:	4904      	ldr	r1, [pc, #16]	@ (8005dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005db8:	4313      	orrs	r3, r2
 8005dba:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3710      	adds	r7, #16
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}
 8005dc6:	bf00      	nop
 8005dc8:	40021000 	.word	0x40021000

08005dcc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b084      	sub	sp, #16
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005dda:	4b6a      	ldr	r3, [pc, #424]	@ (8005f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ddc:	68db      	ldr	r3, [r3, #12]
 8005dde:	f003 0303 	and.w	r3, r3, #3
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d018      	beq.n	8005e18 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005de6:	4b67      	ldr	r3, [pc, #412]	@ (8005f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005de8:	68db      	ldr	r3, [r3, #12]
 8005dea:	f003 0203 	and.w	r2, r3, #3
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	429a      	cmp	r2, r3
 8005df4:	d10d      	bne.n	8005e12 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
       ||
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d009      	beq.n	8005e12 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005dfe:	4b61      	ldr	r3, [pc, #388]	@ (8005f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e00:	68db      	ldr	r3, [r3, #12]
 8005e02:	091b      	lsrs	r3, r3, #4
 8005e04:	f003 0307 	and.w	r3, r3, #7
 8005e08:	1c5a      	adds	r2, r3, #1
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	685b      	ldr	r3, [r3, #4]
       ||
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d047      	beq.n	8005ea2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005e12:	2301      	movs	r3, #1
 8005e14:	73fb      	strb	r3, [r7, #15]
 8005e16:	e044      	b.n	8005ea2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	2b03      	cmp	r3, #3
 8005e1e:	d018      	beq.n	8005e52 <RCCEx_PLLSAI2_Config+0x86>
 8005e20:	2b03      	cmp	r3, #3
 8005e22:	d825      	bhi.n	8005e70 <RCCEx_PLLSAI2_Config+0xa4>
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d002      	beq.n	8005e2e <RCCEx_PLLSAI2_Config+0x62>
 8005e28:	2b02      	cmp	r3, #2
 8005e2a:	d009      	beq.n	8005e40 <RCCEx_PLLSAI2_Config+0x74>
 8005e2c:	e020      	b.n	8005e70 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005e2e:	4b55      	ldr	r3, [pc, #340]	@ (8005f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f003 0302 	and.w	r3, r3, #2
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d11d      	bne.n	8005e76 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e3e:	e01a      	b.n	8005e76 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005e40:	4b50      	ldr	r3, [pc, #320]	@ (8005f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d116      	bne.n	8005e7a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e50:	e013      	b.n	8005e7a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005e52:	4b4c      	ldr	r3, [pc, #304]	@ (8005f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d10f      	bne.n	8005e7e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005e5e:	4b49      	ldr	r3, [pc, #292]	@ (8005f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d109      	bne.n	8005e7e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005e6e:	e006      	b.n	8005e7e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005e70:	2301      	movs	r3, #1
 8005e72:	73fb      	strb	r3, [r7, #15]
      break;
 8005e74:	e004      	b.n	8005e80 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005e76:	bf00      	nop
 8005e78:	e002      	b.n	8005e80 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005e7a:	bf00      	nop
 8005e7c:	e000      	b.n	8005e80 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005e7e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005e80:	7bfb      	ldrb	r3, [r7, #15]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d10d      	bne.n	8005ea2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005e86:	4b3f      	ldr	r3, [pc, #252]	@ (8005f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e88:	68db      	ldr	r3, [r3, #12]
 8005e8a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6819      	ldr	r1, [r3, #0]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	3b01      	subs	r3, #1
 8005e98:	011b      	lsls	r3, r3, #4
 8005e9a:	430b      	orrs	r3, r1
 8005e9c:	4939      	ldr	r1, [pc, #228]	@ (8005f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005ea2:	7bfb      	ldrb	r3, [r7, #15]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d167      	bne.n	8005f78 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005ea8:	4b36      	ldr	r3, [pc, #216]	@ (8005f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a35      	ldr	r2, [pc, #212]	@ (8005f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005eae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005eb2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005eb4:	f7fb fbd4 	bl	8001660 <HAL_GetTick>
 8005eb8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005eba:	e009      	b.n	8005ed0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005ebc:	f7fb fbd0 	bl	8001660 <HAL_GetTick>
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	1ad3      	subs	r3, r2, r3
 8005ec6:	2b02      	cmp	r3, #2
 8005ec8:	d902      	bls.n	8005ed0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005eca:	2303      	movs	r3, #3
 8005ecc:	73fb      	strb	r3, [r7, #15]
        break;
 8005ece:	e005      	b.n	8005edc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005ed0:	4b2c      	ldr	r3, [pc, #176]	@ (8005f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d1ef      	bne.n	8005ebc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005edc:	7bfb      	ldrb	r3, [r7, #15]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d14a      	bne.n	8005f78 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d111      	bne.n	8005f0c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005ee8:	4b26      	ldr	r3, [pc, #152]	@ (8005f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005eea:	695b      	ldr	r3, [r3, #20]
 8005eec:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005ef0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	6892      	ldr	r2, [r2, #8]
 8005ef8:	0211      	lsls	r1, r2, #8
 8005efa:	687a      	ldr	r2, [r7, #4]
 8005efc:	68d2      	ldr	r2, [r2, #12]
 8005efe:	0912      	lsrs	r2, r2, #4
 8005f00:	0452      	lsls	r2, r2, #17
 8005f02:	430a      	orrs	r2, r1
 8005f04:	491f      	ldr	r1, [pc, #124]	@ (8005f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f06:	4313      	orrs	r3, r2
 8005f08:	614b      	str	r3, [r1, #20]
 8005f0a:	e011      	b.n	8005f30 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005f0c:	4b1d      	ldr	r3, [pc, #116]	@ (8005f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f0e:	695b      	ldr	r3, [r3, #20]
 8005f10:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005f14:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005f18:	687a      	ldr	r2, [r7, #4]
 8005f1a:	6892      	ldr	r2, [r2, #8]
 8005f1c:	0211      	lsls	r1, r2, #8
 8005f1e:	687a      	ldr	r2, [r7, #4]
 8005f20:	6912      	ldr	r2, [r2, #16]
 8005f22:	0852      	lsrs	r2, r2, #1
 8005f24:	3a01      	subs	r2, #1
 8005f26:	0652      	lsls	r2, r2, #25
 8005f28:	430a      	orrs	r2, r1
 8005f2a:	4916      	ldr	r1, [pc, #88]	@ (8005f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005f30:	4b14      	ldr	r3, [pc, #80]	@ (8005f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a13      	ldr	r2, [pc, #76]	@ (8005f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f3a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f3c:	f7fb fb90 	bl	8001660 <HAL_GetTick>
 8005f40:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005f42:	e009      	b.n	8005f58 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005f44:	f7fb fb8c 	bl	8001660 <HAL_GetTick>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	1ad3      	subs	r3, r2, r3
 8005f4e:	2b02      	cmp	r3, #2
 8005f50:	d902      	bls.n	8005f58 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005f52:	2303      	movs	r3, #3
 8005f54:	73fb      	strb	r3, [r7, #15]
          break;
 8005f56:	e005      	b.n	8005f64 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005f58:	4b0a      	ldr	r3, [pc, #40]	@ (8005f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d0ef      	beq.n	8005f44 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005f64:	7bfb      	ldrb	r3, [r7, #15]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d106      	bne.n	8005f78 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005f6a:	4b06      	ldr	r3, [pc, #24]	@ (8005f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f6c:	695a      	ldr	r2, [r3, #20]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	695b      	ldr	r3, [r3, #20]
 8005f72:	4904      	ldr	r1, [pc, #16]	@ (8005f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f74:	4313      	orrs	r3, r2
 8005f76:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3710      	adds	r7, #16
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
 8005f82:	bf00      	nop
 8005f84:	40021000 	.word	0x40021000

08005f88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b082      	sub	sp, #8
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d101      	bne.n	8005f9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	e049      	b.n	800602e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005fa0:	b2db      	uxtb	r3, r3
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d106      	bne.n	8005fb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f7fb f966 	bl	8001280 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2202      	movs	r2, #2
 8005fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681a      	ldr	r2, [r3, #0]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	3304      	adds	r3, #4
 8005fc4:	4619      	mov	r1, r3
 8005fc6:	4610      	mov	r0, r2
 8005fc8:	f000 f9d0 	bl	800636c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2201      	movs	r2, #1
 8006000:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2201      	movs	r2, #1
 8006008:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2201      	movs	r2, #1
 8006010:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2201      	movs	r2, #1
 8006018:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2201      	movs	r2, #1
 8006020:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2201      	movs	r2, #1
 8006028:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800602c:	2300      	movs	r3, #0
}
 800602e:	4618      	mov	r0, r3
 8006030:	3708      	adds	r7, #8
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}
	...

08006038 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006038:	b480      	push	{r7}
 800603a:	b085      	sub	sp, #20
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006046:	b2db      	uxtb	r3, r3
 8006048:	2b01      	cmp	r3, #1
 800604a:	d001      	beq.n	8006050 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800604c:	2301      	movs	r3, #1
 800604e:	e04f      	b.n	80060f0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2202      	movs	r2, #2
 8006054:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	68da      	ldr	r2, [r3, #12]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f042 0201 	orr.w	r2, r2, #1
 8006066:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a23      	ldr	r2, [pc, #140]	@ (80060fc <HAL_TIM_Base_Start_IT+0xc4>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d01d      	beq.n	80060ae <HAL_TIM_Base_Start_IT+0x76>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800607a:	d018      	beq.n	80060ae <HAL_TIM_Base_Start_IT+0x76>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a1f      	ldr	r2, [pc, #124]	@ (8006100 <HAL_TIM_Base_Start_IT+0xc8>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d013      	beq.n	80060ae <HAL_TIM_Base_Start_IT+0x76>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a1e      	ldr	r2, [pc, #120]	@ (8006104 <HAL_TIM_Base_Start_IT+0xcc>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d00e      	beq.n	80060ae <HAL_TIM_Base_Start_IT+0x76>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a1c      	ldr	r2, [pc, #112]	@ (8006108 <HAL_TIM_Base_Start_IT+0xd0>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d009      	beq.n	80060ae <HAL_TIM_Base_Start_IT+0x76>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a1b      	ldr	r2, [pc, #108]	@ (800610c <HAL_TIM_Base_Start_IT+0xd4>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d004      	beq.n	80060ae <HAL_TIM_Base_Start_IT+0x76>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a19      	ldr	r2, [pc, #100]	@ (8006110 <HAL_TIM_Base_Start_IT+0xd8>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d115      	bne.n	80060da <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	689a      	ldr	r2, [r3, #8]
 80060b4:	4b17      	ldr	r3, [pc, #92]	@ (8006114 <HAL_TIM_Base_Start_IT+0xdc>)
 80060b6:	4013      	ands	r3, r2
 80060b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2b06      	cmp	r3, #6
 80060be:	d015      	beq.n	80060ec <HAL_TIM_Base_Start_IT+0xb4>
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060c6:	d011      	beq.n	80060ec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f042 0201 	orr.w	r2, r2, #1
 80060d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060d8:	e008      	b.n	80060ec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f042 0201 	orr.w	r2, r2, #1
 80060e8:	601a      	str	r2, [r3, #0]
 80060ea:	e000      	b.n	80060ee <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060ec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80060ee:	2300      	movs	r3, #0
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3714      	adds	r7, #20
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr
 80060fc:	40012c00 	.word	0x40012c00
 8006100:	40000400 	.word	0x40000400
 8006104:	40000800 	.word	0x40000800
 8006108:	40000c00 	.word	0x40000c00
 800610c:	40013400 	.word	0x40013400
 8006110:	40014000 	.word	0x40014000
 8006114:	00010007 	.word	0x00010007

08006118 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b084      	sub	sp, #16
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	68db      	ldr	r3, [r3, #12]
 8006126:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	691b      	ldr	r3, [r3, #16]
 800612e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	f003 0302 	and.w	r3, r3, #2
 8006136:	2b00      	cmp	r3, #0
 8006138:	d020      	beq.n	800617c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	f003 0302 	and.w	r3, r3, #2
 8006140:	2b00      	cmp	r3, #0
 8006142:	d01b      	beq.n	800617c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f06f 0202 	mvn.w	r2, #2
 800614c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2201      	movs	r2, #1
 8006152:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	699b      	ldr	r3, [r3, #24]
 800615a:	f003 0303 	and.w	r3, r3, #3
 800615e:	2b00      	cmp	r3, #0
 8006160:	d003      	beq.n	800616a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f000 f8e4 	bl	8006330 <HAL_TIM_IC_CaptureCallback>
 8006168:	e005      	b.n	8006176 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f000 f8d6 	bl	800631c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f000 f8e7 	bl	8006344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2200      	movs	r2, #0
 800617a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	f003 0304 	and.w	r3, r3, #4
 8006182:	2b00      	cmp	r3, #0
 8006184:	d020      	beq.n	80061c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f003 0304 	and.w	r3, r3, #4
 800618c:	2b00      	cmp	r3, #0
 800618e:	d01b      	beq.n	80061c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f06f 0204 	mvn.w	r2, #4
 8006198:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2202      	movs	r2, #2
 800619e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	699b      	ldr	r3, [r3, #24]
 80061a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d003      	beq.n	80061b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f000 f8be 	bl	8006330 <HAL_TIM_IC_CaptureCallback>
 80061b4:	e005      	b.n	80061c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f000 f8b0 	bl	800631c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f000 f8c1 	bl	8006344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2200      	movs	r2, #0
 80061c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	f003 0308 	and.w	r3, r3, #8
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d020      	beq.n	8006214 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	f003 0308 	and.w	r3, r3, #8
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d01b      	beq.n	8006214 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f06f 0208 	mvn.w	r2, #8
 80061e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2204      	movs	r2, #4
 80061ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	69db      	ldr	r3, [r3, #28]
 80061f2:	f003 0303 	and.w	r3, r3, #3
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d003      	beq.n	8006202 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f000 f898 	bl	8006330 <HAL_TIM_IC_CaptureCallback>
 8006200:	e005      	b.n	800620e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f000 f88a 	bl	800631c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f000 f89b 	bl	8006344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2200      	movs	r2, #0
 8006212:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	f003 0310 	and.w	r3, r3, #16
 800621a:	2b00      	cmp	r3, #0
 800621c:	d020      	beq.n	8006260 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	f003 0310 	and.w	r3, r3, #16
 8006224:	2b00      	cmp	r3, #0
 8006226:	d01b      	beq.n	8006260 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f06f 0210 	mvn.w	r2, #16
 8006230:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2208      	movs	r2, #8
 8006236:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	69db      	ldr	r3, [r3, #28]
 800623e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006242:	2b00      	cmp	r3, #0
 8006244:	d003      	beq.n	800624e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f000 f872 	bl	8006330 <HAL_TIM_IC_CaptureCallback>
 800624c:	e005      	b.n	800625a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 f864 	bl	800631c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f000 f875 	bl	8006344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2200      	movs	r2, #0
 800625e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	f003 0301 	and.w	r3, r3, #1
 8006266:	2b00      	cmp	r3, #0
 8006268:	d00c      	beq.n	8006284 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	f003 0301 	and.w	r3, r3, #1
 8006270:	2b00      	cmp	r3, #0
 8006272:	d007      	beq.n	8006284 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f06f 0201 	mvn.w	r2, #1
 800627c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f7fa fa6a 	bl	8000758 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800628a:	2b00      	cmp	r3, #0
 800628c:	d00c      	beq.n	80062a8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006294:	2b00      	cmp	r3, #0
 8006296:	d007      	beq.n	80062a8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80062a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f000 f98e 	bl	80065c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d00c      	beq.n	80062cc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d007      	beq.n	80062cc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80062c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f000 f986 	bl	80065d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d00c      	beq.n	80062f0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d007      	beq.n	80062f0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80062e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f000 f834 	bl	8006358 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	f003 0320 	and.w	r3, r3, #32
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d00c      	beq.n	8006314 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	f003 0320 	and.w	r3, r3, #32
 8006300:	2b00      	cmp	r3, #0
 8006302:	d007      	beq.n	8006314 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f06f 0220 	mvn.w	r2, #32
 800630c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f000 f94e 	bl	80065b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006314:	bf00      	nop
 8006316:	3710      	adds	r7, #16
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}

0800631c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800631c:	b480      	push	{r7}
 800631e:	b083      	sub	sp, #12
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006324:	bf00      	nop
 8006326:	370c      	adds	r7, #12
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr

08006330 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006330:	b480      	push	{r7}
 8006332:	b083      	sub	sp, #12
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006338:	bf00      	nop
 800633a:	370c      	adds	r7, #12
 800633c:	46bd      	mov	sp, r7
 800633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006342:	4770      	bx	lr

08006344 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006344:	b480      	push	{r7}
 8006346:	b083      	sub	sp, #12
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800634c:	bf00      	nop
 800634e:	370c      	adds	r7, #12
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr

08006358 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006358:	b480      	push	{r7}
 800635a:	b083      	sub	sp, #12
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006360:	bf00      	nop
 8006362:	370c      	adds	r7, #12
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr

0800636c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800636c:	b480      	push	{r7}
 800636e:	b085      	sub	sp, #20
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
 8006374:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	4a40      	ldr	r2, [pc, #256]	@ (8006480 <TIM_Base_SetConfig+0x114>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d013      	beq.n	80063ac <TIM_Base_SetConfig+0x40>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800638a:	d00f      	beq.n	80063ac <TIM_Base_SetConfig+0x40>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	4a3d      	ldr	r2, [pc, #244]	@ (8006484 <TIM_Base_SetConfig+0x118>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d00b      	beq.n	80063ac <TIM_Base_SetConfig+0x40>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	4a3c      	ldr	r2, [pc, #240]	@ (8006488 <TIM_Base_SetConfig+0x11c>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d007      	beq.n	80063ac <TIM_Base_SetConfig+0x40>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	4a3b      	ldr	r2, [pc, #236]	@ (800648c <TIM_Base_SetConfig+0x120>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d003      	beq.n	80063ac <TIM_Base_SetConfig+0x40>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	4a3a      	ldr	r2, [pc, #232]	@ (8006490 <TIM_Base_SetConfig+0x124>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d108      	bne.n	80063be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	68fa      	ldr	r2, [r7, #12]
 80063ba:	4313      	orrs	r3, r2
 80063bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	4a2f      	ldr	r2, [pc, #188]	@ (8006480 <TIM_Base_SetConfig+0x114>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d01f      	beq.n	8006406 <TIM_Base_SetConfig+0x9a>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063cc:	d01b      	beq.n	8006406 <TIM_Base_SetConfig+0x9a>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	4a2c      	ldr	r2, [pc, #176]	@ (8006484 <TIM_Base_SetConfig+0x118>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d017      	beq.n	8006406 <TIM_Base_SetConfig+0x9a>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	4a2b      	ldr	r2, [pc, #172]	@ (8006488 <TIM_Base_SetConfig+0x11c>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d013      	beq.n	8006406 <TIM_Base_SetConfig+0x9a>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	4a2a      	ldr	r2, [pc, #168]	@ (800648c <TIM_Base_SetConfig+0x120>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d00f      	beq.n	8006406 <TIM_Base_SetConfig+0x9a>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	4a29      	ldr	r2, [pc, #164]	@ (8006490 <TIM_Base_SetConfig+0x124>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d00b      	beq.n	8006406 <TIM_Base_SetConfig+0x9a>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	4a28      	ldr	r2, [pc, #160]	@ (8006494 <TIM_Base_SetConfig+0x128>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d007      	beq.n	8006406 <TIM_Base_SetConfig+0x9a>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	4a27      	ldr	r2, [pc, #156]	@ (8006498 <TIM_Base_SetConfig+0x12c>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d003      	beq.n	8006406 <TIM_Base_SetConfig+0x9a>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	4a26      	ldr	r2, [pc, #152]	@ (800649c <TIM_Base_SetConfig+0x130>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d108      	bne.n	8006418 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800640c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	68db      	ldr	r3, [r3, #12]
 8006412:	68fa      	ldr	r2, [r7, #12]
 8006414:	4313      	orrs	r3, r2
 8006416:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	695b      	ldr	r3, [r3, #20]
 8006422:	4313      	orrs	r3, r2
 8006424:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	68fa      	ldr	r2, [r7, #12]
 800642a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	689a      	ldr	r2, [r3, #8]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	681a      	ldr	r2, [r3, #0]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	4a10      	ldr	r2, [pc, #64]	@ (8006480 <TIM_Base_SetConfig+0x114>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d00f      	beq.n	8006464 <TIM_Base_SetConfig+0xf8>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	4a12      	ldr	r2, [pc, #72]	@ (8006490 <TIM_Base_SetConfig+0x124>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d00b      	beq.n	8006464 <TIM_Base_SetConfig+0xf8>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	4a11      	ldr	r2, [pc, #68]	@ (8006494 <TIM_Base_SetConfig+0x128>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d007      	beq.n	8006464 <TIM_Base_SetConfig+0xf8>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	4a10      	ldr	r2, [pc, #64]	@ (8006498 <TIM_Base_SetConfig+0x12c>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d003      	beq.n	8006464 <TIM_Base_SetConfig+0xf8>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	4a0f      	ldr	r2, [pc, #60]	@ (800649c <TIM_Base_SetConfig+0x130>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d103      	bne.n	800646c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	691a      	ldr	r2, [r3, #16]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2201      	movs	r2, #1
 8006470:	615a      	str	r2, [r3, #20]
}
 8006472:	bf00      	nop
 8006474:	3714      	adds	r7, #20
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr
 800647e:	bf00      	nop
 8006480:	40012c00 	.word	0x40012c00
 8006484:	40000400 	.word	0x40000400
 8006488:	40000800 	.word	0x40000800
 800648c:	40000c00 	.word	0x40000c00
 8006490:	40013400 	.word	0x40013400
 8006494:	40014000 	.word	0x40014000
 8006498:	40014400 	.word	0x40014400
 800649c:	40014800 	.word	0x40014800

080064a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b085      	sub	sp, #20
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
 80064a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d101      	bne.n	80064b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80064b4:	2302      	movs	r3, #2
 80064b6:	e068      	b.n	800658a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2201      	movs	r2, #1
 80064bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2202      	movs	r2, #2
 80064c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a2e      	ldr	r2, [pc, #184]	@ (8006598 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d004      	beq.n	80064ec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a2d      	ldr	r2, [pc, #180]	@ (800659c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d108      	bne.n	80064fe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80064f2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	68fa      	ldr	r2, [r7, #12]
 80064fa:	4313      	orrs	r3, r2
 80064fc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006504:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	68fa      	ldr	r2, [r7, #12]
 800650c:	4313      	orrs	r3, r2
 800650e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	68fa      	ldr	r2, [r7, #12]
 8006516:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a1e      	ldr	r2, [pc, #120]	@ (8006598 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d01d      	beq.n	800655e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800652a:	d018      	beq.n	800655e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a1b      	ldr	r2, [pc, #108]	@ (80065a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d013      	beq.n	800655e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a1a      	ldr	r2, [pc, #104]	@ (80065a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d00e      	beq.n	800655e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a18      	ldr	r2, [pc, #96]	@ (80065a8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d009      	beq.n	800655e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a13      	ldr	r2, [pc, #76]	@ (800659c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d004      	beq.n	800655e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a14      	ldr	r2, [pc, #80]	@ (80065ac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d10c      	bne.n	8006578 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006564:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	68ba      	ldr	r2, [r7, #8]
 800656c:	4313      	orrs	r3, r2
 800656e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	68ba      	ldr	r2, [r7, #8]
 8006576:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2201      	movs	r2, #1
 800657c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2200      	movs	r2, #0
 8006584:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006588:	2300      	movs	r3, #0
}
 800658a:	4618      	mov	r0, r3
 800658c:	3714      	adds	r7, #20
 800658e:	46bd      	mov	sp, r7
 8006590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006594:	4770      	bx	lr
 8006596:	bf00      	nop
 8006598:	40012c00 	.word	0x40012c00
 800659c:	40013400 	.word	0x40013400
 80065a0:	40000400 	.word	0x40000400
 80065a4:	40000800 	.word	0x40000800
 80065a8:	40000c00 	.word	0x40000c00
 80065ac:	40014000 	.word	0x40014000

080065b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b083      	sub	sp, #12
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80065b8:	bf00      	nop
 80065ba:	370c      	adds	r7, #12
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr

080065c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b083      	sub	sp, #12
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80065cc:	bf00      	nop
 80065ce:	370c      	adds	r7, #12
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr

080065d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80065d8:	b480      	push	{r7}
 80065da:	b083      	sub	sp, #12
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80065e0:	bf00      	nop
 80065e2:	370c      	adds	r7, #12
 80065e4:	46bd      	mov	sp, r7
 80065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ea:	4770      	bx	lr

080065ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b082      	sub	sp, #8
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d101      	bne.n	80065fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80065fa:	2301      	movs	r3, #1
 80065fc:	e040      	b.n	8006680 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006602:	2b00      	cmp	r3, #0
 8006604:	d106      	bne.n	8006614 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2200      	movs	r2, #0
 800660a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f7fa fe5c 	bl	80012cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2224      	movs	r2, #36	@ 0x24
 8006618:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f022 0201 	bic.w	r2, r2, #1
 8006628:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800662e:	2b00      	cmp	r3, #0
 8006630:	d002      	beq.n	8006638 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f000 fe74 	bl	8007320 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f000 fbb9 	bl	8006db0 <UART_SetConfig>
 800663e:	4603      	mov	r3, r0
 8006640:	2b01      	cmp	r3, #1
 8006642:	d101      	bne.n	8006648 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006644:	2301      	movs	r3, #1
 8006646:	e01b      	b.n	8006680 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	685a      	ldr	r2, [r3, #4]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006656:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	689a      	ldr	r2, [r3, #8]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006666:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f042 0201 	orr.w	r2, r2, #1
 8006676:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f000 fef3 	bl	8007464 <UART_CheckIdleState>
 800667e:	4603      	mov	r3, r0
}
 8006680:	4618      	mov	r0, r3
 8006682:	3708      	adds	r7, #8
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}

08006688 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b08a      	sub	sp, #40	@ 0x28
 800668c:	af02      	add	r7, sp, #8
 800668e:	60f8      	str	r0, [r7, #12]
 8006690:	60b9      	str	r1, [r7, #8]
 8006692:	603b      	str	r3, [r7, #0]
 8006694:	4613      	mov	r3, r2
 8006696:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800669c:	2b20      	cmp	r3, #32
 800669e:	d177      	bne.n	8006790 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d002      	beq.n	80066ac <HAL_UART_Transmit+0x24>
 80066a6:	88fb      	ldrh	r3, [r7, #6]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d101      	bne.n	80066b0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80066ac:	2301      	movs	r3, #1
 80066ae:	e070      	b.n	8006792 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2200      	movs	r2, #0
 80066b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2221      	movs	r2, #33	@ 0x21
 80066bc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80066be:	f7fa ffcf 	bl	8001660 <HAL_GetTick>
 80066c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	88fa      	ldrh	r2, [r7, #6]
 80066c8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	88fa      	ldrh	r2, [r7, #6]
 80066d0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066dc:	d108      	bne.n	80066f0 <HAL_UART_Transmit+0x68>
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	691b      	ldr	r3, [r3, #16]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d104      	bne.n	80066f0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80066e6:	2300      	movs	r3, #0
 80066e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	61bb      	str	r3, [r7, #24]
 80066ee:	e003      	b.n	80066f8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80066f4:	2300      	movs	r3, #0
 80066f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80066f8:	e02f      	b.n	800675a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	9300      	str	r3, [sp, #0]
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	2200      	movs	r2, #0
 8006702:	2180      	movs	r1, #128	@ 0x80
 8006704:	68f8      	ldr	r0, [r7, #12]
 8006706:	f000 ff55 	bl	80075b4 <UART_WaitOnFlagUntilTimeout>
 800670a:	4603      	mov	r3, r0
 800670c:	2b00      	cmp	r3, #0
 800670e:	d004      	beq.n	800671a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2220      	movs	r2, #32
 8006714:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006716:	2303      	movs	r3, #3
 8006718:	e03b      	b.n	8006792 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800671a:	69fb      	ldr	r3, [r7, #28]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d10b      	bne.n	8006738 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006720:	69bb      	ldr	r3, [r7, #24]
 8006722:	881a      	ldrh	r2, [r3, #0]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800672c:	b292      	uxth	r2, r2
 800672e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006730:	69bb      	ldr	r3, [r7, #24]
 8006732:	3302      	adds	r3, #2
 8006734:	61bb      	str	r3, [r7, #24]
 8006736:	e007      	b.n	8006748 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006738:	69fb      	ldr	r3, [r7, #28]
 800673a:	781a      	ldrb	r2, [r3, #0]
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006742:	69fb      	ldr	r3, [r7, #28]
 8006744:	3301      	adds	r3, #1
 8006746:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800674e:	b29b      	uxth	r3, r3
 8006750:	3b01      	subs	r3, #1
 8006752:	b29a      	uxth	r2, r3
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006760:	b29b      	uxth	r3, r3
 8006762:	2b00      	cmp	r3, #0
 8006764:	d1c9      	bne.n	80066fa <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	9300      	str	r3, [sp, #0]
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	2200      	movs	r2, #0
 800676e:	2140      	movs	r1, #64	@ 0x40
 8006770:	68f8      	ldr	r0, [r7, #12]
 8006772:	f000 ff1f 	bl	80075b4 <UART_WaitOnFlagUntilTimeout>
 8006776:	4603      	mov	r3, r0
 8006778:	2b00      	cmp	r3, #0
 800677a:	d004      	beq.n	8006786 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2220      	movs	r2, #32
 8006780:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8006782:	2303      	movs	r3, #3
 8006784:	e005      	b.n	8006792 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2220      	movs	r2, #32
 800678a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800678c:	2300      	movs	r3, #0
 800678e:	e000      	b.n	8006792 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006790:	2302      	movs	r3, #2
  }
}
 8006792:	4618      	mov	r0, r3
 8006794:	3720      	adds	r7, #32
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}
	...

0800679c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b0ba      	sub	sp, #232	@ 0xe8
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	69db      	ldr	r3, [r3, #28]
 80067aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80067c2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80067c6:	f640 030f 	movw	r3, #2063	@ 0x80f
 80067ca:	4013      	ands	r3, r2
 80067cc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80067d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d115      	bne.n	8006804 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80067d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067dc:	f003 0320 	and.w	r3, r3, #32
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d00f      	beq.n	8006804 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80067e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067e8:	f003 0320 	and.w	r3, r3, #32
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d009      	beq.n	8006804 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	f000 82ae 	beq.w	8006d56 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	4798      	blx	r3
      }
      return;
 8006802:	e2a8      	b.n	8006d56 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006804:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006808:	2b00      	cmp	r3, #0
 800680a:	f000 8117 	beq.w	8006a3c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800680e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006812:	f003 0301 	and.w	r3, r3, #1
 8006816:	2b00      	cmp	r3, #0
 8006818:	d106      	bne.n	8006828 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800681a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800681e:	4b85      	ldr	r3, [pc, #532]	@ (8006a34 <HAL_UART_IRQHandler+0x298>)
 8006820:	4013      	ands	r3, r2
 8006822:	2b00      	cmp	r3, #0
 8006824:	f000 810a 	beq.w	8006a3c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006828:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800682c:	f003 0301 	and.w	r3, r3, #1
 8006830:	2b00      	cmp	r3, #0
 8006832:	d011      	beq.n	8006858 <HAL_UART_IRQHandler+0xbc>
 8006834:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006838:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800683c:	2b00      	cmp	r3, #0
 800683e:	d00b      	beq.n	8006858 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	2201      	movs	r2, #1
 8006846:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800684e:	f043 0201 	orr.w	r2, r3, #1
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006858:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800685c:	f003 0302 	and.w	r3, r3, #2
 8006860:	2b00      	cmp	r3, #0
 8006862:	d011      	beq.n	8006888 <HAL_UART_IRQHandler+0xec>
 8006864:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006868:	f003 0301 	and.w	r3, r3, #1
 800686c:	2b00      	cmp	r3, #0
 800686e:	d00b      	beq.n	8006888 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	2202      	movs	r2, #2
 8006876:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800687e:	f043 0204 	orr.w	r2, r3, #4
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006888:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800688c:	f003 0304 	and.w	r3, r3, #4
 8006890:	2b00      	cmp	r3, #0
 8006892:	d011      	beq.n	80068b8 <HAL_UART_IRQHandler+0x11c>
 8006894:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006898:	f003 0301 	and.w	r3, r3, #1
 800689c:	2b00      	cmp	r3, #0
 800689e:	d00b      	beq.n	80068b8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	2204      	movs	r2, #4
 80068a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80068ae:	f043 0202 	orr.w	r2, r3, #2
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80068b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068bc:	f003 0308 	and.w	r3, r3, #8
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d017      	beq.n	80068f4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80068c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068c8:	f003 0320 	and.w	r3, r3, #32
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d105      	bne.n	80068dc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80068d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80068d4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d00b      	beq.n	80068f4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	2208      	movs	r2, #8
 80068e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80068ea:	f043 0208 	orr.w	r2, r3, #8
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80068f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d012      	beq.n	8006926 <HAL_UART_IRQHandler+0x18a>
 8006900:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006904:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006908:	2b00      	cmp	r3, #0
 800690a:	d00c      	beq.n	8006926 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006914:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800691c:	f043 0220 	orr.w	r2, r3, #32
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800692c:	2b00      	cmp	r3, #0
 800692e:	f000 8214 	beq.w	8006d5a <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006932:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006936:	f003 0320 	and.w	r3, r3, #32
 800693a:	2b00      	cmp	r3, #0
 800693c:	d00d      	beq.n	800695a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800693e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006942:	f003 0320 	and.w	r3, r3, #32
 8006946:	2b00      	cmp	r3, #0
 8006948:	d007      	beq.n	800695a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800694e:	2b00      	cmp	r3, #0
 8006950:	d003      	beq.n	800695a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006960:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	689b      	ldr	r3, [r3, #8]
 800696a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800696e:	2b40      	cmp	r3, #64	@ 0x40
 8006970:	d005      	beq.n	800697e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006972:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006976:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800697a:	2b00      	cmp	r3, #0
 800697c:	d04f      	beq.n	8006a1e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f000 fe7f 	bl	8007682 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	689b      	ldr	r3, [r3, #8]
 800698a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800698e:	2b40      	cmp	r3, #64	@ 0x40
 8006990:	d141      	bne.n	8006a16 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	3308      	adds	r3, #8
 8006998:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800699c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80069a0:	e853 3f00 	ldrex	r3, [r3]
 80069a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80069a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80069ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80069b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	3308      	adds	r3, #8
 80069ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80069be:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80069c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80069ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80069ce:	e841 2300 	strex	r3, r2, [r1]
 80069d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80069d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d1d9      	bne.n	8006992 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d013      	beq.n	8006a0e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069ea:	4a13      	ldr	r2, [pc, #76]	@ (8006a38 <HAL_UART_IRQHandler+0x29c>)
 80069ec:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069f2:	4618      	mov	r0, r3
 80069f4:	f7fd fcc6 	bl	8004384 <HAL_DMA_Abort_IT>
 80069f8:	4603      	mov	r3, r0
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d017      	beq.n	8006a2e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a04:	687a      	ldr	r2, [r7, #4]
 8006a06:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006a08:	4610      	mov	r0, r2
 8006a0a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a0c:	e00f      	b.n	8006a2e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f000 f9b8 	bl	8006d84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a14:	e00b      	b.n	8006a2e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f000 f9b4 	bl	8006d84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a1c:	e007      	b.n	8006a2e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f000 f9b0 	bl	8006d84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2200      	movs	r2, #0
 8006a28:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8006a2c:	e195      	b.n	8006d5a <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a2e:	bf00      	nop
    return;
 8006a30:	e193      	b.n	8006d5a <HAL_UART_IRQHandler+0x5be>
 8006a32:	bf00      	nop
 8006a34:	04000120 	.word	0x04000120
 8006a38:	0800774b 	.word	0x0800774b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	f040 814e 	bne.w	8006ce2 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006a46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a4a:	f003 0310 	and.w	r3, r3, #16
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	f000 8147 	beq.w	8006ce2 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006a54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a58:	f003 0310 	and.w	r3, r3, #16
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	f000 8140 	beq.w	8006ce2 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	2210      	movs	r2, #16
 8006a68:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a74:	2b40      	cmp	r3, #64	@ 0x40
 8006a76:	f040 80b8 	bne.w	8006bea <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006a86:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	f000 8167 	beq.w	8006d5e <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006a96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	f080 815f 	bcs.w	8006d5e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006aa6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f003 0320 	and.w	r3, r3, #32
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	f040 8086 	bne.w	8006bc8 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006ac8:	e853 3f00 	ldrex	r3, [r3]
 8006acc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006ad0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006ad4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ad8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	461a      	mov	r2, r3
 8006ae2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006ae6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006aea:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aee:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006af2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006af6:	e841 2300 	strex	r3, r2, [r1]
 8006afa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006afe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d1da      	bne.n	8006abc <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	3308      	adds	r3, #8
 8006b0c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b0e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006b10:	e853 3f00 	ldrex	r3, [r3]
 8006b14:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006b16:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006b18:	f023 0301 	bic.w	r3, r3, #1
 8006b1c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	3308      	adds	r3, #8
 8006b26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006b2a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006b2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b30:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006b32:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006b36:	e841 2300 	strex	r3, r2, [r1]
 8006b3a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006b3c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d1e1      	bne.n	8006b06 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	3308      	adds	r3, #8
 8006b48:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b4a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006b4c:	e853 3f00 	ldrex	r3, [r3]
 8006b50:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006b52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006b54:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b58:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	3308      	adds	r3, #8
 8006b62:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006b66:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006b68:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b6a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006b6c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006b6e:	e841 2300 	strex	r3, r2, [r1]
 8006b72:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006b74:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d1e3      	bne.n	8006b42 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2220      	movs	r2, #32
 8006b7e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2200      	movs	r2, #0
 8006b86:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b90:	e853 3f00 	ldrex	r3, [r3]
 8006b94:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006b96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b98:	f023 0310 	bic.w	r3, r3, #16
 8006b9c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	461a      	mov	r2, r3
 8006ba6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006baa:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006bac:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bae:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006bb0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006bb2:	e841 2300 	strex	r3, r2, [r1]
 8006bb6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006bb8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d1e4      	bne.n	8006b88 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f7fd fba0 	bl	8004308 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2202      	movs	r2, #2
 8006bcc:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	1ad3      	subs	r3, r2, r3
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	4619      	mov	r1, r3
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f000 f8d8 	bl	8006d98 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006be8:	e0b9      	b.n	8006d5e <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	1ad3      	subs	r3, r2, r3
 8006bfa:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006c04:	b29b      	uxth	r3, r3
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	f000 80ab 	beq.w	8006d62 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8006c0c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	f000 80a6 	beq.w	8006d62 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c1e:	e853 3f00 	ldrex	r3, [r3]
 8006c22:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006c24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c26:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c2a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	461a      	mov	r2, r3
 8006c34:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006c38:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c3a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c3c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006c3e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006c40:	e841 2300 	strex	r3, r2, [r1]
 8006c44:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006c46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d1e4      	bne.n	8006c16 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	3308      	adds	r3, #8
 8006c52:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c56:	e853 3f00 	ldrex	r3, [r3]
 8006c5a:	623b      	str	r3, [r7, #32]
   return(result);
 8006c5c:	6a3b      	ldr	r3, [r7, #32]
 8006c5e:	f023 0301 	bic.w	r3, r3, #1
 8006c62:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	3308      	adds	r3, #8
 8006c6c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006c70:	633a      	str	r2, [r7, #48]	@ 0x30
 8006c72:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c74:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006c76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c78:	e841 2300 	strex	r3, r2, [r1]
 8006c7c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006c7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d1e3      	bne.n	8006c4c <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2220      	movs	r2, #32
 8006c88:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2200      	movs	r2, #0
 8006c96:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	e853 3f00 	ldrex	r3, [r3]
 8006ca4:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	f023 0310 	bic.w	r3, r3, #16
 8006cac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	461a      	mov	r2, r3
 8006cb6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006cba:	61fb      	str	r3, [r7, #28]
 8006cbc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cbe:	69b9      	ldr	r1, [r7, #24]
 8006cc0:	69fa      	ldr	r2, [r7, #28]
 8006cc2:	e841 2300 	strex	r3, r2, [r1]
 8006cc6:	617b      	str	r3, [r7, #20]
   return(result);
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d1e4      	bne.n	8006c98 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2202      	movs	r2, #2
 8006cd2:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006cd4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006cd8:	4619      	mov	r1, r3
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f000 f85c 	bl	8006d98 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006ce0:	e03f      	b.n	8006d62 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006ce2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ce6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d00e      	beq.n	8006d0c <HAL_UART_IRQHandler+0x570>
 8006cee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006cf2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d008      	beq.n	8006d0c <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006d02:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f000 fd60 	bl	80077ca <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006d0a:	e02d      	b.n	8006d68 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006d0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d00e      	beq.n	8006d36 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006d18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d008      	beq.n	8006d36 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d01c      	beq.n	8006d66 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	4798      	blx	r3
    }
    return;
 8006d34:	e017      	b.n	8006d66 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006d36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d012      	beq.n	8006d68 <HAL_UART_IRQHandler+0x5cc>
 8006d42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d00c      	beq.n	8006d68 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f000 fd11 	bl	8007776 <UART_EndTransmit_IT>
    return;
 8006d54:	e008      	b.n	8006d68 <HAL_UART_IRQHandler+0x5cc>
      return;
 8006d56:	bf00      	nop
 8006d58:	e006      	b.n	8006d68 <HAL_UART_IRQHandler+0x5cc>
    return;
 8006d5a:	bf00      	nop
 8006d5c:	e004      	b.n	8006d68 <HAL_UART_IRQHandler+0x5cc>
      return;
 8006d5e:	bf00      	nop
 8006d60:	e002      	b.n	8006d68 <HAL_UART_IRQHandler+0x5cc>
      return;
 8006d62:	bf00      	nop
 8006d64:	e000      	b.n	8006d68 <HAL_UART_IRQHandler+0x5cc>
    return;
 8006d66:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006d68:	37e8      	adds	r7, #232	@ 0xe8
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}
 8006d6e:	bf00      	nop

08006d70 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b083      	sub	sp, #12
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006d78:	bf00      	nop
 8006d7a:	370c      	adds	r7, #12
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d82:	4770      	bx	lr

08006d84 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b083      	sub	sp, #12
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006d8c:	bf00      	nop
 8006d8e:	370c      	adds	r7, #12
 8006d90:	46bd      	mov	sp, r7
 8006d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d96:	4770      	bx	lr

08006d98 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b083      	sub	sp, #12
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
 8006da0:	460b      	mov	r3, r1
 8006da2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006da4:	bf00      	nop
 8006da6:	370c      	adds	r7, #12
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr

08006db0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006db0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006db4:	b08a      	sub	sp, #40	@ 0x28
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	689a      	ldr	r2, [r3, #8]
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	691b      	ldr	r3, [r3, #16]
 8006dc8:	431a      	orrs	r2, r3
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	695b      	ldr	r3, [r3, #20]
 8006dce:	431a      	orrs	r2, r3
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	69db      	ldr	r3, [r3, #28]
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	681a      	ldr	r2, [r3, #0]
 8006dde:	4ba4      	ldr	r3, [pc, #656]	@ (8007070 <UART_SetConfig+0x2c0>)
 8006de0:	4013      	ands	r3, r2
 8006de2:	68fa      	ldr	r2, [r7, #12]
 8006de4:	6812      	ldr	r2, [r2, #0]
 8006de6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006de8:	430b      	orrs	r3, r1
 8006dea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	68da      	ldr	r2, [r3, #12]
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	430a      	orrs	r2, r1
 8006e00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	699b      	ldr	r3, [r3, #24]
 8006e06:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a99      	ldr	r2, [pc, #612]	@ (8007074 <UART_SetConfig+0x2c4>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d004      	beq.n	8006e1c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	6a1b      	ldr	r3, [r3, #32]
 8006e16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	689b      	ldr	r3, [r3, #8]
 8006e22:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e2c:	430a      	orrs	r2, r1
 8006e2e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4a90      	ldr	r2, [pc, #576]	@ (8007078 <UART_SetConfig+0x2c8>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d126      	bne.n	8006e88 <UART_SetConfig+0xd8>
 8006e3a:	4b90      	ldr	r3, [pc, #576]	@ (800707c <UART_SetConfig+0x2cc>)
 8006e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e40:	f003 0303 	and.w	r3, r3, #3
 8006e44:	2b03      	cmp	r3, #3
 8006e46:	d81b      	bhi.n	8006e80 <UART_SetConfig+0xd0>
 8006e48:	a201      	add	r2, pc, #4	@ (adr r2, 8006e50 <UART_SetConfig+0xa0>)
 8006e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e4e:	bf00      	nop
 8006e50:	08006e61 	.word	0x08006e61
 8006e54:	08006e71 	.word	0x08006e71
 8006e58:	08006e69 	.word	0x08006e69
 8006e5c:	08006e79 	.word	0x08006e79
 8006e60:	2301      	movs	r3, #1
 8006e62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e66:	e116      	b.n	8007096 <UART_SetConfig+0x2e6>
 8006e68:	2302      	movs	r3, #2
 8006e6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e6e:	e112      	b.n	8007096 <UART_SetConfig+0x2e6>
 8006e70:	2304      	movs	r3, #4
 8006e72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e76:	e10e      	b.n	8007096 <UART_SetConfig+0x2e6>
 8006e78:	2308      	movs	r3, #8
 8006e7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e7e:	e10a      	b.n	8007096 <UART_SetConfig+0x2e6>
 8006e80:	2310      	movs	r3, #16
 8006e82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e86:	e106      	b.n	8007096 <UART_SetConfig+0x2e6>
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a7c      	ldr	r2, [pc, #496]	@ (8007080 <UART_SetConfig+0x2d0>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d138      	bne.n	8006f04 <UART_SetConfig+0x154>
 8006e92:	4b7a      	ldr	r3, [pc, #488]	@ (800707c <UART_SetConfig+0x2cc>)
 8006e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e98:	f003 030c 	and.w	r3, r3, #12
 8006e9c:	2b0c      	cmp	r3, #12
 8006e9e:	d82d      	bhi.n	8006efc <UART_SetConfig+0x14c>
 8006ea0:	a201      	add	r2, pc, #4	@ (adr r2, 8006ea8 <UART_SetConfig+0xf8>)
 8006ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ea6:	bf00      	nop
 8006ea8:	08006edd 	.word	0x08006edd
 8006eac:	08006efd 	.word	0x08006efd
 8006eb0:	08006efd 	.word	0x08006efd
 8006eb4:	08006efd 	.word	0x08006efd
 8006eb8:	08006eed 	.word	0x08006eed
 8006ebc:	08006efd 	.word	0x08006efd
 8006ec0:	08006efd 	.word	0x08006efd
 8006ec4:	08006efd 	.word	0x08006efd
 8006ec8:	08006ee5 	.word	0x08006ee5
 8006ecc:	08006efd 	.word	0x08006efd
 8006ed0:	08006efd 	.word	0x08006efd
 8006ed4:	08006efd 	.word	0x08006efd
 8006ed8:	08006ef5 	.word	0x08006ef5
 8006edc:	2300      	movs	r3, #0
 8006ede:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ee2:	e0d8      	b.n	8007096 <UART_SetConfig+0x2e6>
 8006ee4:	2302      	movs	r3, #2
 8006ee6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006eea:	e0d4      	b.n	8007096 <UART_SetConfig+0x2e6>
 8006eec:	2304      	movs	r3, #4
 8006eee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ef2:	e0d0      	b.n	8007096 <UART_SetConfig+0x2e6>
 8006ef4:	2308      	movs	r3, #8
 8006ef6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006efa:	e0cc      	b.n	8007096 <UART_SetConfig+0x2e6>
 8006efc:	2310      	movs	r3, #16
 8006efe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f02:	e0c8      	b.n	8007096 <UART_SetConfig+0x2e6>
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a5e      	ldr	r2, [pc, #376]	@ (8007084 <UART_SetConfig+0x2d4>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d125      	bne.n	8006f5a <UART_SetConfig+0x1aa>
 8006f0e:	4b5b      	ldr	r3, [pc, #364]	@ (800707c <UART_SetConfig+0x2cc>)
 8006f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f14:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006f18:	2b30      	cmp	r3, #48	@ 0x30
 8006f1a:	d016      	beq.n	8006f4a <UART_SetConfig+0x19a>
 8006f1c:	2b30      	cmp	r3, #48	@ 0x30
 8006f1e:	d818      	bhi.n	8006f52 <UART_SetConfig+0x1a2>
 8006f20:	2b20      	cmp	r3, #32
 8006f22:	d00a      	beq.n	8006f3a <UART_SetConfig+0x18a>
 8006f24:	2b20      	cmp	r3, #32
 8006f26:	d814      	bhi.n	8006f52 <UART_SetConfig+0x1a2>
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d002      	beq.n	8006f32 <UART_SetConfig+0x182>
 8006f2c:	2b10      	cmp	r3, #16
 8006f2e:	d008      	beq.n	8006f42 <UART_SetConfig+0x192>
 8006f30:	e00f      	b.n	8006f52 <UART_SetConfig+0x1a2>
 8006f32:	2300      	movs	r3, #0
 8006f34:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f38:	e0ad      	b.n	8007096 <UART_SetConfig+0x2e6>
 8006f3a:	2302      	movs	r3, #2
 8006f3c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f40:	e0a9      	b.n	8007096 <UART_SetConfig+0x2e6>
 8006f42:	2304      	movs	r3, #4
 8006f44:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f48:	e0a5      	b.n	8007096 <UART_SetConfig+0x2e6>
 8006f4a:	2308      	movs	r3, #8
 8006f4c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f50:	e0a1      	b.n	8007096 <UART_SetConfig+0x2e6>
 8006f52:	2310      	movs	r3, #16
 8006f54:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f58:	e09d      	b.n	8007096 <UART_SetConfig+0x2e6>
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a4a      	ldr	r2, [pc, #296]	@ (8007088 <UART_SetConfig+0x2d8>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d125      	bne.n	8006fb0 <UART_SetConfig+0x200>
 8006f64:	4b45      	ldr	r3, [pc, #276]	@ (800707c <UART_SetConfig+0x2cc>)
 8006f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f6a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006f6e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f70:	d016      	beq.n	8006fa0 <UART_SetConfig+0x1f0>
 8006f72:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f74:	d818      	bhi.n	8006fa8 <UART_SetConfig+0x1f8>
 8006f76:	2b80      	cmp	r3, #128	@ 0x80
 8006f78:	d00a      	beq.n	8006f90 <UART_SetConfig+0x1e0>
 8006f7a:	2b80      	cmp	r3, #128	@ 0x80
 8006f7c:	d814      	bhi.n	8006fa8 <UART_SetConfig+0x1f8>
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d002      	beq.n	8006f88 <UART_SetConfig+0x1d8>
 8006f82:	2b40      	cmp	r3, #64	@ 0x40
 8006f84:	d008      	beq.n	8006f98 <UART_SetConfig+0x1e8>
 8006f86:	e00f      	b.n	8006fa8 <UART_SetConfig+0x1f8>
 8006f88:	2300      	movs	r3, #0
 8006f8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f8e:	e082      	b.n	8007096 <UART_SetConfig+0x2e6>
 8006f90:	2302      	movs	r3, #2
 8006f92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f96:	e07e      	b.n	8007096 <UART_SetConfig+0x2e6>
 8006f98:	2304      	movs	r3, #4
 8006f9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f9e:	e07a      	b.n	8007096 <UART_SetConfig+0x2e6>
 8006fa0:	2308      	movs	r3, #8
 8006fa2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fa6:	e076      	b.n	8007096 <UART_SetConfig+0x2e6>
 8006fa8:	2310      	movs	r3, #16
 8006faa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fae:	e072      	b.n	8007096 <UART_SetConfig+0x2e6>
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a35      	ldr	r2, [pc, #212]	@ (800708c <UART_SetConfig+0x2dc>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d12a      	bne.n	8007010 <UART_SetConfig+0x260>
 8006fba:	4b30      	ldr	r3, [pc, #192]	@ (800707c <UART_SetConfig+0x2cc>)
 8006fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fc0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006fc4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006fc8:	d01a      	beq.n	8007000 <UART_SetConfig+0x250>
 8006fca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006fce:	d81b      	bhi.n	8007008 <UART_SetConfig+0x258>
 8006fd0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006fd4:	d00c      	beq.n	8006ff0 <UART_SetConfig+0x240>
 8006fd6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006fda:	d815      	bhi.n	8007008 <UART_SetConfig+0x258>
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d003      	beq.n	8006fe8 <UART_SetConfig+0x238>
 8006fe0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006fe4:	d008      	beq.n	8006ff8 <UART_SetConfig+0x248>
 8006fe6:	e00f      	b.n	8007008 <UART_SetConfig+0x258>
 8006fe8:	2300      	movs	r3, #0
 8006fea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fee:	e052      	b.n	8007096 <UART_SetConfig+0x2e6>
 8006ff0:	2302      	movs	r3, #2
 8006ff2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ff6:	e04e      	b.n	8007096 <UART_SetConfig+0x2e6>
 8006ff8:	2304      	movs	r3, #4
 8006ffa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ffe:	e04a      	b.n	8007096 <UART_SetConfig+0x2e6>
 8007000:	2308      	movs	r3, #8
 8007002:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007006:	e046      	b.n	8007096 <UART_SetConfig+0x2e6>
 8007008:	2310      	movs	r3, #16
 800700a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800700e:	e042      	b.n	8007096 <UART_SetConfig+0x2e6>
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a17      	ldr	r2, [pc, #92]	@ (8007074 <UART_SetConfig+0x2c4>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d13a      	bne.n	8007090 <UART_SetConfig+0x2e0>
 800701a:	4b18      	ldr	r3, [pc, #96]	@ (800707c <UART_SetConfig+0x2cc>)
 800701c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007020:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007024:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007028:	d01a      	beq.n	8007060 <UART_SetConfig+0x2b0>
 800702a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800702e:	d81b      	bhi.n	8007068 <UART_SetConfig+0x2b8>
 8007030:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007034:	d00c      	beq.n	8007050 <UART_SetConfig+0x2a0>
 8007036:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800703a:	d815      	bhi.n	8007068 <UART_SetConfig+0x2b8>
 800703c:	2b00      	cmp	r3, #0
 800703e:	d003      	beq.n	8007048 <UART_SetConfig+0x298>
 8007040:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007044:	d008      	beq.n	8007058 <UART_SetConfig+0x2a8>
 8007046:	e00f      	b.n	8007068 <UART_SetConfig+0x2b8>
 8007048:	2300      	movs	r3, #0
 800704a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800704e:	e022      	b.n	8007096 <UART_SetConfig+0x2e6>
 8007050:	2302      	movs	r3, #2
 8007052:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007056:	e01e      	b.n	8007096 <UART_SetConfig+0x2e6>
 8007058:	2304      	movs	r3, #4
 800705a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800705e:	e01a      	b.n	8007096 <UART_SetConfig+0x2e6>
 8007060:	2308      	movs	r3, #8
 8007062:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007066:	e016      	b.n	8007096 <UART_SetConfig+0x2e6>
 8007068:	2310      	movs	r3, #16
 800706a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800706e:	e012      	b.n	8007096 <UART_SetConfig+0x2e6>
 8007070:	efff69f3 	.word	0xefff69f3
 8007074:	40008000 	.word	0x40008000
 8007078:	40013800 	.word	0x40013800
 800707c:	40021000 	.word	0x40021000
 8007080:	40004400 	.word	0x40004400
 8007084:	40004800 	.word	0x40004800
 8007088:	40004c00 	.word	0x40004c00
 800708c:	40005000 	.word	0x40005000
 8007090:	2310      	movs	r3, #16
 8007092:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a9f      	ldr	r2, [pc, #636]	@ (8007318 <UART_SetConfig+0x568>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d17a      	bne.n	8007196 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80070a0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80070a4:	2b08      	cmp	r3, #8
 80070a6:	d824      	bhi.n	80070f2 <UART_SetConfig+0x342>
 80070a8:	a201      	add	r2, pc, #4	@ (adr r2, 80070b0 <UART_SetConfig+0x300>)
 80070aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ae:	bf00      	nop
 80070b0:	080070d5 	.word	0x080070d5
 80070b4:	080070f3 	.word	0x080070f3
 80070b8:	080070dd 	.word	0x080070dd
 80070bc:	080070f3 	.word	0x080070f3
 80070c0:	080070e3 	.word	0x080070e3
 80070c4:	080070f3 	.word	0x080070f3
 80070c8:	080070f3 	.word	0x080070f3
 80070cc:	080070f3 	.word	0x080070f3
 80070d0:	080070eb 	.word	0x080070eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070d4:	f7fe fa10 	bl	80054f8 <HAL_RCC_GetPCLK1Freq>
 80070d8:	61f8      	str	r0, [r7, #28]
        break;
 80070da:	e010      	b.n	80070fe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070dc:	4b8f      	ldr	r3, [pc, #572]	@ (800731c <UART_SetConfig+0x56c>)
 80070de:	61fb      	str	r3, [r7, #28]
        break;
 80070e0:	e00d      	b.n	80070fe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070e2:	f7fe f971 	bl	80053c8 <HAL_RCC_GetSysClockFreq>
 80070e6:	61f8      	str	r0, [r7, #28]
        break;
 80070e8:	e009      	b.n	80070fe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80070ee:	61fb      	str	r3, [r7, #28]
        break;
 80070f0:	e005      	b.n	80070fe <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80070f2:	2300      	movs	r3, #0
 80070f4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80070f6:	2301      	movs	r3, #1
 80070f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80070fc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80070fe:	69fb      	ldr	r3, [r7, #28]
 8007100:	2b00      	cmp	r3, #0
 8007102:	f000 80fb 	beq.w	80072fc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	685a      	ldr	r2, [r3, #4]
 800710a:	4613      	mov	r3, r2
 800710c:	005b      	lsls	r3, r3, #1
 800710e:	4413      	add	r3, r2
 8007110:	69fa      	ldr	r2, [r7, #28]
 8007112:	429a      	cmp	r2, r3
 8007114:	d305      	bcc.n	8007122 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800711c:	69fa      	ldr	r2, [r7, #28]
 800711e:	429a      	cmp	r2, r3
 8007120:	d903      	bls.n	800712a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007122:	2301      	movs	r3, #1
 8007124:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007128:	e0e8      	b.n	80072fc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800712a:	69fb      	ldr	r3, [r7, #28]
 800712c:	2200      	movs	r2, #0
 800712e:	461c      	mov	r4, r3
 8007130:	4615      	mov	r5, r2
 8007132:	f04f 0200 	mov.w	r2, #0
 8007136:	f04f 0300 	mov.w	r3, #0
 800713a:	022b      	lsls	r3, r5, #8
 800713c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007140:	0222      	lsls	r2, r4, #8
 8007142:	68f9      	ldr	r1, [r7, #12]
 8007144:	6849      	ldr	r1, [r1, #4]
 8007146:	0849      	lsrs	r1, r1, #1
 8007148:	2000      	movs	r0, #0
 800714a:	4688      	mov	r8, r1
 800714c:	4681      	mov	r9, r0
 800714e:	eb12 0a08 	adds.w	sl, r2, r8
 8007152:	eb43 0b09 	adc.w	fp, r3, r9
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	2200      	movs	r2, #0
 800715c:	603b      	str	r3, [r7, #0]
 800715e:	607a      	str	r2, [r7, #4]
 8007160:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007164:	4650      	mov	r0, sl
 8007166:	4659      	mov	r1, fp
 8007168:	f7f9 f88a 	bl	8000280 <__aeabi_uldivmod>
 800716c:	4602      	mov	r2, r0
 800716e:	460b      	mov	r3, r1
 8007170:	4613      	mov	r3, r2
 8007172:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007174:	69bb      	ldr	r3, [r7, #24]
 8007176:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800717a:	d308      	bcc.n	800718e <UART_SetConfig+0x3de>
 800717c:	69bb      	ldr	r3, [r7, #24]
 800717e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007182:	d204      	bcs.n	800718e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	69ba      	ldr	r2, [r7, #24]
 800718a:	60da      	str	r2, [r3, #12]
 800718c:	e0b6      	b.n	80072fc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800718e:	2301      	movs	r3, #1
 8007190:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007194:	e0b2      	b.n	80072fc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	69db      	ldr	r3, [r3, #28]
 800719a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800719e:	d15e      	bne.n	800725e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80071a0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80071a4:	2b08      	cmp	r3, #8
 80071a6:	d828      	bhi.n	80071fa <UART_SetConfig+0x44a>
 80071a8:	a201      	add	r2, pc, #4	@ (adr r2, 80071b0 <UART_SetConfig+0x400>)
 80071aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ae:	bf00      	nop
 80071b0:	080071d5 	.word	0x080071d5
 80071b4:	080071dd 	.word	0x080071dd
 80071b8:	080071e5 	.word	0x080071e5
 80071bc:	080071fb 	.word	0x080071fb
 80071c0:	080071eb 	.word	0x080071eb
 80071c4:	080071fb 	.word	0x080071fb
 80071c8:	080071fb 	.word	0x080071fb
 80071cc:	080071fb 	.word	0x080071fb
 80071d0:	080071f3 	.word	0x080071f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071d4:	f7fe f990 	bl	80054f8 <HAL_RCC_GetPCLK1Freq>
 80071d8:	61f8      	str	r0, [r7, #28]
        break;
 80071da:	e014      	b.n	8007206 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80071dc:	f7fe f9a2 	bl	8005524 <HAL_RCC_GetPCLK2Freq>
 80071e0:	61f8      	str	r0, [r7, #28]
        break;
 80071e2:	e010      	b.n	8007206 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80071e4:	4b4d      	ldr	r3, [pc, #308]	@ (800731c <UART_SetConfig+0x56c>)
 80071e6:	61fb      	str	r3, [r7, #28]
        break;
 80071e8:	e00d      	b.n	8007206 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80071ea:	f7fe f8ed 	bl	80053c8 <HAL_RCC_GetSysClockFreq>
 80071ee:	61f8      	str	r0, [r7, #28]
        break;
 80071f0:	e009      	b.n	8007206 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80071f6:	61fb      	str	r3, [r7, #28]
        break;
 80071f8:	e005      	b.n	8007206 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80071fa:	2300      	movs	r3, #0
 80071fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80071fe:	2301      	movs	r3, #1
 8007200:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007204:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007206:	69fb      	ldr	r3, [r7, #28]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d077      	beq.n	80072fc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800720c:	69fb      	ldr	r3, [r7, #28]
 800720e:	005a      	lsls	r2, r3, #1
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	085b      	lsrs	r3, r3, #1
 8007216:	441a      	add	r2, r3
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007220:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007222:	69bb      	ldr	r3, [r7, #24]
 8007224:	2b0f      	cmp	r3, #15
 8007226:	d916      	bls.n	8007256 <UART_SetConfig+0x4a6>
 8007228:	69bb      	ldr	r3, [r7, #24]
 800722a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800722e:	d212      	bcs.n	8007256 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007230:	69bb      	ldr	r3, [r7, #24]
 8007232:	b29b      	uxth	r3, r3
 8007234:	f023 030f 	bic.w	r3, r3, #15
 8007238:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800723a:	69bb      	ldr	r3, [r7, #24]
 800723c:	085b      	lsrs	r3, r3, #1
 800723e:	b29b      	uxth	r3, r3
 8007240:	f003 0307 	and.w	r3, r3, #7
 8007244:	b29a      	uxth	r2, r3
 8007246:	8afb      	ldrh	r3, [r7, #22]
 8007248:	4313      	orrs	r3, r2
 800724a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	8afa      	ldrh	r2, [r7, #22]
 8007252:	60da      	str	r2, [r3, #12]
 8007254:	e052      	b.n	80072fc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007256:	2301      	movs	r3, #1
 8007258:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800725c:	e04e      	b.n	80072fc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800725e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007262:	2b08      	cmp	r3, #8
 8007264:	d827      	bhi.n	80072b6 <UART_SetConfig+0x506>
 8007266:	a201      	add	r2, pc, #4	@ (adr r2, 800726c <UART_SetConfig+0x4bc>)
 8007268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800726c:	08007291 	.word	0x08007291
 8007270:	08007299 	.word	0x08007299
 8007274:	080072a1 	.word	0x080072a1
 8007278:	080072b7 	.word	0x080072b7
 800727c:	080072a7 	.word	0x080072a7
 8007280:	080072b7 	.word	0x080072b7
 8007284:	080072b7 	.word	0x080072b7
 8007288:	080072b7 	.word	0x080072b7
 800728c:	080072af 	.word	0x080072af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007290:	f7fe f932 	bl	80054f8 <HAL_RCC_GetPCLK1Freq>
 8007294:	61f8      	str	r0, [r7, #28]
        break;
 8007296:	e014      	b.n	80072c2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007298:	f7fe f944 	bl	8005524 <HAL_RCC_GetPCLK2Freq>
 800729c:	61f8      	str	r0, [r7, #28]
        break;
 800729e:	e010      	b.n	80072c2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072a0:	4b1e      	ldr	r3, [pc, #120]	@ (800731c <UART_SetConfig+0x56c>)
 80072a2:	61fb      	str	r3, [r7, #28]
        break;
 80072a4:	e00d      	b.n	80072c2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072a6:	f7fe f88f 	bl	80053c8 <HAL_RCC_GetSysClockFreq>
 80072aa:	61f8      	str	r0, [r7, #28]
        break;
 80072ac:	e009      	b.n	80072c2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80072b2:	61fb      	str	r3, [r7, #28]
        break;
 80072b4:	e005      	b.n	80072c2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80072b6:	2300      	movs	r3, #0
 80072b8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80072ba:	2301      	movs	r3, #1
 80072bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80072c0:	bf00      	nop
    }

    if (pclk != 0U)
 80072c2:	69fb      	ldr	r3, [r7, #28]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d019      	beq.n	80072fc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	085a      	lsrs	r2, r3, #1
 80072ce:	69fb      	ldr	r3, [r7, #28]
 80072d0:	441a      	add	r2, r3
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80072da:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072dc:	69bb      	ldr	r3, [r7, #24]
 80072de:	2b0f      	cmp	r3, #15
 80072e0:	d909      	bls.n	80072f6 <UART_SetConfig+0x546>
 80072e2:	69bb      	ldr	r3, [r7, #24]
 80072e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072e8:	d205      	bcs.n	80072f6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80072ea:	69bb      	ldr	r3, [r7, #24]
 80072ec:	b29a      	uxth	r2, r3
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	60da      	str	r2, [r3, #12]
 80072f4:	e002      	b.n	80072fc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80072f6:	2301      	movs	r3, #1
 80072f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	2200      	movs	r2, #0
 8007300:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2200      	movs	r2, #0
 8007306:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007308:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800730c:	4618      	mov	r0, r3
 800730e:	3728      	adds	r7, #40	@ 0x28
 8007310:	46bd      	mov	sp, r7
 8007312:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007316:	bf00      	nop
 8007318:	40008000 	.word	0x40008000
 800731c:	00f42400 	.word	0x00f42400

08007320 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007320:	b480      	push	{r7}
 8007322:	b083      	sub	sp, #12
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800732c:	f003 0308 	and.w	r3, r3, #8
 8007330:	2b00      	cmp	r3, #0
 8007332:	d00a      	beq.n	800734a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	430a      	orrs	r2, r1
 8007348:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800734e:	f003 0301 	and.w	r3, r3, #1
 8007352:	2b00      	cmp	r3, #0
 8007354:	d00a      	beq.n	800736c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	430a      	orrs	r2, r1
 800736a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007370:	f003 0302 	and.w	r3, r3, #2
 8007374:	2b00      	cmp	r3, #0
 8007376:	d00a      	beq.n	800738e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	430a      	orrs	r2, r1
 800738c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007392:	f003 0304 	and.w	r3, r3, #4
 8007396:	2b00      	cmp	r3, #0
 8007398:	d00a      	beq.n	80073b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	685b      	ldr	r3, [r3, #4]
 80073a0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	430a      	orrs	r2, r1
 80073ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073b4:	f003 0310 	and.w	r3, r3, #16
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d00a      	beq.n	80073d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	689b      	ldr	r3, [r3, #8]
 80073c2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	430a      	orrs	r2, r1
 80073d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073d6:	f003 0320 	and.w	r3, r3, #32
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d00a      	beq.n	80073f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	689b      	ldr	r3, [r3, #8]
 80073e4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	430a      	orrs	r2, r1
 80073f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d01a      	beq.n	8007436 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	430a      	orrs	r2, r1
 8007414:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800741a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800741e:	d10a      	bne.n	8007436 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	430a      	orrs	r2, r1
 8007434:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800743a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800743e:	2b00      	cmp	r3, #0
 8007440:	d00a      	beq.n	8007458 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	430a      	orrs	r2, r1
 8007456:	605a      	str	r2, [r3, #4]
  }
}
 8007458:	bf00      	nop
 800745a:	370c      	adds	r7, #12
 800745c:	46bd      	mov	sp, r7
 800745e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007462:	4770      	bx	lr

08007464 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b098      	sub	sp, #96	@ 0x60
 8007468:	af02      	add	r7, sp, #8
 800746a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2200      	movs	r2, #0
 8007470:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007474:	f7fa f8f4 	bl	8001660 <HAL_GetTick>
 8007478:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f003 0308 	and.w	r3, r3, #8
 8007484:	2b08      	cmp	r3, #8
 8007486:	d12e      	bne.n	80074e6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007488:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800748c:	9300      	str	r3, [sp, #0]
 800748e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007490:	2200      	movs	r2, #0
 8007492:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f000 f88c 	bl	80075b4 <UART_WaitOnFlagUntilTimeout>
 800749c:	4603      	mov	r3, r0
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d021      	beq.n	80074e6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074aa:	e853 3f00 	ldrex	r3, [r3]
 80074ae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80074b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80074b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	461a      	mov	r2, r3
 80074be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80074c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80074c2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074c4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80074c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80074c8:	e841 2300 	strex	r3, r2, [r1]
 80074cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80074ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d1e6      	bne.n	80074a2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2220      	movs	r2, #32
 80074d8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2200      	movs	r2, #0
 80074de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074e2:	2303      	movs	r3, #3
 80074e4:	e062      	b.n	80075ac <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f003 0304 	and.w	r3, r3, #4
 80074f0:	2b04      	cmp	r3, #4
 80074f2:	d149      	bne.n	8007588 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80074f4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80074f8:	9300      	str	r3, [sp, #0]
 80074fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80074fc:	2200      	movs	r2, #0
 80074fe:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f000 f856 	bl	80075b4 <UART_WaitOnFlagUntilTimeout>
 8007508:	4603      	mov	r3, r0
 800750a:	2b00      	cmp	r3, #0
 800750c:	d03c      	beq.n	8007588 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007516:	e853 3f00 	ldrex	r3, [r3]
 800751a:	623b      	str	r3, [r7, #32]
   return(result);
 800751c:	6a3b      	ldr	r3, [r7, #32]
 800751e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007522:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	461a      	mov	r2, r3
 800752a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800752c:	633b      	str	r3, [r7, #48]	@ 0x30
 800752e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007530:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007532:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007534:	e841 2300 	strex	r3, r2, [r1]
 8007538:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800753a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800753c:	2b00      	cmp	r3, #0
 800753e:	d1e6      	bne.n	800750e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	3308      	adds	r3, #8
 8007546:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	e853 3f00 	ldrex	r3, [r3]
 800754e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f023 0301 	bic.w	r3, r3, #1
 8007556:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	3308      	adds	r3, #8
 800755e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007560:	61fa      	str	r2, [r7, #28]
 8007562:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007564:	69b9      	ldr	r1, [r7, #24]
 8007566:	69fa      	ldr	r2, [r7, #28]
 8007568:	e841 2300 	strex	r3, r2, [r1]
 800756c:	617b      	str	r3, [r7, #20]
   return(result);
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d1e5      	bne.n	8007540 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2220      	movs	r2, #32
 8007578:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2200      	movs	r2, #0
 8007580:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007584:	2303      	movs	r3, #3
 8007586:	e011      	b.n	80075ac <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2220      	movs	r2, #32
 800758c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2220      	movs	r2, #32
 8007592:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2200      	movs	r2, #0
 800759a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2200      	movs	r2, #0
 80075a0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2200      	movs	r2, #0
 80075a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80075aa:	2300      	movs	r3, #0
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3758      	adds	r7, #88	@ 0x58
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}

080075b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b084      	sub	sp, #16
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	60f8      	str	r0, [r7, #12]
 80075bc:	60b9      	str	r1, [r7, #8]
 80075be:	603b      	str	r3, [r7, #0]
 80075c0:	4613      	mov	r3, r2
 80075c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075c4:	e049      	b.n	800765a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075c6:	69bb      	ldr	r3, [r7, #24]
 80075c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075cc:	d045      	beq.n	800765a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075ce:	f7fa f847 	bl	8001660 <HAL_GetTick>
 80075d2:	4602      	mov	r2, r0
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	1ad3      	subs	r3, r2, r3
 80075d8:	69ba      	ldr	r2, [r7, #24]
 80075da:	429a      	cmp	r2, r3
 80075dc:	d302      	bcc.n	80075e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80075de:	69bb      	ldr	r3, [r7, #24]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d101      	bne.n	80075e8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80075e4:	2303      	movs	r3, #3
 80075e6:	e048      	b.n	800767a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f003 0304 	and.w	r3, r3, #4
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d031      	beq.n	800765a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	69db      	ldr	r3, [r3, #28]
 80075fc:	f003 0308 	and.w	r3, r3, #8
 8007600:	2b08      	cmp	r3, #8
 8007602:	d110      	bne.n	8007626 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	2208      	movs	r2, #8
 800760a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800760c:	68f8      	ldr	r0, [r7, #12]
 800760e:	f000 f838 	bl	8007682 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	2208      	movs	r2, #8
 8007616:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2200      	movs	r2, #0
 800761e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007622:	2301      	movs	r3, #1
 8007624:	e029      	b.n	800767a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	69db      	ldr	r3, [r3, #28]
 800762c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007630:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007634:	d111      	bne.n	800765a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800763e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007640:	68f8      	ldr	r0, [r7, #12]
 8007642:	f000 f81e 	bl	8007682 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	2220      	movs	r2, #32
 800764a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2200      	movs	r2, #0
 8007652:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007656:	2303      	movs	r3, #3
 8007658:	e00f      	b.n	800767a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	69da      	ldr	r2, [r3, #28]
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	4013      	ands	r3, r2
 8007664:	68ba      	ldr	r2, [r7, #8]
 8007666:	429a      	cmp	r2, r3
 8007668:	bf0c      	ite	eq
 800766a:	2301      	moveq	r3, #1
 800766c:	2300      	movne	r3, #0
 800766e:	b2db      	uxtb	r3, r3
 8007670:	461a      	mov	r2, r3
 8007672:	79fb      	ldrb	r3, [r7, #7]
 8007674:	429a      	cmp	r2, r3
 8007676:	d0a6      	beq.n	80075c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007678:	2300      	movs	r3, #0
}
 800767a:	4618      	mov	r0, r3
 800767c:	3710      	adds	r7, #16
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}

08007682 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007682:	b480      	push	{r7}
 8007684:	b095      	sub	sp, #84	@ 0x54
 8007686:	af00      	add	r7, sp, #0
 8007688:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007690:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007692:	e853 3f00 	ldrex	r3, [r3]
 8007696:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800769a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800769e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	461a      	mov	r2, r3
 80076a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80076aa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80076ae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80076b0:	e841 2300 	strex	r3, r2, [r1]
 80076b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80076b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d1e6      	bne.n	800768a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	3308      	adds	r3, #8
 80076c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076c4:	6a3b      	ldr	r3, [r7, #32]
 80076c6:	e853 3f00 	ldrex	r3, [r3]
 80076ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80076cc:	69fb      	ldr	r3, [r7, #28]
 80076ce:	f023 0301 	bic.w	r3, r3, #1
 80076d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	3308      	adds	r3, #8
 80076da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80076dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80076de:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80076e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80076e4:	e841 2300 	strex	r3, r2, [r1]
 80076e8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80076ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d1e5      	bne.n	80076bc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80076f4:	2b01      	cmp	r3, #1
 80076f6:	d118      	bne.n	800772a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	e853 3f00 	ldrex	r3, [r3]
 8007704:	60bb      	str	r3, [r7, #8]
   return(result);
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	f023 0310 	bic.w	r3, r3, #16
 800770c:	647b      	str	r3, [r7, #68]	@ 0x44
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	461a      	mov	r2, r3
 8007714:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007716:	61bb      	str	r3, [r7, #24]
 8007718:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800771a:	6979      	ldr	r1, [r7, #20]
 800771c:	69ba      	ldr	r2, [r7, #24]
 800771e:	e841 2300 	strex	r3, r2, [r1]
 8007722:	613b      	str	r3, [r7, #16]
   return(result);
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d1e6      	bne.n	80076f8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2220      	movs	r2, #32
 800772e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2200      	movs	r2, #0
 8007736:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2200      	movs	r2, #0
 800773c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800773e:	bf00      	nop
 8007740:	3754      	adds	r7, #84	@ 0x54
 8007742:	46bd      	mov	sp, r7
 8007744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007748:	4770      	bx	lr

0800774a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800774a:	b580      	push	{r7, lr}
 800774c:	b084      	sub	sp, #16
 800774e:	af00      	add	r7, sp, #0
 8007750:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007756:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2200      	movs	r2, #0
 800775c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	2200      	movs	r2, #0
 8007764:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007768:	68f8      	ldr	r0, [r7, #12]
 800776a:	f7ff fb0b 	bl	8006d84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800776e:	bf00      	nop
 8007770:	3710      	adds	r7, #16
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}

08007776 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007776:	b580      	push	{r7, lr}
 8007778:	b088      	sub	sp, #32
 800777a:	af00      	add	r7, sp, #0
 800777c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	e853 3f00 	ldrex	r3, [r3]
 800778a:	60bb      	str	r3, [r7, #8]
   return(result);
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007792:	61fb      	str	r3, [r7, #28]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	461a      	mov	r2, r3
 800779a:	69fb      	ldr	r3, [r7, #28]
 800779c:	61bb      	str	r3, [r7, #24]
 800779e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077a0:	6979      	ldr	r1, [r7, #20]
 80077a2:	69ba      	ldr	r2, [r7, #24]
 80077a4:	e841 2300 	strex	r3, r2, [r1]
 80077a8:	613b      	str	r3, [r7, #16]
   return(result);
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d1e6      	bne.n	800777e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2220      	movs	r2, #32
 80077b4:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2200      	movs	r2, #0
 80077ba:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f7ff fad7 	bl	8006d70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80077c2:	bf00      	nop
 80077c4:	3720      	adds	r7, #32
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}

080077ca <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80077ca:	b480      	push	{r7}
 80077cc:	b083      	sub	sp, #12
 80077ce:	af00      	add	r7, sp, #0
 80077d0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80077d2:	bf00      	nop
 80077d4:	370c      	adds	r7, #12
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr
	...

080077e0 <siprintf>:
 80077e0:	b40e      	push	{r1, r2, r3}
 80077e2:	b500      	push	{lr}
 80077e4:	b09c      	sub	sp, #112	@ 0x70
 80077e6:	ab1d      	add	r3, sp, #116	@ 0x74
 80077e8:	9002      	str	r0, [sp, #8]
 80077ea:	9006      	str	r0, [sp, #24]
 80077ec:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80077f0:	4809      	ldr	r0, [pc, #36]	@ (8007818 <siprintf+0x38>)
 80077f2:	9107      	str	r1, [sp, #28]
 80077f4:	9104      	str	r1, [sp, #16]
 80077f6:	4909      	ldr	r1, [pc, #36]	@ (800781c <siprintf+0x3c>)
 80077f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80077fc:	9105      	str	r1, [sp, #20]
 80077fe:	6800      	ldr	r0, [r0, #0]
 8007800:	9301      	str	r3, [sp, #4]
 8007802:	a902      	add	r1, sp, #8
 8007804:	f000 f994 	bl	8007b30 <_svfiprintf_r>
 8007808:	9b02      	ldr	r3, [sp, #8]
 800780a:	2200      	movs	r2, #0
 800780c:	701a      	strb	r2, [r3, #0]
 800780e:	b01c      	add	sp, #112	@ 0x70
 8007810:	f85d eb04 	ldr.w	lr, [sp], #4
 8007814:	b003      	add	sp, #12
 8007816:	4770      	bx	lr
 8007818:	20000020 	.word	0x20000020
 800781c:	ffff0208 	.word	0xffff0208

08007820 <memset>:
 8007820:	4402      	add	r2, r0
 8007822:	4603      	mov	r3, r0
 8007824:	4293      	cmp	r3, r2
 8007826:	d100      	bne.n	800782a <memset+0xa>
 8007828:	4770      	bx	lr
 800782a:	f803 1b01 	strb.w	r1, [r3], #1
 800782e:	e7f9      	b.n	8007824 <memset+0x4>

08007830 <__errno>:
 8007830:	4b01      	ldr	r3, [pc, #4]	@ (8007838 <__errno+0x8>)
 8007832:	6818      	ldr	r0, [r3, #0]
 8007834:	4770      	bx	lr
 8007836:	bf00      	nop
 8007838:	20000020 	.word	0x20000020

0800783c <__libc_init_array>:
 800783c:	b570      	push	{r4, r5, r6, lr}
 800783e:	4d0d      	ldr	r5, [pc, #52]	@ (8007874 <__libc_init_array+0x38>)
 8007840:	4c0d      	ldr	r4, [pc, #52]	@ (8007878 <__libc_init_array+0x3c>)
 8007842:	1b64      	subs	r4, r4, r5
 8007844:	10a4      	asrs	r4, r4, #2
 8007846:	2600      	movs	r6, #0
 8007848:	42a6      	cmp	r6, r4
 800784a:	d109      	bne.n	8007860 <__libc_init_array+0x24>
 800784c:	4d0b      	ldr	r5, [pc, #44]	@ (800787c <__libc_init_array+0x40>)
 800784e:	4c0c      	ldr	r4, [pc, #48]	@ (8007880 <__libc_init_array+0x44>)
 8007850:	f000 fc66 	bl	8008120 <_init>
 8007854:	1b64      	subs	r4, r4, r5
 8007856:	10a4      	asrs	r4, r4, #2
 8007858:	2600      	movs	r6, #0
 800785a:	42a6      	cmp	r6, r4
 800785c:	d105      	bne.n	800786a <__libc_init_array+0x2e>
 800785e:	bd70      	pop	{r4, r5, r6, pc}
 8007860:	f855 3b04 	ldr.w	r3, [r5], #4
 8007864:	4798      	blx	r3
 8007866:	3601      	adds	r6, #1
 8007868:	e7ee      	b.n	8007848 <__libc_init_array+0xc>
 800786a:	f855 3b04 	ldr.w	r3, [r5], #4
 800786e:	4798      	blx	r3
 8007870:	3601      	adds	r6, #1
 8007872:	e7f2      	b.n	800785a <__libc_init_array+0x1e>
 8007874:	080082a0 	.word	0x080082a0
 8007878:	080082a0 	.word	0x080082a0
 800787c:	080082a0 	.word	0x080082a0
 8007880:	080082a4 	.word	0x080082a4

08007884 <__retarget_lock_acquire_recursive>:
 8007884:	4770      	bx	lr

08007886 <__retarget_lock_release_recursive>:
 8007886:	4770      	bx	lr

08007888 <_free_r>:
 8007888:	b538      	push	{r3, r4, r5, lr}
 800788a:	4605      	mov	r5, r0
 800788c:	2900      	cmp	r1, #0
 800788e:	d041      	beq.n	8007914 <_free_r+0x8c>
 8007890:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007894:	1f0c      	subs	r4, r1, #4
 8007896:	2b00      	cmp	r3, #0
 8007898:	bfb8      	it	lt
 800789a:	18e4      	addlt	r4, r4, r3
 800789c:	f000 f8e0 	bl	8007a60 <__malloc_lock>
 80078a0:	4a1d      	ldr	r2, [pc, #116]	@ (8007918 <_free_r+0x90>)
 80078a2:	6813      	ldr	r3, [r2, #0]
 80078a4:	b933      	cbnz	r3, 80078b4 <_free_r+0x2c>
 80078a6:	6063      	str	r3, [r4, #4]
 80078a8:	6014      	str	r4, [r2, #0]
 80078aa:	4628      	mov	r0, r5
 80078ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80078b0:	f000 b8dc 	b.w	8007a6c <__malloc_unlock>
 80078b4:	42a3      	cmp	r3, r4
 80078b6:	d908      	bls.n	80078ca <_free_r+0x42>
 80078b8:	6820      	ldr	r0, [r4, #0]
 80078ba:	1821      	adds	r1, r4, r0
 80078bc:	428b      	cmp	r3, r1
 80078be:	bf01      	itttt	eq
 80078c0:	6819      	ldreq	r1, [r3, #0]
 80078c2:	685b      	ldreq	r3, [r3, #4]
 80078c4:	1809      	addeq	r1, r1, r0
 80078c6:	6021      	streq	r1, [r4, #0]
 80078c8:	e7ed      	b.n	80078a6 <_free_r+0x1e>
 80078ca:	461a      	mov	r2, r3
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	b10b      	cbz	r3, 80078d4 <_free_r+0x4c>
 80078d0:	42a3      	cmp	r3, r4
 80078d2:	d9fa      	bls.n	80078ca <_free_r+0x42>
 80078d4:	6811      	ldr	r1, [r2, #0]
 80078d6:	1850      	adds	r0, r2, r1
 80078d8:	42a0      	cmp	r0, r4
 80078da:	d10b      	bne.n	80078f4 <_free_r+0x6c>
 80078dc:	6820      	ldr	r0, [r4, #0]
 80078de:	4401      	add	r1, r0
 80078e0:	1850      	adds	r0, r2, r1
 80078e2:	4283      	cmp	r3, r0
 80078e4:	6011      	str	r1, [r2, #0]
 80078e6:	d1e0      	bne.n	80078aa <_free_r+0x22>
 80078e8:	6818      	ldr	r0, [r3, #0]
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	6053      	str	r3, [r2, #4]
 80078ee:	4408      	add	r0, r1
 80078f0:	6010      	str	r0, [r2, #0]
 80078f2:	e7da      	b.n	80078aa <_free_r+0x22>
 80078f4:	d902      	bls.n	80078fc <_free_r+0x74>
 80078f6:	230c      	movs	r3, #12
 80078f8:	602b      	str	r3, [r5, #0]
 80078fa:	e7d6      	b.n	80078aa <_free_r+0x22>
 80078fc:	6820      	ldr	r0, [r4, #0]
 80078fe:	1821      	adds	r1, r4, r0
 8007900:	428b      	cmp	r3, r1
 8007902:	bf04      	itt	eq
 8007904:	6819      	ldreq	r1, [r3, #0]
 8007906:	685b      	ldreq	r3, [r3, #4]
 8007908:	6063      	str	r3, [r4, #4]
 800790a:	bf04      	itt	eq
 800790c:	1809      	addeq	r1, r1, r0
 800790e:	6021      	streq	r1, [r4, #0]
 8007910:	6054      	str	r4, [r2, #4]
 8007912:	e7ca      	b.n	80078aa <_free_r+0x22>
 8007914:	bd38      	pop	{r3, r4, r5, pc}
 8007916:	bf00      	nop
 8007918:	2000041c 	.word	0x2000041c

0800791c <sbrk_aligned>:
 800791c:	b570      	push	{r4, r5, r6, lr}
 800791e:	4e0f      	ldr	r6, [pc, #60]	@ (800795c <sbrk_aligned+0x40>)
 8007920:	460c      	mov	r4, r1
 8007922:	6831      	ldr	r1, [r6, #0]
 8007924:	4605      	mov	r5, r0
 8007926:	b911      	cbnz	r1, 800792e <sbrk_aligned+0x12>
 8007928:	f000 fba6 	bl	8008078 <_sbrk_r>
 800792c:	6030      	str	r0, [r6, #0]
 800792e:	4621      	mov	r1, r4
 8007930:	4628      	mov	r0, r5
 8007932:	f000 fba1 	bl	8008078 <_sbrk_r>
 8007936:	1c43      	adds	r3, r0, #1
 8007938:	d103      	bne.n	8007942 <sbrk_aligned+0x26>
 800793a:	f04f 34ff 	mov.w	r4, #4294967295
 800793e:	4620      	mov	r0, r4
 8007940:	bd70      	pop	{r4, r5, r6, pc}
 8007942:	1cc4      	adds	r4, r0, #3
 8007944:	f024 0403 	bic.w	r4, r4, #3
 8007948:	42a0      	cmp	r0, r4
 800794a:	d0f8      	beq.n	800793e <sbrk_aligned+0x22>
 800794c:	1a21      	subs	r1, r4, r0
 800794e:	4628      	mov	r0, r5
 8007950:	f000 fb92 	bl	8008078 <_sbrk_r>
 8007954:	3001      	adds	r0, #1
 8007956:	d1f2      	bne.n	800793e <sbrk_aligned+0x22>
 8007958:	e7ef      	b.n	800793a <sbrk_aligned+0x1e>
 800795a:	bf00      	nop
 800795c:	20000418 	.word	0x20000418

08007960 <_malloc_r>:
 8007960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007964:	1ccd      	adds	r5, r1, #3
 8007966:	f025 0503 	bic.w	r5, r5, #3
 800796a:	3508      	adds	r5, #8
 800796c:	2d0c      	cmp	r5, #12
 800796e:	bf38      	it	cc
 8007970:	250c      	movcc	r5, #12
 8007972:	2d00      	cmp	r5, #0
 8007974:	4606      	mov	r6, r0
 8007976:	db01      	blt.n	800797c <_malloc_r+0x1c>
 8007978:	42a9      	cmp	r1, r5
 800797a:	d904      	bls.n	8007986 <_malloc_r+0x26>
 800797c:	230c      	movs	r3, #12
 800797e:	6033      	str	r3, [r6, #0]
 8007980:	2000      	movs	r0, #0
 8007982:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007986:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007a5c <_malloc_r+0xfc>
 800798a:	f000 f869 	bl	8007a60 <__malloc_lock>
 800798e:	f8d8 3000 	ldr.w	r3, [r8]
 8007992:	461c      	mov	r4, r3
 8007994:	bb44      	cbnz	r4, 80079e8 <_malloc_r+0x88>
 8007996:	4629      	mov	r1, r5
 8007998:	4630      	mov	r0, r6
 800799a:	f7ff ffbf 	bl	800791c <sbrk_aligned>
 800799e:	1c43      	adds	r3, r0, #1
 80079a0:	4604      	mov	r4, r0
 80079a2:	d158      	bne.n	8007a56 <_malloc_r+0xf6>
 80079a4:	f8d8 4000 	ldr.w	r4, [r8]
 80079a8:	4627      	mov	r7, r4
 80079aa:	2f00      	cmp	r7, #0
 80079ac:	d143      	bne.n	8007a36 <_malloc_r+0xd6>
 80079ae:	2c00      	cmp	r4, #0
 80079b0:	d04b      	beq.n	8007a4a <_malloc_r+0xea>
 80079b2:	6823      	ldr	r3, [r4, #0]
 80079b4:	4639      	mov	r1, r7
 80079b6:	4630      	mov	r0, r6
 80079b8:	eb04 0903 	add.w	r9, r4, r3
 80079bc:	f000 fb5c 	bl	8008078 <_sbrk_r>
 80079c0:	4581      	cmp	r9, r0
 80079c2:	d142      	bne.n	8007a4a <_malloc_r+0xea>
 80079c4:	6821      	ldr	r1, [r4, #0]
 80079c6:	1a6d      	subs	r5, r5, r1
 80079c8:	4629      	mov	r1, r5
 80079ca:	4630      	mov	r0, r6
 80079cc:	f7ff ffa6 	bl	800791c <sbrk_aligned>
 80079d0:	3001      	adds	r0, #1
 80079d2:	d03a      	beq.n	8007a4a <_malloc_r+0xea>
 80079d4:	6823      	ldr	r3, [r4, #0]
 80079d6:	442b      	add	r3, r5
 80079d8:	6023      	str	r3, [r4, #0]
 80079da:	f8d8 3000 	ldr.w	r3, [r8]
 80079de:	685a      	ldr	r2, [r3, #4]
 80079e0:	bb62      	cbnz	r2, 8007a3c <_malloc_r+0xdc>
 80079e2:	f8c8 7000 	str.w	r7, [r8]
 80079e6:	e00f      	b.n	8007a08 <_malloc_r+0xa8>
 80079e8:	6822      	ldr	r2, [r4, #0]
 80079ea:	1b52      	subs	r2, r2, r5
 80079ec:	d420      	bmi.n	8007a30 <_malloc_r+0xd0>
 80079ee:	2a0b      	cmp	r2, #11
 80079f0:	d917      	bls.n	8007a22 <_malloc_r+0xc2>
 80079f2:	1961      	adds	r1, r4, r5
 80079f4:	42a3      	cmp	r3, r4
 80079f6:	6025      	str	r5, [r4, #0]
 80079f8:	bf18      	it	ne
 80079fa:	6059      	strne	r1, [r3, #4]
 80079fc:	6863      	ldr	r3, [r4, #4]
 80079fe:	bf08      	it	eq
 8007a00:	f8c8 1000 	streq.w	r1, [r8]
 8007a04:	5162      	str	r2, [r4, r5]
 8007a06:	604b      	str	r3, [r1, #4]
 8007a08:	4630      	mov	r0, r6
 8007a0a:	f000 f82f 	bl	8007a6c <__malloc_unlock>
 8007a0e:	f104 000b 	add.w	r0, r4, #11
 8007a12:	1d23      	adds	r3, r4, #4
 8007a14:	f020 0007 	bic.w	r0, r0, #7
 8007a18:	1ac2      	subs	r2, r0, r3
 8007a1a:	bf1c      	itt	ne
 8007a1c:	1a1b      	subne	r3, r3, r0
 8007a1e:	50a3      	strne	r3, [r4, r2]
 8007a20:	e7af      	b.n	8007982 <_malloc_r+0x22>
 8007a22:	6862      	ldr	r2, [r4, #4]
 8007a24:	42a3      	cmp	r3, r4
 8007a26:	bf0c      	ite	eq
 8007a28:	f8c8 2000 	streq.w	r2, [r8]
 8007a2c:	605a      	strne	r2, [r3, #4]
 8007a2e:	e7eb      	b.n	8007a08 <_malloc_r+0xa8>
 8007a30:	4623      	mov	r3, r4
 8007a32:	6864      	ldr	r4, [r4, #4]
 8007a34:	e7ae      	b.n	8007994 <_malloc_r+0x34>
 8007a36:	463c      	mov	r4, r7
 8007a38:	687f      	ldr	r7, [r7, #4]
 8007a3a:	e7b6      	b.n	80079aa <_malloc_r+0x4a>
 8007a3c:	461a      	mov	r2, r3
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	42a3      	cmp	r3, r4
 8007a42:	d1fb      	bne.n	8007a3c <_malloc_r+0xdc>
 8007a44:	2300      	movs	r3, #0
 8007a46:	6053      	str	r3, [r2, #4]
 8007a48:	e7de      	b.n	8007a08 <_malloc_r+0xa8>
 8007a4a:	230c      	movs	r3, #12
 8007a4c:	6033      	str	r3, [r6, #0]
 8007a4e:	4630      	mov	r0, r6
 8007a50:	f000 f80c 	bl	8007a6c <__malloc_unlock>
 8007a54:	e794      	b.n	8007980 <_malloc_r+0x20>
 8007a56:	6005      	str	r5, [r0, #0]
 8007a58:	e7d6      	b.n	8007a08 <_malloc_r+0xa8>
 8007a5a:	bf00      	nop
 8007a5c:	2000041c 	.word	0x2000041c

08007a60 <__malloc_lock>:
 8007a60:	4801      	ldr	r0, [pc, #4]	@ (8007a68 <__malloc_lock+0x8>)
 8007a62:	f7ff bf0f 	b.w	8007884 <__retarget_lock_acquire_recursive>
 8007a66:	bf00      	nop
 8007a68:	20000414 	.word	0x20000414

08007a6c <__malloc_unlock>:
 8007a6c:	4801      	ldr	r0, [pc, #4]	@ (8007a74 <__malloc_unlock+0x8>)
 8007a6e:	f7ff bf0a 	b.w	8007886 <__retarget_lock_release_recursive>
 8007a72:	bf00      	nop
 8007a74:	20000414 	.word	0x20000414

08007a78 <__ssputs_r>:
 8007a78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a7c:	688e      	ldr	r6, [r1, #8]
 8007a7e:	461f      	mov	r7, r3
 8007a80:	42be      	cmp	r6, r7
 8007a82:	680b      	ldr	r3, [r1, #0]
 8007a84:	4682      	mov	sl, r0
 8007a86:	460c      	mov	r4, r1
 8007a88:	4690      	mov	r8, r2
 8007a8a:	d82d      	bhi.n	8007ae8 <__ssputs_r+0x70>
 8007a8c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007a90:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007a94:	d026      	beq.n	8007ae4 <__ssputs_r+0x6c>
 8007a96:	6965      	ldr	r5, [r4, #20]
 8007a98:	6909      	ldr	r1, [r1, #16]
 8007a9a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007a9e:	eba3 0901 	sub.w	r9, r3, r1
 8007aa2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007aa6:	1c7b      	adds	r3, r7, #1
 8007aa8:	444b      	add	r3, r9
 8007aaa:	106d      	asrs	r5, r5, #1
 8007aac:	429d      	cmp	r5, r3
 8007aae:	bf38      	it	cc
 8007ab0:	461d      	movcc	r5, r3
 8007ab2:	0553      	lsls	r3, r2, #21
 8007ab4:	d527      	bpl.n	8007b06 <__ssputs_r+0x8e>
 8007ab6:	4629      	mov	r1, r5
 8007ab8:	f7ff ff52 	bl	8007960 <_malloc_r>
 8007abc:	4606      	mov	r6, r0
 8007abe:	b360      	cbz	r0, 8007b1a <__ssputs_r+0xa2>
 8007ac0:	6921      	ldr	r1, [r4, #16]
 8007ac2:	464a      	mov	r2, r9
 8007ac4:	f000 fae8 	bl	8008098 <memcpy>
 8007ac8:	89a3      	ldrh	r3, [r4, #12]
 8007aca:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007ace:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ad2:	81a3      	strh	r3, [r4, #12]
 8007ad4:	6126      	str	r6, [r4, #16]
 8007ad6:	6165      	str	r5, [r4, #20]
 8007ad8:	444e      	add	r6, r9
 8007ada:	eba5 0509 	sub.w	r5, r5, r9
 8007ade:	6026      	str	r6, [r4, #0]
 8007ae0:	60a5      	str	r5, [r4, #8]
 8007ae2:	463e      	mov	r6, r7
 8007ae4:	42be      	cmp	r6, r7
 8007ae6:	d900      	bls.n	8007aea <__ssputs_r+0x72>
 8007ae8:	463e      	mov	r6, r7
 8007aea:	6820      	ldr	r0, [r4, #0]
 8007aec:	4632      	mov	r2, r6
 8007aee:	4641      	mov	r1, r8
 8007af0:	f000 faa8 	bl	8008044 <memmove>
 8007af4:	68a3      	ldr	r3, [r4, #8]
 8007af6:	1b9b      	subs	r3, r3, r6
 8007af8:	60a3      	str	r3, [r4, #8]
 8007afa:	6823      	ldr	r3, [r4, #0]
 8007afc:	4433      	add	r3, r6
 8007afe:	6023      	str	r3, [r4, #0]
 8007b00:	2000      	movs	r0, #0
 8007b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b06:	462a      	mov	r2, r5
 8007b08:	f000 fad4 	bl	80080b4 <_realloc_r>
 8007b0c:	4606      	mov	r6, r0
 8007b0e:	2800      	cmp	r0, #0
 8007b10:	d1e0      	bne.n	8007ad4 <__ssputs_r+0x5c>
 8007b12:	6921      	ldr	r1, [r4, #16]
 8007b14:	4650      	mov	r0, sl
 8007b16:	f7ff feb7 	bl	8007888 <_free_r>
 8007b1a:	230c      	movs	r3, #12
 8007b1c:	f8ca 3000 	str.w	r3, [sl]
 8007b20:	89a3      	ldrh	r3, [r4, #12]
 8007b22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b26:	81a3      	strh	r3, [r4, #12]
 8007b28:	f04f 30ff 	mov.w	r0, #4294967295
 8007b2c:	e7e9      	b.n	8007b02 <__ssputs_r+0x8a>
	...

08007b30 <_svfiprintf_r>:
 8007b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b34:	4698      	mov	r8, r3
 8007b36:	898b      	ldrh	r3, [r1, #12]
 8007b38:	061b      	lsls	r3, r3, #24
 8007b3a:	b09d      	sub	sp, #116	@ 0x74
 8007b3c:	4607      	mov	r7, r0
 8007b3e:	460d      	mov	r5, r1
 8007b40:	4614      	mov	r4, r2
 8007b42:	d510      	bpl.n	8007b66 <_svfiprintf_r+0x36>
 8007b44:	690b      	ldr	r3, [r1, #16]
 8007b46:	b973      	cbnz	r3, 8007b66 <_svfiprintf_r+0x36>
 8007b48:	2140      	movs	r1, #64	@ 0x40
 8007b4a:	f7ff ff09 	bl	8007960 <_malloc_r>
 8007b4e:	6028      	str	r0, [r5, #0]
 8007b50:	6128      	str	r0, [r5, #16]
 8007b52:	b930      	cbnz	r0, 8007b62 <_svfiprintf_r+0x32>
 8007b54:	230c      	movs	r3, #12
 8007b56:	603b      	str	r3, [r7, #0]
 8007b58:	f04f 30ff 	mov.w	r0, #4294967295
 8007b5c:	b01d      	add	sp, #116	@ 0x74
 8007b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b62:	2340      	movs	r3, #64	@ 0x40
 8007b64:	616b      	str	r3, [r5, #20]
 8007b66:	2300      	movs	r3, #0
 8007b68:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b6a:	2320      	movs	r3, #32
 8007b6c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007b70:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b74:	2330      	movs	r3, #48	@ 0x30
 8007b76:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007d14 <_svfiprintf_r+0x1e4>
 8007b7a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007b7e:	f04f 0901 	mov.w	r9, #1
 8007b82:	4623      	mov	r3, r4
 8007b84:	469a      	mov	sl, r3
 8007b86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b8a:	b10a      	cbz	r2, 8007b90 <_svfiprintf_r+0x60>
 8007b8c:	2a25      	cmp	r2, #37	@ 0x25
 8007b8e:	d1f9      	bne.n	8007b84 <_svfiprintf_r+0x54>
 8007b90:	ebba 0b04 	subs.w	fp, sl, r4
 8007b94:	d00b      	beq.n	8007bae <_svfiprintf_r+0x7e>
 8007b96:	465b      	mov	r3, fp
 8007b98:	4622      	mov	r2, r4
 8007b9a:	4629      	mov	r1, r5
 8007b9c:	4638      	mov	r0, r7
 8007b9e:	f7ff ff6b 	bl	8007a78 <__ssputs_r>
 8007ba2:	3001      	adds	r0, #1
 8007ba4:	f000 80a7 	beq.w	8007cf6 <_svfiprintf_r+0x1c6>
 8007ba8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007baa:	445a      	add	r2, fp
 8007bac:	9209      	str	r2, [sp, #36]	@ 0x24
 8007bae:	f89a 3000 	ldrb.w	r3, [sl]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	f000 809f 	beq.w	8007cf6 <_svfiprintf_r+0x1c6>
 8007bb8:	2300      	movs	r3, #0
 8007bba:	f04f 32ff 	mov.w	r2, #4294967295
 8007bbe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007bc2:	f10a 0a01 	add.w	sl, sl, #1
 8007bc6:	9304      	str	r3, [sp, #16]
 8007bc8:	9307      	str	r3, [sp, #28]
 8007bca:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007bce:	931a      	str	r3, [sp, #104]	@ 0x68
 8007bd0:	4654      	mov	r4, sl
 8007bd2:	2205      	movs	r2, #5
 8007bd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bd8:	484e      	ldr	r0, [pc, #312]	@ (8007d14 <_svfiprintf_r+0x1e4>)
 8007bda:	f7f8 fb01 	bl	80001e0 <memchr>
 8007bde:	9a04      	ldr	r2, [sp, #16]
 8007be0:	b9d8      	cbnz	r0, 8007c1a <_svfiprintf_r+0xea>
 8007be2:	06d0      	lsls	r0, r2, #27
 8007be4:	bf44      	itt	mi
 8007be6:	2320      	movmi	r3, #32
 8007be8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007bec:	0711      	lsls	r1, r2, #28
 8007bee:	bf44      	itt	mi
 8007bf0:	232b      	movmi	r3, #43	@ 0x2b
 8007bf2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007bf6:	f89a 3000 	ldrb.w	r3, [sl]
 8007bfa:	2b2a      	cmp	r3, #42	@ 0x2a
 8007bfc:	d015      	beq.n	8007c2a <_svfiprintf_r+0xfa>
 8007bfe:	9a07      	ldr	r2, [sp, #28]
 8007c00:	4654      	mov	r4, sl
 8007c02:	2000      	movs	r0, #0
 8007c04:	f04f 0c0a 	mov.w	ip, #10
 8007c08:	4621      	mov	r1, r4
 8007c0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c0e:	3b30      	subs	r3, #48	@ 0x30
 8007c10:	2b09      	cmp	r3, #9
 8007c12:	d94b      	bls.n	8007cac <_svfiprintf_r+0x17c>
 8007c14:	b1b0      	cbz	r0, 8007c44 <_svfiprintf_r+0x114>
 8007c16:	9207      	str	r2, [sp, #28]
 8007c18:	e014      	b.n	8007c44 <_svfiprintf_r+0x114>
 8007c1a:	eba0 0308 	sub.w	r3, r0, r8
 8007c1e:	fa09 f303 	lsl.w	r3, r9, r3
 8007c22:	4313      	orrs	r3, r2
 8007c24:	9304      	str	r3, [sp, #16]
 8007c26:	46a2      	mov	sl, r4
 8007c28:	e7d2      	b.n	8007bd0 <_svfiprintf_r+0xa0>
 8007c2a:	9b03      	ldr	r3, [sp, #12]
 8007c2c:	1d19      	adds	r1, r3, #4
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	9103      	str	r1, [sp, #12]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	bfbb      	ittet	lt
 8007c36:	425b      	neglt	r3, r3
 8007c38:	f042 0202 	orrlt.w	r2, r2, #2
 8007c3c:	9307      	strge	r3, [sp, #28]
 8007c3e:	9307      	strlt	r3, [sp, #28]
 8007c40:	bfb8      	it	lt
 8007c42:	9204      	strlt	r2, [sp, #16]
 8007c44:	7823      	ldrb	r3, [r4, #0]
 8007c46:	2b2e      	cmp	r3, #46	@ 0x2e
 8007c48:	d10a      	bne.n	8007c60 <_svfiprintf_r+0x130>
 8007c4a:	7863      	ldrb	r3, [r4, #1]
 8007c4c:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c4e:	d132      	bne.n	8007cb6 <_svfiprintf_r+0x186>
 8007c50:	9b03      	ldr	r3, [sp, #12]
 8007c52:	1d1a      	adds	r2, r3, #4
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	9203      	str	r2, [sp, #12]
 8007c58:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007c5c:	3402      	adds	r4, #2
 8007c5e:	9305      	str	r3, [sp, #20]
 8007c60:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007d24 <_svfiprintf_r+0x1f4>
 8007c64:	7821      	ldrb	r1, [r4, #0]
 8007c66:	2203      	movs	r2, #3
 8007c68:	4650      	mov	r0, sl
 8007c6a:	f7f8 fab9 	bl	80001e0 <memchr>
 8007c6e:	b138      	cbz	r0, 8007c80 <_svfiprintf_r+0x150>
 8007c70:	9b04      	ldr	r3, [sp, #16]
 8007c72:	eba0 000a 	sub.w	r0, r0, sl
 8007c76:	2240      	movs	r2, #64	@ 0x40
 8007c78:	4082      	lsls	r2, r0
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	3401      	adds	r4, #1
 8007c7e:	9304      	str	r3, [sp, #16]
 8007c80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c84:	4824      	ldr	r0, [pc, #144]	@ (8007d18 <_svfiprintf_r+0x1e8>)
 8007c86:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007c8a:	2206      	movs	r2, #6
 8007c8c:	f7f8 faa8 	bl	80001e0 <memchr>
 8007c90:	2800      	cmp	r0, #0
 8007c92:	d036      	beq.n	8007d02 <_svfiprintf_r+0x1d2>
 8007c94:	4b21      	ldr	r3, [pc, #132]	@ (8007d1c <_svfiprintf_r+0x1ec>)
 8007c96:	bb1b      	cbnz	r3, 8007ce0 <_svfiprintf_r+0x1b0>
 8007c98:	9b03      	ldr	r3, [sp, #12]
 8007c9a:	3307      	adds	r3, #7
 8007c9c:	f023 0307 	bic.w	r3, r3, #7
 8007ca0:	3308      	adds	r3, #8
 8007ca2:	9303      	str	r3, [sp, #12]
 8007ca4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ca6:	4433      	add	r3, r6
 8007ca8:	9309      	str	r3, [sp, #36]	@ 0x24
 8007caa:	e76a      	b.n	8007b82 <_svfiprintf_r+0x52>
 8007cac:	fb0c 3202 	mla	r2, ip, r2, r3
 8007cb0:	460c      	mov	r4, r1
 8007cb2:	2001      	movs	r0, #1
 8007cb4:	e7a8      	b.n	8007c08 <_svfiprintf_r+0xd8>
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	3401      	adds	r4, #1
 8007cba:	9305      	str	r3, [sp, #20]
 8007cbc:	4619      	mov	r1, r3
 8007cbe:	f04f 0c0a 	mov.w	ip, #10
 8007cc2:	4620      	mov	r0, r4
 8007cc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007cc8:	3a30      	subs	r2, #48	@ 0x30
 8007cca:	2a09      	cmp	r2, #9
 8007ccc:	d903      	bls.n	8007cd6 <_svfiprintf_r+0x1a6>
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d0c6      	beq.n	8007c60 <_svfiprintf_r+0x130>
 8007cd2:	9105      	str	r1, [sp, #20]
 8007cd4:	e7c4      	b.n	8007c60 <_svfiprintf_r+0x130>
 8007cd6:	fb0c 2101 	mla	r1, ip, r1, r2
 8007cda:	4604      	mov	r4, r0
 8007cdc:	2301      	movs	r3, #1
 8007cde:	e7f0      	b.n	8007cc2 <_svfiprintf_r+0x192>
 8007ce0:	ab03      	add	r3, sp, #12
 8007ce2:	9300      	str	r3, [sp, #0]
 8007ce4:	462a      	mov	r2, r5
 8007ce6:	4b0e      	ldr	r3, [pc, #56]	@ (8007d20 <_svfiprintf_r+0x1f0>)
 8007ce8:	a904      	add	r1, sp, #16
 8007cea:	4638      	mov	r0, r7
 8007cec:	f3af 8000 	nop.w
 8007cf0:	1c42      	adds	r2, r0, #1
 8007cf2:	4606      	mov	r6, r0
 8007cf4:	d1d6      	bne.n	8007ca4 <_svfiprintf_r+0x174>
 8007cf6:	89ab      	ldrh	r3, [r5, #12]
 8007cf8:	065b      	lsls	r3, r3, #25
 8007cfa:	f53f af2d 	bmi.w	8007b58 <_svfiprintf_r+0x28>
 8007cfe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007d00:	e72c      	b.n	8007b5c <_svfiprintf_r+0x2c>
 8007d02:	ab03      	add	r3, sp, #12
 8007d04:	9300      	str	r3, [sp, #0]
 8007d06:	462a      	mov	r2, r5
 8007d08:	4b05      	ldr	r3, [pc, #20]	@ (8007d20 <_svfiprintf_r+0x1f0>)
 8007d0a:	a904      	add	r1, sp, #16
 8007d0c:	4638      	mov	r0, r7
 8007d0e:	f000 f879 	bl	8007e04 <_printf_i>
 8007d12:	e7ed      	b.n	8007cf0 <_svfiprintf_r+0x1c0>
 8007d14:	08008264 	.word	0x08008264
 8007d18:	0800826e 	.word	0x0800826e
 8007d1c:	00000000 	.word	0x00000000
 8007d20:	08007a79 	.word	0x08007a79
 8007d24:	0800826a 	.word	0x0800826a

08007d28 <_printf_common>:
 8007d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d2c:	4616      	mov	r6, r2
 8007d2e:	4698      	mov	r8, r3
 8007d30:	688a      	ldr	r2, [r1, #8]
 8007d32:	690b      	ldr	r3, [r1, #16]
 8007d34:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	bfb8      	it	lt
 8007d3c:	4613      	movlt	r3, r2
 8007d3e:	6033      	str	r3, [r6, #0]
 8007d40:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007d44:	4607      	mov	r7, r0
 8007d46:	460c      	mov	r4, r1
 8007d48:	b10a      	cbz	r2, 8007d4e <_printf_common+0x26>
 8007d4a:	3301      	adds	r3, #1
 8007d4c:	6033      	str	r3, [r6, #0]
 8007d4e:	6823      	ldr	r3, [r4, #0]
 8007d50:	0699      	lsls	r1, r3, #26
 8007d52:	bf42      	ittt	mi
 8007d54:	6833      	ldrmi	r3, [r6, #0]
 8007d56:	3302      	addmi	r3, #2
 8007d58:	6033      	strmi	r3, [r6, #0]
 8007d5a:	6825      	ldr	r5, [r4, #0]
 8007d5c:	f015 0506 	ands.w	r5, r5, #6
 8007d60:	d106      	bne.n	8007d70 <_printf_common+0x48>
 8007d62:	f104 0a19 	add.w	sl, r4, #25
 8007d66:	68e3      	ldr	r3, [r4, #12]
 8007d68:	6832      	ldr	r2, [r6, #0]
 8007d6a:	1a9b      	subs	r3, r3, r2
 8007d6c:	42ab      	cmp	r3, r5
 8007d6e:	dc26      	bgt.n	8007dbe <_printf_common+0x96>
 8007d70:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007d74:	6822      	ldr	r2, [r4, #0]
 8007d76:	3b00      	subs	r3, #0
 8007d78:	bf18      	it	ne
 8007d7a:	2301      	movne	r3, #1
 8007d7c:	0692      	lsls	r2, r2, #26
 8007d7e:	d42b      	bmi.n	8007dd8 <_printf_common+0xb0>
 8007d80:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007d84:	4641      	mov	r1, r8
 8007d86:	4638      	mov	r0, r7
 8007d88:	47c8      	blx	r9
 8007d8a:	3001      	adds	r0, #1
 8007d8c:	d01e      	beq.n	8007dcc <_printf_common+0xa4>
 8007d8e:	6823      	ldr	r3, [r4, #0]
 8007d90:	6922      	ldr	r2, [r4, #16]
 8007d92:	f003 0306 	and.w	r3, r3, #6
 8007d96:	2b04      	cmp	r3, #4
 8007d98:	bf02      	ittt	eq
 8007d9a:	68e5      	ldreq	r5, [r4, #12]
 8007d9c:	6833      	ldreq	r3, [r6, #0]
 8007d9e:	1aed      	subeq	r5, r5, r3
 8007da0:	68a3      	ldr	r3, [r4, #8]
 8007da2:	bf0c      	ite	eq
 8007da4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007da8:	2500      	movne	r5, #0
 8007daa:	4293      	cmp	r3, r2
 8007dac:	bfc4      	itt	gt
 8007dae:	1a9b      	subgt	r3, r3, r2
 8007db0:	18ed      	addgt	r5, r5, r3
 8007db2:	2600      	movs	r6, #0
 8007db4:	341a      	adds	r4, #26
 8007db6:	42b5      	cmp	r5, r6
 8007db8:	d11a      	bne.n	8007df0 <_printf_common+0xc8>
 8007dba:	2000      	movs	r0, #0
 8007dbc:	e008      	b.n	8007dd0 <_printf_common+0xa8>
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	4652      	mov	r2, sl
 8007dc2:	4641      	mov	r1, r8
 8007dc4:	4638      	mov	r0, r7
 8007dc6:	47c8      	blx	r9
 8007dc8:	3001      	adds	r0, #1
 8007dca:	d103      	bne.n	8007dd4 <_printf_common+0xac>
 8007dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8007dd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dd4:	3501      	adds	r5, #1
 8007dd6:	e7c6      	b.n	8007d66 <_printf_common+0x3e>
 8007dd8:	18e1      	adds	r1, r4, r3
 8007dda:	1c5a      	adds	r2, r3, #1
 8007ddc:	2030      	movs	r0, #48	@ 0x30
 8007dde:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007de2:	4422      	add	r2, r4
 8007de4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007de8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007dec:	3302      	adds	r3, #2
 8007dee:	e7c7      	b.n	8007d80 <_printf_common+0x58>
 8007df0:	2301      	movs	r3, #1
 8007df2:	4622      	mov	r2, r4
 8007df4:	4641      	mov	r1, r8
 8007df6:	4638      	mov	r0, r7
 8007df8:	47c8      	blx	r9
 8007dfa:	3001      	adds	r0, #1
 8007dfc:	d0e6      	beq.n	8007dcc <_printf_common+0xa4>
 8007dfe:	3601      	adds	r6, #1
 8007e00:	e7d9      	b.n	8007db6 <_printf_common+0x8e>
	...

08007e04 <_printf_i>:
 8007e04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e08:	7e0f      	ldrb	r7, [r1, #24]
 8007e0a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007e0c:	2f78      	cmp	r7, #120	@ 0x78
 8007e0e:	4691      	mov	r9, r2
 8007e10:	4680      	mov	r8, r0
 8007e12:	460c      	mov	r4, r1
 8007e14:	469a      	mov	sl, r3
 8007e16:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007e1a:	d807      	bhi.n	8007e2c <_printf_i+0x28>
 8007e1c:	2f62      	cmp	r7, #98	@ 0x62
 8007e1e:	d80a      	bhi.n	8007e36 <_printf_i+0x32>
 8007e20:	2f00      	cmp	r7, #0
 8007e22:	f000 80d2 	beq.w	8007fca <_printf_i+0x1c6>
 8007e26:	2f58      	cmp	r7, #88	@ 0x58
 8007e28:	f000 80b9 	beq.w	8007f9e <_printf_i+0x19a>
 8007e2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007e30:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007e34:	e03a      	b.n	8007eac <_printf_i+0xa8>
 8007e36:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007e3a:	2b15      	cmp	r3, #21
 8007e3c:	d8f6      	bhi.n	8007e2c <_printf_i+0x28>
 8007e3e:	a101      	add	r1, pc, #4	@ (adr r1, 8007e44 <_printf_i+0x40>)
 8007e40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007e44:	08007e9d 	.word	0x08007e9d
 8007e48:	08007eb1 	.word	0x08007eb1
 8007e4c:	08007e2d 	.word	0x08007e2d
 8007e50:	08007e2d 	.word	0x08007e2d
 8007e54:	08007e2d 	.word	0x08007e2d
 8007e58:	08007e2d 	.word	0x08007e2d
 8007e5c:	08007eb1 	.word	0x08007eb1
 8007e60:	08007e2d 	.word	0x08007e2d
 8007e64:	08007e2d 	.word	0x08007e2d
 8007e68:	08007e2d 	.word	0x08007e2d
 8007e6c:	08007e2d 	.word	0x08007e2d
 8007e70:	08007fb1 	.word	0x08007fb1
 8007e74:	08007edb 	.word	0x08007edb
 8007e78:	08007f6b 	.word	0x08007f6b
 8007e7c:	08007e2d 	.word	0x08007e2d
 8007e80:	08007e2d 	.word	0x08007e2d
 8007e84:	08007fd3 	.word	0x08007fd3
 8007e88:	08007e2d 	.word	0x08007e2d
 8007e8c:	08007edb 	.word	0x08007edb
 8007e90:	08007e2d 	.word	0x08007e2d
 8007e94:	08007e2d 	.word	0x08007e2d
 8007e98:	08007f73 	.word	0x08007f73
 8007e9c:	6833      	ldr	r3, [r6, #0]
 8007e9e:	1d1a      	adds	r2, r3, #4
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	6032      	str	r2, [r6, #0]
 8007ea4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007ea8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007eac:	2301      	movs	r3, #1
 8007eae:	e09d      	b.n	8007fec <_printf_i+0x1e8>
 8007eb0:	6833      	ldr	r3, [r6, #0]
 8007eb2:	6820      	ldr	r0, [r4, #0]
 8007eb4:	1d19      	adds	r1, r3, #4
 8007eb6:	6031      	str	r1, [r6, #0]
 8007eb8:	0606      	lsls	r6, r0, #24
 8007eba:	d501      	bpl.n	8007ec0 <_printf_i+0xbc>
 8007ebc:	681d      	ldr	r5, [r3, #0]
 8007ebe:	e003      	b.n	8007ec8 <_printf_i+0xc4>
 8007ec0:	0645      	lsls	r5, r0, #25
 8007ec2:	d5fb      	bpl.n	8007ebc <_printf_i+0xb8>
 8007ec4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007ec8:	2d00      	cmp	r5, #0
 8007eca:	da03      	bge.n	8007ed4 <_printf_i+0xd0>
 8007ecc:	232d      	movs	r3, #45	@ 0x2d
 8007ece:	426d      	negs	r5, r5
 8007ed0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007ed4:	4859      	ldr	r0, [pc, #356]	@ (800803c <_printf_i+0x238>)
 8007ed6:	230a      	movs	r3, #10
 8007ed8:	e011      	b.n	8007efe <_printf_i+0xfa>
 8007eda:	6821      	ldr	r1, [r4, #0]
 8007edc:	6833      	ldr	r3, [r6, #0]
 8007ede:	0608      	lsls	r0, r1, #24
 8007ee0:	f853 5b04 	ldr.w	r5, [r3], #4
 8007ee4:	d402      	bmi.n	8007eec <_printf_i+0xe8>
 8007ee6:	0649      	lsls	r1, r1, #25
 8007ee8:	bf48      	it	mi
 8007eea:	b2ad      	uxthmi	r5, r5
 8007eec:	2f6f      	cmp	r7, #111	@ 0x6f
 8007eee:	4853      	ldr	r0, [pc, #332]	@ (800803c <_printf_i+0x238>)
 8007ef0:	6033      	str	r3, [r6, #0]
 8007ef2:	bf14      	ite	ne
 8007ef4:	230a      	movne	r3, #10
 8007ef6:	2308      	moveq	r3, #8
 8007ef8:	2100      	movs	r1, #0
 8007efa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007efe:	6866      	ldr	r6, [r4, #4]
 8007f00:	60a6      	str	r6, [r4, #8]
 8007f02:	2e00      	cmp	r6, #0
 8007f04:	bfa2      	ittt	ge
 8007f06:	6821      	ldrge	r1, [r4, #0]
 8007f08:	f021 0104 	bicge.w	r1, r1, #4
 8007f0c:	6021      	strge	r1, [r4, #0]
 8007f0e:	b90d      	cbnz	r5, 8007f14 <_printf_i+0x110>
 8007f10:	2e00      	cmp	r6, #0
 8007f12:	d04b      	beq.n	8007fac <_printf_i+0x1a8>
 8007f14:	4616      	mov	r6, r2
 8007f16:	fbb5 f1f3 	udiv	r1, r5, r3
 8007f1a:	fb03 5711 	mls	r7, r3, r1, r5
 8007f1e:	5dc7      	ldrb	r7, [r0, r7]
 8007f20:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007f24:	462f      	mov	r7, r5
 8007f26:	42bb      	cmp	r3, r7
 8007f28:	460d      	mov	r5, r1
 8007f2a:	d9f4      	bls.n	8007f16 <_printf_i+0x112>
 8007f2c:	2b08      	cmp	r3, #8
 8007f2e:	d10b      	bne.n	8007f48 <_printf_i+0x144>
 8007f30:	6823      	ldr	r3, [r4, #0]
 8007f32:	07df      	lsls	r7, r3, #31
 8007f34:	d508      	bpl.n	8007f48 <_printf_i+0x144>
 8007f36:	6923      	ldr	r3, [r4, #16]
 8007f38:	6861      	ldr	r1, [r4, #4]
 8007f3a:	4299      	cmp	r1, r3
 8007f3c:	bfde      	ittt	le
 8007f3e:	2330      	movle	r3, #48	@ 0x30
 8007f40:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007f44:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007f48:	1b92      	subs	r2, r2, r6
 8007f4a:	6122      	str	r2, [r4, #16]
 8007f4c:	f8cd a000 	str.w	sl, [sp]
 8007f50:	464b      	mov	r3, r9
 8007f52:	aa03      	add	r2, sp, #12
 8007f54:	4621      	mov	r1, r4
 8007f56:	4640      	mov	r0, r8
 8007f58:	f7ff fee6 	bl	8007d28 <_printf_common>
 8007f5c:	3001      	adds	r0, #1
 8007f5e:	d14a      	bne.n	8007ff6 <_printf_i+0x1f2>
 8007f60:	f04f 30ff 	mov.w	r0, #4294967295
 8007f64:	b004      	add	sp, #16
 8007f66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f6a:	6823      	ldr	r3, [r4, #0]
 8007f6c:	f043 0320 	orr.w	r3, r3, #32
 8007f70:	6023      	str	r3, [r4, #0]
 8007f72:	4833      	ldr	r0, [pc, #204]	@ (8008040 <_printf_i+0x23c>)
 8007f74:	2778      	movs	r7, #120	@ 0x78
 8007f76:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007f7a:	6823      	ldr	r3, [r4, #0]
 8007f7c:	6831      	ldr	r1, [r6, #0]
 8007f7e:	061f      	lsls	r7, r3, #24
 8007f80:	f851 5b04 	ldr.w	r5, [r1], #4
 8007f84:	d402      	bmi.n	8007f8c <_printf_i+0x188>
 8007f86:	065f      	lsls	r7, r3, #25
 8007f88:	bf48      	it	mi
 8007f8a:	b2ad      	uxthmi	r5, r5
 8007f8c:	6031      	str	r1, [r6, #0]
 8007f8e:	07d9      	lsls	r1, r3, #31
 8007f90:	bf44      	itt	mi
 8007f92:	f043 0320 	orrmi.w	r3, r3, #32
 8007f96:	6023      	strmi	r3, [r4, #0]
 8007f98:	b11d      	cbz	r5, 8007fa2 <_printf_i+0x19e>
 8007f9a:	2310      	movs	r3, #16
 8007f9c:	e7ac      	b.n	8007ef8 <_printf_i+0xf4>
 8007f9e:	4827      	ldr	r0, [pc, #156]	@ (800803c <_printf_i+0x238>)
 8007fa0:	e7e9      	b.n	8007f76 <_printf_i+0x172>
 8007fa2:	6823      	ldr	r3, [r4, #0]
 8007fa4:	f023 0320 	bic.w	r3, r3, #32
 8007fa8:	6023      	str	r3, [r4, #0]
 8007faa:	e7f6      	b.n	8007f9a <_printf_i+0x196>
 8007fac:	4616      	mov	r6, r2
 8007fae:	e7bd      	b.n	8007f2c <_printf_i+0x128>
 8007fb0:	6833      	ldr	r3, [r6, #0]
 8007fb2:	6825      	ldr	r5, [r4, #0]
 8007fb4:	6961      	ldr	r1, [r4, #20]
 8007fb6:	1d18      	adds	r0, r3, #4
 8007fb8:	6030      	str	r0, [r6, #0]
 8007fba:	062e      	lsls	r6, r5, #24
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	d501      	bpl.n	8007fc4 <_printf_i+0x1c0>
 8007fc0:	6019      	str	r1, [r3, #0]
 8007fc2:	e002      	b.n	8007fca <_printf_i+0x1c6>
 8007fc4:	0668      	lsls	r0, r5, #25
 8007fc6:	d5fb      	bpl.n	8007fc0 <_printf_i+0x1bc>
 8007fc8:	8019      	strh	r1, [r3, #0]
 8007fca:	2300      	movs	r3, #0
 8007fcc:	6123      	str	r3, [r4, #16]
 8007fce:	4616      	mov	r6, r2
 8007fd0:	e7bc      	b.n	8007f4c <_printf_i+0x148>
 8007fd2:	6833      	ldr	r3, [r6, #0]
 8007fd4:	1d1a      	adds	r2, r3, #4
 8007fd6:	6032      	str	r2, [r6, #0]
 8007fd8:	681e      	ldr	r6, [r3, #0]
 8007fda:	6862      	ldr	r2, [r4, #4]
 8007fdc:	2100      	movs	r1, #0
 8007fde:	4630      	mov	r0, r6
 8007fe0:	f7f8 f8fe 	bl	80001e0 <memchr>
 8007fe4:	b108      	cbz	r0, 8007fea <_printf_i+0x1e6>
 8007fe6:	1b80      	subs	r0, r0, r6
 8007fe8:	6060      	str	r0, [r4, #4]
 8007fea:	6863      	ldr	r3, [r4, #4]
 8007fec:	6123      	str	r3, [r4, #16]
 8007fee:	2300      	movs	r3, #0
 8007ff0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007ff4:	e7aa      	b.n	8007f4c <_printf_i+0x148>
 8007ff6:	6923      	ldr	r3, [r4, #16]
 8007ff8:	4632      	mov	r2, r6
 8007ffa:	4649      	mov	r1, r9
 8007ffc:	4640      	mov	r0, r8
 8007ffe:	47d0      	blx	sl
 8008000:	3001      	adds	r0, #1
 8008002:	d0ad      	beq.n	8007f60 <_printf_i+0x15c>
 8008004:	6823      	ldr	r3, [r4, #0]
 8008006:	079b      	lsls	r3, r3, #30
 8008008:	d413      	bmi.n	8008032 <_printf_i+0x22e>
 800800a:	68e0      	ldr	r0, [r4, #12]
 800800c:	9b03      	ldr	r3, [sp, #12]
 800800e:	4298      	cmp	r0, r3
 8008010:	bfb8      	it	lt
 8008012:	4618      	movlt	r0, r3
 8008014:	e7a6      	b.n	8007f64 <_printf_i+0x160>
 8008016:	2301      	movs	r3, #1
 8008018:	4632      	mov	r2, r6
 800801a:	4649      	mov	r1, r9
 800801c:	4640      	mov	r0, r8
 800801e:	47d0      	blx	sl
 8008020:	3001      	adds	r0, #1
 8008022:	d09d      	beq.n	8007f60 <_printf_i+0x15c>
 8008024:	3501      	adds	r5, #1
 8008026:	68e3      	ldr	r3, [r4, #12]
 8008028:	9903      	ldr	r1, [sp, #12]
 800802a:	1a5b      	subs	r3, r3, r1
 800802c:	42ab      	cmp	r3, r5
 800802e:	dcf2      	bgt.n	8008016 <_printf_i+0x212>
 8008030:	e7eb      	b.n	800800a <_printf_i+0x206>
 8008032:	2500      	movs	r5, #0
 8008034:	f104 0619 	add.w	r6, r4, #25
 8008038:	e7f5      	b.n	8008026 <_printf_i+0x222>
 800803a:	bf00      	nop
 800803c:	08008275 	.word	0x08008275
 8008040:	08008286 	.word	0x08008286

08008044 <memmove>:
 8008044:	4288      	cmp	r0, r1
 8008046:	b510      	push	{r4, lr}
 8008048:	eb01 0402 	add.w	r4, r1, r2
 800804c:	d902      	bls.n	8008054 <memmove+0x10>
 800804e:	4284      	cmp	r4, r0
 8008050:	4623      	mov	r3, r4
 8008052:	d807      	bhi.n	8008064 <memmove+0x20>
 8008054:	1e43      	subs	r3, r0, #1
 8008056:	42a1      	cmp	r1, r4
 8008058:	d008      	beq.n	800806c <memmove+0x28>
 800805a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800805e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008062:	e7f8      	b.n	8008056 <memmove+0x12>
 8008064:	4402      	add	r2, r0
 8008066:	4601      	mov	r1, r0
 8008068:	428a      	cmp	r2, r1
 800806a:	d100      	bne.n	800806e <memmove+0x2a>
 800806c:	bd10      	pop	{r4, pc}
 800806e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008072:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008076:	e7f7      	b.n	8008068 <memmove+0x24>

08008078 <_sbrk_r>:
 8008078:	b538      	push	{r3, r4, r5, lr}
 800807a:	4d06      	ldr	r5, [pc, #24]	@ (8008094 <_sbrk_r+0x1c>)
 800807c:	2300      	movs	r3, #0
 800807e:	4604      	mov	r4, r0
 8008080:	4608      	mov	r0, r1
 8008082:	602b      	str	r3, [r5, #0]
 8008084:	f7f9 fa0a 	bl	800149c <_sbrk>
 8008088:	1c43      	adds	r3, r0, #1
 800808a:	d102      	bne.n	8008092 <_sbrk_r+0x1a>
 800808c:	682b      	ldr	r3, [r5, #0]
 800808e:	b103      	cbz	r3, 8008092 <_sbrk_r+0x1a>
 8008090:	6023      	str	r3, [r4, #0]
 8008092:	bd38      	pop	{r3, r4, r5, pc}
 8008094:	20000410 	.word	0x20000410

08008098 <memcpy>:
 8008098:	440a      	add	r2, r1
 800809a:	4291      	cmp	r1, r2
 800809c:	f100 33ff 	add.w	r3, r0, #4294967295
 80080a0:	d100      	bne.n	80080a4 <memcpy+0xc>
 80080a2:	4770      	bx	lr
 80080a4:	b510      	push	{r4, lr}
 80080a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80080ae:	4291      	cmp	r1, r2
 80080b0:	d1f9      	bne.n	80080a6 <memcpy+0xe>
 80080b2:	bd10      	pop	{r4, pc}

080080b4 <_realloc_r>:
 80080b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080b8:	4680      	mov	r8, r0
 80080ba:	4615      	mov	r5, r2
 80080bc:	460c      	mov	r4, r1
 80080be:	b921      	cbnz	r1, 80080ca <_realloc_r+0x16>
 80080c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80080c4:	4611      	mov	r1, r2
 80080c6:	f7ff bc4b 	b.w	8007960 <_malloc_r>
 80080ca:	b92a      	cbnz	r2, 80080d8 <_realloc_r+0x24>
 80080cc:	f7ff fbdc 	bl	8007888 <_free_r>
 80080d0:	2400      	movs	r4, #0
 80080d2:	4620      	mov	r0, r4
 80080d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080d8:	f000 f81a 	bl	8008110 <_malloc_usable_size_r>
 80080dc:	4285      	cmp	r5, r0
 80080de:	4606      	mov	r6, r0
 80080e0:	d802      	bhi.n	80080e8 <_realloc_r+0x34>
 80080e2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80080e6:	d8f4      	bhi.n	80080d2 <_realloc_r+0x1e>
 80080e8:	4629      	mov	r1, r5
 80080ea:	4640      	mov	r0, r8
 80080ec:	f7ff fc38 	bl	8007960 <_malloc_r>
 80080f0:	4607      	mov	r7, r0
 80080f2:	2800      	cmp	r0, #0
 80080f4:	d0ec      	beq.n	80080d0 <_realloc_r+0x1c>
 80080f6:	42b5      	cmp	r5, r6
 80080f8:	462a      	mov	r2, r5
 80080fa:	4621      	mov	r1, r4
 80080fc:	bf28      	it	cs
 80080fe:	4632      	movcs	r2, r6
 8008100:	f7ff ffca 	bl	8008098 <memcpy>
 8008104:	4621      	mov	r1, r4
 8008106:	4640      	mov	r0, r8
 8008108:	f7ff fbbe 	bl	8007888 <_free_r>
 800810c:	463c      	mov	r4, r7
 800810e:	e7e0      	b.n	80080d2 <_realloc_r+0x1e>

08008110 <_malloc_usable_size_r>:
 8008110:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008114:	1f18      	subs	r0, r3, #4
 8008116:	2b00      	cmp	r3, #0
 8008118:	bfbc      	itt	lt
 800811a:	580b      	ldrlt	r3, [r1, r0]
 800811c:	18c0      	addlt	r0, r0, r3
 800811e:	4770      	bx	lr

08008120 <_init>:
 8008120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008122:	bf00      	nop
 8008124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008126:	bc08      	pop	{r3}
 8008128:	469e      	mov	lr, r3
 800812a:	4770      	bx	lr

0800812c <_fini>:
 800812c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800812e:	bf00      	nop
 8008130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008132:	bc08      	pop	{r3}
 8008134:	469e      	mov	lr, r3
 8008136:	4770      	bx	lr
