
Can_with_it.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c68  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  08008df8  08008df8  00009df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008fa4  08008fa4  0000a068  2**0
                  CONTENTS
  4 .ARM          00000008  08008fa4  08008fa4  00009fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008fac  08008fac  0000a068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008fac  08008fac  00009fac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008fb0  08008fb0  00009fb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08008fb4  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000414  20000068  0800901c  0000a068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000047c  0800901c  0000a47c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019ea8  00000000  00000000  0000a098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003424  00000000  00000000  00023f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001680  00000000  00000000  00027368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001184  00000000  00000000  000289e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a2d9  00000000  00000000  00029b6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a5ad  00000000  00000000  00053e45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010a696  00000000  00000000  0006e3f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00178a88  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000066e8  00000000  00000000  00178acc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0017f1b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008de0 	.word	0x08008de0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08008de0 	.word	0x08008de0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b96a 	b.w	8000d48 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	460c      	mov	r4, r1
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d14e      	bne.n	8000b36 <__udivmoddi4+0xaa>
 8000a98:	4694      	mov	ip, r2
 8000a9a:	458c      	cmp	ip, r1
 8000a9c:	4686      	mov	lr, r0
 8000a9e:	fab2 f282 	clz	r2, r2
 8000aa2:	d962      	bls.n	8000b6a <__udivmoddi4+0xde>
 8000aa4:	b14a      	cbz	r2, 8000aba <__udivmoddi4+0x2e>
 8000aa6:	f1c2 0320 	rsb	r3, r2, #32
 8000aaa:	4091      	lsls	r1, r2
 8000aac:	fa20 f303 	lsr.w	r3, r0, r3
 8000ab0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ab4:	4319      	orrs	r1, r3
 8000ab6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000abe:	fa1f f68c 	uxth.w	r6, ip
 8000ac2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ac6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000aca:	fb07 1114 	mls	r1, r7, r4, r1
 8000ace:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ad2:	fb04 f106 	mul.w	r1, r4, r6
 8000ad6:	4299      	cmp	r1, r3
 8000ad8:	d90a      	bls.n	8000af0 <__udivmoddi4+0x64>
 8000ada:	eb1c 0303 	adds.w	r3, ip, r3
 8000ade:	f104 30ff 	add.w	r0, r4, #4294967295
 8000ae2:	f080 8112 	bcs.w	8000d0a <__udivmoddi4+0x27e>
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	f240 810f 	bls.w	8000d0a <__udivmoddi4+0x27e>
 8000aec:	3c02      	subs	r4, #2
 8000aee:	4463      	add	r3, ip
 8000af0:	1a59      	subs	r1, r3, r1
 8000af2:	fa1f f38e 	uxth.w	r3, lr
 8000af6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000afa:	fb07 1110 	mls	r1, r7, r0, r1
 8000afe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b02:	fb00 f606 	mul.w	r6, r0, r6
 8000b06:	429e      	cmp	r6, r3
 8000b08:	d90a      	bls.n	8000b20 <__udivmoddi4+0x94>
 8000b0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b12:	f080 80fc 	bcs.w	8000d0e <__udivmoddi4+0x282>
 8000b16:	429e      	cmp	r6, r3
 8000b18:	f240 80f9 	bls.w	8000d0e <__udivmoddi4+0x282>
 8000b1c:	4463      	add	r3, ip
 8000b1e:	3802      	subs	r0, #2
 8000b20:	1b9b      	subs	r3, r3, r6
 8000b22:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b26:	2100      	movs	r1, #0
 8000b28:	b11d      	cbz	r5, 8000b32 <__udivmoddi4+0xa6>
 8000b2a:	40d3      	lsrs	r3, r2
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b36:	428b      	cmp	r3, r1
 8000b38:	d905      	bls.n	8000b46 <__udivmoddi4+0xba>
 8000b3a:	b10d      	cbz	r5, 8000b40 <__udivmoddi4+0xb4>
 8000b3c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b40:	2100      	movs	r1, #0
 8000b42:	4608      	mov	r0, r1
 8000b44:	e7f5      	b.n	8000b32 <__udivmoddi4+0xa6>
 8000b46:	fab3 f183 	clz	r1, r3
 8000b4a:	2900      	cmp	r1, #0
 8000b4c:	d146      	bne.n	8000bdc <__udivmoddi4+0x150>
 8000b4e:	42a3      	cmp	r3, r4
 8000b50:	d302      	bcc.n	8000b58 <__udivmoddi4+0xcc>
 8000b52:	4290      	cmp	r0, r2
 8000b54:	f0c0 80f0 	bcc.w	8000d38 <__udivmoddi4+0x2ac>
 8000b58:	1a86      	subs	r6, r0, r2
 8000b5a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b5e:	2001      	movs	r0, #1
 8000b60:	2d00      	cmp	r5, #0
 8000b62:	d0e6      	beq.n	8000b32 <__udivmoddi4+0xa6>
 8000b64:	e9c5 6300 	strd	r6, r3, [r5]
 8000b68:	e7e3      	b.n	8000b32 <__udivmoddi4+0xa6>
 8000b6a:	2a00      	cmp	r2, #0
 8000b6c:	f040 8090 	bne.w	8000c90 <__udivmoddi4+0x204>
 8000b70:	eba1 040c 	sub.w	r4, r1, ip
 8000b74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b78:	fa1f f78c 	uxth.w	r7, ip
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b82:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b86:	fb08 4416 	mls	r4, r8, r6, r4
 8000b8a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b8e:	fb07 f006 	mul.w	r0, r7, r6
 8000b92:	4298      	cmp	r0, r3
 8000b94:	d908      	bls.n	8000ba8 <__udivmoddi4+0x11c>
 8000b96:	eb1c 0303 	adds.w	r3, ip, r3
 8000b9a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b9e:	d202      	bcs.n	8000ba6 <__udivmoddi4+0x11a>
 8000ba0:	4298      	cmp	r0, r3
 8000ba2:	f200 80cd 	bhi.w	8000d40 <__udivmoddi4+0x2b4>
 8000ba6:	4626      	mov	r6, r4
 8000ba8:	1a1c      	subs	r4, r3, r0
 8000baa:	fa1f f38e 	uxth.w	r3, lr
 8000bae:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bb2:	fb08 4410 	mls	r4, r8, r0, r4
 8000bb6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bba:	fb00 f707 	mul.w	r7, r0, r7
 8000bbe:	429f      	cmp	r7, r3
 8000bc0:	d908      	bls.n	8000bd4 <__udivmoddi4+0x148>
 8000bc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bc6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bca:	d202      	bcs.n	8000bd2 <__udivmoddi4+0x146>
 8000bcc:	429f      	cmp	r7, r3
 8000bce:	f200 80b0 	bhi.w	8000d32 <__udivmoddi4+0x2a6>
 8000bd2:	4620      	mov	r0, r4
 8000bd4:	1bdb      	subs	r3, r3, r7
 8000bd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bda:	e7a5      	b.n	8000b28 <__udivmoddi4+0x9c>
 8000bdc:	f1c1 0620 	rsb	r6, r1, #32
 8000be0:	408b      	lsls	r3, r1
 8000be2:	fa22 f706 	lsr.w	r7, r2, r6
 8000be6:	431f      	orrs	r7, r3
 8000be8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000bec:	fa04 f301 	lsl.w	r3, r4, r1
 8000bf0:	ea43 030c 	orr.w	r3, r3, ip
 8000bf4:	40f4      	lsrs	r4, r6
 8000bf6:	fa00 f801 	lsl.w	r8, r0, r1
 8000bfa:	0c38      	lsrs	r0, r7, #16
 8000bfc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c00:	fbb4 fef0 	udiv	lr, r4, r0
 8000c04:	fa1f fc87 	uxth.w	ip, r7
 8000c08:	fb00 441e 	mls	r4, r0, lr, r4
 8000c0c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c10:	fb0e f90c 	mul.w	r9, lr, ip
 8000c14:	45a1      	cmp	r9, r4
 8000c16:	fa02 f201 	lsl.w	r2, r2, r1
 8000c1a:	d90a      	bls.n	8000c32 <__udivmoddi4+0x1a6>
 8000c1c:	193c      	adds	r4, r7, r4
 8000c1e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c22:	f080 8084 	bcs.w	8000d2e <__udivmoddi4+0x2a2>
 8000c26:	45a1      	cmp	r9, r4
 8000c28:	f240 8081 	bls.w	8000d2e <__udivmoddi4+0x2a2>
 8000c2c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c30:	443c      	add	r4, r7
 8000c32:	eba4 0409 	sub.w	r4, r4, r9
 8000c36:	fa1f f983 	uxth.w	r9, r3
 8000c3a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c3e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c42:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c46:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c4a:	45a4      	cmp	ip, r4
 8000c4c:	d907      	bls.n	8000c5e <__udivmoddi4+0x1d2>
 8000c4e:	193c      	adds	r4, r7, r4
 8000c50:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c54:	d267      	bcs.n	8000d26 <__udivmoddi4+0x29a>
 8000c56:	45a4      	cmp	ip, r4
 8000c58:	d965      	bls.n	8000d26 <__udivmoddi4+0x29a>
 8000c5a:	3b02      	subs	r3, #2
 8000c5c:	443c      	add	r4, r7
 8000c5e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c62:	fba0 9302 	umull	r9, r3, r0, r2
 8000c66:	eba4 040c 	sub.w	r4, r4, ip
 8000c6a:	429c      	cmp	r4, r3
 8000c6c:	46ce      	mov	lr, r9
 8000c6e:	469c      	mov	ip, r3
 8000c70:	d351      	bcc.n	8000d16 <__udivmoddi4+0x28a>
 8000c72:	d04e      	beq.n	8000d12 <__udivmoddi4+0x286>
 8000c74:	b155      	cbz	r5, 8000c8c <__udivmoddi4+0x200>
 8000c76:	ebb8 030e 	subs.w	r3, r8, lr
 8000c7a:	eb64 040c 	sbc.w	r4, r4, ip
 8000c7e:	fa04 f606 	lsl.w	r6, r4, r6
 8000c82:	40cb      	lsrs	r3, r1
 8000c84:	431e      	orrs	r6, r3
 8000c86:	40cc      	lsrs	r4, r1
 8000c88:	e9c5 6400 	strd	r6, r4, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	e750      	b.n	8000b32 <__udivmoddi4+0xa6>
 8000c90:	f1c2 0320 	rsb	r3, r2, #32
 8000c94:	fa20 f103 	lsr.w	r1, r0, r3
 8000c98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c9c:	fa24 f303 	lsr.w	r3, r4, r3
 8000ca0:	4094      	lsls	r4, r2
 8000ca2:	430c      	orrs	r4, r1
 8000ca4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ca8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cac:	fa1f f78c 	uxth.w	r7, ip
 8000cb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cb4:	fb08 3110 	mls	r1, r8, r0, r3
 8000cb8:	0c23      	lsrs	r3, r4, #16
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb00 f107 	mul.w	r1, r0, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d908      	bls.n	8000cd8 <__udivmoddi4+0x24c>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cce:	d22c      	bcs.n	8000d2a <__udivmoddi4+0x29e>
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d92a      	bls.n	8000d2a <__udivmoddi4+0x29e>
 8000cd4:	3802      	subs	r0, #2
 8000cd6:	4463      	add	r3, ip
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ce0:	fb08 3311 	mls	r3, r8, r1, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb01 f307 	mul.w	r3, r1, r7
 8000cec:	42a3      	cmp	r3, r4
 8000cee:	d908      	bls.n	8000d02 <__udivmoddi4+0x276>
 8000cf0:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000cf8:	d213      	bcs.n	8000d22 <__udivmoddi4+0x296>
 8000cfa:	42a3      	cmp	r3, r4
 8000cfc:	d911      	bls.n	8000d22 <__udivmoddi4+0x296>
 8000cfe:	3902      	subs	r1, #2
 8000d00:	4464      	add	r4, ip
 8000d02:	1ae4      	subs	r4, r4, r3
 8000d04:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d08:	e739      	b.n	8000b7e <__udivmoddi4+0xf2>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	e6f0      	b.n	8000af0 <__udivmoddi4+0x64>
 8000d0e:	4608      	mov	r0, r1
 8000d10:	e706      	b.n	8000b20 <__udivmoddi4+0x94>
 8000d12:	45c8      	cmp	r8, r9
 8000d14:	d2ae      	bcs.n	8000c74 <__udivmoddi4+0x1e8>
 8000d16:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d1a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d1e:	3801      	subs	r0, #1
 8000d20:	e7a8      	b.n	8000c74 <__udivmoddi4+0x1e8>
 8000d22:	4631      	mov	r1, r6
 8000d24:	e7ed      	b.n	8000d02 <__udivmoddi4+0x276>
 8000d26:	4603      	mov	r3, r0
 8000d28:	e799      	b.n	8000c5e <__udivmoddi4+0x1d2>
 8000d2a:	4630      	mov	r0, r6
 8000d2c:	e7d4      	b.n	8000cd8 <__udivmoddi4+0x24c>
 8000d2e:	46d6      	mov	lr, sl
 8000d30:	e77f      	b.n	8000c32 <__udivmoddi4+0x1a6>
 8000d32:	4463      	add	r3, ip
 8000d34:	3802      	subs	r0, #2
 8000d36:	e74d      	b.n	8000bd4 <__udivmoddi4+0x148>
 8000d38:	4606      	mov	r6, r0
 8000d3a:	4623      	mov	r3, r4
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	e70f      	b.n	8000b60 <__udivmoddi4+0xd4>
 8000d40:	3e02      	subs	r6, #2
 8000d42:	4463      	add	r3, ip
 8000d44:	e730      	b.n	8000ba8 <__udivmoddi4+0x11c>
 8000d46:	bf00      	nop

08000d48 <__aeabi_idiv0>:
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop

08000d4c <canNotification>:
char* txFailure = "No data sent through can!\r\n";
char* rxFailure = "NO data received through can!\r\n";
char* canActivationFault = "CAN not activated!\r\n";
char* txMailboxesFull = "Tx mailboxes full!\r\n";

uint8_t canNotification(){
 8000d4c:	b590      	push	{r4, r7, lr}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
	uint8_t state = 0;
 8000d52:	2300      	movs	r3, #0
 8000d54:	71fb      	strb	r3, [r7, #7]

	if (HAL_CAN_ActivateNotification(&hcan1,CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK) {
 8000d56:	2112      	movs	r1, #18
 8000d58:	480f      	ldr	r0, [pc, #60]	@ (8000d98 <canNotification+0x4c>)
 8000d5a:	f003 f968 	bl	800402e <HAL_CAN_ActivateNotification>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d011      	beq.n	8000d88 <canNotification+0x3c>
		LOGS((uint8_t*)canActivationFault, strlen(canActivationFault));
 8000d64:	4b0d      	ldr	r3, [pc, #52]	@ (8000d9c <canNotification+0x50>)
 8000d66:	681c      	ldr	r4, [r3, #0]
 8000d68:	4b0c      	ldr	r3, [pc, #48]	@ (8000d9c <canNotification+0x50>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff fa2f 	bl	80001d0 <strlen>
 8000d72:	4603      	mov	r3, r0
 8000d74:	b29a      	uxth	r2, r3
 8000d76:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000d7a:	4621      	mov	r1, r4
 8000d7c:	4808      	ldr	r0, [pc, #32]	@ (8000da0 <canNotification+0x54>)
 8000d7e:	f006 fae3 	bl	8007348 <HAL_UART_Transmit>
		state = 1;
 8000d82:	2301      	movs	r3, #1
 8000d84:	71fb      	strb	r3, [r7, #7]
 8000d86:	e001      	b.n	8000d8c <canNotification+0x40>
	} else {
		state = 0;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	71fb      	strb	r3, [r7, #7]
	}

	return state;
 8000d8c:	79fb      	ldrb	r3, [r7, #7]
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	370c      	adds	r7, #12
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd90      	pop	{r4, r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20000130 	.word	0x20000130
 8000d9c:	20000004 	.word	0x20000004
 8000da0:	20000200 	.word	0x20000200

08000da4 <HAL_CAN_RxFifo0MsgPendingCallback>:
	else {
		LOGS((uint8_t*)"CBSY\n", 5);
	}
}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8000da4:	b590      	push	{r4, r7, lr}
 8000da6:	b097      	sub	sp, #92	@ 0x5c
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef rxHeader;

	canData data[] = {0};
 8000dac:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]

	if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &rxHeader, data->data) != HAL_OK){
 8000dba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000dbe:	3306      	adds	r3, #6
 8000dc0:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	4830      	ldr	r0, [pc, #192]	@ (8000e88 <HAL_CAN_RxFifo0MsgPendingCallback+0xe4>)
 8000dc8:	f002 ffe7 	bl	8003d9a <HAL_CAN_GetRxMessage>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d00e      	beq.n	8000df0 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>
		LOGS((uint8_t*)rxFailure,strlen(rxFailure));
 8000dd2:	4b2e      	ldr	r3, [pc, #184]	@ (8000e8c <HAL_CAN_RxFifo0MsgPendingCallback+0xe8>)
 8000dd4:	681c      	ldr	r4, [r3, #0]
 8000dd6:	4b2d      	ldr	r3, [pc, #180]	@ (8000e8c <HAL_CAN_RxFifo0MsgPendingCallback+0xe8>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff f9f8 	bl	80001d0 <strlen>
 8000de0:	4603      	mov	r3, r0
 8000de2:	b29a      	uxth	r2, r3
 8000de4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000de8:	4621      	mov	r1, r4
 8000dea:	4829      	ldr	r0, [pc, #164]	@ (8000e90 <HAL_CAN_RxFifo0MsgPendingCallback+0xec>)
 8000dec:	f006 faac 	bl	8007348 <HAL_UART_Transmit>
	}
	if (rxHeader.ExtId == 0x1806E5F4) {
 8000df0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000df2:	4a28      	ldr	r2, [pc, #160]	@ (8000e94 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d105      	bne.n	8000e04 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>
		data->ID = rxHeader.ExtId;
 8000df8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000dfa:	62bb      	str	r3, [r7, #40]	@ 0x28
		data->IDE = CAN_ID_EXT;
 8000dfc:	2304      	movs	r3, #4
 8000dfe:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 8000e02:	e028      	b.n	8000e56 <HAL_CAN_RxFifo0MsgPendingCallback+0xb2>
	} else if (rxHeader.ExtId == 0x1806E9F4) {
 8000e04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000e06:	4a24      	ldr	r2, [pc, #144]	@ (8000e98 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d105      	bne.n	8000e18 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>
		data->ID = rxHeader.ExtId;
 8000e0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000e0e:	62bb      	str	r3, [r7, #40]	@ 0x28
		data->IDE = CAN_ID_EXT;
 8000e10:	2304      	movs	r3, #4
 8000e12:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 8000e16:	e01e      	b.n	8000e56 <HAL_CAN_RxFifo0MsgPendingCallback+0xb2>
	} else if (rxHeader.ExtId == 0x1806E7F4) {
 8000e18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000e1a:	4a20      	ldr	r2, [pc, #128]	@ (8000e9c <HAL_CAN_RxFifo0MsgPendingCallback+0xf8>)
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d105      	bne.n	8000e2c <HAL_CAN_RxFifo0MsgPendingCallback+0x88>
		data->ID = rxHeader.ExtId;
 8000e20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000e22:	62bb      	str	r3, [r7, #40]	@ 0x28
		data->IDE = CAN_ID_EXT;
 8000e24:	2304      	movs	r3, #4
 8000e26:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 8000e2a:	e014      	b.n	8000e56 <HAL_CAN_RxFifo0MsgPendingCallback+0xb2>
	} else {
		char msg[32];
		sprintf(msg, "%lu\r\n", rxHeader.ExtId);
 8000e2c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000e2e:	f107 0308 	add.w	r3, r7, #8
 8000e32:	491b      	ldr	r1, [pc, #108]	@ (8000ea0 <HAL_CAN_RxFifo0MsgPendingCallback+0xfc>)
 8000e34:	4618      	mov	r0, r3
 8000e36:	f007 fb33 	bl	80084a0 <siprintf>
		LOGS((uint8_t*)msg, strlen(msg));
 8000e3a:	f107 0308 	add.w	r3, r7, #8
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f7ff f9c6 	bl	80001d0 <strlen>
 8000e44:	4603      	mov	r3, r0
 8000e46:	b29a      	uxth	r2, r3
 8000e48:	f107 0108 	add.w	r1, r7, #8
 8000e4c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000e50:	480f      	ldr	r0, [pc, #60]	@ (8000e90 <HAL_CAN_RxFifo0MsgPendingCallback+0xec>)
 8000e52:	f006 fa79 	bl	8007348 <HAL_UART_Transmit>
	}
	data->DLC = rxHeader.DLC;
 8000e56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	data->Fifo = 0;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

	processCanMsg(data);
 8000e64:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f000 f8b3 	bl	8000fd4 <processCanMsg>

	uint8_t fill0 = HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0);
 8000e6e:	2100      	movs	r1, #0
 8000e70:	4805      	ldr	r0, [pc, #20]	@ (8000e88 <HAL_CAN_RxFifo0MsgPendingCallback+0xe4>)
 8000e72:	f003 f8b4 	bl	8003fde <HAL_CAN_GetRxFifoFillLevel>
 8000e76:	4603      	mov	r3, r0
 8000e78:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if(fill0 == 0){
 8000e7c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8000e80:	2b00      	cmp	r3, #0
		return;
	}
}
 8000e82:	375c      	adds	r7, #92	@ 0x5c
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd90      	pop	{r4, r7, pc}
 8000e88:	20000130 	.word	0x20000130
 8000e8c:	20000000 	.word	0x20000000
 8000e90:	20000200 	.word	0x20000200
 8000e94:	1806e5f4 	.word	0x1806e5f4
 8000e98:	1806e9f4 	.word	0x1806e9f4
 8000e9c:	1806e7f4 	.word	0x1806e7f4
 8000ea0:	08008e74 	.word	0x08008e74

08000ea4 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8000ea4:	b590      	push	{r4, r7, lr}
 8000ea6:	b097      	sub	sp, #92	@ 0x5c
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef rxHeader;

	canData data[] = {0};
 8000eac:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]

	if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &rxHeader, data->data) != HAL_OK){
 8000eba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ebe:	3306      	adds	r3, #6
 8000ec0:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	4830      	ldr	r0, [pc, #192]	@ (8000f88 <HAL_CAN_RxFifo1MsgPendingCallback+0xe4>)
 8000ec8:	f002 ff67 	bl	8003d9a <HAL_CAN_GetRxMessage>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d00e      	beq.n	8000ef0 <HAL_CAN_RxFifo1MsgPendingCallback+0x4c>
		LOGS((uint8_t*)rxFailure,strlen(rxFailure));
 8000ed2:	4b2e      	ldr	r3, [pc, #184]	@ (8000f8c <HAL_CAN_RxFifo1MsgPendingCallback+0xe8>)
 8000ed4:	681c      	ldr	r4, [r3, #0]
 8000ed6:	4b2d      	ldr	r3, [pc, #180]	@ (8000f8c <HAL_CAN_RxFifo1MsgPendingCallback+0xe8>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff f978 	bl	80001d0 <strlen>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	b29a      	uxth	r2, r3
 8000ee4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000ee8:	4621      	mov	r1, r4
 8000eea:	4829      	ldr	r0, [pc, #164]	@ (8000f90 <HAL_CAN_RxFifo1MsgPendingCallback+0xec>)
 8000eec:	f006 fa2c 	bl	8007348 <HAL_UART_Transmit>
	}
	if (rxHeader.ExtId == 0x1806E5F4) {
 8000ef0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000ef2:	4a28      	ldr	r2, [pc, #160]	@ (8000f94 <HAL_CAN_RxFifo1MsgPendingCallback+0xf0>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d105      	bne.n	8000f04 <HAL_CAN_RxFifo1MsgPendingCallback+0x60>
		data->ID = rxHeader.ExtId;
 8000ef8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000efa:	62bb      	str	r3, [r7, #40]	@ 0x28
		data->IDE = CAN_ID_EXT;
 8000efc:	2304      	movs	r3, #4
 8000efe:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 8000f02:	e028      	b.n	8000f56 <HAL_CAN_RxFifo1MsgPendingCallback+0xb2>
	} else if (rxHeader.ExtId == 0x1806E9F4) {
 8000f04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000f06:	4a24      	ldr	r2, [pc, #144]	@ (8000f98 <HAL_CAN_RxFifo1MsgPendingCallback+0xf4>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d105      	bne.n	8000f18 <HAL_CAN_RxFifo1MsgPendingCallback+0x74>
		data->ID = rxHeader.ExtId;
 8000f0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000f0e:	62bb      	str	r3, [r7, #40]	@ 0x28
		data->IDE = CAN_ID_EXT;
 8000f10:	2304      	movs	r3, #4
 8000f12:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 8000f16:	e01e      	b.n	8000f56 <HAL_CAN_RxFifo1MsgPendingCallback+0xb2>
	} else if (rxHeader.ExtId == 0x1806E7F4) {
 8000f18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000f1a:	4a20      	ldr	r2, [pc, #128]	@ (8000f9c <HAL_CAN_RxFifo1MsgPendingCallback+0xf8>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d105      	bne.n	8000f2c <HAL_CAN_RxFifo1MsgPendingCallback+0x88>
		data->ID = rxHeader.ExtId;
 8000f20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000f22:	62bb      	str	r3, [r7, #40]	@ 0x28
		data->IDE = CAN_ID_EXT;
 8000f24:	2304      	movs	r3, #4
 8000f26:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 8000f2a:	e014      	b.n	8000f56 <HAL_CAN_RxFifo1MsgPendingCallback+0xb2>
	} else {
		char msg[32];
		sprintf(msg, "%lu\r\n", rxHeader.ExtId);
 8000f2c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000f2e:	f107 0308 	add.w	r3, r7, #8
 8000f32:	491b      	ldr	r1, [pc, #108]	@ (8000fa0 <HAL_CAN_RxFifo1MsgPendingCallback+0xfc>)
 8000f34:	4618      	mov	r0, r3
 8000f36:	f007 fab3 	bl	80084a0 <siprintf>
		LOGS((uint8_t*)msg, strlen(msg));
 8000f3a:	f107 0308 	add.w	r3, r7, #8
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff f946 	bl	80001d0 <strlen>
 8000f44:	4603      	mov	r3, r0
 8000f46:	b29a      	uxth	r2, r3
 8000f48:	f107 0108 	add.w	r1, r7, #8
 8000f4c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000f50:	480f      	ldr	r0, [pc, #60]	@ (8000f90 <HAL_CAN_RxFifo1MsgPendingCallback+0xec>)
 8000f52:	f006 f9f9 	bl	8007348 <HAL_UART_Transmit>
	}
	data->DLC = rxHeader.DLC;
 8000f56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	data->Fifo = 0;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

	processCanMsg(data);
 8000f64:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f000 f833 	bl	8000fd4 <processCanMsg>
	uint8_t fill1 = HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0);
 8000f6e:	2100      	movs	r1, #0
 8000f70:	4805      	ldr	r0, [pc, #20]	@ (8000f88 <HAL_CAN_RxFifo1MsgPendingCallback+0xe4>)
 8000f72:	f003 f834 	bl	8003fde <HAL_CAN_GetRxFifoFillLevel>
 8000f76:	4603      	mov	r3, r0
 8000f78:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if(fill1 == 0){
 8000f7c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8000f80:	2b00      	cmp	r3, #0
		return;
	}
}
 8000f82:	375c      	adds	r7, #92	@ 0x5c
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd90      	pop	{r4, r7, pc}
 8000f88:	20000130 	.word	0x20000130
 8000f8c:	20000000 	.word	0x20000000
 8000f90:	20000200 	.word	0x20000200
 8000f94:	1806e5f4 	.word	0x1806e5f4
 8000f98:	1806e9f4 	.word	0x1806e9f4
 8000f9c:	1806e7f4 	.word	0x1806e7f4
 8000fa0:	08008e74 	.word	0x08008e74

08000fa4 <byteToDecimal>:

uint16_t byteToDecimal(uint8_t *arr) {
 8000fa4:	b480      	push	{r7}
 8000fa6:	b085      	sub	sp, #20
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
    // Assuming len is the length of the array arr
    uint16_t hex_number = 0;
 8000fac:	2300      	movs	r3, #0
 8000fae:	81fb      	strh	r3, [r7, #14]

    // Combine first two bytes into a 16-bit hexadecimal number
    hex_number = (arr[0] << 8) | arr[1];
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	021b      	lsls	r3, r3, #8
 8000fb6:	b21a      	sxth	r2, r3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	3301      	adds	r3, #1
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	b21b      	sxth	r3, r3
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	b21b      	sxth	r3, r3
 8000fc4:	81fb      	strh	r3, [r7, #14]

    return hex_number;
 8000fc6:	89fb      	ldrh	r3, [r7, #14]
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3714      	adds	r7, #20
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr

08000fd4 <processCanMsg>:

void processCanMsg(canData *data){
 8000fd4:	b590      	push	{r4, r7, lr}
 8000fd6:	b08b      	sub	sp, #44	@ 0x2c
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
	if(data->ID == 0x1806E5F4){
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a52      	ldr	r2, [pc, #328]	@ (800112c <processCanMsg+0x158>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d131      	bne.n	800104a <processCanMsg+0x76>
		char msg[32];
		bmsDataObj.soc = byteToDecimal(data->data);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	3306      	adds	r3, #6
 8000fea:	4618      	mov	r0, r3
 8000fec:	f7ff ffda 	bl	8000fa4 <byteToDecimal>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	4b4e      	ldr	r3, [pc, #312]	@ (8001130 <processCanMsg+0x15c>)
 8000ff6:	809a      	strh	r2, [r3, #4]
		sprintf(msg,"%d.%d",bmsDataObj.soc/10,bmsDataObj.soc%10);
 8000ff8:	4b4d      	ldr	r3, [pc, #308]	@ (8001130 <processCanMsg+0x15c>)
 8000ffa:	889b      	ldrh	r3, [r3, #4]
 8000ffc:	4a4d      	ldr	r2, [pc, #308]	@ (8001134 <processCanMsg+0x160>)
 8000ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8001002:	08db      	lsrs	r3, r3, #3
 8001004:	b29b      	uxth	r3, r3
 8001006:	461c      	mov	r4, r3
 8001008:	4b49      	ldr	r3, [pc, #292]	@ (8001130 <processCanMsg+0x15c>)
 800100a:	889a      	ldrh	r2, [r3, #4]
 800100c:	4b49      	ldr	r3, [pc, #292]	@ (8001134 <processCanMsg+0x160>)
 800100e:	fba3 1302 	umull	r1, r3, r3, r2
 8001012:	08d9      	lsrs	r1, r3, #3
 8001014:	460b      	mov	r3, r1
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	440b      	add	r3, r1
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	b29b      	uxth	r3, r3
 8001020:	f107 0008 	add.w	r0, r7, #8
 8001024:	4622      	mov	r2, r4
 8001026:	4944      	ldr	r1, [pc, #272]	@ (8001138 <processCanMsg+0x164>)
 8001028:	f007 fa3a 	bl	80084a0 <siprintf>
		LOGS((uint8_t*)msg,strlen(msg));
 800102c:	f107 0308 	add.w	r3, r7, #8
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff f8cd 	bl	80001d0 <strlen>
 8001036:	4603      	mov	r3, r0
 8001038:	b29a      	uxth	r2, r3
 800103a:	f107 0108 	add.w	r1, r7, #8
 800103e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001042:	483e      	ldr	r0, [pc, #248]	@ (800113c <processCanMsg+0x168>)
 8001044:	f006 f980 	bl	8007348 <HAL_UART_Transmit>
		char msg[32];
		bmsDataObj.soc = byteToDecimal(data->data);
		sprintf(msg, "%d.%d\n", bmsDataObj.soc / 10, bmsDataObj.soc % 10);
		LOGS((uint8_t*)msg, strlen(msg));
	}
}
 8001048:	e06c      	b.n	8001124 <processCanMsg+0x150>
	else if(data->ID == 0x1806E7F4){
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a3c      	ldr	r2, [pc, #240]	@ (8001140 <processCanMsg+0x16c>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d131      	bne.n	80010b8 <processCanMsg+0xe4>
		bmsDataObj.soc = byteToDecimal(data->data);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	3306      	adds	r3, #6
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff ffa3 	bl	8000fa4 <byteToDecimal>
 800105e:	4603      	mov	r3, r0
 8001060:	461a      	mov	r2, r3
 8001062:	4b33      	ldr	r3, [pc, #204]	@ (8001130 <processCanMsg+0x15c>)
 8001064:	809a      	strh	r2, [r3, #4]
		sprintf(msg,"%d.%d",bmsDataObj.soc/10,bmsDataObj.soc%10);
 8001066:	4b32      	ldr	r3, [pc, #200]	@ (8001130 <processCanMsg+0x15c>)
 8001068:	889b      	ldrh	r3, [r3, #4]
 800106a:	4a32      	ldr	r2, [pc, #200]	@ (8001134 <processCanMsg+0x160>)
 800106c:	fba2 2303 	umull	r2, r3, r2, r3
 8001070:	08db      	lsrs	r3, r3, #3
 8001072:	b29b      	uxth	r3, r3
 8001074:	461c      	mov	r4, r3
 8001076:	4b2e      	ldr	r3, [pc, #184]	@ (8001130 <processCanMsg+0x15c>)
 8001078:	889a      	ldrh	r2, [r3, #4]
 800107a:	4b2e      	ldr	r3, [pc, #184]	@ (8001134 <processCanMsg+0x160>)
 800107c:	fba3 1302 	umull	r1, r3, r3, r2
 8001080:	08d9      	lsrs	r1, r3, #3
 8001082:	460b      	mov	r3, r1
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	440b      	add	r3, r1
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	1ad3      	subs	r3, r2, r3
 800108c:	b29b      	uxth	r3, r3
 800108e:	f107 0008 	add.w	r0, r7, #8
 8001092:	4622      	mov	r2, r4
 8001094:	4928      	ldr	r1, [pc, #160]	@ (8001138 <processCanMsg+0x164>)
 8001096:	f007 fa03 	bl	80084a0 <siprintf>
		LOGS((uint8_t*)msg,strlen(msg));
 800109a:	f107 0308 	add.w	r3, r7, #8
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff f896 	bl	80001d0 <strlen>
 80010a4:	4603      	mov	r3, r0
 80010a6:	b29a      	uxth	r2, r3
 80010a8:	f107 0108 	add.w	r1, r7, #8
 80010ac:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80010b0:	4822      	ldr	r0, [pc, #136]	@ (800113c <processCanMsg+0x168>)
 80010b2:	f006 f949 	bl	8007348 <HAL_UART_Transmit>
}
 80010b6:	e035      	b.n	8001124 <processCanMsg+0x150>
	else if (data->ID == 0x1806E9F4) {
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a21      	ldr	r2, [pc, #132]	@ (8001144 <processCanMsg+0x170>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d130      	bne.n	8001124 <processCanMsg+0x150>
		bmsDataObj.soc = byteToDecimal(data->data);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	3306      	adds	r3, #6
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff ff6c 	bl	8000fa4 <byteToDecimal>
 80010cc:	4603      	mov	r3, r0
 80010ce:	461a      	mov	r2, r3
 80010d0:	4b17      	ldr	r3, [pc, #92]	@ (8001130 <processCanMsg+0x15c>)
 80010d2:	809a      	strh	r2, [r3, #4]
		sprintf(msg, "%d.%d\n", bmsDataObj.soc / 10, bmsDataObj.soc % 10);
 80010d4:	4b16      	ldr	r3, [pc, #88]	@ (8001130 <processCanMsg+0x15c>)
 80010d6:	889b      	ldrh	r3, [r3, #4]
 80010d8:	4a16      	ldr	r2, [pc, #88]	@ (8001134 <processCanMsg+0x160>)
 80010da:	fba2 2303 	umull	r2, r3, r2, r3
 80010de:	08db      	lsrs	r3, r3, #3
 80010e0:	b29b      	uxth	r3, r3
 80010e2:	461c      	mov	r4, r3
 80010e4:	4b12      	ldr	r3, [pc, #72]	@ (8001130 <processCanMsg+0x15c>)
 80010e6:	889a      	ldrh	r2, [r3, #4]
 80010e8:	4b12      	ldr	r3, [pc, #72]	@ (8001134 <processCanMsg+0x160>)
 80010ea:	fba3 1302 	umull	r1, r3, r3, r2
 80010ee:	08d9      	lsrs	r1, r3, #3
 80010f0:	460b      	mov	r3, r1
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	440b      	add	r3, r1
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	b29b      	uxth	r3, r3
 80010fc:	f107 0008 	add.w	r0, r7, #8
 8001100:	4622      	mov	r2, r4
 8001102:	4911      	ldr	r1, [pc, #68]	@ (8001148 <processCanMsg+0x174>)
 8001104:	f007 f9cc 	bl	80084a0 <siprintf>
		LOGS((uint8_t*)msg, strlen(msg));
 8001108:	f107 0308 	add.w	r3, r7, #8
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff f85f 	bl	80001d0 <strlen>
 8001112:	4603      	mov	r3, r0
 8001114:	b29a      	uxth	r2, r3
 8001116:	f107 0108 	add.w	r1, r7, #8
 800111a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800111e:	4807      	ldr	r0, [pc, #28]	@ (800113c <processCanMsg+0x168>)
 8001120:	f006 f912 	bl	8007348 <HAL_UART_Transmit>
}
 8001124:	bf00      	nop
 8001126:	372c      	adds	r7, #44	@ 0x2c
 8001128:	46bd      	mov	sp, r7
 800112a:	bd90      	pop	{r4, r7, pc}
 800112c:	1806e5f4 	.word	0x1806e5f4
 8001130:	200002a0 	.word	0x200002a0
 8001134:	cccccccd 	.word	0xcccccccd
 8001138:	08008e7c 	.word	0x08008e7c
 800113c:	20000200 	.word	0x20000200
 8001140:	1806e7f4 	.word	0x1806e7f4
 8001144:	1806e9f4 	.word	0x1806e9f4
 8001148:	08008e84 	.word	0x08008e84

0800114c <HAL_TIM_PeriodElapsedCallback>:
static void MX_DAC1_Init(void);
static void MX_ADC1_Init(void);
/* USER CODE BEGIN PFP */
uint32_t dacInput(uint16_t adcinput1, uint16_t adcinput2);

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
	dac_val = dacInput(rawValues[0], rawValues[1]);
 8001154:	4b11      	ldr	r3, [pc, #68]	@ (800119c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	b29b      	uxth	r3, r3
 800115a:	4a10      	ldr	r2, [pc, #64]	@ (800119c <HAL_TIM_PeriodElapsedCallback+0x50>)
 800115c:	6852      	ldr	r2, [r2, #4]
 800115e:	b292      	uxth	r2, r2
 8001160:	4611      	mov	r1, r2
 8001162:	4618      	mov	r0, r3
 8001164:	f000 fbe8 	bl	8001938 <dacInput>
 8001168:	4603      	mov	r3, r0
 800116a:	4a0d      	ldr	r2, [pc, #52]	@ (80011a0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800116c:	6013      	str	r3, [r2, #0]

	if(brakePressure > 600){
 800116e:	4b0d      	ldr	r3, [pc, #52]	@ (80011a4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001170:	881b      	ldrh	r3, [r3, #0]
 8001172:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8001176:	d906      	bls.n	8001186 <HAL_TIM_PeriodElapsedCallback+0x3a>
		HAL_GPIO_WritePin(BrakeLight_GPIO_Port, BrakeLight_Pin, GPIO_PIN_SET);
 8001178:	2201      	movs	r2, #1
 800117a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800117e:	480a      	ldr	r0, [pc, #40]	@ (80011a8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001180:	f004 fa12 	bl	80055a8 <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(BrakeLight_GPIO_Port, BrakeLight_Pin, GPIO_PIN_RESET);
	}
}
 8001184:	e005      	b.n	8001192 <HAL_TIM_PeriodElapsedCallback+0x46>
		HAL_GPIO_WritePin(BrakeLight_GPIO_Port, BrakeLight_Pin, GPIO_PIN_RESET);
 8001186:	2200      	movs	r2, #0
 8001188:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800118c:	4806      	ldr	r0, [pc, #24]	@ (80011a8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800118e:	f004 fa0b 	bl	80055a8 <HAL_GPIO_WritePin>
}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	20000288 	.word	0x20000288
 80011a0:	2000029c 	.word	0x2000029c
 80011a4:	20000298 	.word	0x20000298
 80011a8:	48000800 	.word	0x48000800

080011ac <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
	rawValues[0] = adcBuffer[ADC1IN5];
 80011b4:	4b09      	ldr	r3, [pc, #36]	@ (80011dc <HAL_ADC_ConvCpltCallback+0x30>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a09      	ldr	r2, [pc, #36]	@ (80011e0 <HAL_ADC_ConvCpltCallback+0x34>)
 80011ba:	6013      	str	r3, [r2, #0]
	rawValues[1] = adcBuffer[ADC1IN6];
 80011bc:	4b07      	ldr	r3, [pc, #28]	@ (80011dc <HAL_ADC_ConvCpltCallback+0x30>)
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	4a07      	ldr	r2, [pc, #28]	@ (80011e0 <HAL_ADC_ConvCpltCallback+0x34>)
 80011c2:	6053      	str	r3, [r2, #4]
	brakePressure = adcBuffer[BRAKEPRESSURE];
 80011c4:	4b05      	ldr	r3, [pc, #20]	@ (80011dc <HAL_ADC_ConvCpltCallback+0x30>)
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	b29a      	uxth	r2, r3
 80011ca:	4b06      	ldr	r3, [pc, #24]	@ (80011e4 <HAL_ADC_ConvCpltCallback+0x38>)
 80011cc:	801a      	strh	r2, [r3, #0]
}
 80011ce:	bf00      	nop
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	20000290 	.word	0x20000290
 80011e0:	20000288 	.word	0x20000288
 80011e4:	20000298 	.word	0x20000298

080011e8 <ErrorLedBlink>:

void ErrorLedBlink(){
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80011ec:	2201      	movs	r2, #1
 80011ee:	2120      	movs	r1, #32
 80011f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011f4:	f004 f9d8 	bl	80055a8 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80011f8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80011fc:	f001 f80a 	bl	8002214 <HAL_Delay>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001200:	2200      	movs	r2, #0
 8001202:	2120      	movs	r1, #32
 8001204:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001208:	f004 f9ce 	bl	80055a8 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 800120c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001210:	f001 f800 	bl	8002214 <HAL_Delay>
}
 8001214:	bf00      	nop
 8001216:	bd80      	pop	{r7, pc}

08001218 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	80fb      	strh	r3, [r7, #6]
	if(RUNON_Pin){
		runON = 1;
 8001222:	4b04      	ldr	r3, [pc, #16]	@ (8001234 <HAL_GPIO_EXTI_Callback+0x1c>)
 8001224:	2201      	movs	r2, #1
 8001226:	701a      	strb	r2, [r3, #0]

	//for future interrupts
//	else{
//
//	}
}
 8001228:	bf00      	nop
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	2000031c 	.word	0x2000031c

08001238 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001238:	b5b0      	push	{r4, r5, r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800123e:	f000 ff6d 	bl	800211c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001242:	f000 f8b3 	bl	80013ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001246:	f000 facd 	bl	80017e4 <MX_GPIO_Init>
  MX_DMA_Init();
 800124a:	f000 faa5 	bl	8001798 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800124e:	f000 fa73 	bl	8001738 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8001252:	f000 f993 	bl	800157c <MX_CAN1_Init>
  MX_TIM6_Init();
 8001256:	f000 fa39 	bl	80016cc <MX_TIM6_Init>
  MX_DAC1_Init();
 800125a:	f000 fa05 	bl	8001668 <MX_DAC1_Init>
  MX_ADC1_Init();
 800125e:	f000 f8f5 	bl	800144c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  if(HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED)!=HAL_OK){
 8001262:	217f      	movs	r1, #127	@ 0x7f
 8001264:	4843      	ldr	r0, [pc, #268]	@ (8001374 <main+0x13c>)
 8001266:	f002 fa22 	bl	80036ae <HAL_ADCEx_Calibration_Start>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d014      	beq.n	800129a <main+0x62>
	  LOGS((uint8_t*)adcNcalib,strlen(adcNcalib));
 8001270:	4b41      	ldr	r3, [pc, #260]	@ (8001378 <main+0x140>)
 8001272:	681c      	ldr	r4, [r3, #0]
 8001274:	4b40      	ldr	r3, [pc, #256]	@ (8001378 <main+0x140>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4618      	mov	r0, r3
 800127a:	f7fe ffa9 	bl	80001d0 <strlen>
 800127e:	4603      	mov	r3, r0
 8001280:	b29a      	uxth	r2, r3
 8001282:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001286:	4621      	mov	r1, r4
 8001288:	483c      	ldr	r0, [pc, #240]	@ (800137c <main+0x144>)
 800128a:	f006 f85d 	bl	8007348 <HAL_UART_Transmit>
	  ErrorLedBlink();
 800128e:	f7ff ffab 	bl	80011e8 <ErrorLedBlink>
	  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001292:	217f      	movs	r1, #127	@ 0x7f
 8001294:	4837      	ldr	r0, [pc, #220]	@ (8001374 <main+0x13c>)
 8001296:	f002 fa0a 	bl	80036ae <HAL_ADCEx_Calibration_Start>
  }

  uint32_t calibrationValue = HAL_ADCEx_Calibration_GetValue(&hadc1, ADC_SINGLE_ENDED);
 800129a:	217f      	movs	r1, #127	@ 0x7f
 800129c:	4835      	ldr	r0, [pc, #212]	@ (8001374 <main+0x13c>)
 800129e:	f002 fa66 	bl	800376e <HAL_ADCEx_Calibration_GetValue>
 80012a2:	6078      	str	r0, [r7, #4]
  sprintf(msg,"%lu\r\n",calibrationValue);
 80012a4:	687a      	ldr	r2, [r7, #4]
 80012a6:	4936      	ldr	r1, [pc, #216]	@ (8001380 <main+0x148>)
 80012a8:	4836      	ldr	r0, [pc, #216]	@ (8001384 <main+0x14c>)
 80012aa:	f007 f8f9 	bl	80084a0 <siprintf>
  LOGS((uint8_t*)msg,strlen(msg));
 80012ae:	4835      	ldr	r0, [pc, #212]	@ (8001384 <main+0x14c>)
 80012b0:	f7fe ff8e 	bl	80001d0 <strlen>
 80012b4:	4603      	mov	r3, r0
 80012b6:	b29a      	uxth	r2, r3
 80012b8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80012bc:	4931      	ldr	r1, [pc, #196]	@ (8001384 <main+0x14c>)
 80012be:	482f      	ldr	r0, [pc, #188]	@ (800137c <main+0x144>)
 80012c0:	f006 f842 	bl	8007348 <HAL_UART_Transmit>

  HAL_ADCEx_Calibration_SetValue(&hadc1, ADC_SINGLE_ENDED, calibrationValue);
 80012c4:	687a      	ldr	r2, [r7, #4]
 80012c6:	217f      	movs	r1, #127	@ 0x7f
 80012c8:	482a      	ldr	r0, [pc, #168]	@ (8001374 <main+0x13c>)
 80012ca:	f002 fa60 	bl	800378e <HAL_ADCEx_Calibration_SetValue>

  HAL_CAN_Start(&hcan1);
 80012ce:	482e      	ldr	r0, [pc, #184]	@ (8001388 <main+0x150>)
 80012d0:	f002 fd1f 	bl	8003d12 <HAL_CAN_Start>
  if(canNotification()!=0){
 80012d4:	f7ff fd3a 	bl	8000d4c <canNotification>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <main+0xaa>
	  Error_Handler();
 80012de:	f000 fbc7 	bl	8001a70 <Error_Handler>
  }

  HAL_ADC_Start_DMA(&hadc1, adcBuffer, 2);
 80012e2:	2202      	movs	r2, #2
 80012e4:	4929      	ldr	r1, [pc, #164]	@ (800138c <main+0x154>)
 80012e6:	4823      	ldr	r0, [pc, #140]	@ (8001374 <main+0x13c>)
 80012e8:	f001 fb04 	bl	80028f4 <HAL_ADC_Start_DMA>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, &dac_val, 1, DAC_ALIGN_12B_R);
 80012ec:	2300      	movs	r3, #0
 80012ee:	9300      	str	r3, [sp, #0]
 80012f0:	2301      	movs	r3, #1
 80012f2:	4a27      	ldr	r2, [pc, #156]	@ (8001390 <main+0x158>)
 80012f4:	2100      	movs	r1, #0
 80012f6:	4827      	ldr	r0, [pc, #156]	@ (8001394 <main+0x15c>)
 80012f8:	f003 fa18 	bl	800472c <HAL_DAC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim6);
 80012fc:	4826      	ldr	r0, [pc, #152]	@ (8001398 <main+0x160>)
 80012fe:	f005 fcfb 	bl	8006cf8 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  canTransmit(test);
	  sprintf(msg,"adc1 val: %hu\r\nadc2 val: %hu\r\ndac val: %hu\r\n",(uint16_t)rawValues[0],(uint16_t)rawValues[1],(uint16_t)HAL_DAC_GetValue(&hdac1, DAC_CHANNEL_1));
 8001302:	4b26      	ldr	r3, [pc, #152]	@ (800139c <main+0x164>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	b29b      	uxth	r3, r3
 8001308:	461c      	mov	r4, r3
 800130a:	4b24      	ldr	r3, [pc, #144]	@ (800139c <main+0x164>)
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	b29b      	uxth	r3, r3
 8001310:	461d      	mov	r5, r3
 8001312:	2100      	movs	r1, #0
 8001314:	481f      	ldr	r0, [pc, #124]	@ (8001394 <main+0x15c>)
 8001316:	f003 fb57 	bl	80049c8 <HAL_DAC_GetValue>
 800131a:	4603      	mov	r3, r0
 800131c:	b29b      	uxth	r3, r3
 800131e:	9300      	str	r3, [sp, #0]
 8001320:	462b      	mov	r3, r5
 8001322:	4622      	mov	r2, r4
 8001324:	491e      	ldr	r1, [pc, #120]	@ (80013a0 <main+0x168>)
 8001326:	4817      	ldr	r0, [pc, #92]	@ (8001384 <main+0x14c>)
 8001328:	f007 f8ba 	bl	80084a0 <siprintf>
	  LOGS((uint8_t*)msg,strlen(msg));
 800132c:	4815      	ldr	r0, [pc, #84]	@ (8001384 <main+0x14c>)
 800132e:	f7fe ff4f 	bl	80001d0 <strlen>
 8001332:	4603      	mov	r3, r0
 8001334:	b29a      	uxth	r2, r3
 8001336:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800133a:	4912      	ldr	r1, [pc, #72]	@ (8001384 <main+0x14c>)
 800133c:	480f      	ldr	r0, [pc, #60]	@ (800137c <main+0x144>)
 800133e:	f006 f803 	bl	8007348 <HAL_UART_Transmit>

//	  sprintf(msg,"99 %hu\n",(uint16_t)getDac);

//	  LOGS((uint8_t*)msg,strlen(msg));

	  if(runON==1){
 8001342:	4b18      	ldr	r3, [pc, #96]	@ (80013a4 <main+0x16c>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	2b01      	cmp	r3, #1
 8001348:	d109      	bne.n	800135e <main+0x126>
		  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 800134a:	2201      	movs	r2, #1
 800134c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001350:	4815      	ldr	r0, [pc, #84]	@ (80013a8 <main+0x170>)
 8001352:	f004 f929 	bl	80055a8 <HAL_GPIO_WritePin>
		  runON = 0;
 8001356:	4b13      	ldr	r3, [pc, #76]	@ (80013a4 <main+0x16c>)
 8001358:	2200      	movs	r2, #0
 800135a:	701a      	strb	r2, [r3, #0]
 800135c:	e005      	b.n	800136a <main+0x132>
	  }else{
		  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 800135e:	2200      	movs	r2, #0
 8001360:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001364:	4810      	ldr	r0, [pc, #64]	@ (80013a8 <main+0x170>)
 8001366:	f004 f91f 	bl	80055a8 <HAL_GPIO_WritePin>
	  }

	  HAL_Delay(1000);
 800136a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800136e:	f000 ff51 	bl	8002214 <HAL_Delay>
	  sprintf(msg,"adc1 val: %hu\r\nadc2 val: %hu\r\ndac val: %hu\r\n",(uint16_t)rawValues[0],(uint16_t)rawValues[1],(uint16_t)HAL_DAC_GetValue(&hdac1, DAC_CHANNEL_1));
 8001372:	e7c6      	b.n	8001302 <main+0xca>
 8001374:	20000084 	.word	0x20000084
 8001378:	20000008 	.word	0x20000008
 800137c:	20000200 	.word	0x20000200
 8001380:	08008ef0 	.word	0x08008ef0
 8001384:	200002b8 	.word	0x200002b8
 8001388:	20000130 	.word	0x20000130
 800138c:	20000290 	.word	0x20000290
 8001390:	2000029c 	.word	0x2000029c
 8001394:	20000158 	.word	0x20000158
 8001398:	200001b4 	.word	0x200001b4
 800139c:	20000288 	.word	0x20000288
 80013a0:	08008ef8 	.word	0x08008ef8
 80013a4:	2000031c 	.word	0x2000031c
 80013a8:	48000800 	.word	0x48000800

080013ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b096      	sub	sp, #88	@ 0x58
 80013b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013b2:	f107 0314 	add.w	r3, r7, #20
 80013b6:	2244      	movs	r2, #68	@ 0x44
 80013b8:	2100      	movs	r1, #0
 80013ba:	4618      	mov	r0, r3
 80013bc:	f007 f890 	bl	80084e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013c0:	463b      	mov	r3, r7
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	605a      	str	r2, [r3, #4]
 80013c8:	609a      	str	r2, [r3, #8]
 80013ca:	60da      	str	r2, [r3, #12]
 80013cc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80013ce:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80013d2:	f004 f927 	bl	8005624 <HAL_PWREx_ControlVoltageScaling>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80013dc:	f000 fb48 	bl	8001a70 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013e0:	2301      	movs	r3, #1
 80013e2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80013e4:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80013e8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013ea:	2302      	movs	r3, #2
 80013ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013ee:	2303      	movs	r3, #3
 80013f0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80013f2:	2301      	movs	r3, #1
 80013f4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 80013f6:	2314      	movs	r3, #20
 80013f8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80013fa:	2307      	movs	r3, #7
 80013fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80013fe:	2302      	movs	r3, #2
 8001400:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001402:	2302      	movs	r3, #2
 8001404:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001406:	f107 0314 	add.w	r3, r7, #20
 800140a:	4618      	mov	r0, r3
 800140c:	f004 f960 	bl	80056d0 <HAL_RCC_OscConfig>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001416:	f000 fb2b 	bl	8001a70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800141a:	230f      	movs	r3, #15
 800141c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800141e:	2303      	movs	r3, #3
 8001420:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001422:	2300      	movs	r3, #0
 8001424:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001426:	2300      	movs	r3, #0
 8001428:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800142a:	2300      	movs	r3, #0
 800142c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800142e:	463b      	mov	r3, r7
 8001430:	2104      	movs	r1, #4
 8001432:	4618      	mov	r0, r3
 8001434:	f004 fd28 	bl	8005e88 <HAL_RCC_ClockConfig>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800143e:	f000 fb17 	bl	8001a70 <Error_Handler>
  }
}
 8001442:	bf00      	nop
 8001444:	3758      	adds	r7, #88	@ 0x58
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
	...

0800144c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b08a      	sub	sp, #40	@ 0x28
 8001450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001452:	f107 031c 	add.w	r3, r7, #28
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	605a      	str	r2, [r3, #4]
 800145c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800145e:	1d3b      	adds	r3, r7, #4
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	605a      	str	r2, [r3, #4]
 8001466:	609a      	str	r2, [r3, #8]
 8001468:	60da      	str	r2, [r3, #12]
 800146a:	611a      	str	r2, [r3, #16]
 800146c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800146e:	4b3e      	ldr	r3, [pc, #248]	@ (8001568 <MX_ADC1_Init+0x11c>)
 8001470:	4a3e      	ldr	r2, [pc, #248]	@ (800156c <MX_ADC1_Init+0x120>)
 8001472:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001474:	4b3c      	ldr	r3, [pc, #240]	@ (8001568 <MX_ADC1_Init+0x11c>)
 8001476:	2200      	movs	r2, #0
 8001478:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800147a:	4b3b      	ldr	r3, [pc, #236]	@ (8001568 <MX_ADC1_Init+0x11c>)
 800147c:	2200      	movs	r2, #0
 800147e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001480:	4b39      	ldr	r3, [pc, #228]	@ (8001568 <MX_ADC1_Init+0x11c>)
 8001482:	2200      	movs	r2, #0
 8001484:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001486:	4b38      	ldr	r3, [pc, #224]	@ (8001568 <MX_ADC1_Init+0x11c>)
 8001488:	2201      	movs	r2, #1
 800148a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800148c:	4b36      	ldr	r3, [pc, #216]	@ (8001568 <MX_ADC1_Init+0x11c>)
 800148e:	2204      	movs	r2, #4
 8001490:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001492:	4b35      	ldr	r3, [pc, #212]	@ (8001568 <MX_ADC1_Init+0x11c>)
 8001494:	2200      	movs	r2, #0
 8001496:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001498:	4b33      	ldr	r3, [pc, #204]	@ (8001568 <MX_ADC1_Init+0x11c>)
 800149a:	2201      	movs	r2, #1
 800149c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 800149e:	4b32      	ldr	r3, [pc, #200]	@ (8001568 <MX_ADC1_Init+0x11c>)
 80014a0:	2203      	movs	r2, #3
 80014a2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014a4:	4b30      	ldr	r3, [pc, #192]	@ (8001568 <MX_ADC1_Init+0x11c>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 80014ac:	4b2e      	ldr	r3, [pc, #184]	@ (8001568 <MX_ADC1_Init+0x11c>)
 80014ae:	f44f 62e8 	mov.w	r2, #1856	@ 0x740
 80014b2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 80014b4:	4b2c      	ldr	r3, [pc, #176]	@ (8001568 <MX_ADC1_Init+0x11c>)
 80014b6:	f44f 6240 	mov.w	r2, #3072	@ 0xc00
 80014ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80014bc:	4b2a      	ldr	r3, [pc, #168]	@ (8001568 <MX_ADC1_Init+0x11c>)
 80014be:	2201      	movs	r2, #1
 80014c0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80014c4:	4b28      	ldr	r3, [pc, #160]	@ (8001568 <MX_ADC1_Init+0x11c>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80014ca:	4b27      	ldr	r3, [pc, #156]	@ (8001568 <MX_ADC1_Init+0x11c>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014d2:	4825      	ldr	r0, [pc, #148]	@ (8001568 <MX_ADC1_Init+0x11c>)
 80014d4:	f001 f8be 	bl	8002654 <HAL_ADC_Init>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 80014de:	f000 fac7 	bl	8001a70 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80014e2:	2300      	movs	r3, #0
 80014e4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80014e6:	f107 031c 	add.w	r3, r7, #28
 80014ea:	4619      	mov	r1, r3
 80014ec:	481e      	ldr	r0, [pc, #120]	@ (8001568 <MX_ADC1_Init+0x11c>)
 80014ee:	f002 f99b 	bl	8003828 <HAL_ADCEx_MultiModeConfigChannel>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 80014f8:	f000 faba 	bl	8001a70 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80014fc:	4b1c      	ldr	r3, [pc, #112]	@ (8001570 <MX_ADC1_Init+0x124>)
 80014fe:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001500:	2306      	movs	r3, #6
 8001502:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8001504:	2306      	movs	r3, #6
 8001506:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001508:	237f      	movs	r3, #127	@ 0x7f
 800150a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800150c:	2304      	movs	r3, #4
 800150e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001510:	2300      	movs	r3, #0
 8001512:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001514:	1d3b      	adds	r3, r7, #4
 8001516:	4619      	mov	r1, r3
 8001518:	4813      	ldr	r0, [pc, #76]	@ (8001568 <MX_ADC1_Init+0x11c>)
 800151a:	f001 fabb 	bl	8002a94 <HAL_ADC_ConfigChannel>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8001524:	f000 faa4 	bl	8001a70 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001528:	4b12      	ldr	r3, [pc, #72]	@ (8001574 <MX_ADC1_Init+0x128>)
 800152a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800152c:	230c      	movs	r3, #12
 800152e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001530:	1d3b      	adds	r3, r7, #4
 8001532:	4619      	mov	r1, r3
 8001534:	480c      	ldr	r0, [pc, #48]	@ (8001568 <MX_ADC1_Init+0x11c>)
 8001536:	f001 faad 	bl	8002a94 <HAL_ADC_ConfigChannel>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 8001540:	f000 fa96 	bl	8001a70 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001544:	4b0c      	ldr	r3, [pc, #48]	@ (8001578 <MX_ADC1_Init+0x12c>)
 8001546:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001548:	2312      	movs	r3, #18
 800154a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800154c:	1d3b      	adds	r3, r7, #4
 800154e:	4619      	mov	r1, r3
 8001550:	4805      	ldr	r0, [pc, #20]	@ (8001568 <MX_ADC1_Init+0x11c>)
 8001552:	f001 fa9f 	bl	8002a94 <HAL_ADC_ConfigChannel>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <MX_ADC1_Init+0x114>
  {
    Error_Handler();
 800155c:	f000 fa88 	bl	8001a70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001560:	bf00      	nop
 8001562:	3728      	adds	r7, #40	@ 0x28
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	20000084 	.word	0x20000084
 800156c:	50040000 	.word	0x50040000
 8001570:	14f00020 	.word	0x14f00020
 8001574:	19200040 	.word	0x19200040
 8001578:	04300002 	.word	0x04300002

0800157c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b08a      	sub	sp, #40	@ 0x28
 8001580:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN CAN1_Init 1 */
	CAN_FilterTypeDef sFilterConfig;

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001582:	4b37      	ldr	r3, [pc, #220]	@ (8001660 <MX_CAN1_Init+0xe4>)
 8001584:	4a37      	ldr	r2, [pc, #220]	@ (8001664 <MX_CAN1_Init+0xe8>)
 8001586:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 10;
 8001588:	4b35      	ldr	r3, [pc, #212]	@ (8001660 <MX_CAN1_Init+0xe4>)
 800158a:	220a      	movs	r2, #10
 800158c:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800158e:	4b34      	ldr	r3, [pc, #208]	@ (8001660 <MX_CAN1_Init+0xe4>)
 8001590:	2200      	movs	r2, #0
 8001592:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001594:	4b32      	ldr	r3, [pc, #200]	@ (8001660 <MX_CAN1_Init+0xe4>)
 8001596:	2200      	movs	r2, #0
 8001598:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 800159a:	4b31      	ldr	r3, [pc, #196]	@ (8001660 <MX_CAN1_Init+0xe4>)
 800159c:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 80015a0:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80015a2:	4b2f      	ldr	r3, [pc, #188]	@ (8001660 <MX_CAN1_Init+0xe4>)
 80015a4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80015a8:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80015aa:	4b2d      	ldr	r3, [pc, #180]	@ (8001660 <MX_CAN1_Init+0xe4>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80015b0:	4b2b      	ldr	r3, [pc, #172]	@ (8001660 <MX_CAN1_Init+0xe4>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80015b6:	4b2a      	ldr	r3, [pc, #168]	@ (8001660 <MX_CAN1_Init+0xe4>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80015bc:	4b28      	ldr	r3, [pc, #160]	@ (8001660 <MX_CAN1_Init+0xe4>)
 80015be:	2200      	movs	r2, #0
 80015c0:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80015c2:	4b27      	ldr	r3, [pc, #156]	@ (8001660 <MX_CAN1_Init+0xe4>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80015c8:	4b25      	ldr	r3, [pc, #148]	@ (8001660 <MX_CAN1_Init+0xe4>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80015ce:	4824      	ldr	r0, [pc, #144]	@ (8001660 <MX_CAN1_Init+0xe4>)
 80015d0:	f002 f9da 	bl	8003988 <HAL_CAN_Init>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 80015da:	f000 fa49 	bl	8001a70 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  sFilterConfig.FilterBank = 0;
 80015de:	2300      	movs	r3, #0
 80015e0:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80015e2:	2300      	movs	r3, #0
 80015e4:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80015e6:	2301      	movs	r3, #1
 80015e8:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 80015ea:	2300      	movs	r3, #0
 80015ec:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 80015ee:	2300      	movs	r3, #0
 80015f0:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 80015f2:	2300      	movs	r3, #0
 80015f4:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 80015f6:	2300      	movs	r3, #0
 80015f8:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80015fa:	2300      	movs	r3, #0
 80015fc:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 80015fe:	2301      	movs	r3, #1
 8001600:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 8001602:	230e      	movs	r3, #14
 8001604:	627b      	str	r3, [r7, #36]	@ 0x24

  if(HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK){
 8001606:	463b      	mov	r3, r7
 8001608:	4619      	mov	r1, r3
 800160a:	4815      	ldr	r0, [pc, #84]	@ (8001660 <MX_CAN1_Init+0xe4>)
 800160c:	f002 fab7 	bl	8003b7e <HAL_CAN_ConfigFilter>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <MX_CAN1_Init+0x9e>
      /* Filter configuration Error */
      Error_Handler();
 8001616:	f000 fa2b 	bl	8001a70 <Error_Handler>
    }

  sFilterConfig.FilterBank = 1;
 800161a:	2301      	movs	r3, #1
 800161c:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800161e:	2300      	movs	r3, #0
 8001620:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001622:	2301      	movs	r3, #1
 8001624:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 8001626:	2300      	movs	r3, #0
 8001628:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 800162a:	2300      	movs	r3, #0
 800162c:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 800162e:	2300      	movs	r3, #0
 8001630:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 8001632:	2300      	movs	r3, #0
 8001634:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO1;
 8001636:	2301      	movs	r3, #1
 8001638:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 800163a:	2301      	movs	r3, #1
 800163c:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 800163e:	230e      	movs	r3, #14
 8001640:	627b      	str	r3, [r7, #36]	@ 0x24

    if(HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK){
 8001642:	463b      	mov	r3, r7
 8001644:	4619      	mov	r1, r3
 8001646:	4806      	ldr	r0, [pc, #24]	@ (8001660 <MX_CAN1_Init+0xe4>)
 8001648:	f002 fa99 	bl	8003b7e <HAL_CAN_ConfigFilter>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <MX_CAN1_Init+0xda>
        /* Filter configuration Error */
        Error_Handler();
 8001652:	f000 fa0d 	bl	8001a70 <Error_Handler>
      }
  /* USER CODE END CAN1_Init 2 */

}
 8001656:	bf00      	nop
 8001658:	3728      	adds	r7, #40	@ 0x28
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	20000130 	.word	0x20000130
 8001664:	40006400 	.word	0x40006400

08001668 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b08a      	sub	sp, #40	@ 0x28
 800166c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800166e:	1d3b      	adds	r3, r7, #4
 8001670:	2224      	movs	r2, #36	@ 0x24
 8001672:	2100      	movs	r1, #0
 8001674:	4618      	mov	r0, r3
 8001676:	f006 ff33 	bl	80084e0 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800167a:	4b12      	ldr	r3, [pc, #72]	@ (80016c4 <MX_DAC1_Init+0x5c>)
 800167c:	4a12      	ldr	r2, [pc, #72]	@ (80016c8 <MX_DAC1_Init+0x60>)
 800167e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001680:	4810      	ldr	r0, [pc, #64]	@ (80016c4 <MX_DAC1_Init+0x5c>)
 8001682:	f003 f830 	bl	80046e6 <HAL_DAC_Init>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800168c:	f000 f9f0 	bl	8001a70 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001690:	2300      	movs	r3, #0
 8001692:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8001694:	2304      	movs	r3, #4
 8001696:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001698:	2300      	movs	r3, #0
 800169a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800169c:	2300      	movs	r3, #0
 800169e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80016a0:	2300      	movs	r3, #0
 80016a2:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80016a4:	1d3b      	adds	r3, r7, #4
 80016a6:	2200      	movs	r2, #0
 80016a8:	4619      	mov	r1, r3
 80016aa:	4806      	ldr	r0, [pc, #24]	@ (80016c4 <MX_DAC1_Init+0x5c>)
 80016ac:	f003 f9a1 	bl	80049f2 <HAL_DAC_ConfigChannel>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80016b6:	f000 f9db 	bl	8001a70 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80016ba:	bf00      	nop
 80016bc:	3728      	adds	r7, #40	@ 0x28
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	20000158 	.word	0x20000158
 80016c8:	40007400 	.word	0x40007400

080016cc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016d2:	1d3b      	adds	r3, r7, #4
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	605a      	str	r2, [r3, #4]
 80016da:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80016dc:	4b14      	ldr	r3, [pc, #80]	@ (8001730 <MX_TIM6_Init+0x64>)
 80016de:	4a15      	ldr	r2, [pc, #84]	@ (8001734 <MX_TIM6_Init+0x68>)
 80016e0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80016e2:	4b13      	ldr	r3, [pc, #76]	@ (8001730 <MX_TIM6_Init+0x64>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016e8:	4b11      	ldr	r3, [pc, #68]	@ (8001730 <MX_TIM6_Init+0x64>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80016ee:	4b10      	ldr	r3, [pc, #64]	@ (8001730 <MX_TIM6_Init+0x64>)
 80016f0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80016f4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001730 <MX_TIM6_Init+0x64>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80016fc:	480c      	ldr	r0, [pc, #48]	@ (8001730 <MX_TIM6_Init+0x64>)
 80016fe:	f005 faa3 	bl	8006c48 <HAL_TIM_Base_Init>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001708:	f000 f9b2 	bl	8001a70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800170c:	2320      	movs	r3, #32
 800170e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001710:	2300      	movs	r3, #0
 8001712:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001714:	1d3b      	adds	r3, r7, #4
 8001716:	4619      	mov	r1, r3
 8001718:	4805      	ldr	r0, [pc, #20]	@ (8001730 <MX_TIM6_Init+0x64>)
 800171a:	f005 fd21 	bl	8007160 <HAL_TIMEx_MasterConfigSynchronization>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001724:	f000 f9a4 	bl	8001a70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001728:	bf00      	nop
 800172a:	3710      	adds	r7, #16
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	200001b4 	.word	0x200001b4
 8001734:	40001000 	.word	0x40001000

08001738 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800173c:	4b14      	ldr	r3, [pc, #80]	@ (8001790 <MX_USART2_UART_Init+0x58>)
 800173e:	4a15      	ldr	r2, [pc, #84]	@ (8001794 <MX_USART2_UART_Init+0x5c>)
 8001740:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001742:	4b13      	ldr	r3, [pc, #76]	@ (8001790 <MX_USART2_UART_Init+0x58>)
 8001744:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001748:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800174a:	4b11      	ldr	r3, [pc, #68]	@ (8001790 <MX_USART2_UART_Init+0x58>)
 800174c:	2200      	movs	r2, #0
 800174e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001750:	4b0f      	ldr	r3, [pc, #60]	@ (8001790 <MX_USART2_UART_Init+0x58>)
 8001752:	2200      	movs	r2, #0
 8001754:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001756:	4b0e      	ldr	r3, [pc, #56]	@ (8001790 <MX_USART2_UART_Init+0x58>)
 8001758:	2200      	movs	r2, #0
 800175a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800175c:	4b0c      	ldr	r3, [pc, #48]	@ (8001790 <MX_USART2_UART_Init+0x58>)
 800175e:	220c      	movs	r2, #12
 8001760:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001762:	4b0b      	ldr	r3, [pc, #44]	@ (8001790 <MX_USART2_UART_Init+0x58>)
 8001764:	2200      	movs	r2, #0
 8001766:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001768:	4b09      	ldr	r3, [pc, #36]	@ (8001790 <MX_USART2_UART_Init+0x58>)
 800176a:	2200      	movs	r2, #0
 800176c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800176e:	4b08      	ldr	r3, [pc, #32]	@ (8001790 <MX_USART2_UART_Init+0x58>)
 8001770:	2200      	movs	r2, #0
 8001772:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001774:	4b06      	ldr	r3, [pc, #24]	@ (8001790 <MX_USART2_UART_Init+0x58>)
 8001776:	2200      	movs	r2, #0
 8001778:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800177a:	4805      	ldr	r0, [pc, #20]	@ (8001790 <MX_USART2_UART_Init+0x58>)
 800177c:	f005 fd96 	bl	80072ac <HAL_UART_Init>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001786:	f000 f973 	bl	8001a70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	20000200 	.word	0x20000200
 8001794:	40004400 	.word	0x40004400

08001798 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800179e:	4b10      	ldr	r3, [pc, #64]	@ (80017e0 <MX_DMA_Init+0x48>)
 80017a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017a2:	4a0f      	ldr	r2, [pc, #60]	@ (80017e0 <MX_DMA_Init+0x48>)
 80017a4:	f043 0301 	orr.w	r3, r3, #1
 80017a8:	6493      	str	r3, [r2, #72]	@ 0x48
 80017aa:	4b0d      	ldr	r3, [pc, #52]	@ (80017e0 <MX_DMA_Init+0x48>)
 80017ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017ae:	f003 0301 	and.w	r3, r3, #1
 80017b2:	607b      	str	r3, [r7, #4]
 80017b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80017b6:	2200      	movs	r2, #0
 80017b8:	2100      	movs	r1, #0
 80017ba:	200b      	movs	r0, #11
 80017bc:	f002 ff5d 	bl	800467a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80017c0:	200b      	movs	r0, #11
 80017c2:	f002 ff76 	bl	80046b2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80017c6:	2200      	movs	r2, #0
 80017c8:	2100      	movs	r1, #0
 80017ca:	200d      	movs	r0, #13
 80017cc:	f002 ff55 	bl	800467a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80017d0:	200d      	movs	r0, #13
 80017d2:	f002 ff6e 	bl	80046b2 <HAL_NVIC_EnableIRQ>

}
 80017d6:	bf00      	nop
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	40021000 	.word	0x40021000

080017e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b08a      	sub	sp, #40	@ 0x28
 80017e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ea:	f107 0314 	add.w	r3, r7, #20
 80017ee:	2200      	movs	r2, #0
 80017f0:	601a      	str	r2, [r3, #0]
 80017f2:	605a      	str	r2, [r3, #4]
 80017f4:	609a      	str	r2, [r3, #8]
 80017f6:	60da      	str	r2, [r3, #12]
 80017f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017fa:	4b4b      	ldr	r3, [pc, #300]	@ (8001928 <MX_GPIO_Init+0x144>)
 80017fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017fe:	4a4a      	ldr	r2, [pc, #296]	@ (8001928 <MX_GPIO_Init+0x144>)
 8001800:	f043 0304 	orr.w	r3, r3, #4
 8001804:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001806:	4b48      	ldr	r3, [pc, #288]	@ (8001928 <MX_GPIO_Init+0x144>)
 8001808:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800180a:	f003 0304 	and.w	r3, r3, #4
 800180e:	613b      	str	r3, [r7, #16]
 8001810:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001812:	4b45      	ldr	r3, [pc, #276]	@ (8001928 <MX_GPIO_Init+0x144>)
 8001814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001816:	4a44      	ldr	r2, [pc, #272]	@ (8001928 <MX_GPIO_Init+0x144>)
 8001818:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800181c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800181e:	4b42      	ldr	r3, [pc, #264]	@ (8001928 <MX_GPIO_Init+0x144>)
 8001820:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001822:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001826:	60fb      	str	r3, [r7, #12]
 8001828:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800182a:	4b3f      	ldr	r3, [pc, #252]	@ (8001928 <MX_GPIO_Init+0x144>)
 800182c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800182e:	4a3e      	ldr	r2, [pc, #248]	@ (8001928 <MX_GPIO_Init+0x144>)
 8001830:	f043 0301 	orr.w	r3, r3, #1
 8001834:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001836:	4b3c      	ldr	r3, [pc, #240]	@ (8001928 <MX_GPIO_Init+0x144>)
 8001838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	60bb      	str	r3, [r7, #8]
 8001840:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001842:	4b39      	ldr	r3, [pc, #228]	@ (8001928 <MX_GPIO_Init+0x144>)
 8001844:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001846:	4a38      	ldr	r2, [pc, #224]	@ (8001928 <MX_GPIO_Init+0x144>)
 8001848:	f043 0302 	orr.w	r3, r3, #2
 800184c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800184e:	4b36      	ldr	r3, [pc, #216]	@ (8001928 <MX_GPIO_Init+0x144>)
 8001850:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001852:	f003 0302 	and.w	r3, r3, #2
 8001856:	607b      	str	r3, [r7, #4]
 8001858:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800185a:	2200      	movs	r2, #0
 800185c:	2120      	movs	r1, #32
 800185e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001862:	f003 fea1 	bl	80055a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_O_GPIO_Port, SD_O_Pin, GPIO_PIN_RESET);
 8001866:	2200      	movs	r2, #0
 8001868:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800186c:	482f      	ldr	r0, [pc, #188]	@ (800192c <MX_GPIO_Init+0x148>)
 800186e:	f003 fe9b 	bl	80055a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BUZZER_Pin|BrakeLight_Pin, GPIO_PIN_RESET);
 8001872:	2200      	movs	r2, #0
 8001874:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
 8001878:	482d      	ldr	r0, [pc, #180]	@ (8001930 <MX_GPIO_Init+0x14c>)
 800187a:	f003 fe95 	bl	80055a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800187e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001882:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001884:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001888:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188a:	2300      	movs	r3, #0
 800188c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800188e:	f107 0314 	add.w	r3, r7, #20
 8001892:	4619      	mov	r1, r3
 8001894:	4826      	ldr	r0, [pc, #152]	@ (8001930 <MX_GPIO_Init+0x14c>)
 8001896:	f003 fcdd 	bl	8005254 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800189a:	2320      	movs	r3, #32
 800189c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800189e:	2301      	movs	r3, #1
 80018a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a2:	2300      	movs	r3, #0
 80018a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a6:	2300      	movs	r3, #0
 80018a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80018aa:	f107 0314 	add.w	r3, r7, #20
 80018ae:	4619      	mov	r1, r3
 80018b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018b4:	f003 fcce 	bl	8005254 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_O_Pin */
  GPIO_InitStruct.Pin = SD_O_Pin;
 80018b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018be:	2301      	movs	r3, #1
 80018c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c2:	2300      	movs	r3, #0
 80018c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c6:	2300      	movs	r3, #0
 80018c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_O_GPIO_Port, &GPIO_InitStruct);
 80018ca:	f107 0314 	add.w	r3, r7, #20
 80018ce:	4619      	mov	r1, r3
 80018d0:	4816      	ldr	r0, [pc, #88]	@ (800192c <MX_GPIO_Init+0x148>)
 80018d2:	f003 fcbf 	bl	8005254 <HAL_GPIO_Init>

  /*Configure GPIO pin : RUNON_Pin */
  GPIO_InitStruct.Pin = RUNON_Pin;
 80018d6:	2380      	movs	r3, #128	@ 0x80
 80018d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018da:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80018de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e0:	2300      	movs	r3, #0
 80018e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RUNON_GPIO_Port, &GPIO_InitStruct);
 80018e4:	f107 0314 	add.w	r3, r7, #20
 80018e8:	4619      	mov	r1, r3
 80018ea:	4811      	ldr	r0, [pc, #68]	@ (8001930 <MX_GPIO_Init+0x14c>)
 80018ec:	f003 fcb2 	bl	8005254 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUZZER_Pin BrakeLight_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin|BrakeLight_Pin;
 80018f0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80018f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f6:	2301      	movs	r3, #1
 80018f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fa:	2300      	movs	r3, #0
 80018fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fe:	2300      	movs	r3, #0
 8001900:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001902:	f107 0314 	add.w	r3, r7, #20
 8001906:	4619      	mov	r1, r3
 8001908:	4809      	ldr	r0, [pc, #36]	@ (8001930 <MX_GPIO_Init+0x14c>)
 800190a:	f003 fca3 	bl	8005254 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800190e:	2200      	movs	r2, #0
 8001910:	2100      	movs	r1, #0
 8001912:	2028      	movs	r0, #40	@ 0x28
 8001914:	f002 feb1 	bl	800467a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001918:	2028      	movs	r0, #40	@ 0x28
 800191a:	f002 feca 	bl	80046b2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800191e:	bf00      	nop
 8001920:	3728      	adds	r7, #40	@ 0x28
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	40021000 	.word	0x40021000
 800192c:	48000400 	.word	0x48000400
 8001930:	48000800 	.word	0x48000800
 8001934:	00000000 	.word	0x00000000

08001938 <dacInput>:
//	data[1] = raw2;
//
//	return out;
//}

uint32_t dacInput(uint16_t adcinput1, uint16_t adcinput2){
 8001938:	b580      	push	{r7, lr}
 800193a:	b086      	sub	sp, #24
 800193c:	af00      	add	r7, sp, #0
 800193e:	4603      	mov	r3, r0
 8001940:	460a      	mov	r2, r1
 8001942:	80fb      	strh	r3, [r7, #6]
 8001944:	4613      	mov	r3, r2
 8001946:	80bb      	strh	r3, [r7, #4]
	static uint16_t counter = 0;
	static uint32_t rawcheck1 = 0;
	static uint32_t rawcheck2 = 0;

	uint32_t out = 0;
 8001948:	2300      	movs	r3, #0
 800194a:	617b      	str	r3, [r7, #20]

	uint32_t raw1 = adcinput1;
 800194c:	88fb      	ldrh	r3, [r7, #6]
 800194e:	613b      	str	r3, [r7, #16]
	uint32_t raw2 = (9/8)*adcinput2;
 8001950:	88bb      	ldrh	r3, [r7, #4]
 8001952:	60fb      	str	r3, [r7, #12]

	uint8_t deviationCheck = ((abs((float)raw1-(float)raw2)/4095.00))*100;
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	ee07 3a90 	vmov	s15, r3
 800195a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	ee07 3a90 	vmov	s15, r3
 8001964:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001968:	ee77 7a67 	vsub.f32	s15, s14, s15
 800196c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001970:	ee17 3a90 	vmov	r3, s15
 8001974:	2b00      	cmp	r3, #0
 8001976:	bfb8      	it	lt
 8001978:	425b      	neglt	r3, r3
 800197a:	4618      	mov	r0, r3
 800197c:	f7fe fdd2 	bl	8000524 <__aeabi_i2d>
 8001980:	a339      	add	r3, pc, #228	@ (adr r3, 8001a68 <dacInput+0x130>)
 8001982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001986:	f7fe ff61 	bl	800084c <__aeabi_ddiv>
 800198a:	4602      	mov	r2, r0
 800198c:	460b      	mov	r3, r1
 800198e:	4610      	mov	r0, r2
 8001990:	4619      	mov	r1, r3
 8001992:	f04f 0200 	mov.w	r2, #0
 8001996:	4b2e      	ldr	r3, [pc, #184]	@ (8001a50 <dacInput+0x118>)
 8001998:	f7fe fe2e 	bl	80005f8 <__aeabi_dmul>
 800199c:	4602      	mov	r2, r0
 800199e:	460b      	mov	r3, r1
 80019a0:	4610      	mov	r0, r2
 80019a2:	4619      	mov	r1, r3
 80019a4:	f7ff f83a 	bl	8000a1c <__aeabi_d2uiz>
 80019a8:	4603      	mov	r3, r0
 80019aa:	72fb      	strb	r3, [r7, #11]

	data[2] = (uint16_t)deviationCheck;
 80019ac:	7afb      	ldrb	r3, [r7, #11]
 80019ae:	b29a      	uxth	r2, r3
 80019b0:	4b28      	ldr	r3, [pc, #160]	@ (8001a54 <dacInput+0x11c>)
 80019b2:	809a      	strh	r2, [r3, #4]

	//check if both values are same for 1 second
	if((raw1!=0) && (raw2!=0) && raw1 == raw2){
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d034      	beq.n	8001a24 <dacInput+0xec>
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d031      	beq.n	8001a24 <dacInput+0xec>
 80019c0:	693a      	ldr	r2, [r7, #16]
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d12d      	bne.n	8001a24 <dacInput+0xec>
		//check if raw1 is continuously the same
		if((raw1 != rawcheck1) && (raw2 != rawcheck2)){
 80019c8:	4b23      	ldr	r3, [pc, #140]	@ (8001a58 <dacInput+0x120>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	693a      	ldr	r2, [r7, #16]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d007      	beq.n	80019e2 <dacInput+0xaa>
 80019d2:	4b22      	ldr	r3, [pc, #136]	@ (8001a5c <dacInput+0x124>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	68fa      	ldr	r2, [r7, #12]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d002      	beq.n	80019e2 <dacInput+0xaa>
			counter = 0;
 80019dc:	4b20      	ldr	r3, [pc, #128]	@ (8001a60 <dacInput+0x128>)
 80019de:	2200      	movs	r2, #0
 80019e0:	801a      	strh	r2, [r3, #0]
		}
		//set static value to be compared later
		rawcheck1 = raw1;
 80019e2:	4a1d      	ldr	r2, [pc, #116]	@ (8001a58 <dacInput+0x120>)
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	6013      	str	r3, [r2, #0]
		rawcheck2 = raw2;
 80019e8:	4a1c      	ldr	r2, [pc, #112]	@ (8001a5c <dacInput+0x124>)
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	6013      	str	r3, [r2, #0]

		counter++;
 80019ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001a60 <dacInput+0x128>)
 80019f0:	881b      	ldrh	r3, [r3, #0]
 80019f2:	3301      	adds	r3, #1
 80019f4:	b29a      	uxth	r2, r3
 80019f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001a60 <dacInput+0x128>)
 80019f8:	801a      	strh	r2, [r3, #0]

		if(counter > 999){
 80019fa:	4b19      	ldr	r3, [pc, #100]	@ (8001a60 <dacInput+0x128>)
 80019fc:	881b      	ldrh	r3, [r3, #0]
 80019fe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001a02:	d320      	bcc.n	8001a46 <dacInput+0x10e>
			//compare to see if they are still the same
			if(rawcheck1 == raw1 && rawcheck2 == raw2){
 8001a04:	4b14      	ldr	r3, [pc, #80]	@ (8001a58 <dacInput+0x120>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	693a      	ldr	r2, [r7, #16]
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d106      	bne.n	8001a1c <dacInput+0xe4>
 8001a0e:	4b13      	ldr	r3, [pc, #76]	@ (8001a5c <dacInput+0x124>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	68fa      	ldr	r2, [r7, #12]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d101      	bne.n	8001a1c <dacInput+0xe4>
				out = 0;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	617b      	str	r3, [r7, #20]
//				LOGS((uint8_t*)potShortPedal,strlen(potShortPedal));
//				Error_Handler();
			}

			counter = 0;
 8001a1c:	4b10      	ldr	r3, [pc, #64]	@ (8001a60 <dacInput+0x128>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	801a      	strh	r2, [r3, #0]
		if(counter > 999){
 8001a22:	e010      	b.n	8001a46 <dacInput+0x10e>
		}
	}
	//check deviation
	else if(deviationCheck>10){
 8001a24:	7afb      	ldrb	r3, [r7, #11]
 8001a26:	2b0a      	cmp	r3, #10
 8001a28:	d908      	bls.n	8001a3c <dacInput+0x104>
		HAL_GPIO_WritePin(SD_O_GPIO_Port, SD_O_Pin, GPIO_PIN_SET);
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a30:	480c      	ldr	r0, [pc, #48]	@ (8001a64 <dacInput+0x12c>)
 8001a32:	f003 fdb9 	bl	80055a8 <HAL_GPIO_WritePin>
		out = 0;
 8001a36:	2300      	movs	r3, #0
 8001a38:	617b      	str	r3, [r7, #20]
 8001a3a:	e004      	b.n	8001a46 <dacInput+0x10e>
//		LOGS((uint8_t*)deviationCheckFail,strlen(deviationCheckFail));
//		Error_Handler();
	}
	//regular output function(average value)
	else{
		out = ((raw1+raw2)/2);
 8001a3c:	693a      	ldr	r2, [r7, #16]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	4413      	add	r3, r2
 8001a42:	085b      	lsrs	r3, r3, #1
 8001a44:	617b      	str	r3, [r7, #20]
	}

	return out;
 8001a46:	697b      	ldr	r3, [r7, #20]

	data[0] = raw1;
	data[1] = raw2;
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3718      	adds	r7, #24
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	40590000 	.word	0x40590000
 8001a54:	200002a8 	.word	0x200002a8
 8001a58:	20000320 	.word	0x20000320
 8001a5c:	20000324 	.word	0x20000324
 8001a60:	20000328 	.word	0x20000328
 8001a64:	48000400 	.word	0x48000400
 8001a68:	00000000 	.word	0x00000000
 8001a6c:	40affe00 	.word	0x40affe00

08001a70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a74:	b672      	cpsid	i
}
 8001a76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  ErrorLedBlink();
 8001a78:	f7ff fbb6 	bl	80011e8 <ErrorLedBlink>
 8001a7c:	e7fc      	b.n	8001a78 <Error_Handler+0x8>
	...

08001a80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a86:	4b0f      	ldr	r3, [pc, #60]	@ (8001ac4 <HAL_MspInit+0x44>)
 8001a88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a8a:	4a0e      	ldr	r2, [pc, #56]	@ (8001ac4 <HAL_MspInit+0x44>)
 8001a8c:	f043 0301 	orr.w	r3, r3, #1
 8001a90:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a92:	4b0c      	ldr	r3, [pc, #48]	@ (8001ac4 <HAL_MspInit+0x44>)
 8001a94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	607b      	str	r3, [r7, #4]
 8001a9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a9e:	4b09      	ldr	r3, [pc, #36]	@ (8001ac4 <HAL_MspInit+0x44>)
 8001aa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aa2:	4a08      	ldr	r2, [pc, #32]	@ (8001ac4 <HAL_MspInit+0x44>)
 8001aa4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001aa8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001aaa:	4b06      	ldr	r3, [pc, #24]	@ (8001ac4 <HAL_MspInit+0x44>)
 8001aac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ab2:	603b      	str	r3, [r7, #0]
 8001ab4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	370c      	adds	r7, #12
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	40021000 	.word	0x40021000

08001ac8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b0ac      	sub	sp, #176	@ 0xb0
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	605a      	str	r2, [r3, #4]
 8001ada:	609a      	str	r2, [r3, #8]
 8001adc:	60da      	str	r2, [r3, #12]
 8001ade:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ae0:	f107 0314 	add.w	r3, r7, #20
 8001ae4:	2288      	movs	r2, #136	@ 0x88
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f006 fcf9 	bl	80084e0 <memset>
  if(hadc->Instance==ADC1)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a4b      	ldr	r2, [pc, #300]	@ (8001c20 <HAL_ADC_MspInit+0x158>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	f040 808f 	bne.w	8001c18 <HAL_ADC_MspInit+0x150>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001afa:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001afe:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001b00:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001b04:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8001b10:	2310      	movs	r3, #16
 8001b12:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001b14:	2307      	movs	r3, #7
 8001b16:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001b18:	2302      	movs	r3, #2
 8001b1a:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001b20:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001b24:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b26:	f107 0314 	add.w	r3, r7, #20
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f004 fbd0 	bl	80062d0 <HAL_RCCEx_PeriphCLKConfig>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <HAL_ADC_MspInit+0x72>
    {
      Error_Handler();
 8001b36:	f7ff ff9b 	bl	8001a70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001b3a:	4b3a      	ldr	r3, [pc, #232]	@ (8001c24 <HAL_ADC_MspInit+0x15c>)
 8001b3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b3e:	4a39      	ldr	r2, [pc, #228]	@ (8001c24 <HAL_ADC_MspInit+0x15c>)
 8001b40:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001b44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b46:	4b37      	ldr	r3, [pc, #220]	@ (8001c24 <HAL_ADC_MspInit+0x15c>)
 8001b48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b4a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b4e:	613b      	str	r3, [r7, #16]
 8001b50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b52:	4b34      	ldr	r3, [pc, #208]	@ (8001c24 <HAL_ADC_MspInit+0x15c>)
 8001b54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b56:	4a33      	ldr	r2, [pc, #204]	@ (8001c24 <HAL_ADC_MspInit+0x15c>)
 8001b58:	f043 0304 	orr.w	r3, r3, #4
 8001b5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b5e:	4b31      	ldr	r3, [pc, #196]	@ (8001c24 <HAL_ADC_MspInit+0x15c>)
 8001b60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b62:	f003 0304 	and.w	r3, r3, #4
 8001b66:	60fb      	str	r3, [r7, #12]
 8001b68:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b6a:	4b2e      	ldr	r3, [pc, #184]	@ (8001c24 <HAL_ADC_MspInit+0x15c>)
 8001b6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b6e:	4a2d      	ldr	r2, [pc, #180]	@ (8001c24 <HAL_ADC_MspInit+0x15c>)
 8001b70:	f043 0301 	orr.w	r3, r3, #1
 8001b74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b76:	4b2b      	ldr	r3, [pc, #172]	@ (8001c24 <HAL_ADC_MspInit+0x15c>)
 8001b78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	60bb      	str	r3, [r7, #8]
 8001b80:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b82:	2301      	movs	r3, #1
 8001b84:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001b88:	230b      	movs	r3, #11
 8001b8a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b94:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001b98:	4619      	mov	r1, r3
 8001b9a:	4823      	ldr	r0, [pc, #140]	@ (8001c28 <HAL_ADC_MspInit+0x160>)
 8001b9c:	f003 fb5a 	bl	8005254 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001ba6:	230b      	movs	r3, #11
 8001ba8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bac:	2300      	movs	r3, #0
 8001bae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bbc:	f003 fb4a 	bl	8005254 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001bc0:	4b1a      	ldr	r3, [pc, #104]	@ (8001c2c <HAL_ADC_MspInit+0x164>)
 8001bc2:	4a1b      	ldr	r2, [pc, #108]	@ (8001c30 <HAL_ADC_MspInit+0x168>)
 8001bc4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001bc6:	4b19      	ldr	r3, [pc, #100]	@ (8001c2c <HAL_ADC_MspInit+0x164>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bcc:	4b17      	ldr	r3, [pc, #92]	@ (8001c2c <HAL_ADC_MspInit+0x164>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bd2:	4b16      	ldr	r3, [pc, #88]	@ (8001c2c <HAL_ADC_MspInit+0x164>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001bd8:	4b14      	ldr	r3, [pc, #80]	@ (8001c2c <HAL_ADC_MspInit+0x164>)
 8001bda:	2280      	movs	r2, #128	@ 0x80
 8001bdc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001bde:	4b13      	ldr	r3, [pc, #76]	@ (8001c2c <HAL_ADC_MspInit+0x164>)
 8001be0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001be4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001be6:	4b11      	ldr	r3, [pc, #68]	@ (8001c2c <HAL_ADC_MspInit+0x164>)
 8001be8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001bec:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001bee:	4b0f      	ldr	r3, [pc, #60]	@ (8001c2c <HAL_ADC_MspInit+0x164>)
 8001bf0:	2220      	movs	r2, #32
 8001bf2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001bf4:	4b0d      	ldr	r3, [pc, #52]	@ (8001c2c <HAL_ADC_MspInit+0x164>)
 8001bf6:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8001bfa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001bfc:	480b      	ldr	r0, [pc, #44]	@ (8001c2c <HAL_ADC_MspInit+0x164>)
 8001bfe:	f003 f8b3 	bl	8004d68 <HAL_DMA_Init>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <HAL_ADC_MspInit+0x144>
    {
      Error_Handler();
 8001c08:	f7ff ff32 	bl	8001a70 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	4a07      	ldr	r2, [pc, #28]	@ (8001c2c <HAL_ADC_MspInit+0x164>)
 8001c10:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001c12:	4a06      	ldr	r2, [pc, #24]	@ (8001c2c <HAL_ADC_MspInit+0x164>)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001c18:	bf00      	nop
 8001c1a:	37b0      	adds	r7, #176	@ 0xb0
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	50040000 	.word	0x50040000
 8001c24:	40021000 	.word	0x40021000
 8001c28:	48000800 	.word	0x48000800
 8001c2c:	200000e8 	.word	0x200000e8
 8001c30:	40020008 	.word	0x40020008

08001c34 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b08a      	sub	sp, #40	@ 0x28
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c3c:	f107 0314 	add.w	r3, r7, #20
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	605a      	str	r2, [r3, #4]
 8001c46:	609a      	str	r2, [r3, #8]
 8001c48:	60da      	str	r2, [r3, #12]
 8001c4a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a31      	ldr	r2, [pc, #196]	@ (8001d18 <HAL_CAN_MspInit+0xe4>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d15b      	bne.n	8001d0e <HAL_CAN_MspInit+0xda>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001c56:	4b31      	ldr	r3, [pc, #196]	@ (8001d1c <HAL_CAN_MspInit+0xe8>)
 8001c58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c5a:	4a30      	ldr	r2, [pc, #192]	@ (8001d1c <HAL_CAN_MspInit+0xe8>)
 8001c5c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001c60:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c62:	4b2e      	ldr	r3, [pc, #184]	@ (8001d1c <HAL_CAN_MspInit+0xe8>)
 8001c64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c6a:	613b      	str	r3, [r7, #16]
 8001c6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c6e:	4b2b      	ldr	r3, [pc, #172]	@ (8001d1c <HAL_CAN_MspInit+0xe8>)
 8001c70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c72:	4a2a      	ldr	r2, [pc, #168]	@ (8001d1c <HAL_CAN_MspInit+0xe8>)
 8001c74:	f043 0301 	orr.w	r3, r3, #1
 8001c78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c7a:	4b28      	ldr	r3, [pc, #160]	@ (8001d1c <HAL_CAN_MspInit+0xe8>)
 8001c7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c7e:	f003 0301 	and.w	r3, r3, #1
 8001c82:	60fb      	str	r3, [r7, #12]
 8001c84:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001c86:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001c8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c90:	2300      	movs	r3, #0
 8001c92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c94:	2303      	movs	r3, #3
 8001c96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001c98:	2309      	movs	r3, #9
 8001c9a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c9c:	f107 0314 	add.w	r3, r7, #20
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ca6:	f003 fad5 	bl	8005254 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001caa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001cae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001cbc:	2309      	movs	r3, #9
 8001cbe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc0:	f107 0314 	add.w	r3, r7, #20
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cca:	f003 fac3 	bl	8005254 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 1, 0);
 8001cce:	2200      	movs	r2, #0
 8001cd0:	2101      	movs	r1, #1
 8001cd2:	2013      	movs	r0, #19
 8001cd4:	f002 fcd1 	bl	800467a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001cd8:	2013      	movs	r0, #19
 8001cda:	f002 fcea 	bl	80046b2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 1, 0);
 8001cde:	2200      	movs	r2, #0
 8001ce0:	2101      	movs	r1, #1
 8001ce2:	2014      	movs	r0, #20
 8001ce4:	f002 fcc9 	bl	800467a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001ce8:	2014      	movs	r0, #20
 8001cea:	f002 fce2 	bl	80046b2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 1, 0);
 8001cee:	2200      	movs	r2, #0
 8001cf0:	2101      	movs	r1, #1
 8001cf2:	2015      	movs	r0, #21
 8001cf4:	f002 fcc1 	bl	800467a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001cf8:	2015      	movs	r0, #21
 8001cfa:	f002 fcda 	bl	80046b2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 1, 0);
 8001cfe:	2200      	movs	r2, #0
 8001d00:	2101      	movs	r1, #1
 8001d02:	2016      	movs	r0, #22
 8001d04:	f002 fcb9 	bl	800467a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8001d08:	2016      	movs	r0, #22
 8001d0a:	f002 fcd2 	bl	80046b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001d0e:	bf00      	nop
 8001d10:	3728      	adds	r7, #40	@ 0x28
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	40006400 	.word	0x40006400
 8001d1c:	40021000 	.word	0x40021000

08001d20 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b08a      	sub	sp, #40	@ 0x28
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d28:	f107 0314 	add.w	r3, r7, #20
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	601a      	str	r2, [r3, #0]
 8001d30:	605a      	str	r2, [r3, #4]
 8001d32:	609a      	str	r2, [r3, #8]
 8001d34:	60da      	str	r2, [r3, #12]
 8001d36:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a2f      	ldr	r2, [pc, #188]	@ (8001dfc <HAL_DAC_MspInit+0xdc>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d158      	bne.n	8001df4 <HAL_DAC_MspInit+0xd4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001d42:	4b2f      	ldr	r3, [pc, #188]	@ (8001e00 <HAL_DAC_MspInit+0xe0>)
 8001d44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d46:	4a2e      	ldr	r2, [pc, #184]	@ (8001e00 <HAL_DAC_MspInit+0xe0>)
 8001d48:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001d4c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d4e:	4b2c      	ldr	r3, [pc, #176]	@ (8001e00 <HAL_DAC_MspInit+0xe0>)
 8001d50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d52:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001d56:	613b      	str	r3, [r7, #16]
 8001d58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d5a:	4b29      	ldr	r3, [pc, #164]	@ (8001e00 <HAL_DAC_MspInit+0xe0>)
 8001d5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d5e:	4a28      	ldr	r2, [pc, #160]	@ (8001e00 <HAL_DAC_MspInit+0xe0>)
 8001d60:	f043 0301 	orr.w	r3, r3, #1
 8001d64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d66:	4b26      	ldr	r3, [pc, #152]	@ (8001e00 <HAL_DAC_MspInit+0xe0>)
 8001d68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d6a:	f003 0301 	and.w	r3, r3, #1
 8001d6e:	60fb      	str	r3, [r7, #12]
 8001d70:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001d72:	2310      	movs	r3, #16
 8001d74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d76:	2303      	movs	r3, #3
 8001d78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d7e:	f107 0314 	add.w	r3, r7, #20
 8001d82:	4619      	mov	r1, r3
 8001d84:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d88:	f003 fa64 	bl	8005254 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8001d8c:	4b1d      	ldr	r3, [pc, #116]	@ (8001e04 <HAL_DAC_MspInit+0xe4>)
 8001d8e:	4a1e      	ldr	r2, [pc, #120]	@ (8001e08 <HAL_DAC_MspInit+0xe8>)
 8001d90:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 8001d92:	4b1c      	ldr	r3, [pc, #112]	@ (8001e04 <HAL_DAC_MspInit+0xe4>)
 8001d94:	2206      	movs	r2, #6
 8001d96:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d98:	4b1a      	ldr	r3, [pc, #104]	@ (8001e04 <HAL_DAC_MspInit+0xe4>)
 8001d9a:	2210      	movs	r2, #16
 8001d9c:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d9e:	4b19      	ldr	r3, [pc, #100]	@ (8001e04 <HAL_DAC_MspInit+0xe4>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001da4:	4b17      	ldr	r3, [pc, #92]	@ (8001e04 <HAL_DAC_MspInit+0xe4>)
 8001da6:	2280      	movs	r2, #128	@ 0x80
 8001da8:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001daa:	4b16      	ldr	r3, [pc, #88]	@ (8001e04 <HAL_DAC_MspInit+0xe4>)
 8001dac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001db0:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001db2:	4b14      	ldr	r3, [pc, #80]	@ (8001e04 <HAL_DAC_MspInit+0xe4>)
 8001db4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001db8:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8001dba:	4b12      	ldr	r3, [pc, #72]	@ (8001e04 <HAL_DAC_MspInit+0xe4>)
 8001dbc:	2220      	movs	r2, #32
 8001dbe:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8001dc0:	4b10      	ldr	r3, [pc, #64]	@ (8001e04 <HAL_DAC_MspInit+0xe4>)
 8001dc2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001dc6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8001dc8:	480e      	ldr	r0, [pc, #56]	@ (8001e04 <HAL_DAC_MspInit+0xe4>)
 8001dca:	f002 ffcd 	bl	8004d68 <HAL_DMA_Init>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <HAL_DAC_MspInit+0xb8>
    {
      Error_Handler();
 8001dd4:	f7ff fe4c 	bl	8001a70 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	4a0a      	ldr	r2, [pc, #40]	@ (8001e04 <HAL_DAC_MspInit+0xe4>)
 8001ddc:	609a      	str	r2, [r3, #8]
 8001dde:	4a09      	ldr	r2, [pc, #36]	@ (8001e04 <HAL_DAC_MspInit+0xe4>)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6293      	str	r3, [r2, #40]	@ 0x28

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001de4:	2200      	movs	r2, #0
 8001de6:	2100      	movs	r1, #0
 8001de8:	2036      	movs	r0, #54	@ 0x36
 8001dea:	f002 fc46 	bl	800467a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001dee:	2036      	movs	r0, #54	@ 0x36
 8001df0:	f002 fc5f 	bl	80046b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001df4:	bf00      	nop
 8001df6:	3728      	adds	r7, #40	@ 0x28
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	40007400 	.word	0x40007400
 8001e00:	40021000 	.word	0x40021000
 8001e04:	2000016c 	.word	0x2000016c
 8001e08:	40020030 	.word	0x40020030

08001e0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a0d      	ldr	r2, [pc, #52]	@ (8001e50 <HAL_TIM_Base_MspInit+0x44>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d113      	bne.n	8001e46 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001e1e:	4b0d      	ldr	r3, [pc, #52]	@ (8001e54 <HAL_TIM_Base_MspInit+0x48>)
 8001e20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e22:	4a0c      	ldr	r2, [pc, #48]	@ (8001e54 <HAL_TIM_Base_MspInit+0x48>)
 8001e24:	f043 0310 	orr.w	r3, r3, #16
 8001e28:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e2a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e54 <HAL_TIM_Base_MspInit+0x48>)
 8001e2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e2e:	f003 0310 	and.w	r3, r3, #16
 8001e32:	60fb      	str	r3, [r7, #12]
 8001e34:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001e36:	2200      	movs	r2, #0
 8001e38:	2100      	movs	r1, #0
 8001e3a:	2036      	movs	r0, #54	@ 0x36
 8001e3c:	f002 fc1d 	bl	800467a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001e40:	2036      	movs	r0, #54	@ 0x36
 8001e42:	f002 fc36 	bl	80046b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001e46:	bf00      	nop
 8001e48:	3710      	adds	r7, #16
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	40001000 	.word	0x40001000
 8001e54:	40021000 	.word	0x40021000

08001e58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b0ac      	sub	sp, #176	@ 0xb0
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e60:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	605a      	str	r2, [r3, #4]
 8001e6a:	609a      	str	r2, [r3, #8]
 8001e6c:	60da      	str	r2, [r3, #12]
 8001e6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e70:	f107 0314 	add.w	r3, r7, #20
 8001e74:	2288      	movs	r2, #136	@ 0x88
 8001e76:	2100      	movs	r1, #0
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f006 fb31 	bl	80084e0 <memset>
  if(huart->Instance==USART2)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a25      	ldr	r2, [pc, #148]	@ (8001f18 <HAL_UART_MspInit+0xc0>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d143      	bne.n	8001f10 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001e88:	2302      	movs	r3, #2
 8001e8a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e90:	f107 0314 	add.w	r3, r7, #20
 8001e94:	4618      	mov	r0, r3
 8001e96:	f004 fa1b 	bl	80062d0 <HAL_RCCEx_PeriphCLKConfig>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001ea0:	f7ff fde6 	bl	8001a70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ea4:	4b1d      	ldr	r3, [pc, #116]	@ (8001f1c <HAL_UART_MspInit+0xc4>)
 8001ea6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ea8:	4a1c      	ldr	r2, [pc, #112]	@ (8001f1c <HAL_UART_MspInit+0xc4>)
 8001eaa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001eae:	6593      	str	r3, [r2, #88]	@ 0x58
 8001eb0:	4b1a      	ldr	r3, [pc, #104]	@ (8001f1c <HAL_UART_MspInit+0xc4>)
 8001eb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eb8:	613b      	str	r3, [r7, #16]
 8001eba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ebc:	4b17      	ldr	r3, [pc, #92]	@ (8001f1c <HAL_UART_MspInit+0xc4>)
 8001ebe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ec0:	4a16      	ldr	r2, [pc, #88]	@ (8001f1c <HAL_UART_MspInit+0xc4>)
 8001ec2:	f043 0301 	orr.w	r3, r3, #1
 8001ec6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ec8:	4b14      	ldr	r3, [pc, #80]	@ (8001f1c <HAL_UART_MspInit+0xc4>)
 8001eca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ecc:	f003 0301 	and.w	r3, r3, #1
 8001ed0:	60fb      	str	r3, [r7, #12]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001ed4:	230c      	movs	r3, #12
 8001ed6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eda:	2302      	movs	r3, #2
 8001edc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001eec:	2307      	movs	r3, #7
 8001eee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ef2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001efc:	f003 f9aa 	bl	8005254 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8001f00:	2200      	movs	r2, #0
 8001f02:	2102      	movs	r1, #2
 8001f04:	2026      	movs	r0, #38	@ 0x26
 8001f06:	f002 fbb8 	bl	800467a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001f0a:	2026      	movs	r0, #38	@ 0x26
 8001f0c:	f002 fbd1 	bl	80046b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f10:	bf00      	nop
 8001f12:	37b0      	adds	r7, #176	@ 0xb0
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	40004400 	.word	0x40004400
 8001f1c:	40021000 	.word	0x40021000

08001f20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8001f24:	bf00      	nop
 8001f26:	e7fd      	b.n	8001f24 <NMI_Handler+0x4>

08001f28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f2c:	bf00      	nop
 8001f2e:	e7fd      	b.n	8001f2c <HardFault_Handler+0x4>

08001f30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f34:	bf00      	nop
 8001f36:	e7fd      	b.n	8001f34 <MemManage_Handler+0x4>

08001f38 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f3c:	bf00      	nop
 8001f3e:	e7fd      	b.n	8001f3c <BusFault_Handler+0x4>

08001f40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f44:	bf00      	nop
 8001f46:	e7fd      	b.n	8001f44 <UsageFault_Handler+0x4>

08001f48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f4c:	bf00      	nop
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr

08001f56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f56:	b480      	push	{r7}
 8001f58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f5a:	bf00      	nop
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f68:	bf00      	nop
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr

08001f72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f72:	b580      	push	{r7, lr}
 8001f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f76:	f000 f92d 	bl	80021d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f7a:	bf00      	nop
 8001f7c:	bd80      	pop	{r7, pc}
	...

08001f80 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001f84:	4802      	ldr	r0, [pc, #8]	@ (8001f90 <DMA1_Channel1_IRQHandler+0x10>)
 8001f86:	f003 f886 	bl	8005096 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001f8a:	bf00      	nop
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	200000e8 	.word	0x200000e8

08001f94 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8001f98:	4802      	ldr	r0, [pc, #8]	@ (8001fa4 <DMA1_Channel3_IRQHandler+0x10>)
 8001f9a:	f003 f87c 	bl	8005096 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001f9e:	bf00      	nop
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	2000016c 	.word	0x2000016c

08001fa8 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001fac:	4802      	ldr	r0, [pc, #8]	@ (8001fb8 <CAN1_TX_IRQHandler+0x10>)
 8001fae:	f002 f864 	bl	800407a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001fb2:	bf00      	nop
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	20000130 	.word	0x20000130

08001fbc <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001fc0:	4802      	ldr	r0, [pc, #8]	@ (8001fcc <CAN1_RX0_IRQHandler+0x10>)
 8001fc2:	f002 f85a 	bl	800407a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001fc6:	bf00      	nop
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	20000130 	.word	0x20000130

08001fd0 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001fd4:	4802      	ldr	r0, [pc, #8]	@ (8001fe0 <CAN1_RX1_IRQHandler+0x10>)
 8001fd6:	f002 f850 	bl	800407a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001fda:	bf00      	nop
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	20000130 	.word	0x20000130

08001fe4 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001fe8:	4802      	ldr	r0, [pc, #8]	@ (8001ff4 <CAN1_SCE_IRQHandler+0x10>)
 8001fea:	f002 f846 	bl	800407a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8001fee:	bf00      	nop
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	20000130 	.word	0x20000130

08001ff8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001ffc:	4802      	ldr	r0, [pc, #8]	@ (8002008 <USART2_IRQHandler+0x10>)
 8001ffe:	f005 fa2d 	bl	800745c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002002:	bf00      	nop
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	20000200 	.word	0x20000200

0800200c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002010:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002014:	f003 fae0 	bl	80055d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002018:	bf00      	nop
 800201a:	bd80      	pop	{r7, pc}

0800201c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002020:	4803      	ldr	r0, [pc, #12]	@ (8002030 <TIM6_DAC_IRQHandler+0x14>)
 8002022:	f004 fed9 	bl	8006dd8 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8002026:	4803      	ldr	r0, [pc, #12]	@ (8002034 <TIM6_DAC_IRQHandler+0x18>)
 8002028:	f002 fc4c 	bl	80048c4 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800202c:	bf00      	nop
 800202e:	bd80      	pop	{r7, pc}
 8002030:	200001b4 	.word	0x200001b4
 8002034:	20000158 	.word	0x20000158

08002038 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b086      	sub	sp, #24
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002040:	4a14      	ldr	r2, [pc, #80]	@ (8002094 <_sbrk+0x5c>)
 8002042:	4b15      	ldr	r3, [pc, #84]	@ (8002098 <_sbrk+0x60>)
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800204c:	4b13      	ldr	r3, [pc, #76]	@ (800209c <_sbrk+0x64>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d102      	bne.n	800205a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002054:	4b11      	ldr	r3, [pc, #68]	@ (800209c <_sbrk+0x64>)
 8002056:	4a12      	ldr	r2, [pc, #72]	@ (80020a0 <_sbrk+0x68>)
 8002058:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800205a:	4b10      	ldr	r3, [pc, #64]	@ (800209c <_sbrk+0x64>)
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4413      	add	r3, r2
 8002062:	693a      	ldr	r2, [r7, #16]
 8002064:	429a      	cmp	r2, r3
 8002066:	d207      	bcs.n	8002078 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002068:	f006 fa42 	bl	80084f0 <__errno>
 800206c:	4603      	mov	r3, r0
 800206e:	220c      	movs	r2, #12
 8002070:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002072:	f04f 33ff 	mov.w	r3, #4294967295
 8002076:	e009      	b.n	800208c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002078:	4b08      	ldr	r3, [pc, #32]	@ (800209c <_sbrk+0x64>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800207e:	4b07      	ldr	r3, [pc, #28]	@ (800209c <_sbrk+0x64>)
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4413      	add	r3, r2
 8002086:	4a05      	ldr	r2, [pc, #20]	@ (800209c <_sbrk+0x64>)
 8002088:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800208a:	68fb      	ldr	r3, [r7, #12]
}
 800208c:	4618      	mov	r0, r3
 800208e:	3718      	adds	r7, #24
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	20018000 	.word	0x20018000
 8002098:	00000400 	.word	0x00000400
 800209c:	2000032c 	.word	0x2000032c
 80020a0:	20000480 	.word	0x20000480

080020a4 <SystemInit>:
/**
 * @brief  Setup the microcontroller system.
 * @retval None
 */

void SystemInit(void) {
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 20U) | (3UL << 22U)); /* set CP10 and CP11 Full Access */
 80020a8:	4b06      	ldr	r3, [pc, #24]	@ (80020c4 <SystemInit+0x20>)
 80020aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020ae:	4a05      	ldr	r2, [pc, #20]	@ (80020c4 <SystemInit+0x20>)
 80020b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80020b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80020b8:	bf00      	nop
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	e000ed00 	.word	0xe000ed00

080020c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80020c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002100 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80020cc:	f7ff ffea 	bl	80020a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020d0:	480c      	ldr	r0, [pc, #48]	@ (8002104 <LoopForever+0x6>)
  ldr r1, =_edata
 80020d2:	490d      	ldr	r1, [pc, #52]	@ (8002108 <LoopForever+0xa>)
  ldr r2, =_sidata
 80020d4:	4a0d      	ldr	r2, [pc, #52]	@ (800210c <LoopForever+0xe>)
  movs r3, #0
 80020d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020d8:	e002      	b.n	80020e0 <LoopCopyDataInit>

080020da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020de:	3304      	adds	r3, #4

080020e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020e4:	d3f9      	bcc.n	80020da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020e6:	4a0a      	ldr	r2, [pc, #40]	@ (8002110 <LoopForever+0x12>)
  ldr r4, =_ebss
 80020e8:	4c0a      	ldr	r4, [pc, #40]	@ (8002114 <LoopForever+0x16>)
  movs r3, #0
 80020ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020ec:	e001      	b.n	80020f2 <LoopFillZerobss>

080020ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020f0:	3204      	adds	r2, #4

080020f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020f4:	d3fb      	bcc.n	80020ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020f6:	f006 fa01 	bl	80084fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80020fa:	f7ff f89d 	bl	8001238 <main>

080020fe <LoopForever>:

LoopForever:
    b LoopForever
 80020fe:	e7fe      	b.n	80020fe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002100:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002104:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002108:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800210c:	08008fb4 	.word	0x08008fb4
  ldr r2, =_sbss
 8002110:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002114:	2000047c 	.word	0x2000047c

08002118 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002118:	e7fe      	b.n	8002118 <ADC1_2_IRQHandler>
	...

0800211c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002122:	2300      	movs	r3, #0
 8002124:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002126:	4b0c      	ldr	r3, [pc, #48]	@ (8002158 <HAL_Init+0x3c>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a0b      	ldr	r2, [pc, #44]	@ (8002158 <HAL_Init+0x3c>)
 800212c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002130:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002132:	2003      	movs	r0, #3
 8002134:	f002 fa96 	bl	8004664 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002138:	2000      	movs	r0, #0
 800213a:	f000 f80f 	bl	800215c <HAL_InitTick>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d002      	beq.n	800214a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	71fb      	strb	r3, [r7, #7]
 8002148:	e001      	b.n	800214e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800214a:	f7ff fc99 	bl	8001a80 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800214e:	79fb      	ldrb	r3, [r7, #7]
}
 8002150:	4618      	mov	r0, r3
 8002152:	3708      	adds	r7, #8
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	40022000 	.word	0x40022000

0800215c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002164:	2300      	movs	r3, #0
 8002166:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002168:	4b17      	ldr	r3, [pc, #92]	@ (80021c8 <HAL_InitTick+0x6c>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d023      	beq.n	80021b8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002170:	4b16      	ldr	r3, [pc, #88]	@ (80021cc <HAL_InitTick+0x70>)
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	4b14      	ldr	r3, [pc, #80]	@ (80021c8 <HAL_InitTick+0x6c>)
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	4619      	mov	r1, r3
 800217a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800217e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002182:	fbb2 f3f3 	udiv	r3, r2, r3
 8002186:	4618      	mov	r0, r3
 8002188:	f002 faa1 	bl	80046ce <HAL_SYSTICK_Config>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d10f      	bne.n	80021b2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2b0f      	cmp	r3, #15
 8002196:	d809      	bhi.n	80021ac <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002198:	2200      	movs	r2, #0
 800219a:	6879      	ldr	r1, [r7, #4]
 800219c:	f04f 30ff 	mov.w	r0, #4294967295
 80021a0:	f002 fa6b 	bl	800467a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80021a4:	4a0a      	ldr	r2, [pc, #40]	@ (80021d0 <HAL_InitTick+0x74>)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6013      	str	r3, [r2, #0]
 80021aa:	e007      	b.n	80021bc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	73fb      	strb	r3, [r7, #15]
 80021b0:	e004      	b.n	80021bc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	73fb      	strb	r3, [r7, #15]
 80021b6:	e001      	b.n	80021bc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80021bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3710      	adds	r7, #16
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	20000014 	.word	0x20000014
 80021cc:	2000000c 	.word	0x2000000c
 80021d0:	20000010 	.word	0x20000010

080021d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80021d8:	4b06      	ldr	r3, [pc, #24]	@ (80021f4 <HAL_IncTick+0x20>)
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	461a      	mov	r2, r3
 80021de:	4b06      	ldr	r3, [pc, #24]	@ (80021f8 <HAL_IncTick+0x24>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4413      	add	r3, r2
 80021e4:	4a04      	ldr	r2, [pc, #16]	@ (80021f8 <HAL_IncTick+0x24>)
 80021e6:	6013      	str	r3, [r2, #0]
}
 80021e8:	bf00      	nop
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	20000014 	.word	0x20000014
 80021f8:	20000330 	.word	0x20000330

080021fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002200:	4b03      	ldr	r3, [pc, #12]	@ (8002210 <HAL_GetTick+0x14>)
 8002202:	681b      	ldr	r3, [r3, #0]
}
 8002204:	4618      	mov	r0, r3
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	20000330 	.word	0x20000330

08002214 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800221c:	f7ff ffee 	bl	80021fc <HAL_GetTick>
 8002220:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800222c:	d005      	beq.n	800223a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800222e:	4b0a      	ldr	r3, [pc, #40]	@ (8002258 <HAL_Delay+0x44>)
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	461a      	mov	r2, r3
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	4413      	add	r3, r2
 8002238:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800223a:	bf00      	nop
 800223c:	f7ff ffde 	bl	80021fc <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	68fa      	ldr	r2, [r7, #12]
 8002248:	429a      	cmp	r2, r3
 800224a:	d8f7      	bhi.n	800223c <HAL_Delay+0x28>
  {
  }
}
 800224c:	bf00      	nop
 800224e:	bf00      	nop
 8002250:	3710      	adds	r7, #16
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	20000014 	.word	0x20000014

0800225c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	431a      	orrs	r2, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	609a      	str	r2, [r3, #8]
}
 8002276:	bf00      	nop
 8002278:	370c      	adds	r7, #12
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr

08002282 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002282:	b480      	push	{r7}
 8002284:	b083      	sub	sp, #12
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]
 800228a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	431a      	orrs	r2, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	609a      	str	r2, [r3, #8]
}
 800229c:	bf00      	nop
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b087      	sub	sp, #28
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	60f8      	str	r0, [r7, #12]
 80022cc:	60b9      	str	r1, [r7, #8]
 80022ce:	607a      	str	r2, [r7, #4]
 80022d0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	3360      	adds	r3, #96	@ 0x60
 80022d6:	461a      	mov	r2, r3
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	4413      	add	r3, r2
 80022de:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	4b08      	ldr	r3, [pc, #32]	@ (8002308 <LL_ADC_SetOffset+0x44>)
 80022e6:	4013      	ands	r3, r2
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80022ee:	683a      	ldr	r2, [r7, #0]
 80022f0:	430a      	orrs	r2, r1
 80022f2:	4313      	orrs	r3, r2
 80022f4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80022fc:	bf00      	nop
 80022fe:	371c      	adds	r7, #28
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr
 8002308:	03fff000 	.word	0x03fff000

0800230c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800230c:	b480      	push	{r7}
 800230e:	b085      	sub	sp, #20
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	3360      	adds	r3, #96	@ 0x60
 800231a:	461a      	mov	r2, r3
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	4413      	add	r3, r2
 8002322:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800232c:	4618      	mov	r0, r3
 800232e:	3714      	adds	r7, #20
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002338:	b480      	push	{r7}
 800233a:	b087      	sub	sp, #28
 800233c:	af00      	add	r7, sp, #0
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	3360      	adds	r3, #96	@ 0x60
 8002348:	461a      	mov	r2, r3
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	4413      	add	r3, r2
 8002350:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	431a      	orrs	r2, r3
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002362:	bf00      	nop
 8002364:	371c      	adds	r7, #28
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr

0800236e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800236e:	b480      	push	{r7}
 8002370:	b083      	sub	sp, #12
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800237e:	2b00      	cmp	r3, #0
 8002380:	d101      	bne.n	8002386 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002382:	2301      	movs	r3, #1
 8002384:	e000      	b.n	8002388 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002386:	2300      	movs	r3, #0
}
 8002388:	4618      	mov	r0, r3
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002394:	b480      	push	{r7}
 8002396:	b087      	sub	sp, #28
 8002398:	af00      	add	r7, sp, #0
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	60b9      	str	r1, [r7, #8]
 800239e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	3330      	adds	r3, #48	@ 0x30
 80023a4:	461a      	mov	r2, r3
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	0a1b      	lsrs	r3, r3, #8
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	f003 030c 	and.w	r3, r3, #12
 80023b0:	4413      	add	r3, r2
 80023b2:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	f003 031f 	and.w	r3, r3, #31
 80023be:	211f      	movs	r1, #31
 80023c0:	fa01 f303 	lsl.w	r3, r1, r3
 80023c4:	43db      	mvns	r3, r3
 80023c6:	401a      	ands	r2, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	0e9b      	lsrs	r3, r3, #26
 80023cc:	f003 011f 	and.w	r1, r3, #31
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	f003 031f 	and.w	r3, r3, #31
 80023d6:	fa01 f303 	lsl.w	r3, r1, r3
 80023da:	431a      	orrs	r2, r3
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80023e0:	bf00      	nop
 80023e2:	371c      	adds	r7, #28
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b087      	sub	sp, #28
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	60b9      	str	r1, [r7, #8]
 80023f6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	3314      	adds	r3, #20
 80023fc:	461a      	mov	r2, r3
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	0e5b      	lsrs	r3, r3, #25
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	f003 0304 	and.w	r3, r3, #4
 8002408:	4413      	add	r3, r2
 800240a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	0d1b      	lsrs	r3, r3, #20
 8002414:	f003 031f 	and.w	r3, r3, #31
 8002418:	2107      	movs	r1, #7
 800241a:	fa01 f303 	lsl.w	r3, r1, r3
 800241e:	43db      	mvns	r3, r3
 8002420:	401a      	ands	r2, r3
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	0d1b      	lsrs	r3, r3, #20
 8002426:	f003 031f 	and.w	r3, r3, #31
 800242a:	6879      	ldr	r1, [r7, #4]
 800242c:	fa01 f303 	lsl.w	r3, r1, r3
 8002430:	431a      	orrs	r2, r3
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002436:	bf00      	nop
 8002438:	371c      	adds	r7, #28
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
	...

08002444 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002444:	b480      	push	{r7}
 8002446:	b085      	sub	sp, #20
 8002448:	af00      	add	r7, sp, #0
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	60b9      	str	r1, [r7, #8]
 800244e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800245c:	43db      	mvns	r3, r3
 800245e:	401a      	ands	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f003 0318 	and.w	r3, r3, #24
 8002466:	4908      	ldr	r1, [pc, #32]	@ (8002488 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002468:	40d9      	lsrs	r1, r3
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	400b      	ands	r3, r1
 800246e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002472:	431a      	orrs	r2, r3
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800247a:	bf00      	nop
 800247c:	3714      	adds	r7, #20
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	0007ffff 	.word	0x0007ffff

0800248c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	f003 031f 	and.w	r3, r3, #31
}
 800249c:	4618      	mov	r0, r3
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80024b8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	6093      	str	r3, [r2, #8]
}
 80024c0:	bf00      	nop
 80024c2:	370c      	adds	r7, #12
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr

080024cc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80024dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80024e0:	d101      	bne.n	80024e6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80024e2:	2301      	movs	r3, #1
 80024e4:	e000      	b.n	80024e8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	370c      	adds	r7, #12
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr

080024f4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002504:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002508:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002510:	bf00      	nop
 8002512:	370c      	adds	r7, #12
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr

0800251c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800252c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002530:	d101      	bne.n	8002536 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002532:	2301      	movs	r3, #1
 8002534:	e000      	b.n	8002538 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002536:	2300      	movs	r3, #0
}
 8002538:	4618      	mov	r0, r3
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002554:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002558:	f043 0201 	orr.w	r2, r3, #1
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002560:	bf00      	nop
 8002562:	370c      	adds	r7, #12
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr

0800256c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800257c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002580:	f043 0202 	orr.w	r2, r3, #2
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002588:	bf00      	nop
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f003 0301 	and.w	r3, r3, #1
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d101      	bne.n	80025ac <LL_ADC_IsEnabled+0x18>
 80025a8:	2301      	movs	r3, #1
 80025aa:	e000      	b.n	80025ae <LL_ADC_IsEnabled+0x1a>
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	370c      	adds	r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr

080025ba <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80025ba:	b480      	push	{r7}
 80025bc:	b083      	sub	sp, #12
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d101      	bne.n	80025d2 <LL_ADC_IsDisableOngoing+0x18>
 80025ce:	2301      	movs	r3, #1
 80025d0:	e000      	b.n	80025d4 <LL_ADC_IsDisableOngoing+0x1a>
 80025d2:	2300      	movs	r3, #0
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80025f0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80025f4:	f043 0204 	orr.w	r2, r3, #4
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80025fc:	bf00      	nop
 80025fe:	370c      	adds	r7, #12
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr

08002608 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f003 0304 	and.w	r3, r3, #4
 8002618:	2b04      	cmp	r3, #4
 800261a:	d101      	bne.n	8002620 <LL_ADC_REG_IsConversionOngoing+0x18>
 800261c:	2301      	movs	r3, #1
 800261e:	e000      	b.n	8002622 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002620:	2300      	movs	r3, #0
}
 8002622:	4618      	mov	r0, r3
 8002624:	370c      	adds	r7, #12
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr

0800262e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800262e:	b480      	push	{r7}
 8002630:	b083      	sub	sp, #12
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f003 0308 	and.w	r3, r3, #8
 800263e:	2b08      	cmp	r3, #8
 8002640:	d101      	bne.n	8002646 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002642:	2301      	movs	r3, #1
 8002644:	e000      	b.n	8002648 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002646:	2300      	movs	r3, #0
}
 8002648:	4618      	mov	r0, r3
 800264a:	370c      	adds	r7, #12
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr

08002654 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002654:	b590      	push	{r4, r7, lr}
 8002656:	b089      	sub	sp, #36	@ 0x24
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800265c:	2300      	movs	r3, #0
 800265e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002660:	2300      	movs	r3, #0
 8002662:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d101      	bne.n	800266e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e130      	b.n	80028d0 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002678:	2b00      	cmp	r3, #0
 800267a:	d109      	bne.n	8002690 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f7ff fa23 	bl	8001ac8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4618      	mov	r0, r3
 8002696:	f7ff ff19 	bl	80024cc <LL_ADC_IsDeepPowerDownEnabled>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d004      	beq.n	80026aa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7ff feff 	bl	80024a8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7ff ff34 	bl	800251c <LL_ADC_IsInternalRegulatorEnabled>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d115      	bne.n	80026e6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4618      	mov	r0, r3
 80026c0:	f7ff ff18 	bl	80024f4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80026c4:	4b84      	ldr	r3, [pc, #528]	@ (80028d8 <HAL_ADC_Init+0x284>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	099b      	lsrs	r3, r3, #6
 80026ca:	4a84      	ldr	r2, [pc, #528]	@ (80028dc <HAL_ADC_Init+0x288>)
 80026cc:	fba2 2303 	umull	r2, r3, r2, r3
 80026d0:	099b      	lsrs	r3, r3, #6
 80026d2:	3301      	adds	r3, #1
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80026d8:	e002      	b.n	80026e0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	3b01      	subs	r3, #1
 80026de:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d1f9      	bne.n	80026da <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7ff ff16 	bl	800251c <LL_ADC_IsInternalRegulatorEnabled>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d10d      	bne.n	8002712 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026fa:	f043 0210 	orr.w	r2, r3, #16
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002706:	f043 0201 	orr.w	r2, r3, #1
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4618      	mov	r0, r3
 8002718:	f7ff ff76 	bl	8002608 <LL_ADC_REG_IsConversionOngoing>
 800271c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002722:	f003 0310 	and.w	r3, r3, #16
 8002726:	2b00      	cmp	r3, #0
 8002728:	f040 80c9 	bne.w	80028be <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	2b00      	cmp	r3, #0
 8002730:	f040 80c5 	bne.w	80028be <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002738:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800273c:	f043 0202 	orr.w	r2, r3, #2
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4618      	mov	r0, r3
 800274a:	f7ff ff23 	bl	8002594 <LL_ADC_IsEnabled>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d115      	bne.n	8002780 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002754:	4862      	ldr	r0, [pc, #392]	@ (80028e0 <HAL_ADC_Init+0x28c>)
 8002756:	f7ff ff1d 	bl	8002594 <LL_ADC_IsEnabled>
 800275a:	4604      	mov	r4, r0
 800275c:	4861      	ldr	r0, [pc, #388]	@ (80028e4 <HAL_ADC_Init+0x290>)
 800275e:	f7ff ff19 	bl	8002594 <LL_ADC_IsEnabled>
 8002762:	4603      	mov	r3, r0
 8002764:	431c      	orrs	r4, r3
 8002766:	4860      	ldr	r0, [pc, #384]	@ (80028e8 <HAL_ADC_Init+0x294>)
 8002768:	f7ff ff14 	bl	8002594 <LL_ADC_IsEnabled>
 800276c:	4603      	mov	r3, r0
 800276e:	4323      	orrs	r3, r4
 8002770:	2b00      	cmp	r3, #0
 8002772:	d105      	bne.n	8002780 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	4619      	mov	r1, r3
 800277a:	485c      	ldr	r0, [pc, #368]	@ (80028ec <HAL_ADC_Init+0x298>)
 800277c:	f7ff fd6e 	bl	800225c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	7e5b      	ldrb	r3, [r3, #25]
 8002784:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800278a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002790:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002796:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800279e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80027a0:	4313      	orrs	r3, r2
 80027a2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d106      	bne.n	80027bc <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027b2:	3b01      	subs	r3, #1
 80027b4:	045b      	lsls	r3, r3, #17
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d009      	beq.n	80027d8 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027c8:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027d0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80027d2:	69ba      	ldr	r2, [r7, #24]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	68da      	ldr	r2, [r3, #12]
 80027de:	4b44      	ldr	r3, [pc, #272]	@ (80028f0 <HAL_ADC_Init+0x29c>)
 80027e0:	4013      	ands	r3, r2
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	6812      	ldr	r2, [r2, #0]
 80027e6:	69b9      	ldr	r1, [r7, #24]
 80027e8:	430b      	orrs	r3, r1
 80027ea:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7ff ff1c 	bl	800262e <LL_ADC_INJ_IsConversionOngoing>
 80027f6:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d13d      	bne.n	800287a <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d13a      	bne.n	800287a <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002808:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002810:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002812:	4313      	orrs	r3, r2
 8002814:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002820:	f023 0302 	bic.w	r3, r3, #2
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	6812      	ldr	r2, [r2, #0]
 8002828:	69b9      	ldr	r1, [r7, #24]
 800282a:	430b      	orrs	r3, r1
 800282c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002834:	2b01      	cmp	r3, #1
 8002836:	d118      	bne.n	800286a <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002842:	f023 0304 	bic.w	r3, r3, #4
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800284e:	4311      	orrs	r1, r2
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002854:	4311      	orrs	r1, r2
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800285a:	430a      	orrs	r2, r1
 800285c:	431a      	orrs	r2, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f042 0201 	orr.w	r2, r2, #1
 8002866:	611a      	str	r2, [r3, #16]
 8002868:	e007      	b.n	800287a <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	691a      	ldr	r2, [r3, #16]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f022 0201 	bic.w	r2, r2, #1
 8002878:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d10c      	bne.n	800289c <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002888:	f023 010f 	bic.w	r1, r3, #15
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	69db      	ldr	r3, [r3, #28]
 8002890:	1e5a      	subs	r2, r3, #1
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	430a      	orrs	r2, r1
 8002898:	631a      	str	r2, [r3, #48]	@ 0x30
 800289a:	e007      	b.n	80028ac <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f022 020f 	bic.w	r2, r2, #15
 80028aa:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028b0:	f023 0303 	bic.w	r3, r3, #3
 80028b4:	f043 0201 	orr.w	r2, r3, #1
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	655a      	str	r2, [r3, #84]	@ 0x54
 80028bc:	e007      	b.n	80028ce <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028c2:	f043 0210 	orr.w	r2, r3, #16
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80028ce:	7ffb      	ldrb	r3, [r7, #31]
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3724      	adds	r7, #36	@ 0x24
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd90      	pop	{r4, r7, pc}
 80028d8:	2000000c 	.word	0x2000000c
 80028dc:	053e2d63 	.word	0x053e2d63
 80028e0:	50040000 	.word	0x50040000
 80028e4:	50040100 	.word	0x50040100
 80028e8:	50040200 	.word	0x50040200
 80028ec:	50040300 	.word	0x50040300
 80028f0:	fff0c007 	.word	0xfff0c007

080028f4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b086      	sub	sp, #24
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002900:	4853      	ldr	r0, [pc, #332]	@ (8002a50 <HAL_ADC_Start_DMA+0x15c>)
 8002902:	f7ff fdc3 	bl	800248c <LL_ADC_GetMultimode>
 8002906:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4618      	mov	r0, r3
 800290e:	f7ff fe7b 	bl	8002608 <LL_ADC_REG_IsConversionOngoing>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	f040 8093 	bne.w	8002a40 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002920:	2b01      	cmp	r3, #1
 8002922:	d101      	bne.n	8002928 <HAL_ADC_Start_DMA+0x34>
 8002924:	2302      	movs	r3, #2
 8002926:	e08e      	b.n	8002a46 <HAL_ADC_Start_DMA+0x152>
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a47      	ldr	r2, [pc, #284]	@ (8002a54 <HAL_ADC_Start_DMA+0x160>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d008      	beq.n	800294c <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d005      	beq.n	800294c <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	2b05      	cmp	r3, #5
 8002944:	d002      	beq.n	800294c <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	2b09      	cmp	r3, #9
 800294a:	d172      	bne.n	8002a32 <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800294c:	68f8      	ldr	r0, [r7, #12]
 800294e:	f000 fc93 	bl	8003278 <ADC_Enable>
 8002952:	4603      	mov	r3, r0
 8002954:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002956:	7dfb      	ldrb	r3, [r7, #23]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d165      	bne.n	8002a28 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002960:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002964:	f023 0301 	bic.w	r3, r3, #1
 8002968:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a38      	ldr	r2, [pc, #224]	@ (8002a58 <HAL_ADC_Start_DMA+0x164>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d002      	beq.n	8002980 <HAL_ADC_Start_DMA+0x8c>
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	e000      	b.n	8002982 <HAL_ADC_Start_DMA+0x8e>
 8002980:	4b36      	ldr	r3, [pc, #216]	@ (8002a5c <HAL_ADC_Start_DMA+0x168>)
 8002982:	68fa      	ldr	r2, [r7, #12]
 8002984:	6812      	ldr	r2, [r2, #0]
 8002986:	4293      	cmp	r3, r2
 8002988:	d002      	beq.n	8002990 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d105      	bne.n	800299c <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002994:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	655a      	str	r2, [r3, #84]	@ 0x54
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d006      	beq.n	80029b6 <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029ac:	f023 0206 	bic.w	r2, r3, #6
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	659a      	str	r2, [r3, #88]	@ 0x58
 80029b4:	e002      	b.n	80029bc <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2200      	movs	r2, #0
 80029ba:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029c0:	4a27      	ldr	r2, [pc, #156]	@ (8002a60 <HAL_ADC_Start_DMA+0x16c>)
 80029c2:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029c8:	4a26      	ldr	r2, [pc, #152]	@ (8002a64 <HAL_ADC_Start_DMA+0x170>)
 80029ca:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029d0:	4a25      	ldr	r2, [pc, #148]	@ (8002a68 <HAL_ADC_Start_DMA+0x174>)
 80029d2:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	221c      	movs	r2, #28
 80029da:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2200      	movs	r2, #0
 80029e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	685a      	ldr	r2, [r3, #4]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f042 0210 	orr.w	r2, r2, #16
 80029f2:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	68da      	ldr	r2, [r3, #12]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f042 0201 	orr.w	r2, r2, #1
 8002a02:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	3340      	adds	r3, #64	@ 0x40
 8002a0e:	4619      	mov	r1, r3
 8002a10:	68ba      	ldr	r2, [r7, #8]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f002 fa60 	bl	8004ed8 <HAL_DMA_Start_IT>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7ff fddd 	bl	80025e0 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002a26:	e00d      	b.n	8002a44 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8002a30:	e008      	b.n	8002a44 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002a3e:	e001      	b.n	8002a44 <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002a40:	2302      	movs	r3, #2
 8002a42:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002a44:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3718      	adds	r7, #24
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	50040300 	.word	0x50040300
 8002a54:	50040200 	.word	0x50040200
 8002a58:	50040100 	.word	0x50040100
 8002a5c:	50040000 	.word	0x50040000
 8002a60:	08003443 	.word	0x08003443
 8002a64:	0800351b 	.word	0x0800351b
 8002a68:	08003537 	.word	0x08003537

08002a6c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002a74:	bf00      	nop
 8002a76:	370c      	adds	r7, #12
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr

08002a80 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002a88:	bf00      	nop
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b0b6      	sub	sp, #216	@ 0xd8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d101      	bne.n	8002ab6 <HAL_ADC_ConfigChannel+0x22>
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	e3c9      	b.n	800324a <HAL_ADC_ConfigChannel+0x7b6>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2201      	movs	r2, #1
 8002aba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7ff fda0 	bl	8002608 <LL_ADC_REG_IsConversionOngoing>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	f040 83aa 	bne.w	8003224 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	2b05      	cmp	r3, #5
 8002ade:	d824      	bhi.n	8002b2a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	3b02      	subs	r3, #2
 8002ae6:	2b03      	cmp	r3, #3
 8002ae8:	d81b      	bhi.n	8002b22 <HAL_ADC_ConfigChannel+0x8e>
 8002aea:	a201      	add	r2, pc, #4	@ (adr r2, 8002af0 <HAL_ADC_ConfigChannel+0x5c>)
 8002aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002af0:	08002b01 	.word	0x08002b01
 8002af4:	08002b09 	.word	0x08002b09
 8002af8:	08002b11 	.word	0x08002b11
 8002afc:	08002b19 	.word	0x08002b19
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002b00:	230c      	movs	r3, #12
 8002b02:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002b06:	e010      	b.n	8002b2a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002b08:	2312      	movs	r3, #18
 8002b0a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002b0e:	e00c      	b.n	8002b2a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002b10:	2318      	movs	r3, #24
 8002b12:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002b16:	e008      	b.n	8002b2a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002b18:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002b1c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002b20:	e003      	b.n	8002b2a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002b22:	2306      	movs	r3, #6
 8002b24:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002b28:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6818      	ldr	r0, [r3, #0]
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	461a      	mov	r2, r3
 8002b34:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002b38:	f7ff fc2c 	bl	8002394 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7ff fd61 	bl	8002608 <LL_ADC_REG_IsConversionOngoing>
 8002b46:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7ff fd6d 	bl	800262e <LL_ADC_INJ_IsConversionOngoing>
 8002b54:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b58:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	f040 81a4 	bne.w	8002eaa <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b62:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	f040 819f 	bne.w	8002eaa <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6818      	ldr	r0, [r3, #0]
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	6819      	ldr	r1, [r3, #0]
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	461a      	mov	r2, r3
 8002b7a:	f7ff fc37 	bl	80023ec <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	695a      	ldr	r2, [r3, #20]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	08db      	lsrs	r3, r3, #3
 8002b8a:	f003 0303 	and.w	r3, r3, #3
 8002b8e:	005b      	lsls	r3, r3, #1
 8002b90:	fa02 f303 	lsl.w	r3, r2, r3
 8002b94:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	691b      	ldr	r3, [r3, #16]
 8002b9c:	2b04      	cmp	r3, #4
 8002b9e:	d00a      	beq.n	8002bb6 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6818      	ldr	r0, [r3, #0]
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	6919      	ldr	r1, [r3, #16]
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002bb0:	f7ff fb88 	bl	80022c4 <LL_ADC_SetOffset>
 8002bb4:	e179      	b.n	8002eaa <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2100      	movs	r1, #0
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f7ff fba5 	bl	800230c <LL_ADC_GetOffsetChannel>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d10a      	bne.n	8002be2 <HAL_ADC_ConfigChannel+0x14e>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2100      	movs	r1, #0
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f7ff fb9a 	bl	800230c <LL_ADC_GetOffsetChannel>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	0e9b      	lsrs	r3, r3, #26
 8002bdc:	f003 021f 	and.w	r2, r3, #31
 8002be0:	e01e      	b.n	8002c20 <HAL_ADC_ConfigChannel+0x18c>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2100      	movs	r1, #0
 8002be8:	4618      	mov	r0, r3
 8002bea:	f7ff fb8f 	bl	800230c <LL_ADC_GetOffsetChannel>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002bf8:	fa93 f3a3 	rbit	r3, r3
 8002bfc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002c00:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002c04:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002c08:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d101      	bne.n	8002c14 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002c10:	2320      	movs	r3, #32
 8002c12:	e004      	b.n	8002c1e <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002c14:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002c18:	fab3 f383 	clz	r3, r3
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d105      	bne.n	8002c38 <HAL_ADC_ConfigChannel+0x1a4>
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	0e9b      	lsrs	r3, r3, #26
 8002c32:	f003 031f 	and.w	r3, r3, #31
 8002c36:	e018      	b.n	8002c6a <HAL_ADC_ConfigChannel+0x1d6>
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c44:	fa93 f3a3 	rbit	r3, r3
 8002c48:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002c4c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002c50:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002c54:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d101      	bne.n	8002c60 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002c5c:	2320      	movs	r3, #32
 8002c5e:	e004      	b.n	8002c6a <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002c60:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002c64:	fab3 f383 	clz	r3, r3
 8002c68:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d106      	bne.n	8002c7c <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	2200      	movs	r2, #0
 8002c74:	2100      	movs	r1, #0
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7ff fb5e 	bl	8002338 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2101      	movs	r1, #1
 8002c82:	4618      	mov	r0, r3
 8002c84:	f7ff fb42 	bl	800230c <LL_ADC_GetOffsetChannel>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d10a      	bne.n	8002ca8 <HAL_ADC_ConfigChannel+0x214>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2101      	movs	r1, #1
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7ff fb37 	bl	800230c <LL_ADC_GetOffsetChannel>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	0e9b      	lsrs	r3, r3, #26
 8002ca2:	f003 021f 	and.w	r2, r3, #31
 8002ca6:	e01e      	b.n	8002ce6 <HAL_ADC_ConfigChannel+0x252>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2101      	movs	r1, #1
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7ff fb2c 	bl	800230c <LL_ADC_GetOffsetChannel>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002cbe:	fa93 f3a3 	rbit	r3, r3
 8002cc2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002cc6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002cca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002cce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d101      	bne.n	8002cda <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002cd6:	2320      	movs	r3, #32
 8002cd8:	e004      	b.n	8002ce4 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002cda:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002cde:	fab3 f383 	clz	r3, r3
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d105      	bne.n	8002cfe <HAL_ADC_ConfigChannel+0x26a>
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	0e9b      	lsrs	r3, r3, #26
 8002cf8:	f003 031f 	and.w	r3, r3, #31
 8002cfc:	e018      	b.n	8002d30 <HAL_ADC_ConfigChannel+0x29c>
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d06:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002d0a:	fa93 f3a3 	rbit	r3, r3
 8002d0e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002d12:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002d16:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002d1a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d101      	bne.n	8002d26 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002d22:	2320      	movs	r3, #32
 8002d24:	e004      	b.n	8002d30 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002d26:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002d2a:	fab3 f383 	clz	r3, r3
 8002d2e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d106      	bne.n	8002d42 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	2101      	movs	r1, #1
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7ff fafb 	bl	8002338 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2102      	movs	r1, #2
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7ff fadf 	bl	800230c <LL_ADC_GetOffsetChannel>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d10a      	bne.n	8002d6e <HAL_ADC_ConfigChannel+0x2da>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2102      	movs	r1, #2
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7ff fad4 	bl	800230c <LL_ADC_GetOffsetChannel>
 8002d64:	4603      	mov	r3, r0
 8002d66:	0e9b      	lsrs	r3, r3, #26
 8002d68:	f003 021f 	and.w	r2, r3, #31
 8002d6c:	e01e      	b.n	8002dac <HAL_ADC_ConfigChannel+0x318>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2102      	movs	r1, #2
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7ff fac9 	bl	800230c <LL_ADC_GetOffsetChannel>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d80:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002d84:	fa93 f3a3 	rbit	r3, r3
 8002d88:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002d8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002d90:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002d94:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d101      	bne.n	8002da0 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002d9c:	2320      	movs	r3, #32
 8002d9e:	e004      	b.n	8002daa <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002da0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002da4:	fab3 f383 	clz	r3, r3
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d105      	bne.n	8002dc4 <HAL_ADC_ConfigChannel+0x330>
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	0e9b      	lsrs	r3, r3, #26
 8002dbe:	f003 031f 	and.w	r3, r3, #31
 8002dc2:	e014      	b.n	8002dee <HAL_ADC_ConfigChannel+0x35a>
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002dcc:	fa93 f3a3 	rbit	r3, r3
 8002dd0:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002dd2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002dd4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002dd8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d101      	bne.n	8002de4 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002de0:	2320      	movs	r3, #32
 8002de2:	e004      	b.n	8002dee <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002de4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002de8:	fab3 f383 	clz	r3, r3
 8002dec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d106      	bne.n	8002e00 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2200      	movs	r2, #0
 8002df8:	2102      	movs	r1, #2
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f7ff fa9c 	bl	8002338 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2103      	movs	r1, #3
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7ff fa80 	bl	800230c <LL_ADC_GetOffsetChannel>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d10a      	bne.n	8002e2c <HAL_ADC_ConfigChannel+0x398>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2103      	movs	r1, #3
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7ff fa75 	bl	800230c <LL_ADC_GetOffsetChannel>
 8002e22:	4603      	mov	r3, r0
 8002e24:	0e9b      	lsrs	r3, r3, #26
 8002e26:	f003 021f 	and.w	r2, r3, #31
 8002e2a:	e017      	b.n	8002e5c <HAL_ADC_ConfigChannel+0x3c8>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2103      	movs	r1, #3
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7ff fa6a 	bl	800230c <LL_ADC_GetOffsetChannel>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e3c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002e3e:	fa93 f3a3 	rbit	r3, r3
 8002e42:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002e44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e46:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002e48:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d101      	bne.n	8002e52 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002e4e:	2320      	movs	r3, #32
 8002e50:	e003      	b.n	8002e5a <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002e52:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e54:	fab3 f383 	clz	r3, r3
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d105      	bne.n	8002e74 <HAL_ADC_ConfigChannel+0x3e0>
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	0e9b      	lsrs	r3, r3, #26
 8002e6e:	f003 031f 	and.w	r3, r3, #31
 8002e72:	e011      	b.n	8002e98 <HAL_ADC_ConfigChannel+0x404>
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e7a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002e7c:	fa93 f3a3 	rbit	r3, r3
 8002e80:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002e82:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002e84:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002e86:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d101      	bne.n	8002e90 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002e8c:	2320      	movs	r3, #32
 8002e8e:	e003      	b.n	8002e98 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002e90:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002e92:	fab3 f383 	clz	r3, r3
 8002e96:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d106      	bne.n	8002eaa <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	2103      	movs	r1, #3
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7ff fa47 	bl	8002338 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7ff fb70 	bl	8002594 <LL_ADC_IsEnabled>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	f040 8140 	bne.w	800313c <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6818      	ldr	r0, [r3, #0]
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	6819      	ldr	r1, [r3, #0]
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	461a      	mov	r2, r3
 8002eca:	f7ff fabb 	bl	8002444 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	4a8f      	ldr	r2, [pc, #572]	@ (8003110 <HAL_ADC_ConfigChannel+0x67c>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	f040 8131 	bne.w	800313c <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d10b      	bne.n	8002f02 <HAL_ADC_ConfigChannel+0x46e>
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	0e9b      	lsrs	r3, r3, #26
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	f003 031f 	and.w	r3, r3, #31
 8002ef6:	2b09      	cmp	r3, #9
 8002ef8:	bf94      	ite	ls
 8002efa:	2301      	movls	r3, #1
 8002efc:	2300      	movhi	r3, #0
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	e019      	b.n	8002f36 <HAL_ADC_ConfigChannel+0x4a2>
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f08:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f0a:	fa93 f3a3 	rbit	r3, r3
 8002f0e:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002f10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f12:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002f14:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d101      	bne.n	8002f1e <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002f1a:	2320      	movs	r3, #32
 8002f1c:	e003      	b.n	8002f26 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002f1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f20:	fab3 f383 	clz	r3, r3
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	3301      	adds	r3, #1
 8002f28:	f003 031f 	and.w	r3, r3, #31
 8002f2c:	2b09      	cmp	r3, #9
 8002f2e:	bf94      	ite	ls
 8002f30:	2301      	movls	r3, #1
 8002f32:	2300      	movhi	r3, #0
 8002f34:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d079      	beq.n	800302e <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d107      	bne.n	8002f56 <HAL_ADC_ConfigChannel+0x4c2>
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	0e9b      	lsrs	r3, r3, #26
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	069b      	lsls	r3, r3, #26
 8002f50:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f54:	e015      	b.n	8002f82 <HAL_ADC_ConfigChannel+0x4ee>
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f5e:	fa93 f3a3 	rbit	r3, r3
 8002f62:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002f64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f66:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002f68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d101      	bne.n	8002f72 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002f6e:	2320      	movs	r3, #32
 8002f70:	e003      	b.n	8002f7a <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002f72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f74:	fab3 f383 	clz	r3, r3
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	069b      	lsls	r3, r3, #26
 8002f7e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d109      	bne.n	8002fa2 <HAL_ADC_ConfigChannel+0x50e>
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	0e9b      	lsrs	r3, r3, #26
 8002f94:	3301      	adds	r3, #1
 8002f96:	f003 031f 	and.w	r3, r3, #31
 8002f9a:	2101      	movs	r1, #1
 8002f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa0:	e017      	b.n	8002fd2 <HAL_ADC_ConfigChannel+0x53e>
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002faa:	fa93 f3a3 	rbit	r3, r3
 8002fae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002fb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fb2:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002fb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d101      	bne.n	8002fbe <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002fba:	2320      	movs	r3, #32
 8002fbc:	e003      	b.n	8002fc6 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002fbe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002fc0:	fab3 f383 	clz	r3, r3
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	f003 031f 	and.w	r3, r3, #31
 8002fcc:	2101      	movs	r1, #1
 8002fce:	fa01 f303 	lsl.w	r3, r1, r3
 8002fd2:	ea42 0103 	orr.w	r1, r2, r3
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d10a      	bne.n	8002ff8 <HAL_ADC_ConfigChannel+0x564>
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	0e9b      	lsrs	r3, r3, #26
 8002fe8:	3301      	adds	r3, #1
 8002fea:	f003 021f 	and.w	r2, r3, #31
 8002fee:	4613      	mov	r3, r2
 8002ff0:	005b      	lsls	r3, r3, #1
 8002ff2:	4413      	add	r3, r2
 8002ff4:	051b      	lsls	r3, r3, #20
 8002ff6:	e018      	b.n	800302a <HAL_ADC_ConfigChannel+0x596>
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ffe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003000:	fa93 f3a3 	rbit	r3, r3
 8003004:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8003006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003008:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800300a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800300c:	2b00      	cmp	r3, #0
 800300e:	d101      	bne.n	8003014 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8003010:	2320      	movs	r3, #32
 8003012:	e003      	b.n	800301c <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8003014:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003016:	fab3 f383 	clz	r3, r3
 800301a:	b2db      	uxtb	r3, r3
 800301c:	3301      	adds	r3, #1
 800301e:	f003 021f 	and.w	r2, r3, #31
 8003022:	4613      	mov	r3, r2
 8003024:	005b      	lsls	r3, r3, #1
 8003026:	4413      	add	r3, r2
 8003028:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800302a:	430b      	orrs	r3, r1
 800302c:	e081      	b.n	8003132 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003036:	2b00      	cmp	r3, #0
 8003038:	d107      	bne.n	800304a <HAL_ADC_ConfigChannel+0x5b6>
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	0e9b      	lsrs	r3, r3, #26
 8003040:	3301      	adds	r3, #1
 8003042:	069b      	lsls	r3, r3, #26
 8003044:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003048:	e015      	b.n	8003076 <HAL_ADC_ConfigChannel+0x5e2>
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003052:	fa93 f3a3 	rbit	r3, r3
 8003056:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8003058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800305a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800305c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800305e:	2b00      	cmp	r3, #0
 8003060:	d101      	bne.n	8003066 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8003062:	2320      	movs	r3, #32
 8003064:	e003      	b.n	800306e <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8003066:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003068:	fab3 f383 	clz	r3, r3
 800306c:	b2db      	uxtb	r3, r3
 800306e:	3301      	adds	r3, #1
 8003070:	069b      	lsls	r3, r3, #26
 8003072:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800307e:	2b00      	cmp	r3, #0
 8003080:	d109      	bne.n	8003096 <HAL_ADC_ConfigChannel+0x602>
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	0e9b      	lsrs	r3, r3, #26
 8003088:	3301      	adds	r3, #1
 800308a:	f003 031f 	and.w	r3, r3, #31
 800308e:	2101      	movs	r1, #1
 8003090:	fa01 f303 	lsl.w	r3, r1, r3
 8003094:	e017      	b.n	80030c6 <HAL_ADC_ConfigChannel+0x632>
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	fa93 f3a3 	rbit	r3, r3
 80030a2:	61bb      	str	r3, [r7, #24]
  return result;
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80030a8:	6a3b      	ldr	r3, [r7, #32]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d101      	bne.n	80030b2 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80030ae:	2320      	movs	r3, #32
 80030b0:	e003      	b.n	80030ba <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80030b2:	6a3b      	ldr	r3, [r7, #32]
 80030b4:	fab3 f383 	clz	r3, r3
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	3301      	adds	r3, #1
 80030bc:	f003 031f 	and.w	r3, r3, #31
 80030c0:	2101      	movs	r1, #1
 80030c2:	fa01 f303 	lsl.w	r3, r1, r3
 80030c6:	ea42 0103 	orr.w	r1, r2, r3
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d10d      	bne.n	80030f2 <HAL_ADC_ConfigChannel+0x65e>
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	0e9b      	lsrs	r3, r3, #26
 80030dc:	3301      	adds	r3, #1
 80030de:	f003 021f 	and.w	r2, r3, #31
 80030e2:	4613      	mov	r3, r2
 80030e4:	005b      	lsls	r3, r3, #1
 80030e6:	4413      	add	r3, r2
 80030e8:	3b1e      	subs	r3, #30
 80030ea:	051b      	lsls	r3, r3, #20
 80030ec:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80030f0:	e01e      	b.n	8003130 <HAL_ADC_ConfigChannel+0x69c>
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	fa93 f3a3 	rbit	r3, r3
 80030fe:	60fb      	str	r3, [r7, #12]
  return result;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d104      	bne.n	8003114 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800310a:	2320      	movs	r3, #32
 800310c:	e006      	b.n	800311c <HAL_ADC_ConfigChannel+0x688>
 800310e:	bf00      	nop
 8003110:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	fab3 f383 	clz	r3, r3
 800311a:	b2db      	uxtb	r3, r3
 800311c:	3301      	adds	r3, #1
 800311e:	f003 021f 	and.w	r2, r3, #31
 8003122:	4613      	mov	r3, r2
 8003124:	005b      	lsls	r3, r3, #1
 8003126:	4413      	add	r3, r2
 8003128:	3b1e      	subs	r3, #30
 800312a:	051b      	lsls	r3, r3, #20
 800312c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003130:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003132:	683a      	ldr	r2, [r7, #0]
 8003134:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003136:	4619      	mov	r1, r3
 8003138:	f7ff f958 	bl	80023ec <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	4b44      	ldr	r3, [pc, #272]	@ (8003254 <HAL_ADC_ConfigChannel+0x7c0>)
 8003142:	4013      	ands	r3, r2
 8003144:	2b00      	cmp	r3, #0
 8003146:	d07a      	beq.n	800323e <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003148:	4843      	ldr	r0, [pc, #268]	@ (8003258 <HAL_ADC_ConfigChannel+0x7c4>)
 800314a:	f7ff f8ad 	bl	80022a8 <LL_ADC_GetCommonPathInternalCh>
 800314e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a41      	ldr	r2, [pc, #260]	@ (800325c <HAL_ADC_ConfigChannel+0x7c8>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d12c      	bne.n	80031b6 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800315c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003160:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d126      	bne.n	80031b6 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a3c      	ldr	r2, [pc, #240]	@ (8003260 <HAL_ADC_ConfigChannel+0x7cc>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d004      	beq.n	800317c <HAL_ADC_ConfigChannel+0x6e8>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a3b      	ldr	r2, [pc, #236]	@ (8003264 <HAL_ADC_ConfigChannel+0x7d0>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d15d      	bne.n	8003238 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800317c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003180:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003184:	4619      	mov	r1, r3
 8003186:	4834      	ldr	r0, [pc, #208]	@ (8003258 <HAL_ADC_ConfigChannel+0x7c4>)
 8003188:	f7ff f87b 	bl	8002282 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800318c:	4b36      	ldr	r3, [pc, #216]	@ (8003268 <HAL_ADC_ConfigChannel+0x7d4>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	099b      	lsrs	r3, r3, #6
 8003192:	4a36      	ldr	r2, [pc, #216]	@ (800326c <HAL_ADC_ConfigChannel+0x7d8>)
 8003194:	fba2 2303 	umull	r2, r3, r2, r3
 8003198:	099b      	lsrs	r3, r3, #6
 800319a:	1c5a      	adds	r2, r3, #1
 800319c:	4613      	mov	r3, r2
 800319e:	005b      	lsls	r3, r3, #1
 80031a0:	4413      	add	r3, r2
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80031a6:	e002      	b.n	80031ae <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	3b01      	subs	r3, #1
 80031ac:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d1f9      	bne.n	80031a8 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80031b4:	e040      	b.n	8003238 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a2d      	ldr	r2, [pc, #180]	@ (8003270 <HAL_ADC_ConfigChannel+0x7dc>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d118      	bne.n	80031f2 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80031c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80031c4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d112      	bne.n	80031f2 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a23      	ldr	r2, [pc, #140]	@ (8003260 <HAL_ADC_ConfigChannel+0x7cc>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d004      	beq.n	80031e0 <HAL_ADC_ConfigChannel+0x74c>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a22      	ldr	r2, [pc, #136]	@ (8003264 <HAL_ADC_ConfigChannel+0x7d0>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d12d      	bne.n	800323c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80031e4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80031e8:	4619      	mov	r1, r3
 80031ea:	481b      	ldr	r0, [pc, #108]	@ (8003258 <HAL_ADC_ConfigChannel+0x7c4>)
 80031ec:	f7ff f849 	bl	8002282 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80031f0:	e024      	b.n	800323c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a1f      	ldr	r2, [pc, #124]	@ (8003274 <HAL_ADC_ConfigChannel+0x7e0>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d120      	bne.n	800323e <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80031fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003200:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003204:	2b00      	cmp	r3, #0
 8003206:	d11a      	bne.n	800323e <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a14      	ldr	r2, [pc, #80]	@ (8003260 <HAL_ADC_ConfigChannel+0x7cc>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d115      	bne.n	800323e <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003212:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003216:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800321a:	4619      	mov	r1, r3
 800321c:	480e      	ldr	r0, [pc, #56]	@ (8003258 <HAL_ADC_ConfigChannel+0x7c4>)
 800321e:	f7ff f830 	bl	8002282 <LL_ADC_SetCommonPathInternalCh>
 8003222:	e00c      	b.n	800323e <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003228:	f043 0220 	orr.w	r2, r3, #32
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003236:	e002      	b.n	800323e <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003238:	bf00      	nop
 800323a:	e000      	b.n	800323e <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800323c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003246:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800324a:	4618      	mov	r0, r3
 800324c:	37d8      	adds	r7, #216	@ 0xd8
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	80080000 	.word	0x80080000
 8003258:	50040300 	.word	0x50040300
 800325c:	c7520000 	.word	0xc7520000
 8003260:	50040000 	.word	0x50040000
 8003264:	50040200 	.word	0x50040200
 8003268:	2000000c 	.word	0x2000000c
 800326c:	053e2d63 	.word	0x053e2d63
 8003270:	cb840000 	.word	0xcb840000
 8003274:	80000001 	.word	0x80000001

08003278 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003280:	2300      	movs	r3, #0
 8003282:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4618      	mov	r0, r3
 800328a:	f7ff f983 	bl	8002594 <LL_ADC_IsEnabled>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d169      	bne.n	8003368 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	689a      	ldr	r2, [r3, #8]
 800329a:	4b36      	ldr	r3, [pc, #216]	@ (8003374 <ADC_Enable+0xfc>)
 800329c:	4013      	ands	r3, r2
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d00d      	beq.n	80032be <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032a6:	f043 0210 	orr.w	r2, r3, #16
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032b2:	f043 0201 	orr.w	r2, r3, #1
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e055      	b.n	800336a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4618      	mov	r0, r3
 80032c4:	f7ff f93e 	bl	8002544 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80032c8:	482b      	ldr	r0, [pc, #172]	@ (8003378 <ADC_Enable+0x100>)
 80032ca:	f7fe ffed 	bl	80022a8 <LL_ADC_GetCommonPathInternalCh>
 80032ce:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80032d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d013      	beq.n	8003300 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80032d8:	4b28      	ldr	r3, [pc, #160]	@ (800337c <ADC_Enable+0x104>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	099b      	lsrs	r3, r3, #6
 80032de:	4a28      	ldr	r2, [pc, #160]	@ (8003380 <ADC_Enable+0x108>)
 80032e0:	fba2 2303 	umull	r2, r3, r2, r3
 80032e4:	099b      	lsrs	r3, r3, #6
 80032e6:	1c5a      	adds	r2, r3, #1
 80032e8:	4613      	mov	r3, r2
 80032ea:	005b      	lsls	r3, r3, #1
 80032ec:	4413      	add	r3, r2
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80032f2:	e002      	b.n	80032fa <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	3b01      	subs	r3, #1
 80032f8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d1f9      	bne.n	80032f4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003300:	f7fe ff7c 	bl	80021fc <HAL_GetTick>
 8003304:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003306:	e028      	b.n	800335a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4618      	mov	r0, r3
 800330e:	f7ff f941 	bl	8002594 <LL_ADC_IsEnabled>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d104      	bne.n	8003322 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4618      	mov	r0, r3
 800331e:	f7ff f911 	bl	8002544 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003322:	f7fe ff6b 	bl	80021fc <HAL_GetTick>
 8003326:	4602      	mov	r2, r0
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	2b02      	cmp	r3, #2
 800332e:	d914      	bls.n	800335a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0301 	and.w	r3, r3, #1
 800333a:	2b01      	cmp	r3, #1
 800333c:	d00d      	beq.n	800335a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003342:	f043 0210 	orr.w	r2, r3, #16
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800334e:	f043 0201 	orr.w	r2, r3, #1
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e007      	b.n	800336a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0301 	and.w	r3, r3, #1
 8003364:	2b01      	cmp	r3, #1
 8003366:	d1cf      	bne.n	8003308 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003368:	2300      	movs	r3, #0
}
 800336a:	4618      	mov	r0, r3
 800336c:	3710      	adds	r7, #16
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	8000003f 	.word	0x8000003f
 8003378:	50040300 	.word	0x50040300
 800337c:	2000000c 	.word	0x2000000c
 8003380:	053e2d63 	.word	0x053e2d63

08003384 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4618      	mov	r0, r3
 8003392:	f7ff f912 	bl	80025ba <LL_ADC_IsDisableOngoing>
 8003396:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4618      	mov	r0, r3
 800339e:	f7ff f8f9 	bl	8002594 <LL_ADC_IsEnabled>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d047      	beq.n	8003438 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d144      	bne.n	8003438 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f003 030d 	and.w	r3, r3, #13
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d10c      	bne.n	80033d6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4618      	mov	r0, r3
 80033c2:	f7ff f8d3 	bl	800256c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	2203      	movs	r2, #3
 80033cc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80033ce:	f7fe ff15 	bl	80021fc <HAL_GetTick>
 80033d2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80033d4:	e029      	b.n	800342a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033da:	f043 0210 	orr.w	r2, r3, #16
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033e6:	f043 0201 	orr.w	r2, r3, #1
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e023      	b.n	800343a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80033f2:	f7fe ff03 	bl	80021fc <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d914      	bls.n	800342a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f003 0301 	and.w	r3, r3, #1
 800340a:	2b00      	cmp	r3, #0
 800340c:	d00d      	beq.n	800342a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003412:	f043 0210 	orr.w	r2, r3, #16
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800341e:	f043 0201 	orr.w	r2, r3, #1
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e007      	b.n	800343a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	f003 0301 	and.w	r3, r3, #1
 8003434:	2b00      	cmp	r3, #0
 8003436:	d1dc      	bne.n	80033f2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003438:	2300      	movs	r3, #0
}
 800343a:	4618      	mov	r0, r3
 800343c:	3710      	adds	r7, #16
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}

08003442 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003442:	b580      	push	{r7, lr}
 8003444:	b084      	sub	sp, #16
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800344e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003454:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003458:	2b00      	cmp	r3, #0
 800345a:	d14b      	bne.n	80034f4 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003460:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0308 	and.w	r3, r3, #8
 8003472:	2b00      	cmp	r3, #0
 8003474:	d021      	beq.n	80034ba <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4618      	mov	r0, r3
 800347c:	f7fe ff77 	bl	800236e <LL_ADC_REG_IsTriggerSourceSWStart>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d032      	beq.n	80034ec <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003490:	2b00      	cmp	r3, #0
 8003492:	d12b      	bne.n	80034ec <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003498:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d11f      	bne.n	80034ec <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034b0:	f043 0201 	orr.w	r2, r3, #1
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	655a      	str	r2, [r3, #84]	@ 0x54
 80034b8:	e018      	b.n	80034ec <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	f003 0302 	and.w	r3, r3, #2
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d111      	bne.n	80034ec <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034cc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d105      	bne.n	80034ec <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034e4:	f043 0201 	orr.w	r2, r3, #1
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80034ec:	68f8      	ldr	r0, [r7, #12]
 80034ee:	f7fd fe5d 	bl	80011ac <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80034f2:	e00e      	b.n	8003512 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034f8:	f003 0310 	and.w	r3, r3, #16
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d003      	beq.n	8003508 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003500:	68f8      	ldr	r0, [r7, #12]
 8003502:	f7ff fabd 	bl	8002a80 <HAL_ADC_ErrorCallback>
}
 8003506:	e004      	b.n	8003512 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800350c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	4798      	blx	r3
}
 8003512:	bf00      	nop
 8003514:	3710      	adds	r7, #16
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}

0800351a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800351a:	b580      	push	{r7, lr}
 800351c:	b084      	sub	sp, #16
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003526:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003528:	68f8      	ldr	r0, [r7, #12]
 800352a:	f7ff fa9f 	bl	8002a6c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800352e:	bf00      	nop
 8003530:	3710      	adds	r7, #16
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}

08003536 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003536:	b580      	push	{r7, lr}
 8003538:	b084      	sub	sp, #16
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003542:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003548:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003554:	f043 0204 	orr.w	r2, r3, #4
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800355c:	68f8      	ldr	r0, [r7, #12]
 800355e:	f7ff fa8f 	bl	8002a80 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003562:	bf00      	nop
 8003564:	3710      	adds	r7, #16
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}

0800356a <LL_ADC_SetCalibrationFactor>:
{
 800356a:	b480      	push	{r7}
 800356c:	b085      	sub	sp, #20
 800356e:	af00      	add	r7, sp, #0
 8003570:	60f8      	str	r0, [r7, #12]
 8003572:	60b9      	str	r1, [r7, #8]
 8003574:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CALFACT,
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	f003 137f 	and.w	r3, r3, #8323199	@ 0x7f007f
 8003582:	43db      	mvns	r3, r3
 8003584:	401a      	ands	r2, r3
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	0b19      	lsrs	r1, r3, #12
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003590:	43db      	mvns	r3, r3
 8003592:	400b      	ands	r3, r1
 8003594:	f003 0310 	and.w	r3, r3, #16
 8003598:	6879      	ldr	r1, [r7, #4]
 800359a:	fa01 f303 	lsl.w	r3, r1, r3
 800359e:	431a      	orrs	r2, r3
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
}
 80035a6:	bf00      	nop
 80035a8:	3714      	adds	r7, #20
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr

080035b2 <LL_ADC_GetCalibrationFactor>:
{
 80035b2:	b480      	push	{r7}
 80035b4:	b083      	sub	sp, #12
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
 80035ba:	6039      	str	r1, [r7, #0]
  return (uint32_t)(READ_BIT(ADCx->CALFACT,
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	4013      	ands	r3, r2
 80035c6:	f003 127f 	and.w	r2, r3, #8323199	@ 0x7f007f
                    >> ((SingleDiff & ADC_SINGLEDIFF_CALIB_F_BIT_D_MASK) >>
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	0b1b      	lsrs	r3, r3, #12
 80035ce:	f003 0310 	and.w	r3, r3, #16
  return (uint32_t)(READ_BIT(ADCx->CALFACT,
 80035d2:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	370c      	adds	r7, #12
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr

080035e2 <LL_ADC_IsEnabled>:
{
 80035e2:	b480      	push	{r7}
 80035e4:	b083      	sub	sp, #12
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	f003 0301 	and.w	r3, r3, #1
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d101      	bne.n	80035fa <LL_ADC_IsEnabled+0x18>
 80035f6:	2301      	movs	r3, #1
 80035f8:	e000      	b.n	80035fc <LL_ADC_IsEnabled+0x1a>
 80035fa:	2300      	movs	r3, #0
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	370c      	adds	r7, #12
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr

08003608 <LL_ADC_StartCalibration>:
{
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800361a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800361e:	683a      	ldr	r2, [r7, #0]
 8003620:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003624:	4313      	orrs	r3, r2
 8003626:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	609a      	str	r2, [r3, #8]
}
 800362e:	bf00      	nop
 8003630:	370c      	adds	r7, #12
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr

0800363a <LL_ADC_IsCalibrationOnGoing>:
{
 800363a:	b480      	push	{r7}
 800363c:	b083      	sub	sp, #12
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800364a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800364e:	d101      	bne.n	8003654 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003650:	2301      	movs	r3, #1
 8003652:	e000      	b.n	8003656 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	370c      	adds	r7, #12
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr

08003662 <LL_ADC_REG_IsConversionOngoing>:
{
 8003662:	b480      	push	{r7}
 8003664:	b083      	sub	sp, #12
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f003 0304 	and.w	r3, r3, #4
 8003672:	2b04      	cmp	r3, #4
 8003674:	d101      	bne.n	800367a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003676:	2301      	movs	r3, #1
 8003678:	e000      	b.n	800367c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800367a:	2300      	movs	r3, #0
}
 800367c:	4618      	mov	r0, r3
 800367e:	370c      	adds	r7, #12
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr

08003688 <LL_ADC_INJ_IsConversionOngoing>:
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	f003 0308 	and.w	r3, r3, #8
 8003698:	2b08      	cmp	r3, #8
 800369a:	d101      	bne.n	80036a0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800369c:	2301      	movs	r3, #1
 800369e:	e000      	b.n	80036a2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80036a0:	2300      	movs	r3, #0
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	370c      	adds	r7, #12
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr

080036ae <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80036ae:	b580      	push	{r7, lr}
 80036b0:	b084      	sub	sp, #16
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	6078      	str	r0, [r7, #4]
 80036b6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80036b8:	2300      	movs	r3, #0
 80036ba:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d101      	bne.n	80036ca <HAL_ADCEx_Calibration_Start+0x1c>
 80036c6:	2302      	movs	r3, #2
 80036c8:	e04d      	b.n	8003766 <HAL_ADCEx_Calibration_Start+0xb8>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2201      	movs	r2, #1
 80036ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f7ff fe56 	bl	8003384 <ADC_Disable>
 80036d8:	4603      	mov	r3, r0
 80036da:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80036dc:	7bfb      	ldrb	r3, [r7, #15]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d136      	bne.n	8003750 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036e6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80036ea:	f023 0302 	bic.w	r3, r3, #2
 80036ee:	f043 0202 	orr.w	r2, r3, #2
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	6839      	ldr	r1, [r7, #0]
 80036fc:	4618      	mov	r0, r3
 80036fe:	f7ff ff83 	bl	8003608 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003702:	e014      	b.n	800372e <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	3301      	adds	r3, #1
 8003708:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 8003710:	d30d      	bcc.n	800372e <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003716:	f023 0312 	bic.w	r3, r3, #18
 800371a:	f043 0210 	orr.w	r2, r3, #16
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e01b      	b.n	8003766 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4618      	mov	r0, r3
 8003734:	f7ff ff81 	bl	800363a <LL_ADC_IsCalibrationOnGoing>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d1e2      	bne.n	8003704 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003742:	f023 0303 	bic.w	r3, r3, #3
 8003746:	f043 0201 	orr.w	r2, r3, #1
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	655a      	str	r2, [r3, #84]	@ 0x54
 800374e:	e005      	b.n	800375c <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003754:	f043 0210 	orr.w	r2, r3, #16
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003764:	7bfb      	ldrb	r3, [r7, #15]
}
 8003766:	4618      	mov	r0, r3
 8003768:	3710      	adds	r7, #16
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}

0800376e <HAL_ADCEx_Calibration_GetValue>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval Calibration value.
  */
uint32_t HAL_ADCEx_Calibration_GetValue(const ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800376e:	b580      	push	{r7, lr}
 8003770:	b082      	sub	sp, #8
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
 8003776:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Return the selected ADC calibration value */
  return LL_ADC_GetCalibrationFactor(hadc->Instance, SingleDiff);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	6839      	ldr	r1, [r7, #0]
 800377e:	4618      	mov	r0, r3
 8003780:	f7ff ff17 	bl	80035b2 <LL_ADC_GetCalibrationFactor>
 8003784:	4603      	mov	r3, r0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3708      	adds	r7, #8
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}

0800378e <HAL_ADCEx_Calibration_SetValue>:
  * @param CalibrationFactor Calibration factor (coded on 7 bits maximum)
  * @retval HAL state
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_SetValue(ADC_HandleTypeDef *hadc, uint32_t SingleDiff,
                                                 uint32_t CalibrationFactor)
{
 800378e:	b580      	push	{r7, lr}
 8003790:	b088      	sub	sp, #32
 8003792:	af00      	add	r7, sp, #0
 8003794:	60f8      	str	r0, [r7, #12]
 8003796:	60b9      	str	r1, [r7, #8]
 8003798:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800379a:	2300      	movs	r3, #0
 800379c:	77fb      	strb	r3, [r7, #31]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));
  assert_param(IS_ADC_CALFACT(CalibrationFactor));

  /* Process locked */
  __HAL_LOCK(hadc);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d101      	bne.n	80037ac <HAL_ADCEx_Calibration_SetValue+0x1e>
 80037a8:	2302      	movs	r3, #2
 80037aa:	e038      	b.n	800381e <HAL_ADCEx_Calibration_SetValue+0x90>
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Verification of hardware constraints before modifying the calibration    */
  /* factors register: ADC must be enabled, no conversion on going.           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4618      	mov	r0, r3
 80037ba:	f7ff ff52 	bl	8003662 <LL_ADC_REG_IsConversionOngoing>
 80037be:	61b8      	str	r0, [r7, #24]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4618      	mov	r0, r3
 80037c6:	f7ff ff5f 	bl	8003688 <LL_ADC_INJ_IsConversionOngoing>
 80037ca:	6178      	str	r0, [r7, #20]

  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4618      	mov	r0, r3
 80037d2:	f7ff ff06 	bl	80035e2 <LL_ADC_IsEnabled>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d00d      	beq.n	80037f8 <HAL_ADCEx_Calibration_SetValue+0x6a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d10a      	bne.n	80037f8 <HAL_ADCEx_Calibration_SetValue+0x6a>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d107      	bne.n	80037f8 <HAL_ADCEx_Calibration_SetValue+0x6a>
     )
  {
    /* Set the selected ADC calibration value */
    LL_ADC_SetCalibrationFactor(hadc->Instance, SingleDiff, CalibrationFactor);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	68b9      	ldr	r1, [r7, #8]
 80037f0:	4618      	mov	r0, r3
 80037f2:	f7ff feba 	bl	800356a <LL_ADC_SetCalibrationFactor>
 80037f6:	e00d      	b.n	8003814 <HAL_ADCEx_Calibration_SetValue+0x86>
  }
  else
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037fc:	f043 0220 	orr.w	r2, r3, #32
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Update ADC error code */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003808:	f043 0201 	orr.w	r2, r3, #1
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Update ADC state machine to error */
    tmp_hal_status = HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800381c:	7ffb      	ldrb	r3, [r7, #31]
}
 800381e:	4618      	mov	r0, r3
 8003820:	3720      	adds	r7, #32
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
	...

08003828 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003828:	b590      	push	{r4, r7, lr}
 800382a:	b09f      	sub	sp, #124	@ 0x7c
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003832:	2300      	movs	r3, #0
 8003834:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800383e:	2b01      	cmp	r3, #1
 8003840:	d101      	bne.n	8003846 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003842:	2302      	movs	r3, #2
 8003844:	e093      	b.n	800396e <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2201      	movs	r2, #1
 800384a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800384e:	2300      	movs	r3, #0
 8003850:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003852:	2300      	movs	r3, #0
 8003854:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a47      	ldr	r2, [pc, #284]	@ (8003978 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d102      	bne.n	8003866 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003860:	4b46      	ldr	r3, [pc, #280]	@ (800397c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003862:	60bb      	str	r3, [r7, #8]
 8003864:	e001      	b.n	800386a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003866:	2300      	movs	r3, #0
 8003868:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d10b      	bne.n	8003888 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003874:	f043 0220 	orr.w	r2, r3, #32
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e072      	b.n	800396e <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	4618      	mov	r0, r3
 800388c:	f7ff fee9 	bl	8003662 <LL_ADC_REG_IsConversionOngoing>
 8003890:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4618      	mov	r0, r3
 8003898:	f7ff fee3 	bl	8003662 <LL_ADC_REG_IsConversionOngoing>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d154      	bne.n	800394c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80038a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d151      	bne.n	800394c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80038a8:	4b35      	ldr	r3, [pc, #212]	@ (8003980 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80038aa:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d02c      	beq.n	800390e <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80038b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	6859      	ldr	r1, [r3, #4]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80038c6:	035b      	lsls	r3, r3, #13
 80038c8:	430b      	orrs	r3, r1
 80038ca:	431a      	orrs	r2, r3
 80038cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038ce:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80038d0:	4829      	ldr	r0, [pc, #164]	@ (8003978 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80038d2:	f7ff fe86 	bl	80035e2 <LL_ADC_IsEnabled>
 80038d6:	4604      	mov	r4, r0
 80038d8:	4828      	ldr	r0, [pc, #160]	@ (800397c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80038da:	f7ff fe82 	bl	80035e2 <LL_ADC_IsEnabled>
 80038de:	4603      	mov	r3, r0
 80038e0:	431c      	orrs	r4, r3
 80038e2:	4828      	ldr	r0, [pc, #160]	@ (8003984 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80038e4:	f7ff fe7d 	bl	80035e2 <LL_ADC_IsEnabled>
 80038e8:	4603      	mov	r3, r0
 80038ea:	4323      	orrs	r3, r4
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d137      	bne.n	8003960 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80038f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80038f8:	f023 030f 	bic.w	r3, r3, #15
 80038fc:	683a      	ldr	r2, [r7, #0]
 80038fe:	6811      	ldr	r1, [r2, #0]
 8003900:	683a      	ldr	r2, [r7, #0]
 8003902:	6892      	ldr	r2, [r2, #8]
 8003904:	430a      	orrs	r2, r1
 8003906:	431a      	orrs	r2, r3
 8003908:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800390a:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800390c:	e028      	b.n	8003960 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800390e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003916:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003918:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800391a:	4817      	ldr	r0, [pc, #92]	@ (8003978 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800391c:	f7ff fe61 	bl	80035e2 <LL_ADC_IsEnabled>
 8003920:	4604      	mov	r4, r0
 8003922:	4816      	ldr	r0, [pc, #88]	@ (800397c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003924:	f7ff fe5d 	bl	80035e2 <LL_ADC_IsEnabled>
 8003928:	4603      	mov	r3, r0
 800392a:	431c      	orrs	r4, r3
 800392c:	4815      	ldr	r0, [pc, #84]	@ (8003984 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800392e:	f7ff fe58 	bl	80035e2 <LL_ADC_IsEnabled>
 8003932:	4603      	mov	r3, r0
 8003934:	4323      	orrs	r3, r4
 8003936:	2b00      	cmp	r3, #0
 8003938:	d112      	bne.n	8003960 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800393a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003942:	f023 030f 	bic.w	r3, r3, #15
 8003946:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003948:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800394a:	e009      	b.n	8003960 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003950:	f043 0220 	orr.w	r2, r3, #32
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800395e:	e000      	b.n	8003962 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003960:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800396a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800396e:	4618      	mov	r0, r3
 8003970:	377c      	adds	r7, #124	@ 0x7c
 8003972:	46bd      	mov	sp, r7
 8003974:	bd90      	pop	{r4, r7, pc}
 8003976:	bf00      	nop
 8003978:	50040000 	.word	0x50040000
 800397c:	50040100 	.word	0x50040100
 8003980:	50040300 	.word	0x50040300
 8003984:	50040200 	.word	0x50040200

08003988 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d101      	bne.n	800399a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e0ed      	b.n	8003b76 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d102      	bne.n	80039ac <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f7fe f944 	bl	8001c34 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f042 0201 	orr.w	r2, r2, #1
 80039ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80039bc:	f7fe fc1e 	bl	80021fc <HAL_GetTick>
 80039c0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80039c2:	e012      	b.n	80039ea <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80039c4:	f7fe fc1a 	bl	80021fc <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	2b0a      	cmp	r3, #10
 80039d0:	d90b      	bls.n	80039ea <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2205      	movs	r2, #5
 80039e2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e0c5      	b.n	8003b76 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f003 0301 	and.w	r3, r3, #1
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d0e5      	beq.n	80039c4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f022 0202 	bic.w	r2, r2, #2
 8003a06:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a08:	f7fe fbf8 	bl	80021fc <HAL_GetTick>
 8003a0c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003a0e:	e012      	b.n	8003a36 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003a10:	f7fe fbf4 	bl	80021fc <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	2b0a      	cmp	r3, #10
 8003a1c:	d90b      	bls.n	8003a36 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a22:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2205      	movs	r2, #5
 8003a2e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e09f      	b.n	8003b76 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f003 0302 	and.w	r3, r3, #2
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d1e5      	bne.n	8003a10 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	7e1b      	ldrb	r3, [r3, #24]
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d108      	bne.n	8003a5e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003a5a:	601a      	str	r2, [r3, #0]
 8003a5c:	e007      	b.n	8003a6e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003a6c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	7e5b      	ldrb	r3, [r3, #25]
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d108      	bne.n	8003a88 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003a84:	601a      	str	r2, [r3, #0]
 8003a86:	e007      	b.n	8003a98 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a96:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	7e9b      	ldrb	r3, [r3, #26]
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d108      	bne.n	8003ab2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f042 0220 	orr.w	r2, r2, #32
 8003aae:	601a      	str	r2, [r3, #0]
 8003ab0:	e007      	b.n	8003ac2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f022 0220 	bic.w	r2, r2, #32
 8003ac0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	7edb      	ldrb	r3, [r3, #27]
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d108      	bne.n	8003adc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f022 0210 	bic.w	r2, r2, #16
 8003ad8:	601a      	str	r2, [r3, #0]
 8003ada:	e007      	b.n	8003aec <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f042 0210 	orr.w	r2, r2, #16
 8003aea:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	7f1b      	ldrb	r3, [r3, #28]
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d108      	bne.n	8003b06 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f042 0208 	orr.w	r2, r2, #8
 8003b02:	601a      	str	r2, [r3, #0]
 8003b04:	e007      	b.n	8003b16 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f022 0208 	bic.w	r2, r2, #8
 8003b14:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	7f5b      	ldrb	r3, [r3, #29]
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d108      	bne.n	8003b30 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f042 0204 	orr.w	r2, r2, #4
 8003b2c:	601a      	str	r2, [r3, #0]
 8003b2e:	e007      	b.n	8003b40 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f022 0204 	bic.w	r2, r2, #4
 8003b3e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	689a      	ldr	r2, [r3, #8]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	431a      	orrs	r2, r3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	691b      	ldr	r3, [r3, #16]
 8003b4e:	431a      	orrs	r2, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	695b      	ldr	r3, [r3, #20]
 8003b54:	ea42 0103 	orr.w	r1, r2, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	1e5a      	subs	r2, r3, #1
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	430a      	orrs	r2, r1
 8003b64:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003b74:	2300      	movs	r3, #0
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3710      	adds	r7, #16
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}

08003b7e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8003b7e:	b480      	push	{r7}
 8003b80:	b087      	sub	sp, #28
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]
 8003b86:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b94:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003b96:	7cfb      	ldrb	r3, [r7, #19]
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d003      	beq.n	8003ba4 <HAL_CAN_ConfigFilter+0x26>
 8003b9c:	7cfb      	ldrb	r3, [r7, #19]
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	f040 80aa 	bne.w	8003cf8 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003baa:	f043 0201 	orr.w	r2, r3, #1
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	695b      	ldr	r3, [r3, #20]
 8003bb8:	f003 031f 	and.w	r3, r3, #31
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	43db      	mvns	r3, r3
 8003bce:	401a      	ands	r2, r3
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	69db      	ldr	r3, [r3, #28]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d123      	bne.n	8003c26 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	43db      	mvns	r3, r3
 8003be8:	401a      	ands	r2, r3
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003bfc:	683a      	ldr	r2, [r7, #0]
 8003bfe:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003c00:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	3248      	adds	r2, #72	@ 0x48
 8003c06:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003c1a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003c1c:	6979      	ldr	r1, [r7, #20]
 8003c1e:	3348      	adds	r3, #72	@ 0x48
 8003c20:	00db      	lsls	r3, r3, #3
 8003c22:	440b      	add	r3, r1
 8003c24:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	69db      	ldr	r3, [r3, #28]
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d122      	bne.n	8003c74 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	431a      	orrs	r2, r3
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003c4a:	683a      	ldr	r2, [r7, #0]
 8003c4c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003c4e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	3248      	adds	r2, #72	@ 0x48
 8003c54:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003c68:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003c6a:	6979      	ldr	r1, [r7, #20]
 8003c6c:	3348      	adds	r3, #72	@ 0x48
 8003c6e:	00db      	lsls	r3, r3, #3
 8003c70:	440b      	add	r3, r1
 8003c72:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	699b      	ldr	r3, [r3, #24]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d109      	bne.n	8003c90 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	43db      	mvns	r3, r3
 8003c86:	401a      	ands	r2, r3
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8003c8e:	e007      	b.n	8003ca0 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	431a      	orrs	r2, r3
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	691b      	ldr	r3, [r3, #16]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d109      	bne.n	8003cbc <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	43db      	mvns	r3, r3
 8003cb2:	401a      	ands	r2, r3
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8003cba:	e007      	b.n	8003ccc <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	431a      	orrs	r2, r3
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	6a1b      	ldr	r3, [r3, #32]
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d107      	bne.n	8003ce4 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	431a      	orrs	r2, r3
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003cea:	f023 0201 	bic.w	r2, r3, #1
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	e006      	b.n	8003d06 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cfc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
  }
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	371c      	adds	r7, #28
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr

08003d12 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003d12:	b580      	push	{r7, lr}
 8003d14:	b084      	sub	sp, #16
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d12e      	bne.n	8003d84 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2202      	movs	r2, #2
 8003d2a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f022 0201 	bic.w	r2, r2, #1
 8003d3c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003d3e:	f7fe fa5d 	bl	80021fc <HAL_GetTick>
 8003d42:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003d44:	e012      	b.n	8003d6c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003d46:	f7fe fa59 	bl	80021fc <HAL_GetTick>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	2b0a      	cmp	r3, #10
 8003d52:	d90b      	bls.n	8003d6c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d58:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2205      	movs	r2, #5
 8003d64:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e012      	b.n	8003d92 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	f003 0301 	and.w	r3, r3, #1
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d1e5      	bne.n	8003d46 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8003d80:	2300      	movs	r3, #0
 8003d82:	e006      	b.n	8003d92 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d88:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
  }
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3710      	adds	r7, #16
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}

08003d9a <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003d9a:	b480      	push	{r7}
 8003d9c:	b087      	sub	sp, #28
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	60f8      	str	r0, [r7, #12]
 8003da2:	60b9      	str	r1, [r7, #8]
 8003da4:	607a      	str	r2, [r7, #4]
 8003da6:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003dae:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003db0:	7dfb      	ldrb	r3, [r7, #23]
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d003      	beq.n	8003dbe <HAL_CAN_GetRxMessage+0x24>
 8003db6:	7dfb      	ldrb	r3, [r7, #23]
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	f040 8103 	bne.w	8003fc4 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d10e      	bne.n	8003de2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	f003 0303 	and.w	r3, r3, #3
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d116      	bne.n	8003e00 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dd6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e0f7      	b.n	8003fd2 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	691b      	ldr	r3, [r3, #16]
 8003de8:	f003 0303 	and.w	r3, r3, #3
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d107      	bne.n	8003e00 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e0e8      	b.n	8003fd2 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	331b      	adds	r3, #27
 8003e08:	011b      	lsls	r3, r3, #4
 8003e0a:	4413      	add	r3, r2
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0204 	and.w	r2, r3, #4
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d10c      	bne.n	8003e38 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	331b      	adds	r3, #27
 8003e26:	011b      	lsls	r3, r3, #4
 8003e28:	4413      	add	r3, r2
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	0d5b      	lsrs	r3, r3, #21
 8003e2e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	601a      	str	r2, [r3, #0]
 8003e36:	e00b      	b.n	8003e50 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	331b      	adds	r3, #27
 8003e40:	011b      	lsls	r3, r3, #4
 8003e42:	4413      	add	r3, r2
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	08db      	lsrs	r3, r3, #3
 8003e48:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	331b      	adds	r3, #27
 8003e58:	011b      	lsls	r3, r3, #4
 8003e5a:	4413      	add	r3, r2
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 0202 	and.w	r2, r3, #2
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	331b      	adds	r3, #27
 8003e6e:	011b      	lsls	r3, r3, #4
 8003e70:	4413      	add	r3, r2
 8003e72:	3304      	adds	r3, #4
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0308 	and.w	r3, r3, #8
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d003      	beq.n	8003e86 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2208      	movs	r2, #8
 8003e82:	611a      	str	r2, [r3, #16]
 8003e84:	e00b      	b.n	8003e9e <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	331b      	adds	r3, #27
 8003e8e:	011b      	lsls	r3, r3, #4
 8003e90:	4413      	add	r3, r2
 8003e92:	3304      	adds	r3, #4
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 020f 	and.w	r2, r3, #15
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	331b      	adds	r3, #27
 8003ea6:	011b      	lsls	r3, r3, #4
 8003ea8:	4413      	add	r3, r2
 8003eaa:	3304      	adds	r3, #4
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	0a1b      	lsrs	r3, r3, #8
 8003eb0:	b2da      	uxtb	r2, r3
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	331b      	adds	r3, #27
 8003ebe:	011b      	lsls	r3, r3, #4
 8003ec0:	4413      	add	r3, r2
 8003ec2:	3304      	adds	r3, #4
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	0c1b      	lsrs	r3, r3, #16
 8003ec8:	b29a      	uxth	r2, r3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	011b      	lsls	r3, r3, #4
 8003ed6:	4413      	add	r3, r2
 8003ed8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	b2da      	uxtb	r2, r3
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	011b      	lsls	r3, r3, #4
 8003eec:	4413      	add	r3, r2
 8003eee:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	0a1a      	lsrs	r2, r3, #8
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	3301      	adds	r3, #1
 8003efa:	b2d2      	uxtb	r2, r2
 8003efc:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	011b      	lsls	r3, r3, #4
 8003f06:	4413      	add	r3, r2
 8003f08:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	0c1a      	lsrs	r2, r3, #16
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	3302      	adds	r3, #2
 8003f14:	b2d2      	uxtb	r2, r2
 8003f16:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	011b      	lsls	r3, r3, #4
 8003f20:	4413      	add	r3, r2
 8003f22:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	0e1a      	lsrs	r2, r3, #24
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	3303      	adds	r3, #3
 8003f2e:	b2d2      	uxtb	r2, r2
 8003f30:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	011b      	lsls	r3, r3, #4
 8003f3a:	4413      	add	r3, r2
 8003f3c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	3304      	adds	r3, #4
 8003f46:	b2d2      	uxtb	r2, r2
 8003f48:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	011b      	lsls	r3, r3, #4
 8003f52:	4413      	add	r3, r2
 8003f54:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	0a1a      	lsrs	r2, r3, #8
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	3305      	adds	r3, #5
 8003f60:	b2d2      	uxtb	r2, r2
 8003f62:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	011b      	lsls	r3, r3, #4
 8003f6c:	4413      	add	r3, r2
 8003f6e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	0c1a      	lsrs	r2, r3, #16
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	3306      	adds	r3, #6
 8003f7a:	b2d2      	uxtb	r2, r2
 8003f7c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	011b      	lsls	r3, r3, #4
 8003f86:	4413      	add	r3, r2
 8003f88:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	0e1a      	lsrs	r2, r3, #24
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	3307      	adds	r3, #7
 8003f94:	b2d2      	uxtb	r2, r2
 8003f96:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d108      	bne.n	8003fb0 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68da      	ldr	r2, [r3, #12]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f042 0220 	orr.w	r2, r2, #32
 8003fac:	60da      	str	r2, [r3, #12]
 8003fae:	e007      	b.n	8003fc0 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	691a      	ldr	r2, [r3, #16]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f042 0220 	orr.w	r2, r2, #32
 8003fbe:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	e006      	b.n	8003fd2 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
  }
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	371c      	adds	r7, #28
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr

08003fde <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8003fde:	b480      	push	{r7}
 8003fe0:	b085      	sub	sp, #20
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
 8003fe6:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ff2:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003ff4:	7afb      	ldrb	r3, [r7, #11]
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d002      	beq.n	8004000 <HAL_CAN_GetRxFifoFillLevel+0x22>
 8003ffa:	7afb      	ldrb	r3, [r7, #11]
 8003ffc:	2b02      	cmp	r3, #2
 8003ffe:	d10f      	bne.n	8004020 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d106      	bne.n	8004014 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	f003 0303 	and.w	r3, r3, #3
 8004010:	60fb      	str	r3, [r7, #12]
 8004012:	e005      	b.n	8004020 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	f003 0303 	and.w	r3, r3, #3
 800401e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8004020:	68fb      	ldr	r3, [r7, #12]
}
 8004022:	4618      	mov	r0, r3
 8004024:	3714      	adds	r7, #20
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr

0800402e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800402e:	b480      	push	{r7}
 8004030:	b085      	sub	sp, #20
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
 8004036:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800403e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004040:	7bfb      	ldrb	r3, [r7, #15]
 8004042:	2b01      	cmp	r3, #1
 8004044:	d002      	beq.n	800404c <HAL_CAN_ActivateNotification+0x1e>
 8004046:	7bfb      	ldrb	r3, [r7, #15]
 8004048:	2b02      	cmp	r3, #2
 800404a:	d109      	bne.n	8004060 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	6959      	ldr	r1, [r3, #20]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	683a      	ldr	r2, [r7, #0]
 8004058:	430a      	orrs	r2, r1
 800405a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800405c:	2300      	movs	r3, #0
 800405e:	e006      	b.n	800406e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004064:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
  }
}
 800406e:	4618      	mov	r0, r3
 8004070:	3714      	adds	r7, #20
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr

0800407a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800407a:	b580      	push	{r7, lr}
 800407c:	b08a      	sub	sp, #40	@ 0x28
 800407e:	af00      	add	r7, sp, #0
 8004080:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004082:	2300      	movs	r3, #0
 8004084:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	695b      	ldr	r3, [r3, #20]
 800408c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	691b      	ldr	r3, [r3, #16]
 80040ac:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	699b      	ldr	r3, [r3, #24]
 80040b4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80040b6:	6a3b      	ldr	r3, [r7, #32]
 80040b8:	f003 0301 	and.w	r3, r3, #1
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d07c      	beq.n	80041ba <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80040c0:	69bb      	ldr	r3, [r7, #24]
 80040c2:	f003 0301 	and.w	r3, r3, #1
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d023      	beq.n	8004112 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2201      	movs	r2, #1
 80040d0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	f003 0302 	and.w	r3, r3, #2
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d003      	beq.n	80040e4 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f000 f983 	bl	80043e8 <HAL_CAN_TxMailbox0CompleteCallback>
 80040e2:	e016      	b.n	8004112 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	f003 0304 	and.w	r3, r3, #4
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d004      	beq.n	80040f8 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80040ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80040f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80040f6:	e00c      	b.n	8004112 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	f003 0308 	and.w	r3, r3, #8
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d004      	beq.n	800410c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004104:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004108:	627b      	str	r3, [r7, #36]	@ 0x24
 800410a:	e002      	b.n	8004112 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f000 f989 	bl	8004424 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004112:	69bb      	ldr	r3, [r7, #24]
 8004114:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004118:	2b00      	cmp	r3, #0
 800411a:	d024      	beq.n	8004166 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004124:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004126:	69bb      	ldr	r3, [r7, #24]
 8004128:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800412c:	2b00      	cmp	r3, #0
 800412e:	d003      	beq.n	8004138 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f000 f963 	bl	80043fc <HAL_CAN_TxMailbox1CompleteCallback>
 8004136:	e016      	b.n	8004166 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004138:	69bb      	ldr	r3, [r7, #24]
 800413a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800413e:	2b00      	cmp	r3, #0
 8004140:	d004      	beq.n	800414c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004144:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004148:	627b      	str	r3, [r7, #36]	@ 0x24
 800414a:	e00c      	b.n	8004166 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004152:	2b00      	cmp	r3, #0
 8004154:	d004      	beq.n	8004160 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004158:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800415c:	627b      	str	r3, [r7, #36]	@ 0x24
 800415e:	e002      	b.n	8004166 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f000 f969 	bl	8004438 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004166:	69bb      	ldr	r3, [r7, #24]
 8004168:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d024      	beq.n	80041ba <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004178:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800417a:	69bb      	ldr	r3, [r7, #24]
 800417c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004180:	2b00      	cmp	r3, #0
 8004182:	d003      	beq.n	800418c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f000 f943 	bl	8004410 <HAL_CAN_TxMailbox2CompleteCallback>
 800418a:	e016      	b.n	80041ba <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d004      	beq.n	80041a0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004198:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800419c:	627b      	str	r3, [r7, #36]	@ 0x24
 800419e:	e00c      	b.n	80041ba <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d004      	beq.n	80041b4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80041aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80041b2:	e002      	b.n	80041ba <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f000 f949 	bl	800444c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80041ba:	6a3b      	ldr	r3, [r7, #32]
 80041bc:	f003 0308 	and.w	r3, r3, #8
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d00c      	beq.n	80041de <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	f003 0310 	and.w	r3, r3, #16
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d007      	beq.n	80041de <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80041ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80041d4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	2210      	movs	r2, #16
 80041dc:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80041de:	6a3b      	ldr	r3, [r7, #32]
 80041e0:	f003 0304 	and.w	r3, r3, #4
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d00b      	beq.n	8004200 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	f003 0308 	and.w	r3, r3, #8
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d006      	beq.n	8004200 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	2208      	movs	r2, #8
 80041f8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f000 f930 	bl	8004460 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004200:	6a3b      	ldr	r3, [r7, #32]
 8004202:	f003 0302 	and.w	r3, r3, #2
 8004206:	2b00      	cmp	r3, #0
 8004208:	d009      	beq.n	800421e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	f003 0303 	and.w	r3, r3, #3
 8004214:	2b00      	cmp	r3, #0
 8004216:	d002      	beq.n	800421e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f7fc fdc3 	bl	8000da4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800421e:	6a3b      	ldr	r3, [r7, #32]
 8004220:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004224:	2b00      	cmp	r3, #0
 8004226:	d00c      	beq.n	8004242 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	f003 0310 	and.w	r3, r3, #16
 800422e:	2b00      	cmp	r3, #0
 8004230:	d007      	beq.n	8004242 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004234:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004238:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	2210      	movs	r2, #16
 8004240:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004242:	6a3b      	ldr	r3, [r7, #32]
 8004244:	f003 0320 	and.w	r3, r3, #32
 8004248:	2b00      	cmp	r3, #0
 800424a:	d00b      	beq.n	8004264 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	f003 0308 	and.w	r3, r3, #8
 8004252:	2b00      	cmp	r3, #0
 8004254:	d006      	beq.n	8004264 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	2208      	movs	r2, #8
 800425c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 f908 	bl	8004474 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004264:	6a3b      	ldr	r3, [r7, #32]
 8004266:	f003 0310 	and.w	r3, r3, #16
 800426a:	2b00      	cmp	r3, #0
 800426c:	d009      	beq.n	8004282 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	691b      	ldr	r3, [r3, #16]
 8004274:	f003 0303 	and.w	r3, r3, #3
 8004278:	2b00      	cmp	r3, #0
 800427a:	d002      	beq.n	8004282 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f7fc fe11 	bl	8000ea4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004282:	6a3b      	ldr	r3, [r7, #32]
 8004284:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d00b      	beq.n	80042a4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800428c:	69fb      	ldr	r3, [r7, #28]
 800428e:	f003 0310 	and.w	r3, r3, #16
 8004292:	2b00      	cmp	r3, #0
 8004294:	d006      	beq.n	80042a4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2210      	movs	r2, #16
 800429c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 f8f2 	bl	8004488 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80042a4:	6a3b      	ldr	r3, [r7, #32]
 80042a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00b      	beq.n	80042c6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	f003 0308 	and.w	r3, r3, #8
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d006      	beq.n	80042c6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	2208      	movs	r2, #8
 80042be:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f000 f8eb 	bl	800449c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80042c6:	6a3b      	ldr	r3, [r7, #32]
 80042c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d07b      	beq.n	80043c8 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	f003 0304 	and.w	r3, r3, #4
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d072      	beq.n	80043c0 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80042da:	6a3b      	ldr	r3, [r7, #32]
 80042dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d008      	beq.n	80042f6 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d003      	beq.n	80042f6 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80042ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f0:	f043 0301 	orr.w	r3, r3, #1
 80042f4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80042f6:	6a3b      	ldr	r3, [r7, #32]
 80042f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d008      	beq.n	8004312 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004306:	2b00      	cmp	r3, #0
 8004308:	d003      	beq.n	8004312 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800430a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800430c:	f043 0302 	orr.w	r3, r3, #2
 8004310:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004312:	6a3b      	ldr	r3, [r7, #32]
 8004314:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004318:	2b00      	cmp	r3, #0
 800431a:	d008      	beq.n	800432e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004322:	2b00      	cmp	r3, #0
 8004324:	d003      	beq.n	800432e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004328:	f043 0304 	orr.w	r3, r3, #4
 800432c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800432e:	6a3b      	ldr	r3, [r7, #32]
 8004330:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004334:	2b00      	cmp	r3, #0
 8004336:	d043      	beq.n	80043c0 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800433e:	2b00      	cmp	r3, #0
 8004340:	d03e      	beq.n	80043c0 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004348:	2b60      	cmp	r3, #96	@ 0x60
 800434a:	d02b      	beq.n	80043a4 <HAL_CAN_IRQHandler+0x32a>
 800434c:	2b60      	cmp	r3, #96	@ 0x60
 800434e:	d82e      	bhi.n	80043ae <HAL_CAN_IRQHandler+0x334>
 8004350:	2b50      	cmp	r3, #80	@ 0x50
 8004352:	d022      	beq.n	800439a <HAL_CAN_IRQHandler+0x320>
 8004354:	2b50      	cmp	r3, #80	@ 0x50
 8004356:	d82a      	bhi.n	80043ae <HAL_CAN_IRQHandler+0x334>
 8004358:	2b40      	cmp	r3, #64	@ 0x40
 800435a:	d019      	beq.n	8004390 <HAL_CAN_IRQHandler+0x316>
 800435c:	2b40      	cmp	r3, #64	@ 0x40
 800435e:	d826      	bhi.n	80043ae <HAL_CAN_IRQHandler+0x334>
 8004360:	2b30      	cmp	r3, #48	@ 0x30
 8004362:	d010      	beq.n	8004386 <HAL_CAN_IRQHandler+0x30c>
 8004364:	2b30      	cmp	r3, #48	@ 0x30
 8004366:	d822      	bhi.n	80043ae <HAL_CAN_IRQHandler+0x334>
 8004368:	2b10      	cmp	r3, #16
 800436a:	d002      	beq.n	8004372 <HAL_CAN_IRQHandler+0x2f8>
 800436c:	2b20      	cmp	r3, #32
 800436e:	d005      	beq.n	800437c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004370:	e01d      	b.n	80043ae <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004374:	f043 0308 	orr.w	r3, r3, #8
 8004378:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800437a:	e019      	b.n	80043b0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800437c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800437e:	f043 0310 	orr.w	r3, r3, #16
 8004382:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004384:	e014      	b.n	80043b0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004388:	f043 0320 	orr.w	r3, r3, #32
 800438c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800438e:	e00f      	b.n	80043b0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004392:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004396:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004398:	e00a      	b.n	80043b0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800439a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800439c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043a0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80043a2:	e005      	b.n	80043b0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80043a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043aa:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80043ac:	e000      	b.n	80043b0 <HAL_CAN_IRQHandler+0x336>
            break;
 80043ae:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	699a      	ldr	r2, [r3, #24]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80043be:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2204      	movs	r2, #4
 80043c6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80043c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d008      	beq.n	80043e0 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80043d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d4:	431a      	orrs	r2, r3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f000 f868 	bl	80044b0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80043e0:	bf00      	nop
 80043e2:	3728      	adds	r7, #40	@ 0x28
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b083      	sub	sp, #12
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80043f0:	bf00      	nop
 80043f2:	370c      	adds	r7, #12
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr

080043fc <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004404:	bf00      	nop
 8004406:	370c      	adds	r7, #12
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr

08004410 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004418:	bf00      	nop
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800442c:	bf00      	nop
 800442e:	370c      	adds	r7, #12
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr

08004438 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004440:	bf00      	nop
 8004442:	370c      	adds	r7, #12
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr

0800444c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004454:	bf00      	nop
 8004456:	370c      	adds	r7, #12
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr

08004460 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004468:	bf00      	nop
 800446a:	370c      	adds	r7, #12
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr

08004474 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800447c:	bf00      	nop
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004490:	bf00      	nop
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80044a4:	bf00      	nop
 80044a6:	370c      	adds	r7, #12
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr

080044b0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80044b8:	bf00      	nop
 80044ba:	370c      	adds	r7, #12
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b085      	sub	sp, #20
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f003 0307 	and.w	r3, r3, #7
 80044d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044d4:	4b0c      	ldr	r3, [pc, #48]	@ (8004508 <__NVIC_SetPriorityGrouping+0x44>)
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044da:	68ba      	ldr	r2, [r7, #8]
 80044dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80044e0:	4013      	ands	r3, r2
 80044e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80044ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80044f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044f6:	4a04      	ldr	r2, [pc, #16]	@ (8004508 <__NVIC_SetPriorityGrouping+0x44>)
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	60d3      	str	r3, [r2, #12]
}
 80044fc:	bf00      	nop
 80044fe:	3714      	adds	r7, #20
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr
 8004508:	e000ed00 	.word	0xe000ed00

0800450c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800450c:	b480      	push	{r7}
 800450e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004510:	4b04      	ldr	r3, [pc, #16]	@ (8004524 <__NVIC_GetPriorityGrouping+0x18>)
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	0a1b      	lsrs	r3, r3, #8
 8004516:	f003 0307 	and.w	r3, r3, #7
}
 800451a:	4618      	mov	r0, r3
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr
 8004524:	e000ed00 	.word	0xe000ed00

08004528 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	4603      	mov	r3, r0
 8004530:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004536:	2b00      	cmp	r3, #0
 8004538:	db0b      	blt.n	8004552 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800453a:	79fb      	ldrb	r3, [r7, #7]
 800453c:	f003 021f 	and.w	r2, r3, #31
 8004540:	4907      	ldr	r1, [pc, #28]	@ (8004560 <__NVIC_EnableIRQ+0x38>)
 8004542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004546:	095b      	lsrs	r3, r3, #5
 8004548:	2001      	movs	r0, #1
 800454a:	fa00 f202 	lsl.w	r2, r0, r2
 800454e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004552:	bf00      	nop
 8004554:	370c      	adds	r7, #12
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr
 800455e:	bf00      	nop
 8004560:	e000e100 	.word	0xe000e100

08004564 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
 800456a:	4603      	mov	r3, r0
 800456c:	6039      	str	r1, [r7, #0]
 800456e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004570:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004574:	2b00      	cmp	r3, #0
 8004576:	db0a      	blt.n	800458e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	b2da      	uxtb	r2, r3
 800457c:	490c      	ldr	r1, [pc, #48]	@ (80045b0 <__NVIC_SetPriority+0x4c>)
 800457e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004582:	0112      	lsls	r2, r2, #4
 8004584:	b2d2      	uxtb	r2, r2
 8004586:	440b      	add	r3, r1
 8004588:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800458c:	e00a      	b.n	80045a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	b2da      	uxtb	r2, r3
 8004592:	4908      	ldr	r1, [pc, #32]	@ (80045b4 <__NVIC_SetPriority+0x50>)
 8004594:	79fb      	ldrb	r3, [r7, #7]
 8004596:	f003 030f 	and.w	r3, r3, #15
 800459a:	3b04      	subs	r3, #4
 800459c:	0112      	lsls	r2, r2, #4
 800459e:	b2d2      	uxtb	r2, r2
 80045a0:	440b      	add	r3, r1
 80045a2:	761a      	strb	r2, [r3, #24]
}
 80045a4:	bf00      	nop
 80045a6:	370c      	adds	r7, #12
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr
 80045b0:	e000e100 	.word	0xe000e100
 80045b4:	e000ed00 	.word	0xe000ed00

080045b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b089      	sub	sp, #36	@ 0x24
 80045bc:	af00      	add	r7, sp, #0
 80045be:	60f8      	str	r0, [r7, #12]
 80045c0:	60b9      	str	r1, [r7, #8]
 80045c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f003 0307 	and.w	r3, r3, #7
 80045ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045cc:	69fb      	ldr	r3, [r7, #28]
 80045ce:	f1c3 0307 	rsb	r3, r3, #7
 80045d2:	2b04      	cmp	r3, #4
 80045d4:	bf28      	it	cs
 80045d6:	2304      	movcs	r3, #4
 80045d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	3304      	adds	r3, #4
 80045de:	2b06      	cmp	r3, #6
 80045e0:	d902      	bls.n	80045e8 <NVIC_EncodePriority+0x30>
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	3b03      	subs	r3, #3
 80045e6:	e000      	b.n	80045ea <NVIC_EncodePriority+0x32>
 80045e8:	2300      	movs	r3, #0
 80045ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045ec:	f04f 32ff 	mov.w	r2, #4294967295
 80045f0:	69bb      	ldr	r3, [r7, #24]
 80045f2:	fa02 f303 	lsl.w	r3, r2, r3
 80045f6:	43da      	mvns	r2, r3
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	401a      	ands	r2, r3
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004600:	f04f 31ff 	mov.w	r1, #4294967295
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	fa01 f303 	lsl.w	r3, r1, r3
 800460a:	43d9      	mvns	r1, r3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004610:	4313      	orrs	r3, r2
         );
}
 8004612:	4618      	mov	r0, r3
 8004614:	3724      	adds	r7, #36	@ 0x24
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr
	...

08004620 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b082      	sub	sp, #8
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	3b01      	subs	r3, #1
 800462c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004630:	d301      	bcc.n	8004636 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004632:	2301      	movs	r3, #1
 8004634:	e00f      	b.n	8004656 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004636:	4a0a      	ldr	r2, [pc, #40]	@ (8004660 <SysTick_Config+0x40>)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	3b01      	subs	r3, #1
 800463c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800463e:	210f      	movs	r1, #15
 8004640:	f04f 30ff 	mov.w	r0, #4294967295
 8004644:	f7ff ff8e 	bl	8004564 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004648:	4b05      	ldr	r3, [pc, #20]	@ (8004660 <SysTick_Config+0x40>)
 800464a:	2200      	movs	r2, #0
 800464c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800464e:	4b04      	ldr	r3, [pc, #16]	@ (8004660 <SysTick_Config+0x40>)
 8004650:	2207      	movs	r2, #7
 8004652:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004654:	2300      	movs	r3, #0
}
 8004656:	4618      	mov	r0, r3
 8004658:	3708      	adds	r7, #8
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
 800465e:	bf00      	nop
 8004660:	e000e010 	.word	0xe000e010

08004664 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b082      	sub	sp, #8
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f7ff ff29 	bl	80044c4 <__NVIC_SetPriorityGrouping>
}
 8004672:	bf00      	nop
 8004674:	3708      	adds	r7, #8
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}

0800467a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800467a:	b580      	push	{r7, lr}
 800467c:	b086      	sub	sp, #24
 800467e:	af00      	add	r7, sp, #0
 8004680:	4603      	mov	r3, r0
 8004682:	60b9      	str	r1, [r7, #8]
 8004684:	607a      	str	r2, [r7, #4]
 8004686:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004688:	2300      	movs	r3, #0
 800468a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800468c:	f7ff ff3e 	bl	800450c <__NVIC_GetPriorityGrouping>
 8004690:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	68b9      	ldr	r1, [r7, #8]
 8004696:	6978      	ldr	r0, [r7, #20]
 8004698:	f7ff ff8e 	bl	80045b8 <NVIC_EncodePriority>
 800469c:	4602      	mov	r2, r0
 800469e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046a2:	4611      	mov	r1, r2
 80046a4:	4618      	mov	r0, r3
 80046a6:	f7ff ff5d 	bl	8004564 <__NVIC_SetPriority>
}
 80046aa:	bf00      	nop
 80046ac:	3718      	adds	r7, #24
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}

080046b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046b2:	b580      	push	{r7, lr}
 80046b4:	b082      	sub	sp, #8
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	4603      	mov	r3, r0
 80046ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046c0:	4618      	mov	r0, r3
 80046c2:	f7ff ff31 	bl	8004528 <__NVIC_EnableIRQ>
}
 80046c6:	bf00      	nop
 80046c8:	3708      	adds	r7, #8
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}

080046ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80046ce:	b580      	push	{r7, lr}
 80046d0:	b082      	sub	sp, #8
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f7ff ffa2 	bl	8004620 <SysTick_Config>
 80046dc:	4603      	mov	r3, r0
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3708      	adds	r7, #8
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}

080046e6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80046e6:	b580      	push	{r7, lr}
 80046e8:	b082      	sub	sp, #8
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d101      	bne.n	80046f8 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e014      	b.n	8004722 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	791b      	ldrb	r3, [r3, #4]
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d105      	bne.n	800470e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f7fd fb09 	bl	8001d20 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2202      	movs	r2, #2
 8004712:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2201      	movs	r2, #1
 800471e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004720:	2300      	movs	r3, #0
}
 8004722:	4618      	mov	r0, r3
 8004724:	3708      	adds	r7, #8
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
	...

0800472c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b086      	sub	sp, #24
 8004730:	af00      	add	r7, sp, #0
 8004732:	60f8      	str	r0, [r7, #12]
 8004734:	60b9      	str	r1, [r7, #8]
 8004736:	607a      	str	r2, [r7, #4]
 8004738:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 800473a:	2300      	movs	r3, #0
 800473c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	795b      	ldrb	r3, [r3, #5]
 8004742:	2b01      	cmp	r3, #1
 8004744:	d101      	bne.n	800474a <HAL_DAC_Start_DMA+0x1e>
 8004746:	2302      	movs	r3, #2
 8004748:	e0ab      	b.n	80048a2 <HAL_DAC_Start_DMA+0x176>
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2201      	movs	r2, #1
 800474e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2202      	movs	r2, #2
 8004754:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d12f      	bne.n	80047bc <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	4a52      	ldr	r2, [pc, #328]	@ (80048ac <HAL_DAC_Start_DMA+0x180>)
 8004762:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	4a51      	ldr	r2, [pc, #324]	@ (80048b0 <HAL_DAC_Start_DMA+0x184>)
 800476a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	4a50      	ldr	r2, [pc, #320]	@ (80048b4 <HAL_DAC_Start_DMA+0x188>)
 8004772:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004782:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8004784:	6a3b      	ldr	r3, [r7, #32]
 8004786:	2b08      	cmp	r3, #8
 8004788:	d013      	beq.n	80047b2 <HAL_DAC_Start_DMA+0x86>
 800478a:	6a3b      	ldr	r3, [r7, #32]
 800478c:	2b08      	cmp	r3, #8
 800478e:	d845      	bhi.n	800481c <HAL_DAC_Start_DMA+0xf0>
 8004790:	6a3b      	ldr	r3, [r7, #32]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d003      	beq.n	800479e <HAL_DAC_Start_DMA+0x72>
 8004796:	6a3b      	ldr	r3, [r7, #32]
 8004798:	2b04      	cmp	r3, #4
 800479a:	d005      	beq.n	80047a8 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 800479c:	e03e      	b.n	800481c <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	3308      	adds	r3, #8
 80047a4:	613b      	str	r3, [r7, #16]
        break;
 80047a6:	e03c      	b.n	8004822 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	330c      	adds	r3, #12
 80047ae:	613b      	str	r3, [r7, #16]
        break;
 80047b0:	e037      	b.n	8004822 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	3310      	adds	r3, #16
 80047b8:	613b      	str	r3, [r7, #16]
        break;
 80047ba:	e032      	b.n	8004822 <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	4a3d      	ldr	r2, [pc, #244]	@ (80048b8 <HAL_DAC_Start_DMA+0x18c>)
 80047c2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	4a3c      	ldr	r2, [pc, #240]	@ (80048bc <HAL_DAC_Start_DMA+0x190>)
 80047ca:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	4a3b      	ldr	r2, [pc, #236]	@ (80048c0 <HAL_DAC_Start_DMA+0x194>)
 80047d2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80047e2:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80047e4:	6a3b      	ldr	r3, [r7, #32]
 80047e6:	2b08      	cmp	r3, #8
 80047e8:	d013      	beq.n	8004812 <HAL_DAC_Start_DMA+0xe6>
 80047ea:	6a3b      	ldr	r3, [r7, #32]
 80047ec:	2b08      	cmp	r3, #8
 80047ee:	d817      	bhi.n	8004820 <HAL_DAC_Start_DMA+0xf4>
 80047f0:	6a3b      	ldr	r3, [r7, #32]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d003      	beq.n	80047fe <HAL_DAC_Start_DMA+0xd2>
 80047f6:	6a3b      	ldr	r3, [r7, #32]
 80047f8:	2b04      	cmp	r3, #4
 80047fa:	d005      	beq.n	8004808 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80047fc:	e010      	b.n	8004820 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	3314      	adds	r3, #20
 8004804:	613b      	str	r3, [r7, #16]
        break;
 8004806:	e00c      	b.n	8004822 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	3318      	adds	r3, #24
 800480e:	613b      	str	r3, [r7, #16]
        break;
 8004810:	e007      	b.n	8004822 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	331c      	adds	r3, #28
 8004818:	613b      	str	r3, [r7, #16]
        break;
 800481a:	e002      	b.n	8004822 <HAL_DAC_Start_DMA+0xf6>
        break;
 800481c:	bf00      	nop
 800481e:	e000      	b.n	8004822 <HAL_DAC_Start_DMA+0xf6>
        break;
 8004820:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d111      	bne.n	800484c <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004836:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6898      	ldr	r0, [r3, #8]
 800483c:	6879      	ldr	r1, [r7, #4]
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	693a      	ldr	r2, [r7, #16]
 8004842:	f000 fb49 	bl	8004ed8 <HAL_DMA_Start_IT>
 8004846:	4603      	mov	r3, r0
 8004848:	75fb      	strb	r3, [r7, #23]
 800484a:	e010      	b.n	800486e <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 800485a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	68d8      	ldr	r0, [r3, #12]
 8004860:	6879      	ldr	r1, [r7, #4]
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	693a      	ldr	r2, [r7, #16]
 8004866:	f000 fb37 	bl	8004ed8 <HAL_DMA_Start_IT>
 800486a:	4603      	mov	r3, r0
 800486c:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2200      	movs	r2, #0
 8004872:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8004874:	7dfb      	ldrb	r3, [r7, #23]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d10c      	bne.n	8004894 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	6819      	ldr	r1, [r3, #0]
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	f003 0310 	and.w	r3, r3, #16
 8004886:	2201      	movs	r2, #1
 8004888:	409a      	lsls	r2, r3
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	430a      	orrs	r2, r1
 8004890:	601a      	str	r2, [r3, #0]
 8004892:	e005      	b.n	80048a0 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	691b      	ldr	r3, [r3, #16]
 8004898:	f043 0204 	orr.w	r2, r3, #4
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80048a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3718      	adds	r7, #24
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	08004c41 	.word	0x08004c41
 80048b0:	08004c63 	.word	0x08004c63
 80048b4:	08004c7f 	.word	0x08004c7f
 80048b8:	08004cfd 	.word	0x08004cfd
 80048bc:	08004d1f 	.word	0x08004d1f
 80048c0:	08004d3b 	.word	0x08004d3b

080048c4 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b082      	sub	sp, #8
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80048d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048da:	d120      	bne.n	800491e <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80048e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048ea:	d118      	bne.n	800491e <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2204      	movs	r2, #4
 80048f0:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	691b      	ldr	r3, [r3, #16]
 80048f6:	f043 0201 	orr.w	r2, r3, #1
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004906:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004916:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f000 f84b 	bl	80049b4 <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004928:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800492c:	d120      	bne.n	8004970 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004934:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004938:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800493c:	d118      	bne.n	8004970 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2204      	movs	r2, #4
 8004942:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	691b      	ldr	r3, [r3, #16]
 8004948:	f043 0202 	orr.w	r2, r3, #2
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8004958:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8004968:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f000 f9bc 	bl	8004ce8 <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 8004970:	bf00      	nop
 8004972:	3708      	adds	r7, #8
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}

08004978 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004978:	b480      	push	{r7}
 800497a:	b083      	sub	sp, #12
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8004980:	bf00      	nop
 8004982:	370c      	adds	r7, #12
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800498c:	b480      	push	{r7}
 800498e:	b083      	sub	sp, #12
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8004994:	bf00      	nop
 8004996:	370c      	adds	r7, #12
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr

080049a0 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80049a8:	bf00      	nop
 80049aa:	370c      	adds	r7, #12
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr

080049b4 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b083      	sub	sp, #12
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80049bc:	bf00      	nop
 80049be:	370c      	adds	r7, #12
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr

080049c8 <HAL_DAC_GetValue>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval The selected DAC channel data output value.
  */
uint32_t HAL_DAC_GetValue(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	6039      	str	r1, [r7, #0]

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(Channel == DAC_CHANNEL_1)
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d103      	bne.n	80049e0 <HAL_DAC_GetValue+0x18>
  {
    return hdac->Instance->DOR1;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049de:	e002      	b.n	80049e6 <HAL_DAC_GetValue+0x1e>
  }
  else
  {
    return hdac->Instance->DOR2;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	370c      	adds	r7, #12
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr

080049f2 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80049f2:	b580      	push	{r7, lr}
 80049f4:	b088      	sub	sp, #32
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	60f8      	str	r0, [r7, #12]
 80049fa:	60b9      	str	r1, [r7, #8]
 80049fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80049fe:	2300      	movs	r3, #0
 8004a00:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	795b      	ldrb	r3, [r3, #5]
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d101      	bne.n	8004a0e <HAL_DAC_ConfigChannel+0x1c>
 8004a0a:	2302      	movs	r3, #2
 8004a0c:	e114      	b.n	8004c38 <HAL_DAC_ConfigChannel+0x246>
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2201      	movs	r2, #1
 8004a12:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2202      	movs	r2, #2
 8004a18:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	2b04      	cmp	r3, #4
 8004a20:	f040 8081 	bne.w	8004b26 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004a24:	f7fd fbea 	bl	80021fc <HAL_GetTick>
 8004a28:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d140      	bne.n	8004ab2 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004a30:	e018      	b.n	8004a64 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004a32:	f7fd fbe3 	bl	80021fc <HAL_GetTick>
 8004a36:	4602      	mov	r2, r0
 8004a38:	69fb      	ldr	r3, [r7, #28]
 8004a3a:	1ad3      	subs	r3, r2, r3
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d911      	bls.n	8004a64 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a46:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d00a      	beq.n	8004a64 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	691b      	ldr	r3, [r3, #16]
 8004a52:	f043 0208 	orr.w	r2, r3, #8
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2203      	movs	r2, #3
 8004a5e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004a60:	2303      	movs	r3, #3
 8004a62:	e0e9      	b.n	8004c38 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a6a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d1df      	bne.n	8004a32 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8004a72:	2001      	movs	r0, #1
 8004a74:	f7fd fbce 	bl	8002214 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	68ba      	ldr	r2, [r7, #8]
 8004a7e:	6992      	ldr	r2, [r2, #24]
 8004a80:	641a      	str	r2, [r3, #64]	@ 0x40
 8004a82:	e023      	b.n	8004acc <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004a84:	f7fd fbba 	bl	80021fc <HAL_GetTick>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	69fb      	ldr	r3, [r7, #28]
 8004a8c:	1ad3      	subs	r3, r2, r3
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d90f      	bls.n	8004ab2 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	da0a      	bge.n	8004ab2 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	691b      	ldr	r3, [r3, #16]
 8004aa0:	f043 0208 	orr.w	r2, r3, #8
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2203      	movs	r2, #3
 8004aac:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e0c2      	b.n	8004c38 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	dbe3      	blt.n	8004a84 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8004abc:	2001      	movs	r0, #1
 8004abe:	f7fd fba9 	bl	8002214 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	68ba      	ldr	r2, [r7, #8]
 8004ac8:	6992      	ldr	r2, [r2, #24]
 8004aca:	645a      	str	r2, [r3, #68]	@ 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f003 0310 	and.w	r3, r3, #16
 8004ad8:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8004adc:	fa01 f303 	lsl.w	r3, r1, r3
 8004ae0:	43db      	mvns	r3, r3
 8004ae2:	ea02 0103 	and.w	r1, r2, r3
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	69da      	ldr	r2, [r3, #28]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f003 0310 	and.w	r3, r3, #16
 8004af0:	409a      	lsls	r2, r3
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	430a      	orrs	r2, r1
 8004af8:	649a      	str	r2, [r3, #72]	@ 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f003 0310 	and.w	r3, r3, #16
 8004b06:	21ff      	movs	r1, #255	@ 0xff
 8004b08:	fa01 f303 	lsl.w	r3, r1, r3
 8004b0c:	43db      	mvns	r3, r3
 8004b0e:	ea02 0103 	and.w	r1, r2, r3
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	6a1a      	ldr	r2, [r3, #32]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f003 0310 	and.w	r3, r3, #16
 8004b1c:	409a      	lsls	r2, r3
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	430a      	orrs	r2, r1
 8004b24:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	691b      	ldr	r3, [r3, #16]
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d11d      	bne.n	8004b6a <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b34:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f003 0310 	and.w	r3, r3, #16
 8004b3c:	221f      	movs	r2, #31
 8004b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b42:	43db      	mvns	r3, r3
 8004b44:	69ba      	ldr	r2, [r7, #24]
 8004b46:	4013      	ands	r3, r2
 8004b48:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	695b      	ldr	r3, [r3, #20]
 8004b4e:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f003 0310 	and.w	r3, r3, #16
 8004b56:	697a      	ldr	r2, [r7, #20]
 8004b58:	fa02 f303 	lsl.w	r3, r2, r3
 8004b5c:	69ba      	ldr	r2, [r7, #24]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	69ba      	ldr	r2, [r7, #24]
 8004b68:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b70:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f003 0310 	and.w	r3, r3, #16
 8004b78:	2207      	movs	r2, #7
 8004b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b7e:	43db      	mvns	r3, r3
 8004b80:	69ba      	ldr	r2, [r7, #24]
 8004b82:	4013      	ands	r3, r2
 8004b84:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	431a      	orrs	r2, r3
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f003 0310 	and.w	r3, r3, #16
 8004b9e:	697a      	ldr	r2, [r7, #20]
 8004ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba4:	69ba      	ldr	r2, [r7, #24]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	69ba      	ldr	r2, [r7, #24]
 8004bb0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	6819      	ldr	r1, [r3, #0]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	f003 0310 	and.w	r3, r3, #16
 8004bbe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc6:	43da      	mvns	r2, r3
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	400a      	ands	r2, r1
 8004bce:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f003 0310 	and.w	r3, r3, #16
 8004bde:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8004be2:	fa02 f303 	lsl.w	r3, r2, r3
 8004be6:	43db      	mvns	r3, r3
 8004be8:	69ba      	ldr	r2, [r7, #24]
 8004bea:	4013      	ands	r3, r2
 8004bec:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f003 0310 	and.w	r3, r3, #16
 8004bfa:	697a      	ldr	r2, [r7, #20]
 8004bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8004c00:	69ba      	ldr	r2, [r7, #24]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	69ba      	ldr	r2, [r7, #24]
 8004c0c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	6819      	ldr	r1, [r3, #0]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f003 0310 	and.w	r3, r3, #16
 8004c1a:	22c0      	movs	r2, #192	@ 0xc0
 8004c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c20:	43da      	mvns	r2, r3
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	400a      	ands	r2, r1
 8004c28:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2200      	movs	r2, #0
 8004c34:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004c36:	2300      	movs	r3, #0
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3720      	adds	r7, #32
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b084      	sub	sp, #16
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c4c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8004c4e:	68f8      	ldr	r0, [r7, #12]
 8004c50:	f7ff fe92 	bl	8004978 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2201      	movs	r2, #1
 8004c58:	711a      	strb	r2, [r3, #4]
}
 8004c5a:	bf00      	nop
 8004c5c:	3710      	adds	r7, #16
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}

08004c62 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004c62:	b580      	push	{r7, lr}
 8004c64:	b084      	sub	sp, #16
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c6e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8004c70:	68f8      	ldr	r0, [r7, #12]
 8004c72:	f7ff fe8b 	bl	800498c <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004c76:	bf00      	nop
 8004c78:	3710      	adds	r7, #16
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}

08004c7e <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8004c7e:	b580      	push	{r7, lr}
 8004c80:	b084      	sub	sp, #16
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c8a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	691b      	ldr	r3, [r3, #16]
 8004c90:	f043 0204 	orr.w	r2, r3, #4
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8004c98:	68f8      	ldr	r0, [r7, #12]
 8004c9a:	f7ff fe81 	bl	80049a0 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	711a      	strb	r2, [r3, #4]
}
 8004ca4:	bf00      	nop
 8004ca6:	3710      	adds	r7, #16
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}

08004cac <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b083      	sub	sp, #12
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8004cb4:	bf00      	nop
 8004cb6:	370c      	adds	r7, #12
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr

08004cc0 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b083      	sub	sp, #12
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8004cc8:	bf00      	nop
 8004cca:	370c      	adds	r7, #12
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr

08004cd4 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b083      	sub	sp, #12
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8004cdc:	bf00      	nop
 8004cde:	370c      	adds	r7, #12
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr

08004ce8 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b083      	sub	sp, #12
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8004cf0:	bf00      	nop
 8004cf2:	370c      	adds	r7, #12
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr

08004cfc <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d08:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8004d0a:	68f8      	ldr	r0, [r7, #12]
 8004d0c:	f7ff ffce 	bl	8004cac <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2201      	movs	r2, #1
 8004d14:	711a      	strb	r2, [r3, #4]
}
 8004d16:	bf00      	nop
 8004d18:	3710      	adds	r7, #16
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}

08004d1e <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004d1e:	b580      	push	{r7, lr}
 8004d20:	b084      	sub	sp, #16
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d2a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8004d2c:	68f8      	ldr	r0, [r7, #12]
 8004d2e:	f7ff ffc7 	bl	8004cc0 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004d32:	bf00      	nop
 8004d34:	3710      	adds	r7, #16
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}

08004d3a <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8004d3a:	b580      	push	{r7, lr}
 8004d3c:	b084      	sub	sp, #16
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d46:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	691b      	ldr	r3, [r3, #16]
 8004d4c:	f043 0204 	orr.w	r2, r3, #4
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8004d54:	68f8      	ldr	r0, [r7, #12]
 8004d56:	f7ff ffbd 	bl	8004cd4 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	711a      	strb	r2, [r3, #4]
}
 8004d60:	bf00      	nop
 8004d62:	3710      	adds	r7, #16
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}

08004d68 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b085      	sub	sp, #20
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d101      	bne.n	8004d7a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e098      	b.n	8004eac <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	461a      	mov	r2, r3
 8004d80:	4b4d      	ldr	r3, [pc, #308]	@ (8004eb8 <HAL_DMA_Init+0x150>)
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d80f      	bhi.n	8004da6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	4b4b      	ldr	r3, [pc, #300]	@ (8004ebc <HAL_DMA_Init+0x154>)
 8004d8e:	4413      	add	r3, r2
 8004d90:	4a4b      	ldr	r2, [pc, #300]	@ (8004ec0 <HAL_DMA_Init+0x158>)
 8004d92:	fba2 2303 	umull	r2, r3, r2, r3
 8004d96:	091b      	lsrs	r3, r3, #4
 8004d98:	009a      	lsls	r2, r3, #2
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a48      	ldr	r2, [pc, #288]	@ (8004ec4 <HAL_DMA_Init+0x15c>)
 8004da2:	641a      	str	r2, [r3, #64]	@ 0x40
 8004da4:	e00e      	b.n	8004dc4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	461a      	mov	r2, r3
 8004dac:	4b46      	ldr	r3, [pc, #280]	@ (8004ec8 <HAL_DMA_Init+0x160>)
 8004dae:	4413      	add	r3, r2
 8004db0:	4a43      	ldr	r2, [pc, #268]	@ (8004ec0 <HAL_DMA_Init+0x158>)
 8004db2:	fba2 2303 	umull	r2, r3, r2, r3
 8004db6:	091b      	lsrs	r3, r3, #4
 8004db8:	009a      	lsls	r2, r3, #2
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a42      	ldr	r2, [pc, #264]	@ (8004ecc <HAL_DMA_Init+0x164>)
 8004dc2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2202      	movs	r2, #2
 8004dc8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004dda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dde:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004de8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	691b      	ldr	r3, [r3, #16]
 8004dee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004df4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6a1b      	ldr	r3, [r3, #32]
 8004e06:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004e08:	68fa      	ldr	r2, [r7, #12]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	68fa      	ldr	r2, [r7, #12]
 8004e14:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004e1e:	d039      	beq.n	8004e94 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e24:	4a27      	ldr	r2, [pc, #156]	@ (8004ec4 <HAL_DMA_Init+0x15c>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d11a      	bne.n	8004e60 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004e2a:	4b29      	ldr	r3, [pc, #164]	@ (8004ed0 <HAL_DMA_Init+0x168>)
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e32:	f003 031c 	and.w	r3, r3, #28
 8004e36:	210f      	movs	r1, #15
 8004e38:	fa01 f303 	lsl.w	r3, r1, r3
 8004e3c:	43db      	mvns	r3, r3
 8004e3e:	4924      	ldr	r1, [pc, #144]	@ (8004ed0 <HAL_DMA_Init+0x168>)
 8004e40:	4013      	ands	r3, r2
 8004e42:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004e44:	4b22      	ldr	r3, [pc, #136]	@ (8004ed0 <HAL_DMA_Init+0x168>)
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6859      	ldr	r1, [r3, #4]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e50:	f003 031c 	and.w	r3, r3, #28
 8004e54:	fa01 f303 	lsl.w	r3, r1, r3
 8004e58:	491d      	ldr	r1, [pc, #116]	@ (8004ed0 <HAL_DMA_Init+0x168>)
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	600b      	str	r3, [r1, #0]
 8004e5e:	e019      	b.n	8004e94 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004e60:	4b1c      	ldr	r3, [pc, #112]	@ (8004ed4 <HAL_DMA_Init+0x16c>)
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e68:	f003 031c 	and.w	r3, r3, #28
 8004e6c:	210f      	movs	r1, #15
 8004e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e72:	43db      	mvns	r3, r3
 8004e74:	4917      	ldr	r1, [pc, #92]	@ (8004ed4 <HAL_DMA_Init+0x16c>)
 8004e76:	4013      	ands	r3, r2
 8004e78:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004e7a:	4b16      	ldr	r3, [pc, #88]	@ (8004ed4 <HAL_DMA_Init+0x16c>)
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6859      	ldr	r1, [r3, #4]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e86:	f003 031c 	and.w	r3, r3, #28
 8004e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e8e:	4911      	ldr	r1, [pc, #68]	@ (8004ed4 <HAL_DMA_Init+0x16c>)
 8004e90:	4313      	orrs	r3, r2
 8004e92:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2200      	movs	r2, #0
 8004e98:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004eaa:	2300      	movs	r3, #0
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3714      	adds	r7, #20
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr
 8004eb8:	40020407 	.word	0x40020407
 8004ebc:	bffdfff8 	.word	0xbffdfff8
 8004ec0:	cccccccd 	.word	0xcccccccd
 8004ec4:	40020000 	.word	0x40020000
 8004ec8:	bffdfbf8 	.word	0xbffdfbf8
 8004ecc:	40020400 	.word	0x40020400
 8004ed0:	400200a8 	.word	0x400200a8
 8004ed4:	400204a8 	.word	0x400204a8

08004ed8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b086      	sub	sp, #24
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	60f8      	str	r0, [r7, #12]
 8004ee0:	60b9      	str	r1, [r7, #8]
 8004ee2:	607a      	str	r2, [r7, #4]
 8004ee4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d101      	bne.n	8004ef8 <HAL_DMA_Start_IT+0x20>
 8004ef4:	2302      	movs	r3, #2
 8004ef6:	e04b      	b.n	8004f90 <HAL_DMA_Start_IT+0xb8>
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d13a      	bne.n	8004f82 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2202      	movs	r2, #2
 8004f10:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2200      	movs	r2, #0
 8004f18:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f022 0201 	bic.w	r2, r2, #1
 8004f28:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	68b9      	ldr	r1, [r7, #8]
 8004f30:	68f8      	ldr	r0, [r7, #12]
 8004f32:	f000 f95f 	bl	80051f4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d008      	beq.n	8004f50 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f042 020e 	orr.w	r2, r2, #14
 8004f4c:	601a      	str	r2, [r3, #0]
 8004f4e:	e00f      	b.n	8004f70 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f022 0204 	bic.w	r2, r2, #4
 8004f5e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f042 020a 	orr.w	r2, r2, #10
 8004f6e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f042 0201 	orr.w	r2, r2, #1
 8004f7e:	601a      	str	r2, [r3, #0]
 8004f80:	e005      	b.n	8004f8e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2200      	movs	r2, #0
 8004f86:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004f8a:	2302      	movs	r3, #2
 8004f8c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004f8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3718      	adds	r7, #24
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}

08004f98 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b085      	sub	sp, #20
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	2b02      	cmp	r3, #2
 8004fae:	d008      	beq.n	8004fc2 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2204      	movs	r2, #4
 8004fb4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e022      	b.n	8005008 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f022 020e 	bic.w	r2, r2, #14
 8004fd0:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f022 0201 	bic.w	r2, r2, #1
 8004fe0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fe6:	f003 021c 	and.w	r2, r3, #28
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fee:	2101      	movs	r1, #1
 8004ff0:	fa01 f202 	lsl.w	r2, r1, r2
 8004ff4:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8005006:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8005008:	4618      	mov	r0, r3
 800500a:	3714      	adds	r7, #20
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr

08005014 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800501c:	2300      	movs	r3, #0
 800501e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005026:	b2db      	uxtb	r3, r3
 8005028:	2b02      	cmp	r3, #2
 800502a:	d005      	beq.n	8005038 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2204      	movs	r2, #4
 8005030:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	73fb      	strb	r3, [r7, #15]
 8005036:	e029      	b.n	800508c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f022 020e 	bic.w	r2, r2, #14
 8005046:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f022 0201 	bic.w	r2, r2, #1
 8005056:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800505c:	f003 021c 	and.w	r2, r3, #28
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005064:	2101      	movs	r1, #1
 8005066:	fa01 f202 	lsl.w	r2, r1, r2
 800506a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2200      	movs	r2, #0
 8005078:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005080:	2b00      	cmp	r3, #0
 8005082:	d003      	beq.n	800508c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	4798      	blx	r3
    }
  }
  return status;
 800508c:	7bfb      	ldrb	r3, [r7, #15]
}
 800508e:	4618      	mov	r0, r3
 8005090:	3710      	adds	r7, #16
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}

08005096 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005096:	b580      	push	{r7, lr}
 8005098:	b084      	sub	sp, #16
 800509a:	af00      	add	r7, sp, #0
 800509c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050b2:	f003 031c 	and.w	r3, r3, #28
 80050b6:	2204      	movs	r2, #4
 80050b8:	409a      	lsls	r2, r3
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	4013      	ands	r3, r2
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d026      	beq.n	8005110 <HAL_DMA_IRQHandler+0x7a>
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	f003 0304 	and.w	r3, r3, #4
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d021      	beq.n	8005110 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f003 0320 	and.w	r3, r3, #32
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d107      	bne.n	80050ea <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f022 0204 	bic.w	r2, r2, #4
 80050e8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050ee:	f003 021c 	and.w	r2, r3, #28
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050f6:	2104      	movs	r1, #4
 80050f8:	fa01 f202 	lsl.w	r2, r1, r2
 80050fc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005102:	2b00      	cmp	r3, #0
 8005104:	d071      	beq.n	80051ea <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800510e:	e06c      	b.n	80051ea <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005114:	f003 031c 	and.w	r3, r3, #28
 8005118:	2202      	movs	r2, #2
 800511a:	409a      	lsls	r2, r3
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	4013      	ands	r3, r2
 8005120:	2b00      	cmp	r3, #0
 8005122:	d02e      	beq.n	8005182 <HAL_DMA_IRQHandler+0xec>
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	f003 0302 	and.w	r3, r3, #2
 800512a:	2b00      	cmp	r3, #0
 800512c:	d029      	beq.n	8005182 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 0320 	and.w	r3, r3, #32
 8005138:	2b00      	cmp	r3, #0
 800513a:	d10b      	bne.n	8005154 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f022 020a 	bic.w	r2, r2, #10
 800514a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005158:	f003 021c 	and.w	r2, r3, #28
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005160:	2102      	movs	r1, #2
 8005162:	fa01 f202 	lsl.w	r2, r1, r2
 8005166:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2200      	movs	r2, #0
 800516c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005174:	2b00      	cmp	r3, #0
 8005176:	d038      	beq.n	80051ea <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005180:	e033      	b.n	80051ea <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005186:	f003 031c 	and.w	r3, r3, #28
 800518a:	2208      	movs	r2, #8
 800518c:	409a      	lsls	r2, r3
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	4013      	ands	r3, r2
 8005192:	2b00      	cmp	r3, #0
 8005194:	d02a      	beq.n	80051ec <HAL_DMA_IRQHandler+0x156>
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	f003 0308 	and.w	r3, r3, #8
 800519c:	2b00      	cmp	r3, #0
 800519e:	d025      	beq.n	80051ec <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f022 020e 	bic.w	r2, r2, #14
 80051ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051b4:	f003 021c 	and.w	r2, r3, #28
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051bc:	2101      	movs	r1, #1
 80051be:	fa01 f202 	lsl.w	r2, r1, r2
 80051c2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2201      	movs	r2, #1
 80051c8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2201      	movs	r2, #1
 80051ce:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2200      	movs	r2, #0
 80051d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d004      	beq.n	80051ec <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80051ea:	bf00      	nop
 80051ec:	bf00      	nop
}
 80051ee:	3710      	adds	r7, #16
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}

080051f4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b085      	sub	sp, #20
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	60b9      	str	r1, [r7, #8]
 80051fe:	607a      	str	r2, [r7, #4]
 8005200:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005206:	f003 021c 	and.w	r2, r3, #28
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800520e:	2101      	movs	r1, #1
 8005210:	fa01 f202 	lsl.w	r2, r1, r2
 8005214:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	683a      	ldr	r2, [r7, #0]
 800521c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	2b10      	cmp	r3, #16
 8005224:	d108      	bne.n	8005238 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	68ba      	ldr	r2, [r7, #8]
 8005234:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005236:	e007      	b.n	8005248 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	68ba      	ldr	r2, [r7, #8]
 800523e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	60da      	str	r2, [r3, #12]
}
 8005248:	bf00      	nop
 800524a:	3714      	adds	r7, #20
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr

08005254 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005254:	b480      	push	{r7}
 8005256:	b087      	sub	sp, #28
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800525e:	2300      	movs	r3, #0
 8005260:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005262:	e17f      	b.n	8005564 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	2101      	movs	r1, #1
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	fa01 f303 	lsl.w	r3, r1, r3
 8005270:	4013      	ands	r3, r2
 8005272:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2b00      	cmp	r3, #0
 8005278:	f000 8171 	beq.w	800555e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	f003 0303 	and.w	r3, r3, #3
 8005284:	2b01      	cmp	r3, #1
 8005286:	d005      	beq.n	8005294 <HAL_GPIO_Init+0x40>
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	f003 0303 	and.w	r3, r3, #3
 8005290:	2b02      	cmp	r3, #2
 8005292:	d130      	bne.n	80052f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	005b      	lsls	r3, r3, #1
 800529e:	2203      	movs	r2, #3
 80052a0:	fa02 f303 	lsl.w	r3, r2, r3
 80052a4:	43db      	mvns	r3, r3
 80052a6:	693a      	ldr	r2, [r7, #16]
 80052a8:	4013      	ands	r3, r2
 80052aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	68da      	ldr	r2, [r3, #12]
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	005b      	lsls	r3, r3, #1
 80052b4:	fa02 f303 	lsl.w	r3, r2, r3
 80052b8:	693a      	ldr	r2, [r7, #16]
 80052ba:	4313      	orrs	r3, r2
 80052bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	693a      	ldr	r2, [r7, #16]
 80052c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80052ca:	2201      	movs	r2, #1
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	fa02 f303 	lsl.w	r3, r2, r3
 80052d2:	43db      	mvns	r3, r3
 80052d4:	693a      	ldr	r2, [r7, #16]
 80052d6:	4013      	ands	r3, r2
 80052d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	091b      	lsrs	r3, r3, #4
 80052e0:	f003 0201 	and.w	r2, r3, #1
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	fa02 f303 	lsl.w	r3, r2, r3
 80052ea:	693a      	ldr	r2, [r7, #16]
 80052ec:	4313      	orrs	r3, r2
 80052ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	693a      	ldr	r2, [r7, #16]
 80052f4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	f003 0303 	and.w	r3, r3, #3
 80052fe:	2b03      	cmp	r3, #3
 8005300:	d118      	bne.n	8005334 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005306:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8005308:	2201      	movs	r2, #1
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	fa02 f303 	lsl.w	r3, r2, r3
 8005310:	43db      	mvns	r3, r3
 8005312:	693a      	ldr	r2, [r7, #16]
 8005314:	4013      	ands	r3, r2
 8005316:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	08db      	lsrs	r3, r3, #3
 800531e:	f003 0201 	and.w	r2, r3, #1
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	fa02 f303 	lsl.w	r3, r2, r3
 8005328:	693a      	ldr	r2, [r7, #16]
 800532a:	4313      	orrs	r3, r2
 800532c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	693a      	ldr	r2, [r7, #16]
 8005332:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	f003 0303 	and.w	r3, r3, #3
 800533c:	2b03      	cmp	r3, #3
 800533e:	d017      	beq.n	8005370 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	005b      	lsls	r3, r3, #1
 800534a:	2203      	movs	r2, #3
 800534c:	fa02 f303 	lsl.w	r3, r2, r3
 8005350:	43db      	mvns	r3, r3
 8005352:	693a      	ldr	r2, [r7, #16]
 8005354:	4013      	ands	r3, r2
 8005356:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	689a      	ldr	r2, [r3, #8]
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	005b      	lsls	r3, r3, #1
 8005360:	fa02 f303 	lsl.w	r3, r2, r3
 8005364:	693a      	ldr	r2, [r7, #16]
 8005366:	4313      	orrs	r3, r2
 8005368:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	693a      	ldr	r2, [r7, #16]
 800536e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	f003 0303 	and.w	r3, r3, #3
 8005378:	2b02      	cmp	r3, #2
 800537a:	d123      	bne.n	80053c4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	08da      	lsrs	r2, r3, #3
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	3208      	adds	r2, #8
 8005384:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005388:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	f003 0307 	and.w	r3, r3, #7
 8005390:	009b      	lsls	r3, r3, #2
 8005392:	220f      	movs	r2, #15
 8005394:	fa02 f303 	lsl.w	r3, r2, r3
 8005398:	43db      	mvns	r3, r3
 800539a:	693a      	ldr	r2, [r7, #16]
 800539c:	4013      	ands	r3, r2
 800539e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	691a      	ldr	r2, [r3, #16]
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	f003 0307 	and.w	r3, r3, #7
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	fa02 f303 	lsl.w	r3, r2, r3
 80053b0:	693a      	ldr	r2, [r7, #16]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	08da      	lsrs	r2, r3, #3
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	3208      	adds	r2, #8
 80053be:	6939      	ldr	r1, [r7, #16]
 80053c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	005b      	lsls	r3, r3, #1
 80053ce:	2203      	movs	r2, #3
 80053d0:	fa02 f303 	lsl.w	r3, r2, r3
 80053d4:	43db      	mvns	r3, r3
 80053d6:	693a      	ldr	r2, [r7, #16]
 80053d8:	4013      	ands	r3, r2
 80053da:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	f003 0203 	and.w	r2, r3, #3
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	005b      	lsls	r3, r3, #1
 80053e8:	fa02 f303 	lsl.w	r3, r2, r3
 80053ec:	693a      	ldr	r2, [r7, #16]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	693a      	ldr	r2, [r7, #16]
 80053f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005400:	2b00      	cmp	r3, #0
 8005402:	f000 80ac 	beq.w	800555e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005406:	4b5f      	ldr	r3, [pc, #380]	@ (8005584 <HAL_GPIO_Init+0x330>)
 8005408:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800540a:	4a5e      	ldr	r2, [pc, #376]	@ (8005584 <HAL_GPIO_Init+0x330>)
 800540c:	f043 0301 	orr.w	r3, r3, #1
 8005410:	6613      	str	r3, [r2, #96]	@ 0x60
 8005412:	4b5c      	ldr	r3, [pc, #368]	@ (8005584 <HAL_GPIO_Init+0x330>)
 8005414:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005416:	f003 0301 	and.w	r3, r3, #1
 800541a:	60bb      	str	r3, [r7, #8]
 800541c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800541e:	4a5a      	ldr	r2, [pc, #360]	@ (8005588 <HAL_GPIO_Init+0x334>)
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	089b      	lsrs	r3, r3, #2
 8005424:	3302      	adds	r3, #2
 8005426:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800542a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	f003 0303 	and.w	r3, r3, #3
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	220f      	movs	r2, #15
 8005436:	fa02 f303 	lsl.w	r3, r2, r3
 800543a:	43db      	mvns	r3, r3
 800543c:	693a      	ldr	r2, [r7, #16]
 800543e:	4013      	ands	r3, r2
 8005440:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005448:	d025      	beq.n	8005496 <HAL_GPIO_Init+0x242>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	4a4f      	ldr	r2, [pc, #316]	@ (800558c <HAL_GPIO_Init+0x338>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d01f      	beq.n	8005492 <HAL_GPIO_Init+0x23e>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	4a4e      	ldr	r2, [pc, #312]	@ (8005590 <HAL_GPIO_Init+0x33c>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d019      	beq.n	800548e <HAL_GPIO_Init+0x23a>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	4a4d      	ldr	r2, [pc, #308]	@ (8005594 <HAL_GPIO_Init+0x340>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d013      	beq.n	800548a <HAL_GPIO_Init+0x236>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	4a4c      	ldr	r2, [pc, #304]	@ (8005598 <HAL_GPIO_Init+0x344>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d00d      	beq.n	8005486 <HAL_GPIO_Init+0x232>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4a4b      	ldr	r2, [pc, #300]	@ (800559c <HAL_GPIO_Init+0x348>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d007      	beq.n	8005482 <HAL_GPIO_Init+0x22e>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4a4a      	ldr	r2, [pc, #296]	@ (80055a0 <HAL_GPIO_Init+0x34c>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d101      	bne.n	800547e <HAL_GPIO_Init+0x22a>
 800547a:	2306      	movs	r3, #6
 800547c:	e00c      	b.n	8005498 <HAL_GPIO_Init+0x244>
 800547e:	2307      	movs	r3, #7
 8005480:	e00a      	b.n	8005498 <HAL_GPIO_Init+0x244>
 8005482:	2305      	movs	r3, #5
 8005484:	e008      	b.n	8005498 <HAL_GPIO_Init+0x244>
 8005486:	2304      	movs	r3, #4
 8005488:	e006      	b.n	8005498 <HAL_GPIO_Init+0x244>
 800548a:	2303      	movs	r3, #3
 800548c:	e004      	b.n	8005498 <HAL_GPIO_Init+0x244>
 800548e:	2302      	movs	r3, #2
 8005490:	e002      	b.n	8005498 <HAL_GPIO_Init+0x244>
 8005492:	2301      	movs	r3, #1
 8005494:	e000      	b.n	8005498 <HAL_GPIO_Init+0x244>
 8005496:	2300      	movs	r3, #0
 8005498:	697a      	ldr	r2, [r7, #20]
 800549a:	f002 0203 	and.w	r2, r2, #3
 800549e:	0092      	lsls	r2, r2, #2
 80054a0:	4093      	lsls	r3, r2
 80054a2:	693a      	ldr	r2, [r7, #16]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80054a8:	4937      	ldr	r1, [pc, #220]	@ (8005588 <HAL_GPIO_Init+0x334>)
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	089b      	lsrs	r3, r3, #2
 80054ae:	3302      	adds	r3, #2
 80054b0:	693a      	ldr	r2, [r7, #16]
 80054b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80054b6:	4b3b      	ldr	r3, [pc, #236]	@ (80055a4 <HAL_GPIO_Init+0x350>)
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	43db      	mvns	r3, r3
 80054c0:	693a      	ldr	r2, [r7, #16]
 80054c2:	4013      	ands	r3, r2
 80054c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d003      	beq.n	80054da <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80054d2:	693a      	ldr	r2, [r7, #16]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	4313      	orrs	r3, r2
 80054d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80054da:	4a32      	ldr	r2, [pc, #200]	@ (80055a4 <HAL_GPIO_Init+0x350>)
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80054e0:	4b30      	ldr	r3, [pc, #192]	@ (80055a4 <HAL_GPIO_Init+0x350>)
 80054e2:	68db      	ldr	r3, [r3, #12]
 80054e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	43db      	mvns	r3, r3
 80054ea:	693a      	ldr	r2, [r7, #16]
 80054ec:	4013      	ands	r3, r2
 80054ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d003      	beq.n	8005504 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80054fc:	693a      	ldr	r2, [r7, #16]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	4313      	orrs	r3, r2
 8005502:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005504:	4a27      	ldr	r2, [pc, #156]	@ (80055a4 <HAL_GPIO_Init+0x350>)
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800550a:	4b26      	ldr	r3, [pc, #152]	@ (80055a4 <HAL_GPIO_Init+0x350>)
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	43db      	mvns	r3, r3
 8005514:	693a      	ldr	r2, [r7, #16]
 8005516:	4013      	ands	r3, r2
 8005518:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005522:	2b00      	cmp	r3, #0
 8005524:	d003      	beq.n	800552e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8005526:	693a      	ldr	r2, [r7, #16]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	4313      	orrs	r3, r2
 800552c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800552e:	4a1d      	ldr	r2, [pc, #116]	@ (80055a4 <HAL_GPIO_Init+0x350>)
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005534:	4b1b      	ldr	r3, [pc, #108]	@ (80055a4 <HAL_GPIO_Init+0x350>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	43db      	mvns	r3, r3
 800553e:	693a      	ldr	r2, [r7, #16]
 8005540:	4013      	ands	r3, r2
 8005542:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800554c:	2b00      	cmp	r3, #0
 800554e:	d003      	beq.n	8005558 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8005550:	693a      	ldr	r2, [r7, #16]
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	4313      	orrs	r3, r2
 8005556:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005558:	4a12      	ldr	r2, [pc, #72]	@ (80055a4 <HAL_GPIO_Init+0x350>)
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	3301      	adds	r3, #1
 8005562:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	fa22 f303 	lsr.w	r3, r2, r3
 800556e:	2b00      	cmp	r3, #0
 8005570:	f47f ae78 	bne.w	8005264 <HAL_GPIO_Init+0x10>
  }
}
 8005574:	bf00      	nop
 8005576:	bf00      	nop
 8005578:	371c      	adds	r7, #28
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr
 8005582:	bf00      	nop
 8005584:	40021000 	.word	0x40021000
 8005588:	40010000 	.word	0x40010000
 800558c:	48000400 	.word	0x48000400
 8005590:	48000800 	.word	0x48000800
 8005594:	48000c00 	.word	0x48000c00
 8005598:	48001000 	.word	0x48001000
 800559c:	48001400 	.word	0x48001400
 80055a0:	48001800 	.word	0x48001800
 80055a4:	40010400 	.word	0x40010400

080055a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b083      	sub	sp, #12
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	460b      	mov	r3, r1
 80055b2:	807b      	strh	r3, [r7, #2]
 80055b4:	4613      	mov	r3, r2
 80055b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80055b8:	787b      	ldrb	r3, [r7, #1]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d003      	beq.n	80055c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80055be:	887a      	ldrh	r2, [r7, #2]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80055c4:	e002      	b.n	80055cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80055c6:	887a      	ldrh	r2, [r7, #2]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80055cc:	bf00      	nop
 80055ce:	370c      	adds	r7, #12
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr

080055d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b082      	sub	sp, #8
 80055dc:	af00      	add	r7, sp, #0
 80055de:	4603      	mov	r3, r0
 80055e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80055e2:	4b08      	ldr	r3, [pc, #32]	@ (8005604 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80055e4:	695a      	ldr	r2, [r3, #20]
 80055e6:	88fb      	ldrh	r3, [r7, #6]
 80055e8:	4013      	ands	r3, r2
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d006      	beq.n	80055fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80055ee:	4a05      	ldr	r2, [pc, #20]	@ (8005604 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80055f0:	88fb      	ldrh	r3, [r7, #6]
 80055f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80055f4:	88fb      	ldrh	r3, [r7, #6]
 80055f6:	4618      	mov	r0, r3
 80055f8:	f7fb fe0e 	bl	8001218 <HAL_GPIO_EXTI_Callback>
  }
}
 80055fc:	bf00      	nop
 80055fe:	3708      	adds	r7, #8
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}
 8005604:	40010400 	.word	0x40010400

08005608 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005608:	b480      	push	{r7}
 800560a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800560c:	4b04      	ldr	r3, [pc, #16]	@ (8005620 <HAL_PWREx_GetVoltageRange+0x18>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8005614:	4618      	mov	r0, r3
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr
 800561e:	bf00      	nop
 8005620:	40007000 	.word	0x40007000

08005624 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005624:	b480      	push	{r7}
 8005626:	b085      	sub	sp, #20
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005632:	d130      	bne.n	8005696 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005634:	4b23      	ldr	r3, [pc, #140]	@ (80056c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800563c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005640:	d038      	beq.n	80056b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005642:	4b20      	ldr	r3, [pc, #128]	@ (80056c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800564a:	4a1e      	ldr	r2, [pc, #120]	@ (80056c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800564c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005650:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005652:	4b1d      	ldr	r3, [pc, #116]	@ (80056c8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	2232      	movs	r2, #50	@ 0x32
 8005658:	fb02 f303 	mul.w	r3, r2, r3
 800565c:	4a1b      	ldr	r2, [pc, #108]	@ (80056cc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800565e:	fba2 2303 	umull	r2, r3, r2, r3
 8005662:	0c9b      	lsrs	r3, r3, #18
 8005664:	3301      	adds	r3, #1
 8005666:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005668:	e002      	b.n	8005670 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	3b01      	subs	r3, #1
 800566e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005670:	4b14      	ldr	r3, [pc, #80]	@ (80056c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005672:	695b      	ldr	r3, [r3, #20]
 8005674:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005678:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800567c:	d102      	bne.n	8005684 <HAL_PWREx_ControlVoltageScaling+0x60>
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d1f2      	bne.n	800566a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005684:	4b0f      	ldr	r3, [pc, #60]	@ (80056c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005686:	695b      	ldr	r3, [r3, #20]
 8005688:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800568c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005690:	d110      	bne.n	80056b4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005692:	2303      	movs	r3, #3
 8005694:	e00f      	b.n	80056b6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005696:	4b0b      	ldr	r3, [pc, #44]	@ (80056c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800569e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056a2:	d007      	beq.n	80056b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80056a4:	4b07      	ldr	r3, [pc, #28]	@ (80056c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80056ac:	4a05      	ldr	r2, [pc, #20]	@ (80056c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80056ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80056b2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80056b4:	2300      	movs	r3, #0
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3714      	adds	r7, #20
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr
 80056c2:	bf00      	nop
 80056c4:	40007000 	.word	0x40007000
 80056c8:	2000000c 	.word	0x2000000c
 80056cc:	431bde83 	.word	0x431bde83

080056d0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b088      	sub	sp, #32
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d101      	bne.n	80056e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	e3ca      	b.n	8005e78 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80056e2:	4b97      	ldr	r3, [pc, #604]	@ (8005940 <HAL_RCC_OscConfig+0x270>)
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	f003 030c 	and.w	r3, r3, #12
 80056ea:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80056ec:	4b94      	ldr	r3, [pc, #592]	@ (8005940 <HAL_RCC_OscConfig+0x270>)
 80056ee:	68db      	ldr	r3, [r3, #12]
 80056f0:	f003 0303 	and.w	r3, r3, #3
 80056f4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f003 0310 	and.w	r3, r3, #16
 80056fe:	2b00      	cmp	r3, #0
 8005700:	f000 80e4 	beq.w	80058cc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005704:	69bb      	ldr	r3, [r7, #24]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d007      	beq.n	800571a <HAL_RCC_OscConfig+0x4a>
 800570a:	69bb      	ldr	r3, [r7, #24]
 800570c:	2b0c      	cmp	r3, #12
 800570e:	f040 808b 	bne.w	8005828 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	2b01      	cmp	r3, #1
 8005716:	f040 8087 	bne.w	8005828 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800571a:	4b89      	ldr	r3, [pc, #548]	@ (8005940 <HAL_RCC_OscConfig+0x270>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f003 0302 	and.w	r3, r3, #2
 8005722:	2b00      	cmp	r3, #0
 8005724:	d005      	beq.n	8005732 <HAL_RCC_OscConfig+0x62>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	699b      	ldr	r3, [r3, #24]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d101      	bne.n	8005732 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	e3a2      	b.n	8005e78 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6a1a      	ldr	r2, [r3, #32]
 8005736:	4b82      	ldr	r3, [pc, #520]	@ (8005940 <HAL_RCC_OscConfig+0x270>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 0308 	and.w	r3, r3, #8
 800573e:	2b00      	cmp	r3, #0
 8005740:	d004      	beq.n	800574c <HAL_RCC_OscConfig+0x7c>
 8005742:	4b7f      	ldr	r3, [pc, #508]	@ (8005940 <HAL_RCC_OscConfig+0x270>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800574a:	e005      	b.n	8005758 <HAL_RCC_OscConfig+0x88>
 800574c:	4b7c      	ldr	r3, [pc, #496]	@ (8005940 <HAL_RCC_OscConfig+0x270>)
 800574e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005752:	091b      	lsrs	r3, r3, #4
 8005754:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005758:	4293      	cmp	r3, r2
 800575a:	d223      	bcs.n	80057a4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6a1b      	ldr	r3, [r3, #32]
 8005760:	4618      	mov	r0, r3
 8005762:	f000 fd55 	bl	8006210 <RCC_SetFlashLatencyFromMSIRange>
 8005766:	4603      	mov	r3, r0
 8005768:	2b00      	cmp	r3, #0
 800576a:	d001      	beq.n	8005770 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	e383      	b.n	8005e78 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005770:	4b73      	ldr	r3, [pc, #460]	@ (8005940 <HAL_RCC_OscConfig+0x270>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a72      	ldr	r2, [pc, #456]	@ (8005940 <HAL_RCC_OscConfig+0x270>)
 8005776:	f043 0308 	orr.w	r3, r3, #8
 800577a:	6013      	str	r3, [r2, #0]
 800577c:	4b70      	ldr	r3, [pc, #448]	@ (8005940 <HAL_RCC_OscConfig+0x270>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6a1b      	ldr	r3, [r3, #32]
 8005788:	496d      	ldr	r1, [pc, #436]	@ (8005940 <HAL_RCC_OscConfig+0x270>)
 800578a:	4313      	orrs	r3, r2
 800578c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800578e:	4b6c      	ldr	r3, [pc, #432]	@ (8005940 <HAL_RCC_OscConfig+0x270>)
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	69db      	ldr	r3, [r3, #28]
 800579a:	021b      	lsls	r3, r3, #8
 800579c:	4968      	ldr	r1, [pc, #416]	@ (8005940 <HAL_RCC_OscConfig+0x270>)
 800579e:	4313      	orrs	r3, r2
 80057a0:	604b      	str	r3, [r1, #4]
 80057a2:	e025      	b.n	80057f0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80057a4:	4b66      	ldr	r3, [pc, #408]	@ (8005940 <HAL_RCC_OscConfig+0x270>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a65      	ldr	r2, [pc, #404]	@ (8005940 <HAL_RCC_OscConfig+0x270>)
 80057aa:	f043 0308 	orr.w	r3, r3, #8
 80057ae:	6013      	str	r3, [r2, #0]
 80057b0:	4b63      	ldr	r3, [pc, #396]	@ (8005940 <HAL_RCC_OscConfig+0x270>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6a1b      	ldr	r3, [r3, #32]
 80057bc:	4960      	ldr	r1, [pc, #384]	@ (8005940 <HAL_RCC_OscConfig+0x270>)
 80057be:	4313      	orrs	r3, r2
 80057c0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80057c2:	4b5f      	ldr	r3, [pc, #380]	@ (8005940 <HAL_RCC_OscConfig+0x270>)
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	69db      	ldr	r3, [r3, #28]
 80057ce:	021b      	lsls	r3, r3, #8
 80057d0:	495b      	ldr	r1, [pc, #364]	@ (8005940 <HAL_RCC_OscConfig+0x270>)
 80057d2:	4313      	orrs	r3, r2
 80057d4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80057d6:	69bb      	ldr	r3, [r7, #24]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d109      	bne.n	80057f0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6a1b      	ldr	r3, [r3, #32]
 80057e0:	4618      	mov	r0, r3
 80057e2:	f000 fd15 	bl	8006210 <RCC_SetFlashLatencyFromMSIRange>
 80057e6:	4603      	mov	r3, r0
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d001      	beq.n	80057f0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	e343      	b.n	8005e78 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80057f0:	f000 fc4a 	bl	8006088 <HAL_RCC_GetSysClockFreq>
 80057f4:	4602      	mov	r2, r0
 80057f6:	4b52      	ldr	r3, [pc, #328]	@ (8005940 <HAL_RCC_OscConfig+0x270>)
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	091b      	lsrs	r3, r3, #4
 80057fc:	f003 030f 	and.w	r3, r3, #15
 8005800:	4950      	ldr	r1, [pc, #320]	@ (8005944 <HAL_RCC_OscConfig+0x274>)
 8005802:	5ccb      	ldrb	r3, [r1, r3]
 8005804:	f003 031f 	and.w	r3, r3, #31
 8005808:	fa22 f303 	lsr.w	r3, r2, r3
 800580c:	4a4e      	ldr	r2, [pc, #312]	@ (8005948 <HAL_RCC_OscConfig+0x278>)
 800580e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005810:	4b4e      	ldr	r3, [pc, #312]	@ (800594c <HAL_RCC_OscConfig+0x27c>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4618      	mov	r0, r3
 8005816:	f7fc fca1 	bl	800215c <HAL_InitTick>
 800581a:	4603      	mov	r3, r0
 800581c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800581e:	7bfb      	ldrb	r3, [r7, #15]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d052      	beq.n	80058ca <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8005824:	7bfb      	ldrb	r3, [r7, #15]
 8005826:	e327      	b.n	8005e78 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	699b      	ldr	r3, [r3, #24]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d032      	beq.n	8005896 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005830:	4b43      	ldr	r3, [pc, #268]	@ (8005940 <HAL_RCC_OscConfig+0x270>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a42      	ldr	r2, [pc, #264]	@ (8005940 <HAL_RCC_OscConfig+0x270>)
 8005836:	f043 0301 	orr.w	r3, r3, #1
 800583a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800583c:	f7fc fcde 	bl	80021fc <HAL_GetTick>
 8005840:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005842:	e008      	b.n	8005856 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005844:	f7fc fcda 	bl	80021fc <HAL_GetTick>
 8005848:	4602      	mov	r2, r0
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	1ad3      	subs	r3, r2, r3
 800584e:	2b02      	cmp	r3, #2
 8005850:	d901      	bls.n	8005856 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8005852:	2303      	movs	r3, #3
 8005854:	e310      	b.n	8005e78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005856:	4b3a      	ldr	r3, [pc, #232]	@ (8005940 <HAL_RCC_OscConfig+0x270>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f003 0302 	and.w	r3, r3, #2
 800585e:	2b00      	cmp	r3, #0
 8005860:	d0f0      	beq.n	8005844 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005862:	4b37      	ldr	r3, [pc, #220]	@ (8005940 <HAL_RCC_OscConfig+0x270>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a36      	ldr	r2, [pc, #216]	@ (8005940 <HAL_RCC_OscConfig+0x270>)
 8005868:	f043 0308 	orr.w	r3, r3, #8
 800586c:	6013      	str	r3, [r2, #0]
 800586e:	4b34      	ldr	r3, [pc, #208]	@ (8005940 <HAL_RCC_OscConfig+0x270>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6a1b      	ldr	r3, [r3, #32]
 800587a:	4931      	ldr	r1, [pc, #196]	@ (8005940 <HAL_RCC_OscConfig+0x270>)
 800587c:	4313      	orrs	r3, r2
 800587e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005880:	4b2f      	ldr	r3, [pc, #188]	@ (8005940 <HAL_RCC_OscConfig+0x270>)
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	69db      	ldr	r3, [r3, #28]
 800588c:	021b      	lsls	r3, r3, #8
 800588e:	492c      	ldr	r1, [pc, #176]	@ (8005940 <HAL_RCC_OscConfig+0x270>)
 8005890:	4313      	orrs	r3, r2
 8005892:	604b      	str	r3, [r1, #4]
 8005894:	e01a      	b.n	80058cc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005896:	4b2a      	ldr	r3, [pc, #168]	@ (8005940 <HAL_RCC_OscConfig+0x270>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a29      	ldr	r2, [pc, #164]	@ (8005940 <HAL_RCC_OscConfig+0x270>)
 800589c:	f023 0301 	bic.w	r3, r3, #1
 80058a0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80058a2:	f7fc fcab 	bl	80021fc <HAL_GetTick>
 80058a6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80058a8:	e008      	b.n	80058bc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80058aa:	f7fc fca7 	bl	80021fc <HAL_GetTick>
 80058ae:	4602      	mov	r2, r0
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	1ad3      	subs	r3, r2, r3
 80058b4:	2b02      	cmp	r3, #2
 80058b6:	d901      	bls.n	80058bc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80058b8:	2303      	movs	r3, #3
 80058ba:	e2dd      	b.n	8005e78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80058bc:	4b20      	ldr	r3, [pc, #128]	@ (8005940 <HAL_RCC_OscConfig+0x270>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f003 0302 	and.w	r3, r3, #2
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d1f0      	bne.n	80058aa <HAL_RCC_OscConfig+0x1da>
 80058c8:	e000      	b.n	80058cc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80058ca:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 0301 	and.w	r3, r3, #1
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d074      	beq.n	80059c2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80058d8:	69bb      	ldr	r3, [r7, #24]
 80058da:	2b08      	cmp	r3, #8
 80058dc:	d005      	beq.n	80058ea <HAL_RCC_OscConfig+0x21a>
 80058de:	69bb      	ldr	r3, [r7, #24]
 80058e0:	2b0c      	cmp	r3, #12
 80058e2:	d10e      	bne.n	8005902 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	2b03      	cmp	r3, #3
 80058e8:	d10b      	bne.n	8005902 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058ea:	4b15      	ldr	r3, [pc, #84]	@ (8005940 <HAL_RCC_OscConfig+0x270>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d064      	beq.n	80059c0 <HAL_RCC_OscConfig+0x2f0>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d160      	bne.n	80059c0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	e2ba      	b.n	8005e78 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800590a:	d106      	bne.n	800591a <HAL_RCC_OscConfig+0x24a>
 800590c:	4b0c      	ldr	r3, [pc, #48]	@ (8005940 <HAL_RCC_OscConfig+0x270>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a0b      	ldr	r2, [pc, #44]	@ (8005940 <HAL_RCC_OscConfig+0x270>)
 8005912:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005916:	6013      	str	r3, [r2, #0]
 8005918:	e026      	b.n	8005968 <HAL_RCC_OscConfig+0x298>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005922:	d115      	bne.n	8005950 <HAL_RCC_OscConfig+0x280>
 8005924:	4b06      	ldr	r3, [pc, #24]	@ (8005940 <HAL_RCC_OscConfig+0x270>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a05      	ldr	r2, [pc, #20]	@ (8005940 <HAL_RCC_OscConfig+0x270>)
 800592a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800592e:	6013      	str	r3, [r2, #0]
 8005930:	4b03      	ldr	r3, [pc, #12]	@ (8005940 <HAL_RCC_OscConfig+0x270>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a02      	ldr	r2, [pc, #8]	@ (8005940 <HAL_RCC_OscConfig+0x270>)
 8005936:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800593a:	6013      	str	r3, [r2, #0]
 800593c:	e014      	b.n	8005968 <HAL_RCC_OscConfig+0x298>
 800593e:	bf00      	nop
 8005940:	40021000 	.word	0x40021000
 8005944:	08008f28 	.word	0x08008f28
 8005948:	2000000c 	.word	0x2000000c
 800594c:	20000010 	.word	0x20000010
 8005950:	4ba0      	ldr	r3, [pc, #640]	@ (8005bd4 <HAL_RCC_OscConfig+0x504>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a9f      	ldr	r2, [pc, #636]	@ (8005bd4 <HAL_RCC_OscConfig+0x504>)
 8005956:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800595a:	6013      	str	r3, [r2, #0]
 800595c:	4b9d      	ldr	r3, [pc, #628]	@ (8005bd4 <HAL_RCC_OscConfig+0x504>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a9c      	ldr	r2, [pc, #624]	@ (8005bd4 <HAL_RCC_OscConfig+0x504>)
 8005962:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005966:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d013      	beq.n	8005998 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005970:	f7fc fc44 	bl	80021fc <HAL_GetTick>
 8005974:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005976:	e008      	b.n	800598a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005978:	f7fc fc40 	bl	80021fc <HAL_GetTick>
 800597c:	4602      	mov	r2, r0
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	1ad3      	subs	r3, r2, r3
 8005982:	2b64      	cmp	r3, #100	@ 0x64
 8005984:	d901      	bls.n	800598a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005986:	2303      	movs	r3, #3
 8005988:	e276      	b.n	8005e78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800598a:	4b92      	ldr	r3, [pc, #584]	@ (8005bd4 <HAL_RCC_OscConfig+0x504>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005992:	2b00      	cmp	r3, #0
 8005994:	d0f0      	beq.n	8005978 <HAL_RCC_OscConfig+0x2a8>
 8005996:	e014      	b.n	80059c2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005998:	f7fc fc30 	bl	80021fc <HAL_GetTick>
 800599c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800599e:	e008      	b.n	80059b2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059a0:	f7fc fc2c 	bl	80021fc <HAL_GetTick>
 80059a4:	4602      	mov	r2, r0
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	1ad3      	subs	r3, r2, r3
 80059aa:	2b64      	cmp	r3, #100	@ 0x64
 80059ac:	d901      	bls.n	80059b2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80059ae:	2303      	movs	r3, #3
 80059b0:	e262      	b.n	8005e78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80059b2:	4b88      	ldr	r3, [pc, #544]	@ (8005bd4 <HAL_RCC_OscConfig+0x504>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d1f0      	bne.n	80059a0 <HAL_RCC_OscConfig+0x2d0>
 80059be:	e000      	b.n	80059c2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f003 0302 	and.w	r3, r3, #2
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d060      	beq.n	8005a90 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80059ce:	69bb      	ldr	r3, [r7, #24]
 80059d0:	2b04      	cmp	r3, #4
 80059d2:	d005      	beq.n	80059e0 <HAL_RCC_OscConfig+0x310>
 80059d4:	69bb      	ldr	r3, [r7, #24]
 80059d6:	2b0c      	cmp	r3, #12
 80059d8:	d119      	bne.n	8005a0e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	2b02      	cmp	r3, #2
 80059de:	d116      	bne.n	8005a0e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80059e0:	4b7c      	ldr	r3, [pc, #496]	@ (8005bd4 <HAL_RCC_OscConfig+0x504>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d005      	beq.n	80059f8 <HAL_RCC_OscConfig+0x328>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	68db      	ldr	r3, [r3, #12]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d101      	bne.n	80059f8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	e23f      	b.n	8005e78 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059f8:	4b76      	ldr	r3, [pc, #472]	@ (8005bd4 <HAL_RCC_OscConfig+0x504>)
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	691b      	ldr	r3, [r3, #16]
 8005a04:	061b      	lsls	r3, r3, #24
 8005a06:	4973      	ldr	r1, [pc, #460]	@ (8005bd4 <HAL_RCC_OscConfig+0x504>)
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a0c:	e040      	b.n	8005a90 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	68db      	ldr	r3, [r3, #12]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d023      	beq.n	8005a5e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a16:	4b6f      	ldr	r3, [pc, #444]	@ (8005bd4 <HAL_RCC_OscConfig+0x504>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a6e      	ldr	r2, [pc, #440]	@ (8005bd4 <HAL_RCC_OscConfig+0x504>)
 8005a1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a22:	f7fc fbeb 	bl	80021fc <HAL_GetTick>
 8005a26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a28:	e008      	b.n	8005a3c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a2a:	f7fc fbe7 	bl	80021fc <HAL_GetTick>
 8005a2e:	4602      	mov	r2, r0
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	1ad3      	subs	r3, r2, r3
 8005a34:	2b02      	cmp	r3, #2
 8005a36:	d901      	bls.n	8005a3c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005a38:	2303      	movs	r3, #3
 8005a3a:	e21d      	b.n	8005e78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a3c:	4b65      	ldr	r3, [pc, #404]	@ (8005bd4 <HAL_RCC_OscConfig+0x504>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d0f0      	beq.n	8005a2a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a48:	4b62      	ldr	r3, [pc, #392]	@ (8005bd4 <HAL_RCC_OscConfig+0x504>)
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	691b      	ldr	r3, [r3, #16]
 8005a54:	061b      	lsls	r3, r3, #24
 8005a56:	495f      	ldr	r1, [pc, #380]	@ (8005bd4 <HAL_RCC_OscConfig+0x504>)
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	604b      	str	r3, [r1, #4]
 8005a5c:	e018      	b.n	8005a90 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a5e:	4b5d      	ldr	r3, [pc, #372]	@ (8005bd4 <HAL_RCC_OscConfig+0x504>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a5c      	ldr	r2, [pc, #368]	@ (8005bd4 <HAL_RCC_OscConfig+0x504>)
 8005a64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a6a:	f7fc fbc7 	bl	80021fc <HAL_GetTick>
 8005a6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005a70:	e008      	b.n	8005a84 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a72:	f7fc fbc3 	bl	80021fc <HAL_GetTick>
 8005a76:	4602      	mov	r2, r0
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	1ad3      	subs	r3, r2, r3
 8005a7c:	2b02      	cmp	r3, #2
 8005a7e:	d901      	bls.n	8005a84 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005a80:	2303      	movs	r3, #3
 8005a82:	e1f9      	b.n	8005e78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005a84:	4b53      	ldr	r3, [pc, #332]	@ (8005bd4 <HAL_RCC_OscConfig+0x504>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d1f0      	bne.n	8005a72 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f003 0308 	and.w	r3, r3, #8
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d03c      	beq.n	8005b16 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	695b      	ldr	r3, [r3, #20]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d01c      	beq.n	8005ade <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005aa4:	4b4b      	ldr	r3, [pc, #300]	@ (8005bd4 <HAL_RCC_OscConfig+0x504>)
 8005aa6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005aaa:	4a4a      	ldr	r2, [pc, #296]	@ (8005bd4 <HAL_RCC_OscConfig+0x504>)
 8005aac:	f043 0301 	orr.w	r3, r3, #1
 8005ab0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ab4:	f7fc fba2 	bl	80021fc <HAL_GetTick>
 8005ab8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005aba:	e008      	b.n	8005ace <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005abc:	f7fc fb9e 	bl	80021fc <HAL_GetTick>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	1ad3      	subs	r3, r2, r3
 8005ac6:	2b02      	cmp	r3, #2
 8005ac8:	d901      	bls.n	8005ace <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005aca:	2303      	movs	r3, #3
 8005acc:	e1d4      	b.n	8005e78 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005ace:	4b41      	ldr	r3, [pc, #260]	@ (8005bd4 <HAL_RCC_OscConfig+0x504>)
 8005ad0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ad4:	f003 0302 	and.w	r3, r3, #2
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d0ef      	beq.n	8005abc <HAL_RCC_OscConfig+0x3ec>
 8005adc:	e01b      	b.n	8005b16 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ade:	4b3d      	ldr	r3, [pc, #244]	@ (8005bd4 <HAL_RCC_OscConfig+0x504>)
 8005ae0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ae4:	4a3b      	ldr	r2, [pc, #236]	@ (8005bd4 <HAL_RCC_OscConfig+0x504>)
 8005ae6:	f023 0301 	bic.w	r3, r3, #1
 8005aea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005aee:	f7fc fb85 	bl	80021fc <HAL_GetTick>
 8005af2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005af4:	e008      	b.n	8005b08 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005af6:	f7fc fb81 	bl	80021fc <HAL_GetTick>
 8005afa:	4602      	mov	r2, r0
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	1ad3      	subs	r3, r2, r3
 8005b00:	2b02      	cmp	r3, #2
 8005b02:	d901      	bls.n	8005b08 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005b04:	2303      	movs	r3, #3
 8005b06:	e1b7      	b.n	8005e78 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005b08:	4b32      	ldr	r3, [pc, #200]	@ (8005bd4 <HAL_RCC_OscConfig+0x504>)
 8005b0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b0e:	f003 0302 	and.w	r3, r3, #2
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d1ef      	bne.n	8005af6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f003 0304 	and.w	r3, r3, #4
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	f000 80a6 	beq.w	8005c70 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b24:	2300      	movs	r3, #0
 8005b26:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005b28:	4b2a      	ldr	r3, [pc, #168]	@ (8005bd4 <HAL_RCC_OscConfig+0x504>)
 8005b2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d10d      	bne.n	8005b50 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b34:	4b27      	ldr	r3, [pc, #156]	@ (8005bd4 <HAL_RCC_OscConfig+0x504>)
 8005b36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b38:	4a26      	ldr	r2, [pc, #152]	@ (8005bd4 <HAL_RCC_OscConfig+0x504>)
 8005b3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b3e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b40:	4b24      	ldr	r3, [pc, #144]	@ (8005bd4 <HAL_RCC_OscConfig+0x504>)
 8005b42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b48:	60bb      	str	r3, [r7, #8]
 8005b4a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b50:	4b21      	ldr	r3, [pc, #132]	@ (8005bd8 <HAL_RCC_OscConfig+0x508>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d118      	bne.n	8005b8e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b5c:	4b1e      	ldr	r3, [pc, #120]	@ (8005bd8 <HAL_RCC_OscConfig+0x508>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a1d      	ldr	r2, [pc, #116]	@ (8005bd8 <HAL_RCC_OscConfig+0x508>)
 8005b62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b66:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b68:	f7fc fb48 	bl	80021fc <HAL_GetTick>
 8005b6c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b6e:	e008      	b.n	8005b82 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b70:	f7fc fb44 	bl	80021fc <HAL_GetTick>
 8005b74:	4602      	mov	r2, r0
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	1ad3      	subs	r3, r2, r3
 8005b7a:	2b02      	cmp	r3, #2
 8005b7c:	d901      	bls.n	8005b82 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005b7e:	2303      	movs	r3, #3
 8005b80:	e17a      	b.n	8005e78 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b82:	4b15      	ldr	r3, [pc, #84]	@ (8005bd8 <HAL_RCC_OscConfig+0x508>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d0f0      	beq.n	8005b70 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	689b      	ldr	r3, [r3, #8]
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d108      	bne.n	8005ba8 <HAL_RCC_OscConfig+0x4d8>
 8005b96:	4b0f      	ldr	r3, [pc, #60]	@ (8005bd4 <HAL_RCC_OscConfig+0x504>)
 8005b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b9c:	4a0d      	ldr	r2, [pc, #52]	@ (8005bd4 <HAL_RCC_OscConfig+0x504>)
 8005b9e:	f043 0301 	orr.w	r3, r3, #1
 8005ba2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005ba6:	e029      	b.n	8005bfc <HAL_RCC_OscConfig+0x52c>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	2b05      	cmp	r3, #5
 8005bae:	d115      	bne.n	8005bdc <HAL_RCC_OscConfig+0x50c>
 8005bb0:	4b08      	ldr	r3, [pc, #32]	@ (8005bd4 <HAL_RCC_OscConfig+0x504>)
 8005bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bb6:	4a07      	ldr	r2, [pc, #28]	@ (8005bd4 <HAL_RCC_OscConfig+0x504>)
 8005bb8:	f043 0304 	orr.w	r3, r3, #4
 8005bbc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005bc0:	4b04      	ldr	r3, [pc, #16]	@ (8005bd4 <HAL_RCC_OscConfig+0x504>)
 8005bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bc6:	4a03      	ldr	r2, [pc, #12]	@ (8005bd4 <HAL_RCC_OscConfig+0x504>)
 8005bc8:	f043 0301 	orr.w	r3, r3, #1
 8005bcc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005bd0:	e014      	b.n	8005bfc <HAL_RCC_OscConfig+0x52c>
 8005bd2:	bf00      	nop
 8005bd4:	40021000 	.word	0x40021000
 8005bd8:	40007000 	.word	0x40007000
 8005bdc:	4b9c      	ldr	r3, [pc, #624]	@ (8005e50 <HAL_RCC_OscConfig+0x780>)
 8005bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005be2:	4a9b      	ldr	r2, [pc, #620]	@ (8005e50 <HAL_RCC_OscConfig+0x780>)
 8005be4:	f023 0301 	bic.w	r3, r3, #1
 8005be8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005bec:	4b98      	ldr	r3, [pc, #608]	@ (8005e50 <HAL_RCC_OscConfig+0x780>)
 8005bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bf2:	4a97      	ldr	r2, [pc, #604]	@ (8005e50 <HAL_RCC_OscConfig+0x780>)
 8005bf4:	f023 0304 	bic.w	r3, r3, #4
 8005bf8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d016      	beq.n	8005c32 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c04:	f7fc fafa 	bl	80021fc <HAL_GetTick>
 8005c08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c0a:	e00a      	b.n	8005c22 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c0c:	f7fc faf6 	bl	80021fc <HAL_GetTick>
 8005c10:	4602      	mov	r2, r0
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	1ad3      	subs	r3, r2, r3
 8005c16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d901      	bls.n	8005c22 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005c1e:	2303      	movs	r3, #3
 8005c20:	e12a      	b.n	8005e78 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c22:	4b8b      	ldr	r3, [pc, #556]	@ (8005e50 <HAL_RCC_OscConfig+0x780>)
 8005c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c28:	f003 0302 	and.w	r3, r3, #2
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d0ed      	beq.n	8005c0c <HAL_RCC_OscConfig+0x53c>
 8005c30:	e015      	b.n	8005c5e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c32:	f7fc fae3 	bl	80021fc <HAL_GetTick>
 8005c36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005c38:	e00a      	b.n	8005c50 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c3a:	f7fc fadf 	bl	80021fc <HAL_GetTick>
 8005c3e:	4602      	mov	r2, r0
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	1ad3      	subs	r3, r2, r3
 8005c44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d901      	bls.n	8005c50 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005c4c:	2303      	movs	r3, #3
 8005c4e:	e113      	b.n	8005e78 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005c50:	4b7f      	ldr	r3, [pc, #508]	@ (8005e50 <HAL_RCC_OscConfig+0x780>)
 8005c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c56:	f003 0302 	and.w	r3, r3, #2
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d1ed      	bne.n	8005c3a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005c5e:	7ffb      	ldrb	r3, [r7, #31]
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d105      	bne.n	8005c70 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c64:	4b7a      	ldr	r3, [pc, #488]	@ (8005e50 <HAL_RCC_OscConfig+0x780>)
 8005c66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c68:	4a79      	ldr	r2, [pc, #484]	@ (8005e50 <HAL_RCC_OscConfig+0x780>)
 8005c6a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c6e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	f000 80fe 	beq.w	8005e76 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c7e:	2b02      	cmp	r3, #2
 8005c80:	f040 80d0 	bne.w	8005e24 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005c84:	4b72      	ldr	r3, [pc, #456]	@ (8005e50 <HAL_RCC_OscConfig+0x780>)
 8005c86:	68db      	ldr	r3, [r3, #12]
 8005c88:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	f003 0203 	and.w	r2, r3, #3
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d130      	bne.n	8005cfa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ca2:	3b01      	subs	r3, #1
 8005ca4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d127      	bne.n	8005cfa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cb4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d11f      	bne.n	8005cfa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cc0:	687a      	ldr	r2, [r7, #4]
 8005cc2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005cc4:	2a07      	cmp	r2, #7
 8005cc6:	bf14      	ite	ne
 8005cc8:	2201      	movne	r2, #1
 8005cca:	2200      	moveq	r2, #0
 8005ccc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d113      	bne.n	8005cfa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cdc:	085b      	lsrs	r3, r3, #1
 8005cde:	3b01      	subs	r3, #1
 8005ce0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d109      	bne.n	8005cfa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cf0:	085b      	lsrs	r3, r3, #1
 8005cf2:	3b01      	subs	r3, #1
 8005cf4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	d06e      	beq.n	8005dd8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005cfa:	69bb      	ldr	r3, [r7, #24]
 8005cfc:	2b0c      	cmp	r3, #12
 8005cfe:	d069      	beq.n	8005dd4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005d00:	4b53      	ldr	r3, [pc, #332]	@ (8005e50 <HAL_RCC_OscConfig+0x780>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d105      	bne.n	8005d18 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005d0c:	4b50      	ldr	r3, [pc, #320]	@ (8005e50 <HAL_RCC_OscConfig+0x780>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d001      	beq.n	8005d1c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	e0ad      	b.n	8005e78 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005d1c:	4b4c      	ldr	r3, [pc, #304]	@ (8005e50 <HAL_RCC_OscConfig+0x780>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a4b      	ldr	r2, [pc, #300]	@ (8005e50 <HAL_RCC_OscConfig+0x780>)
 8005d22:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005d26:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005d28:	f7fc fa68 	bl	80021fc <HAL_GetTick>
 8005d2c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d2e:	e008      	b.n	8005d42 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d30:	f7fc fa64 	bl	80021fc <HAL_GetTick>
 8005d34:	4602      	mov	r2, r0
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	1ad3      	subs	r3, r2, r3
 8005d3a:	2b02      	cmp	r3, #2
 8005d3c:	d901      	bls.n	8005d42 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8005d3e:	2303      	movs	r3, #3
 8005d40:	e09a      	b.n	8005e78 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d42:	4b43      	ldr	r3, [pc, #268]	@ (8005e50 <HAL_RCC_OscConfig+0x780>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d1f0      	bne.n	8005d30 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005d4e:	4b40      	ldr	r3, [pc, #256]	@ (8005e50 <HAL_RCC_OscConfig+0x780>)
 8005d50:	68da      	ldr	r2, [r3, #12]
 8005d52:	4b40      	ldr	r3, [pc, #256]	@ (8005e54 <HAL_RCC_OscConfig+0x784>)
 8005d54:	4013      	ands	r3, r2
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005d5e:	3a01      	subs	r2, #1
 8005d60:	0112      	lsls	r2, r2, #4
 8005d62:	4311      	orrs	r1, r2
 8005d64:	687a      	ldr	r2, [r7, #4]
 8005d66:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005d68:	0212      	lsls	r2, r2, #8
 8005d6a:	4311      	orrs	r1, r2
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005d70:	0852      	lsrs	r2, r2, #1
 8005d72:	3a01      	subs	r2, #1
 8005d74:	0552      	lsls	r2, r2, #21
 8005d76:	4311      	orrs	r1, r2
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005d7c:	0852      	lsrs	r2, r2, #1
 8005d7e:	3a01      	subs	r2, #1
 8005d80:	0652      	lsls	r2, r2, #25
 8005d82:	4311      	orrs	r1, r2
 8005d84:	687a      	ldr	r2, [r7, #4]
 8005d86:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005d88:	0912      	lsrs	r2, r2, #4
 8005d8a:	0452      	lsls	r2, r2, #17
 8005d8c:	430a      	orrs	r2, r1
 8005d8e:	4930      	ldr	r1, [pc, #192]	@ (8005e50 <HAL_RCC_OscConfig+0x780>)
 8005d90:	4313      	orrs	r3, r2
 8005d92:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005d94:	4b2e      	ldr	r3, [pc, #184]	@ (8005e50 <HAL_RCC_OscConfig+0x780>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a2d      	ldr	r2, [pc, #180]	@ (8005e50 <HAL_RCC_OscConfig+0x780>)
 8005d9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005d9e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005da0:	4b2b      	ldr	r3, [pc, #172]	@ (8005e50 <HAL_RCC_OscConfig+0x780>)
 8005da2:	68db      	ldr	r3, [r3, #12]
 8005da4:	4a2a      	ldr	r2, [pc, #168]	@ (8005e50 <HAL_RCC_OscConfig+0x780>)
 8005da6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005daa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005dac:	f7fc fa26 	bl	80021fc <HAL_GetTick>
 8005db0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005db2:	e008      	b.n	8005dc6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005db4:	f7fc fa22 	bl	80021fc <HAL_GetTick>
 8005db8:	4602      	mov	r2, r0
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	1ad3      	subs	r3, r2, r3
 8005dbe:	2b02      	cmp	r3, #2
 8005dc0:	d901      	bls.n	8005dc6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005dc2:	2303      	movs	r3, #3
 8005dc4:	e058      	b.n	8005e78 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005dc6:	4b22      	ldr	r3, [pc, #136]	@ (8005e50 <HAL_RCC_OscConfig+0x780>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d0f0      	beq.n	8005db4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005dd2:	e050      	b.n	8005e76 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e04f      	b.n	8005e78 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005dd8:	4b1d      	ldr	r3, [pc, #116]	@ (8005e50 <HAL_RCC_OscConfig+0x780>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d148      	bne.n	8005e76 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005de4:	4b1a      	ldr	r3, [pc, #104]	@ (8005e50 <HAL_RCC_OscConfig+0x780>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a19      	ldr	r2, [pc, #100]	@ (8005e50 <HAL_RCC_OscConfig+0x780>)
 8005dea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005dee:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005df0:	4b17      	ldr	r3, [pc, #92]	@ (8005e50 <HAL_RCC_OscConfig+0x780>)
 8005df2:	68db      	ldr	r3, [r3, #12]
 8005df4:	4a16      	ldr	r2, [pc, #88]	@ (8005e50 <HAL_RCC_OscConfig+0x780>)
 8005df6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005dfa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005dfc:	f7fc f9fe 	bl	80021fc <HAL_GetTick>
 8005e00:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e02:	e008      	b.n	8005e16 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e04:	f7fc f9fa 	bl	80021fc <HAL_GetTick>
 8005e08:	4602      	mov	r2, r0
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	1ad3      	subs	r3, r2, r3
 8005e0e:	2b02      	cmp	r3, #2
 8005e10:	d901      	bls.n	8005e16 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005e12:	2303      	movs	r3, #3
 8005e14:	e030      	b.n	8005e78 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e16:	4b0e      	ldr	r3, [pc, #56]	@ (8005e50 <HAL_RCC_OscConfig+0x780>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d0f0      	beq.n	8005e04 <HAL_RCC_OscConfig+0x734>
 8005e22:	e028      	b.n	8005e76 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005e24:	69bb      	ldr	r3, [r7, #24]
 8005e26:	2b0c      	cmp	r3, #12
 8005e28:	d023      	beq.n	8005e72 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e2a:	4b09      	ldr	r3, [pc, #36]	@ (8005e50 <HAL_RCC_OscConfig+0x780>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a08      	ldr	r2, [pc, #32]	@ (8005e50 <HAL_RCC_OscConfig+0x780>)
 8005e30:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005e34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e36:	f7fc f9e1 	bl	80021fc <HAL_GetTick>
 8005e3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e3c:	e00c      	b.n	8005e58 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e3e:	f7fc f9dd 	bl	80021fc <HAL_GetTick>
 8005e42:	4602      	mov	r2, r0
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	1ad3      	subs	r3, r2, r3
 8005e48:	2b02      	cmp	r3, #2
 8005e4a:	d905      	bls.n	8005e58 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005e4c:	2303      	movs	r3, #3
 8005e4e:	e013      	b.n	8005e78 <HAL_RCC_OscConfig+0x7a8>
 8005e50:	40021000 	.word	0x40021000
 8005e54:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e58:	4b09      	ldr	r3, [pc, #36]	@ (8005e80 <HAL_RCC_OscConfig+0x7b0>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d1ec      	bne.n	8005e3e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005e64:	4b06      	ldr	r3, [pc, #24]	@ (8005e80 <HAL_RCC_OscConfig+0x7b0>)
 8005e66:	68da      	ldr	r2, [r3, #12]
 8005e68:	4905      	ldr	r1, [pc, #20]	@ (8005e80 <HAL_RCC_OscConfig+0x7b0>)
 8005e6a:	4b06      	ldr	r3, [pc, #24]	@ (8005e84 <HAL_RCC_OscConfig+0x7b4>)
 8005e6c:	4013      	ands	r3, r2
 8005e6e:	60cb      	str	r3, [r1, #12]
 8005e70:	e001      	b.n	8005e76 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	e000      	b.n	8005e78 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8005e76:	2300      	movs	r3, #0
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3720      	adds	r7, #32
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}
 8005e80:	40021000 	.word	0x40021000
 8005e84:	feeefffc 	.word	0xfeeefffc

08005e88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b084      	sub	sp, #16
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d101      	bne.n	8005e9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	e0e7      	b.n	800606c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005e9c:	4b75      	ldr	r3, [pc, #468]	@ (8006074 <HAL_RCC_ClockConfig+0x1ec>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f003 0307 	and.w	r3, r3, #7
 8005ea4:	683a      	ldr	r2, [r7, #0]
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d910      	bls.n	8005ecc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005eaa:	4b72      	ldr	r3, [pc, #456]	@ (8006074 <HAL_RCC_ClockConfig+0x1ec>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f023 0207 	bic.w	r2, r3, #7
 8005eb2:	4970      	ldr	r1, [pc, #448]	@ (8006074 <HAL_RCC_ClockConfig+0x1ec>)
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005eba:	4b6e      	ldr	r3, [pc, #440]	@ (8006074 <HAL_RCC_ClockConfig+0x1ec>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f003 0307 	and.w	r3, r3, #7
 8005ec2:	683a      	ldr	r2, [r7, #0]
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d001      	beq.n	8005ecc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	e0cf      	b.n	800606c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f003 0302 	and.w	r3, r3, #2
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d010      	beq.n	8005efa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	689a      	ldr	r2, [r3, #8]
 8005edc:	4b66      	ldr	r3, [pc, #408]	@ (8006078 <HAL_RCC_ClockConfig+0x1f0>)
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d908      	bls.n	8005efa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ee8:	4b63      	ldr	r3, [pc, #396]	@ (8006078 <HAL_RCC_ClockConfig+0x1f0>)
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	4960      	ldr	r1, [pc, #384]	@ (8006078 <HAL_RCC_ClockConfig+0x1f0>)
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f003 0301 	and.w	r3, r3, #1
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d04c      	beq.n	8005fa0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	2b03      	cmp	r3, #3
 8005f0c:	d107      	bne.n	8005f1e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f0e:	4b5a      	ldr	r3, [pc, #360]	@ (8006078 <HAL_RCC_ClockConfig+0x1f0>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d121      	bne.n	8005f5e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e0a6      	b.n	800606c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	2b02      	cmp	r3, #2
 8005f24:	d107      	bne.n	8005f36 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005f26:	4b54      	ldr	r3, [pc, #336]	@ (8006078 <HAL_RCC_ClockConfig+0x1f0>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d115      	bne.n	8005f5e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	e09a      	b.n	800606c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d107      	bne.n	8005f4e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005f3e:	4b4e      	ldr	r3, [pc, #312]	@ (8006078 <HAL_RCC_ClockConfig+0x1f0>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f003 0302 	and.w	r3, r3, #2
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d109      	bne.n	8005f5e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	e08e      	b.n	800606c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005f4e:	4b4a      	ldr	r3, [pc, #296]	@ (8006078 <HAL_RCC_ClockConfig+0x1f0>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d101      	bne.n	8005f5e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	e086      	b.n	800606c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005f5e:	4b46      	ldr	r3, [pc, #280]	@ (8006078 <HAL_RCC_ClockConfig+0x1f0>)
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	f023 0203 	bic.w	r2, r3, #3
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	4943      	ldr	r1, [pc, #268]	@ (8006078 <HAL_RCC_ClockConfig+0x1f0>)
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f70:	f7fc f944 	bl	80021fc <HAL_GetTick>
 8005f74:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f76:	e00a      	b.n	8005f8e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f78:	f7fc f940 	bl	80021fc <HAL_GetTick>
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	1ad3      	subs	r3, r2, r3
 8005f82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d901      	bls.n	8005f8e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005f8a:	2303      	movs	r3, #3
 8005f8c:	e06e      	b.n	800606c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f8e:	4b3a      	ldr	r3, [pc, #232]	@ (8006078 <HAL_RCC_ClockConfig+0x1f0>)
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	f003 020c 	and.w	r2, r3, #12
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	009b      	lsls	r3, r3, #2
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	d1eb      	bne.n	8005f78 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f003 0302 	and.w	r3, r3, #2
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d010      	beq.n	8005fce <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	689a      	ldr	r2, [r3, #8]
 8005fb0:	4b31      	ldr	r3, [pc, #196]	@ (8006078 <HAL_RCC_ClockConfig+0x1f0>)
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	d208      	bcs.n	8005fce <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005fbc:	4b2e      	ldr	r3, [pc, #184]	@ (8006078 <HAL_RCC_ClockConfig+0x1f0>)
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	492b      	ldr	r1, [pc, #172]	@ (8006078 <HAL_RCC_ClockConfig+0x1f0>)
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005fce:	4b29      	ldr	r3, [pc, #164]	@ (8006074 <HAL_RCC_ClockConfig+0x1ec>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f003 0307 	and.w	r3, r3, #7
 8005fd6:	683a      	ldr	r2, [r7, #0]
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	d210      	bcs.n	8005ffe <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fdc:	4b25      	ldr	r3, [pc, #148]	@ (8006074 <HAL_RCC_ClockConfig+0x1ec>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f023 0207 	bic.w	r2, r3, #7
 8005fe4:	4923      	ldr	r1, [pc, #140]	@ (8006074 <HAL_RCC_ClockConfig+0x1ec>)
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fec:	4b21      	ldr	r3, [pc, #132]	@ (8006074 <HAL_RCC_ClockConfig+0x1ec>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f003 0307 	and.w	r3, r3, #7
 8005ff4:	683a      	ldr	r2, [r7, #0]
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d001      	beq.n	8005ffe <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e036      	b.n	800606c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f003 0304 	and.w	r3, r3, #4
 8006006:	2b00      	cmp	r3, #0
 8006008:	d008      	beq.n	800601c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800600a:	4b1b      	ldr	r3, [pc, #108]	@ (8006078 <HAL_RCC_ClockConfig+0x1f0>)
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	68db      	ldr	r3, [r3, #12]
 8006016:	4918      	ldr	r1, [pc, #96]	@ (8006078 <HAL_RCC_ClockConfig+0x1f0>)
 8006018:	4313      	orrs	r3, r2
 800601a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f003 0308 	and.w	r3, r3, #8
 8006024:	2b00      	cmp	r3, #0
 8006026:	d009      	beq.n	800603c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006028:	4b13      	ldr	r3, [pc, #76]	@ (8006078 <HAL_RCC_ClockConfig+0x1f0>)
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	691b      	ldr	r3, [r3, #16]
 8006034:	00db      	lsls	r3, r3, #3
 8006036:	4910      	ldr	r1, [pc, #64]	@ (8006078 <HAL_RCC_ClockConfig+0x1f0>)
 8006038:	4313      	orrs	r3, r2
 800603a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800603c:	f000 f824 	bl	8006088 <HAL_RCC_GetSysClockFreq>
 8006040:	4602      	mov	r2, r0
 8006042:	4b0d      	ldr	r3, [pc, #52]	@ (8006078 <HAL_RCC_ClockConfig+0x1f0>)
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	091b      	lsrs	r3, r3, #4
 8006048:	f003 030f 	and.w	r3, r3, #15
 800604c:	490b      	ldr	r1, [pc, #44]	@ (800607c <HAL_RCC_ClockConfig+0x1f4>)
 800604e:	5ccb      	ldrb	r3, [r1, r3]
 8006050:	f003 031f 	and.w	r3, r3, #31
 8006054:	fa22 f303 	lsr.w	r3, r2, r3
 8006058:	4a09      	ldr	r2, [pc, #36]	@ (8006080 <HAL_RCC_ClockConfig+0x1f8>)
 800605a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800605c:	4b09      	ldr	r3, [pc, #36]	@ (8006084 <HAL_RCC_ClockConfig+0x1fc>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4618      	mov	r0, r3
 8006062:	f7fc f87b 	bl	800215c <HAL_InitTick>
 8006066:	4603      	mov	r3, r0
 8006068:	72fb      	strb	r3, [r7, #11]

  return status;
 800606a:	7afb      	ldrb	r3, [r7, #11]
}
 800606c:	4618      	mov	r0, r3
 800606e:	3710      	adds	r7, #16
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}
 8006074:	40022000 	.word	0x40022000
 8006078:	40021000 	.word	0x40021000
 800607c:	08008f28 	.word	0x08008f28
 8006080:	2000000c 	.word	0x2000000c
 8006084:	20000010 	.word	0x20000010

08006088 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006088:	b480      	push	{r7}
 800608a:	b089      	sub	sp, #36	@ 0x24
 800608c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800608e:	2300      	movs	r3, #0
 8006090:	61fb      	str	r3, [r7, #28]
 8006092:	2300      	movs	r3, #0
 8006094:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006096:	4b3e      	ldr	r3, [pc, #248]	@ (8006190 <HAL_RCC_GetSysClockFreq+0x108>)
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	f003 030c 	and.w	r3, r3, #12
 800609e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80060a0:	4b3b      	ldr	r3, [pc, #236]	@ (8006190 <HAL_RCC_GetSysClockFreq+0x108>)
 80060a2:	68db      	ldr	r3, [r3, #12]
 80060a4:	f003 0303 	and.w	r3, r3, #3
 80060a8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d005      	beq.n	80060bc <HAL_RCC_GetSysClockFreq+0x34>
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	2b0c      	cmp	r3, #12
 80060b4:	d121      	bne.n	80060fa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d11e      	bne.n	80060fa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80060bc:	4b34      	ldr	r3, [pc, #208]	@ (8006190 <HAL_RCC_GetSysClockFreq+0x108>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f003 0308 	and.w	r3, r3, #8
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d107      	bne.n	80060d8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80060c8:	4b31      	ldr	r3, [pc, #196]	@ (8006190 <HAL_RCC_GetSysClockFreq+0x108>)
 80060ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80060ce:	0a1b      	lsrs	r3, r3, #8
 80060d0:	f003 030f 	and.w	r3, r3, #15
 80060d4:	61fb      	str	r3, [r7, #28]
 80060d6:	e005      	b.n	80060e4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80060d8:	4b2d      	ldr	r3, [pc, #180]	@ (8006190 <HAL_RCC_GetSysClockFreq+0x108>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	091b      	lsrs	r3, r3, #4
 80060de:	f003 030f 	and.w	r3, r3, #15
 80060e2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80060e4:	4a2b      	ldr	r2, [pc, #172]	@ (8006194 <HAL_RCC_GetSysClockFreq+0x10c>)
 80060e6:	69fb      	ldr	r3, [r7, #28]
 80060e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060ec:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d10d      	bne.n	8006110 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80060f4:	69fb      	ldr	r3, [r7, #28]
 80060f6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80060f8:	e00a      	b.n	8006110 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	2b04      	cmp	r3, #4
 80060fe:	d102      	bne.n	8006106 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006100:	4b25      	ldr	r3, [pc, #148]	@ (8006198 <HAL_RCC_GetSysClockFreq+0x110>)
 8006102:	61bb      	str	r3, [r7, #24]
 8006104:	e004      	b.n	8006110 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	2b08      	cmp	r3, #8
 800610a:	d101      	bne.n	8006110 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800610c:	4b23      	ldr	r3, [pc, #140]	@ (800619c <HAL_RCC_GetSysClockFreq+0x114>)
 800610e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	2b0c      	cmp	r3, #12
 8006114:	d134      	bne.n	8006180 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006116:	4b1e      	ldr	r3, [pc, #120]	@ (8006190 <HAL_RCC_GetSysClockFreq+0x108>)
 8006118:	68db      	ldr	r3, [r3, #12]
 800611a:	f003 0303 	and.w	r3, r3, #3
 800611e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	2b02      	cmp	r3, #2
 8006124:	d003      	beq.n	800612e <HAL_RCC_GetSysClockFreq+0xa6>
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	2b03      	cmp	r3, #3
 800612a:	d003      	beq.n	8006134 <HAL_RCC_GetSysClockFreq+0xac>
 800612c:	e005      	b.n	800613a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800612e:	4b1a      	ldr	r3, [pc, #104]	@ (8006198 <HAL_RCC_GetSysClockFreq+0x110>)
 8006130:	617b      	str	r3, [r7, #20]
      break;
 8006132:	e005      	b.n	8006140 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006134:	4b19      	ldr	r3, [pc, #100]	@ (800619c <HAL_RCC_GetSysClockFreq+0x114>)
 8006136:	617b      	str	r3, [r7, #20]
      break;
 8006138:	e002      	b.n	8006140 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800613a:	69fb      	ldr	r3, [r7, #28]
 800613c:	617b      	str	r3, [r7, #20]
      break;
 800613e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006140:	4b13      	ldr	r3, [pc, #76]	@ (8006190 <HAL_RCC_GetSysClockFreq+0x108>)
 8006142:	68db      	ldr	r3, [r3, #12]
 8006144:	091b      	lsrs	r3, r3, #4
 8006146:	f003 0307 	and.w	r3, r3, #7
 800614a:	3301      	adds	r3, #1
 800614c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800614e:	4b10      	ldr	r3, [pc, #64]	@ (8006190 <HAL_RCC_GetSysClockFreq+0x108>)
 8006150:	68db      	ldr	r3, [r3, #12]
 8006152:	0a1b      	lsrs	r3, r3, #8
 8006154:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006158:	697a      	ldr	r2, [r7, #20]
 800615a:	fb03 f202 	mul.w	r2, r3, r2
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	fbb2 f3f3 	udiv	r3, r2, r3
 8006164:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006166:	4b0a      	ldr	r3, [pc, #40]	@ (8006190 <HAL_RCC_GetSysClockFreq+0x108>)
 8006168:	68db      	ldr	r3, [r3, #12]
 800616a:	0e5b      	lsrs	r3, r3, #25
 800616c:	f003 0303 	and.w	r3, r3, #3
 8006170:	3301      	adds	r3, #1
 8006172:	005b      	lsls	r3, r3, #1
 8006174:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006176:	697a      	ldr	r2, [r7, #20]
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	fbb2 f3f3 	udiv	r3, r2, r3
 800617e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006180:	69bb      	ldr	r3, [r7, #24]
}
 8006182:	4618      	mov	r0, r3
 8006184:	3724      	adds	r7, #36	@ 0x24
 8006186:	46bd      	mov	sp, r7
 8006188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618c:	4770      	bx	lr
 800618e:	bf00      	nop
 8006190:	40021000 	.word	0x40021000
 8006194:	08008f40 	.word	0x08008f40
 8006198:	00f42400 	.word	0x00f42400
 800619c:	007a1200 	.word	0x007a1200

080061a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80061a0:	b480      	push	{r7}
 80061a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80061a4:	4b03      	ldr	r3, [pc, #12]	@ (80061b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80061a6:	681b      	ldr	r3, [r3, #0]
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	46bd      	mov	sp, r7
 80061ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b0:	4770      	bx	lr
 80061b2:	bf00      	nop
 80061b4:	2000000c 	.word	0x2000000c

080061b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80061bc:	f7ff fff0 	bl	80061a0 <HAL_RCC_GetHCLKFreq>
 80061c0:	4602      	mov	r2, r0
 80061c2:	4b06      	ldr	r3, [pc, #24]	@ (80061dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80061c4:	689b      	ldr	r3, [r3, #8]
 80061c6:	0a1b      	lsrs	r3, r3, #8
 80061c8:	f003 0307 	and.w	r3, r3, #7
 80061cc:	4904      	ldr	r1, [pc, #16]	@ (80061e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80061ce:	5ccb      	ldrb	r3, [r1, r3]
 80061d0:	f003 031f 	and.w	r3, r3, #31
 80061d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061d8:	4618      	mov	r0, r3
 80061da:	bd80      	pop	{r7, pc}
 80061dc:	40021000 	.word	0x40021000
 80061e0:	08008f38 	.word	0x08008f38

080061e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80061e8:	f7ff ffda 	bl	80061a0 <HAL_RCC_GetHCLKFreq>
 80061ec:	4602      	mov	r2, r0
 80061ee:	4b06      	ldr	r3, [pc, #24]	@ (8006208 <HAL_RCC_GetPCLK2Freq+0x24>)
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	0adb      	lsrs	r3, r3, #11
 80061f4:	f003 0307 	and.w	r3, r3, #7
 80061f8:	4904      	ldr	r1, [pc, #16]	@ (800620c <HAL_RCC_GetPCLK2Freq+0x28>)
 80061fa:	5ccb      	ldrb	r3, [r1, r3]
 80061fc:	f003 031f 	and.w	r3, r3, #31
 8006200:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006204:	4618      	mov	r0, r3
 8006206:	bd80      	pop	{r7, pc}
 8006208:	40021000 	.word	0x40021000
 800620c:	08008f38 	.word	0x08008f38

08006210 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b086      	sub	sp, #24
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006218:	2300      	movs	r3, #0
 800621a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800621c:	4b2a      	ldr	r3, [pc, #168]	@ (80062c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800621e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006220:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006224:	2b00      	cmp	r3, #0
 8006226:	d003      	beq.n	8006230 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006228:	f7ff f9ee 	bl	8005608 <HAL_PWREx_GetVoltageRange>
 800622c:	6178      	str	r0, [r7, #20]
 800622e:	e014      	b.n	800625a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006230:	4b25      	ldr	r3, [pc, #148]	@ (80062c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006232:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006234:	4a24      	ldr	r2, [pc, #144]	@ (80062c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006236:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800623a:	6593      	str	r3, [r2, #88]	@ 0x58
 800623c:	4b22      	ldr	r3, [pc, #136]	@ (80062c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800623e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006240:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006244:	60fb      	str	r3, [r7, #12]
 8006246:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006248:	f7ff f9de 	bl	8005608 <HAL_PWREx_GetVoltageRange>
 800624c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800624e:	4b1e      	ldr	r3, [pc, #120]	@ (80062c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006250:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006252:	4a1d      	ldr	r2, [pc, #116]	@ (80062c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006254:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006258:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006260:	d10b      	bne.n	800627a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2b80      	cmp	r3, #128	@ 0x80
 8006266:	d919      	bls.n	800629c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2ba0      	cmp	r3, #160	@ 0xa0
 800626c:	d902      	bls.n	8006274 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800626e:	2302      	movs	r3, #2
 8006270:	613b      	str	r3, [r7, #16]
 8006272:	e013      	b.n	800629c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006274:	2301      	movs	r3, #1
 8006276:	613b      	str	r3, [r7, #16]
 8006278:	e010      	b.n	800629c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2b80      	cmp	r3, #128	@ 0x80
 800627e:	d902      	bls.n	8006286 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006280:	2303      	movs	r3, #3
 8006282:	613b      	str	r3, [r7, #16]
 8006284:	e00a      	b.n	800629c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2b80      	cmp	r3, #128	@ 0x80
 800628a:	d102      	bne.n	8006292 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800628c:	2302      	movs	r3, #2
 800628e:	613b      	str	r3, [r7, #16]
 8006290:	e004      	b.n	800629c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2b70      	cmp	r3, #112	@ 0x70
 8006296:	d101      	bne.n	800629c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006298:	2301      	movs	r3, #1
 800629a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800629c:	4b0b      	ldr	r3, [pc, #44]	@ (80062cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f023 0207 	bic.w	r2, r3, #7
 80062a4:	4909      	ldr	r1, [pc, #36]	@ (80062cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	4313      	orrs	r3, r2
 80062aa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80062ac:	4b07      	ldr	r3, [pc, #28]	@ (80062cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f003 0307 	and.w	r3, r3, #7
 80062b4:	693a      	ldr	r2, [r7, #16]
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d001      	beq.n	80062be <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	e000      	b.n	80062c0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80062be:	2300      	movs	r3, #0
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3718      	adds	r7, #24
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}
 80062c8:	40021000 	.word	0x40021000
 80062cc:	40022000 	.word	0x40022000

080062d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b086      	sub	sp, #24
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80062d8:	2300      	movs	r3, #0
 80062da:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80062dc:	2300      	movs	r3, #0
 80062de:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d041      	beq.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80062f0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80062f4:	d02a      	beq.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80062f6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80062fa:	d824      	bhi.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80062fc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006300:	d008      	beq.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006302:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006306:	d81e      	bhi.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006308:	2b00      	cmp	r3, #0
 800630a:	d00a      	beq.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800630c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006310:	d010      	beq.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006312:	e018      	b.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006314:	4b86      	ldr	r3, [pc, #536]	@ (8006530 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	4a85      	ldr	r2, [pc, #532]	@ (8006530 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800631a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800631e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006320:	e015      	b.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	3304      	adds	r3, #4
 8006326:	2100      	movs	r1, #0
 8006328:	4618      	mov	r0, r3
 800632a:	f000 fabb 	bl	80068a4 <RCCEx_PLLSAI1_Config>
 800632e:	4603      	mov	r3, r0
 8006330:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006332:	e00c      	b.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	3320      	adds	r3, #32
 8006338:	2100      	movs	r1, #0
 800633a:	4618      	mov	r0, r3
 800633c:	f000 fba6 	bl	8006a8c <RCCEx_PLLSAI2_Config>
 8006340:	4603      	mov	r3, r0
 8006342:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006344:	e003      	b.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006346:	2301      	movs	r3, #1
 8006348:	74fb      	strb	r3, [r7, #19]
      break;
 800634a:	e000      	b.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800634c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800634e:	7cfb      	ldrb	r3, [r7, #19]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d10b      	bne.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006354:	4b76      	ldr	r3, [pc, #472]	@ (8006530 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006356:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800635a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006362:	4973      	ldr	r1, [pc, #460]	@ (8006530 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006364:	4313      	orrs	r3, r2
 8006366:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800636a:	e001      	b.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800636c:	7cfb      	ldrb	r3, [r7, #19]
 800636e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006378:	2b00      	cmp	r3, #0
 800637a:	d041      	beq.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006380:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006384:	d02a      	beq.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8006386:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800638a:	d824      	bhi.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800638c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006390:	d008      	beq.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006392:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006396:	d81e      	bhi.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006398:	2b00      	cmp	r3, #0
 800639a:	d00a      	beq.n	80063b2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800639c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80063a0:	d010      	beq.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80063a2:	e018      	b.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80063a4:	4b62      	ldr	r3, [pc, #392]	@ (8006530 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80063a6:	68db      	ldr	r3, [r3, #12]
 80063a8:	4a61      	ldr	r2, [pc, #388]	@ (8006530 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80063aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063ae:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80063b0:	e015      	b.n	80063de <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	3304      	adds	r3, #4
 80063b6:	2100      	movs	r1, #0
 80063b8:	4618      	mov	r0, r3
 80063ba:	f000 fa73 	bl	80068a4 <RCCEx_PLLSAI1_Config>
 80063be:	4603      	mov	r3, r0
 80063c0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80063c2:	e00c      	b.n	80063de <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	3320      	adds	r3, #32
 80063c8:	2100      	movs	r1, #0
 80063ca:	4618      	mov	r0, r3
 80063cc:	f000 fb5e 	bl	8006a8c <RCCEx_PLLSAI2_Config>
 80063d0:	4603      	mov	r3, r0
 80063d2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80063d4:	e003      	b.n	80063de <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80063d6:	2301      	movs	r3, #1
 80063d8:	74fb      	strb	r3, [r7, #19]
      break;
 80063da:	e000      	b.n	80063de <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80063dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063de:	7cfb      	ldrb	r3, [r7, #19]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d10b      	bne.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80063e4:	4b52      	ldr	r3, [pc, #328]	@ (8006530 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80063e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063ea:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80063f2:	494f      	ldr	r1, [pc, #316]	@ (8006530 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80063f4:	4313      	orrs	r3, r2
 80063f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80063fa:	e001      	b.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063fc:	7cfb      	ldrb	r3, [r7, #19]
 80063fe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006408:	2b00      	cmp	r3, #0
 800640a:	f000 80a0 	beq.w	800654e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800640e:	2300      	movs	r3, #0
 8006410:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006412:	4b47      	ldr	r3, [pc, #284]	@ (8006530 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006414:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006416:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800641a:	2b00      	cmp	r3, #0
 800641c:	d101      	bne.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800641e:	2301      	movs	r3, #1
 8006420:	e000      	b.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8006422:	2300      	movs	r3, #0
 8006424:	2b00      	cmp	r3, #0
 8006426:	d00d      	beq.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006428:	4b41      	ldr	r3, [pc, #260]	@ (8006530 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800642a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800642c:	4a40      	ldr	r2, [pc, #256]	@ (8006530 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800642e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006432:	6593      	str	r3, [r2, #88]	@ 0x58
 8006434:	4b3e      	ldr	r3, [pc, #248]	@ (8006530 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006436:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006438:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800643c:	60bb      	str	r3, [r7, #8]
 800643e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006440:	2301      	movs	r3, #1
 8006442:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006444:	4b3b      	ldr	r3, [pc, #236]	@ (8006534 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a3a      	ldr	r2, [pc, #232]	@ (8006534 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800644a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800644e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006450:	f7fb fed4 	bl	80021fc <HAL_GetTick>
 8006454:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006456:	e009      	b.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006458:	f7fb fed0 	bl	80021fc <HAL_GetTick>
 800645c:	4602      	mov	r2, r0
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	1ad3      	subs	r3, r2, r3
 8006462:	2b02      	cmp	r3, #2
 8006464:	d902      	bls.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8006466:	2303      	movs	r3, #3
 8006468:	74fb      	strb	r3, [r7, #19]
        break;
 800646a:	e005      	b.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800646c:	4b31      	ldr	r3, [pc, #196]	@ (8006534 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006474:	2b00      	cmp	r3, #0
 8006476:	d0ef      	beq.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8006478:	7cfb      	ldrb	r3, [r7, #19]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d15c      	bne.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800647e:	4b2c      	ldr	r3, [pc, #176]	@ (8006530 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006480:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006484:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006488:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d01f      	beq.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006496:	697a      	ldr	r2, [r7, #20]
 8006498:	429a      	cmp	r2, r3
 800649a:	d019      	beq.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800649c:	4b24      	ldr	r3, [pc, #144]	@ (8006530 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800649e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064a6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80064a8:	4b21      	ldr	r3, [pc, #132]	@ (8006530 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80064aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064ae:	4a20      	ldr	r2, [pc, #128]	@ (8006530 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80064b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80064b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80064b8:	4b1d      	ldr	r3, [pc, #116]	@ (8006530 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80064ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064be:	4a1c      	ldr	r2, [pc, #112]	@ (8006530 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80064c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80064c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80064c8:	4a19      	ldr	r2, [pc, #100]	@ (8006530 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	f003 0301 	and.w	r3, r3, #1
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d016      	beq.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064da:	f7fb fe8f 	bl	80021fc <HAL_GetTick>
 80064de:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80064e0:	e00b      	b.n	80064fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064e2:	f7fb fe8b 	bl	80021fc <HAL_GetTick>
 80064e6:	4602      	mov	r2, r0
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	1ad3      	subs	r3, r2, r3
 80064ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d902      	bls.n	80064fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80064f4:	2303      	movs	r3, #3
 80064f6:	74fb      	strb	r3, [r7, #19]
            break;
 80064f8:	e006      	b.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80064fa:	4b0d      	ldr	r3, [pc, #52]	@ (8006530 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80064fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006500:	f003 0302 	and.w	r3, r3, #2
 8006504:	2b00      	cmp	r3, #0
 8006506:	d0ec      	beq.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8006508:	7cfb      	ldrb	r3, [r7, #19]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d10c      	bne.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800650e:	4b08      	ldr	r3, [pc, #32]	@ (8006530 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006510:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006514:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800651e:	4904      	ldr	r1, [pc, #16]	@ (8006530 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006520:	4313      	orrs	r3, r2
 8006522:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006526:	e009      	b.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006528:	7cfb      	ldrb	r3, [r7, #19]
 800652a:	74bb      	strb	r3, [r7, #18]
 800652c:	e006      	b.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800652e:	bf00      	nop
 8006530:	40021000 	.word	0x40021000
 8006534:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006538:	7cfb      	ldrb	r3, [r7, #19]
 800653a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800653c:	7c7b      	ldrb	r3, [r7, #17]
 800653e:	2b01      	cmp	r3, #1
 8006540:	d105      	bne.n	800654e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006542:	4b9e      	ldr	r3, [pc, #632]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006544:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006546:	4a9d      	ldr	r2, [pc, #628]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006548:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800654c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f003 0301 	and.w	r3, r3, #1
 8006556:	2b00      	cmp	r3, #0
 8006558:	d00a      	beq.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800655a:	4b98      	ldr	r3, [pc, #608]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800655c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006560:	f023 0203 	bic.w	r2, r3, #3
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006568:	4994      	ldr	r1, [pc, #592]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800656a:	4313      	orrs	r3, r2
 800656c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f003 0302 	and.w	r3, r3, #2
 8006578:	2b00      	cmp	r3, #0
 800657a:	d00a      	beq.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800657c:	4b8f      	ldr	r3, [pc, #572]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800657e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006582:	f023 020c 	bic.w	r2, r3, #12
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800658a:	498c      	ldr	r1, [pc, #560]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800658c:	4313      	orrs	r3, r2
 800658e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f003 0304 	and.w	r3, r3, #4
 800659a:	2b00      	cmp	r3, #0
 800659c:	d00a      	beq.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800659e:	4b87      	ldr	r3, [pc, #540]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065a4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065ac:	4983      	ldr	r1, [pc, #524]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065ae:	4313      	orrs	r3, r2
 80065b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f003 0308 	and.w	r3, r3, #8
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d00a      	beq.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80065c0:	4b7e      	ldr	r3, [pc, #504]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065c6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065ce:	497b      	ldr	r1, [pc, #492]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065d0:	4313      	orrs	r3, r2
 80065d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f003 0310 	and.w	r3, r3, #16
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d00a      	beq.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80065e2:	4b76      	ldr	r3, [pc, #472]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065e8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065f0:	4972      	ldr	r1, [pc, #456]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065f2:	4313      	orrs	r3, r2
 80065f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f003 0320 	and.w	r3, r3, #32
 8006600:	2b00      	cmp	r3, #0
 8006602:	d00a      	beq.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006604:	4b6d      	ldr	r3, [pc, #436]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006606:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800660a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006612:	496a      	ldr	r1, [pc, #424]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006614:	4313      	orrs	r3, r2
 8006616:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006622:	2b00      	cmp	r3, #0
 8006624:	d00a      	beq.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006626:	4b65      	ldr	r3, [pc, #404]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006628:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800662c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006634:	4961      	ldr	r1, [pc, #388]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006636:	4313      	orrs	r3, r2
 8006638:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006644:	2b00      	cmp	r3, #0
 8006646:	d00a      	beq.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006648:	4b5c      	ldr	r3, [pc, #368]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800664a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800664e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006656:	4959      	ldr	r1, [pc, #356]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006658:	4313      	orrs	r3, r2
 800665a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006666:	2b00      	cmp	r3, #0
 8006668:	d00a      	beq.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800666a:	4b54      	ldr	r3, [pc, #336]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800666c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006670:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006678:	4950      	ldr	r1, [pc, #320]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800667a:	4313      	orrs	r3, r2
 800667c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006688:	2b00      	cmp	r3, #0
 800668a:	d00a      	beq.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800668c:	4b4b      	ldr	r3, [pc, #300]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800668e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006692:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800669a:	4948      	ldr	r1, [pc, #288]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800669c:	4313      	orrs	r3, r2
 800669e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d00a      	beq.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80066ae:	4b43      	ldr	r3, [pc, #268]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066b4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066bc:	493f      	ldr	r1, [pc, #252]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066be:	4313      	orrs	r3, r2
 80066c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d028      	beq.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80066d0:	4b3a      	ldr	r3, [pc, #232]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066d6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80066de:	4937      	ldr	r1, [pc, #220]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066e0:	4313      	orrs	r3, r2
 80066e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80066ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80066ee:	d106      	bne.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80066f0:	4b32      	ldr	r3, [pc, #200]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066f2:	68db      	ldr	r3, [r3, #12]
 80066f4:	4a31      	ldr	r2, [pc, #196]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80066fa:	60d3      	str	r3, [r2, #12]
 80066fc:	e011      	b.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006702:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006706:	d10c      	bne.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	3304      	adds	r3, #4
 800670c:	2101      	movs	r1, #1
 800670e:	4618      	mov	r0, r3
 8006710:	f000 f8c8 	bl	80068a4 <RCCEx_PLLSAI1_Config>
 8006714:	4603      	mov	r3, r0
 8006716:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006718:	7cfb      	ldrb	r3, [r7, #19]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d001      	beq.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800671e:	7cfb      	ldrb	r3, [r7, #19]
 8006720:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800672a:	2b00      	cmp	r3, #0
 800672c:	d028      	beq.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800672e:	4b23      	ldr	r3, [pc, #140]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006730:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006734:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800673c:	491f      	ldr	r1, [pc, #124]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800673e:	4313      	orrs	r3, r2
 8006740:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006748:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800674c:	d106      	bne.n	800675c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800674e:	4b1b      	ldr	r3, [pc, #108]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006750:	68db      	ldr	r3, [r3, #12]
 8006752:	4a1a      	ldr	r2, [pc, #104]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006754:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006758:	60d3      	str	r3, [r2, #12]
 800675a:	e011      	b.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006760:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006764:	d10c      	bne.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	3304      	adds	r3, #4
 800676a:	2101      	movs	r1, #1
 800676c:	4618      	mov	r0, r3
 800676e:	f000 f899 	bl	80068a4 <RCCEx_PLLSAI1_Config>
 8006772:	4603      	mov	r3, r0
 8006774:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006776:	7cfb      	ldrb	r3, [r7, #19]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d001      	beq.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800677c:	7cfb      	ldrb	r3, [r7, #19]
 800677e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006788:	2b00      	cmp	r3, #0
 800678a:	d02b      	beq.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800678c:	4b0b      	ldr	r3, [pc, #44]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800678e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006792:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800679a:	4908      	ldr	r1, [pc, #32]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800679c:	4313      	orrs	r3, r2
 800679e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80067aa:	d109      	bne.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80067ac:	4b03      	ldr	r3, [pc, #12]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067ae:	68db      	ldr	r3, [r3, #12]
 80067b0:	4a02      	ldr	r2, [pc, #8]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80067b6:	60d3      	str	r3, [r2, #12]
 80067b8:	e014      	b.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80067ba:	bf00      	nop
 80067bc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067c4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80067c8:	d10c      	bne.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	3304      	adds	r3, #4
 80067ce:	2101      	movs	r1, #1
 80067d0:	4618      	mov	r0, r3
 80067d2:	f000 f867 	bl	80068a4 <RCCEx_PLLSAI1_Config>
 80067d6:	4603      	mov	r3, r0
 80067d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80067da:	7cfb      	ldrb	r3, [r7, #19]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d001      	beq.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80067e0:	7cfb      	ldrb	r3, [r7, #19]
 80067e2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d02f      	beq.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80067f0:	4b2b      	ldr	r3, [pc, #172]	@ (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80067f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067f6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80067fe:	4928      	ldr	r1, [pc, #160]	@ (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006800:	4313      	orrs	r3, r2
 8006802:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800680a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800680e:	d10d      	bne.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	3304      	adds	r3, #4
 8006814:	2102      	movs	r1, #2
 8006816:	4618      	mov	r0, r3
 8006818:	f000 f844 	bl	80068a4 <RCCEx_PLLSAI1_Config>
 800681c:	4603      	mov	r3, r0
 800681e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006820:	7cfb      	ldrb	r3, [r7, #19]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d014      	beq.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006826:	7cfb      	ldrb	r3, [r7, #19]
 8006828:	74bb      	strb	r3, [r7, #18]
 800682a:	e011      	b.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006830:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006834:	d10c      	bne.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	3320      	adds	r3, #32
 800683a:	2102      	movs	r1, #2
 800683c:	4618      	mov	r0, r3
 800683e:	f000 f925 	bl	8006a8c <RCCEx_PLLSAI2_Config>
 8006842:	4603      	mov	r3, r0
 8006844:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006846:	7cfb      	ldrb	r3, [r7, #19]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d001      	beq.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800684c:	7cfb      	ldrb	r3, [r7, #19]
 800684e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006858:	2b00      	cmp	r3, #0
 800685a:	d00a      	beq.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800685c:	4b10      	ldr	r3, [pc, #64]	@ (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800685e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006862:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800686a:	490d      	ldr	r1, [pc, #52]	@ (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800686c:	4313      	orrs	r3, r2
 800686e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800687a:	2b00      	cmp	r3, #0
 800687c:	d00b      	beq.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800687e:	4b08      	ldr	r3, [pc, #32]	@ (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006880:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006884:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800688e:	4904      	ldr	r1, [pc, #16]	@ (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006890:	4313      	orrs	r3, r2
 8006892:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006896:	7cbb      	ldrb	r3, [r7, #18]
}
 8006898:	4618      	mov	r0, r3
 800689a:	3718      	adds	r7, #24
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}
 80068a0:	40021000 	.word	0x40021000

080068a4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b084      	sub	sp, #16
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80068ae:	2300      	movs	r3, #0
 80068b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80068b2:	4b75      	ldr	r3, [pc, #468]	@ (8006a88 <RCCEx_PLLSAI1_Config+0x1e4>)
 80068b4:	68db      	ldr	r3, [r3, #12]
 80068b6:	f003 0303 	and.w	r3, r3, #3
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d018      	beq.n	80068f0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80068be:	4b72      	ldr	r3, [pc, #456]	@ (8006a88 <RCCEx_PLLSAI1_Config+0x1e4>)
 80068c0:	68db      	ldr	r3, [r3, #12]
 80068c2:	f003 0203 	and.w	r2, r3, #3
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	429a      	cmp	r2, r3
 80068cc:	d10d      	bne.n	80068ea <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
       ||
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d009      	beq.n	80068ea <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80068d6:	4b6c      	ldr	r3, [pc, #432]	@ (8006a88 <RCCEx_PLLSAI1_Config+0x1e4>)
 80068d8:	68db      	ldr	r3, [r3, #12]
 80068da:	091b      	lsrs	r3, r3, #4
 80068dc:	f003 0307 	and.w	r3, r3, #7
 80068e0:	1c5a      	adds	r2, r3, #1
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	685b      	ldr	r3, [r3, #4]
       ||
 80068e6:	429a      	cmp	r2, r3
 80068e8:	d047      	beq.n	800697a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80068ea:	2301      	movs	r3, #1
 80068ec:	73fb      	strb	r3, [r7, #15]
 80068ee:	e044      	b.n	800697a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	2b03      	cmp	r3, #3
 80068f6:	d018      	beq.n	800692a <RCCEx_PLLSAI1_Config+0x86>
 80068f8:	2b03      	cmp	r3, #3
 80068fa:	d825      	bhi.n	8006948 <RCCEx_PLLSAI1_Config+0xa4>
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d002      	beq.n	8006906 <RCCEx_PLLSAI1_Config+0x62>
 8006900:	2b02      	cmp	r3, #2
 8006902:	d009      	beq.n	8006918 <RCCEx_PLLSAI1_Config+0x74>
 8006904:	e020      	b.n	8006948 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006906:	4b60      	ldr	r3, [pc, #384]	@ (8006a88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f003 0302 	and.w	r3, r3, #2
 800690e:	2b00      	cmp	r3, #0
 8006910:	d11d      	bne.n	800694e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006912:	2301      	movs	r3, #1
 8006914:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006916:	e01a      	b.n	800694e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006918:	4b5b      	ldr	r3, [pc, #364]	@ (8006a88 <RCCEx_PLLSAI1_Config+0x1e4>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006920:	2b00      	cmp	r3, #0
 8006922:	d116      	bne.n	8006952 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006924:	2301      	movs	r3, #1
 8006926:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006928:	e013      	b.n	8006952 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800692a:	4b57      	ldr	r3, [pc, #348]	@ (8006a88 <RCCEx_PLLSAI1_Config+0x1e4>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006932:	2b00      	cmp	r3, #0
 8006934:	d10f      	bne.n	8006956 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006936:	4b54      	ldr	r3, [pc, #336]	@ (8006a88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800693e:	2b00      	cmp	r3, #0
 8006940:	d109      	bne.n	8006956 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006942:	2301      	movs	r3, #1
 8006944:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006946:	e006      	b.n	8006956 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006948:	2301      	movs	r3, #1
 800694a:	73fb      	strb	r3, [r7, #15]
      break;
 800694c:	e004      	b.n	8006958 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800694e:	bf00      	nop
 8006950:	e002      	b.n	8006958 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006952:	bf00      	nop
 8006954:	e000      	b.n	8006958 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006956:	bf00      	nop
    }

    if(status == HAL_OK)
 8006958:	7bfb      	ldrb	r3, [r7, #15]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d10d      	bne.n	800697a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800695e:	4b4a      	ldr	r3, [pc, #296]	@ (8006a88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006960:	68db      	ldr	r3, [r3, #12]
 8006962:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6819      	ldr	r1, [r3, #0]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	3b01      	subs	r3, #1
 8006970:	011b      	lsls	r3, r3, #4
 8006972:	430b      	orrs	r3, r1
 8006974:	4944      	ldr	r1, [pc, #272]	@ (8006a88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006976:	4313      	orrs	r3, r2
 8006978:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800697a:	7bfb      	ldrb	r3, [r7, #15]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d17d      	bne.n	8006a7c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006980:	4b41      	ldr	r3, [pc, #260]	@ (8006a88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a40      	ldr	r2, [pc, #256]	@ (8006a88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006986:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800698a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800698c:	f7fb fc36 	bl	80021fc <HAL_GetTick>
 8006990:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006992:	e009      	b.n	80069a8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006994:	f7fb fc32 	bl	80021fc <HAL_GetTick>
 8006998:	4602      	mov	r2, r0
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	1ad3      	subs	r3, r2, r3
 800699e:	2b02      	cmp	r3, #2
 80069a0:	d902      	bls.n	80069a8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80069a2:	2303      	movs	r3, #3
 80069a4:	73fb      	strb	r3, [r7, #15]
        break;
 80069a6:	e005      	b.n	80069b4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80069a8:	4b37      	ldr	r3, [pc, #220]	@ (8006a88 <RCCEx_PLLSAI1_Config+0x1e4>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d1ef      	bne.n	8006994 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80069b4:	7bfb      	ldrb	r3, [r7, #15]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d160      	bne.n	8006a7c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d111      	bne.n	80069e4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80069c0:	4b31      	ldr	r3, [pc, #196]	@ (8006a88 <RCCEx_PLLSAI1_Config+0x1e4>)
 80069c2:	691b      	ldr	r3, [r3, #16]
 80069c4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80069c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80069cc:	687a      	ldr	r2, [r7, #4]
 80069ce:	6892      	ldr	r2, [r2, #8]
 80069d0:	0211      	lsls	r1, r2, #8
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	68d2      	ldr	r2, [r2, #12]
 80069d6:	0912      	lsrs	r2, r2, #4
 80069d8:	0452      	lsls	r2, r2, #17
 80069da:	430a      	orrs	r2, r1
 80069dc:	492a      	ldr	r1, [pc, #168]	@ (8006a88 <RCCEx_PLLSAI1_Config+0x1e4>)
 80069de:	4313      	orrs	r3, r2
 80069e0:	610b      	str	r3, [r1, #16]
 80069e2:	e027      	b.n	8006a34 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	2b01      	cmp	r3, #1
 80069e8:	d112      	bne.n	8006a10 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80069ea:	4b27      	ldr	r3, [pc, #156]	@ (8006a88 <RCCEx_PLLSAI1_Config+0x1e4>)
 80069ec:	691b      	ldr	r3, [r3, #16]
 80069ee:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80069f2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80069f6:	687a      	ldr	r2, [r7, #4]
 80069f8:	6892      	ldr	r2, [r2, #8]
 80069fa:	0211      	lsls	r1, r2, #8
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	6912      	ldr	r2, [r2, #16]
 8006a00:	0852      	lsrs	r2, r2, #1
 8006a02:	3a01      	subs	r2, #1
 8006a04:	0552      	lsls	r2, r2, #21
 8006a06:	430a      	orrs	r2, r1
 8006a08:	491f      	ldr	r1, [pc, #124]	@ (8006a88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	610b      	str	r3, [r1, #16]
 8006a0e:	e011      	b.n	8006a34 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006a10:	4b1d      	ldr	r3, [pc, #116]	@ (8006a88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a12:	691b      	ldr	r3, [r3, #16]
 8006a14:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8006a18:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006a1c:	687a      	ldr	r2, [r7, #4]
 8006a1e:	6892      	ldr	r2, [r2, #8]
 8006a20:	0211      	lsls	r1, r2, #8
 8006a22:	687a      	ldr	r2, [r7, #4]
 8006a24:	6952      	ldr	r2, [r2, #20]
 8006a26:	0852      	lsrs	r2, r2, #1
 8006a28:	3a01      	subs	r2, #1
 8006a2a:	0652      	lsls	r2, r2, #25
 8006a2c:	430a      	orrs	r2, r1
 8006a2e:	4916      	ldr	r1, [pc, #88]	@ (8006a88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a30:	4313      	orrs	r3, r2
 8006a32:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006a34:	4b14      	ldr	r3, [pc, #80]	@ (8006a88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a13      	ldr	r2, [pc, #76]	@ (8006a88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a3a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006a3e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a40:	f7fb fbdc 	bl	80021fc <HAL_GetTick>
 8006a44:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006a46:	e009      	b.n	8006a5c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006a48:	f7fb fbd8 	bl	80021fc <HAL_GetTick>
 8006a4c:	4602      	mov	r2, r0
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	1ad3      	subs	r3, r2, r3
 8006a52:	2b02      	cmp	r3, #2
 8006a54:	d902      	bls.n	8006a5c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8006a56:	2303      	movs	r3, #3
 8006a58:	73fb      	strb	r3, [r7, #15]
          break;
 8006a5a:	e005      	b.n	8006a68 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006a5c:	4b0a      	ldr	r3, [pc, #40]	@ (8006a88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d0ef      	beq.n	8006a48 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006a68:	7bfb      	ldrb	r3, [r7, #15]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d106      	bne.n	8006a7c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006a6e:	4b06      	ldr	r3, [pc, #24]	@ (8006a88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a70:	691a      	ldr	r2, [r3, #16]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	699b      	ldr	r3, [r3, #24]
 8006a76:	4904      	ldr	r1, [pc, #16]	@ (8006a88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3710      	adds	r7, #16
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}
 8006a86:	bf00      	nop
 8006a88:	40021000 	.word	0x40021000

08006a8c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b084      	sub	sp, #16
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006a96:	2300      	movs	r3, #0
 8006a98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006a9a:	4b6a      	ldr	r3, [pc, #424]	@ (8006c44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a9c:	68db      	ldr	r3, [r3, #12]
 8006a9e:	f003 0303 	and.w	r3, r3, #3
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d018      	beq.n	8006ad8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006aa6:	4b67      	ldr	r3, [pc, #412]	@ (8006c44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006aa8:	68db      	ldr	r3, [r3, #12]
 8006aaa:	f003 0203 	and.w	r2, r3, #3
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	429a      	cmp	r2, r3
 8006ab4:	d10d      	bne.n	8006ad2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
       ||
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d009      	beq.n	8006ad2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006abe:	4b61      	ldr	r3, [pc, #388]	@ (8006c44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006ac0:	68db      	ldr	r3, [r3, #12]
 8006ac2:	091b      	lsrs	r3, r3, #4
 8006ac4:	f003 0307 	and.w	r3, r3, #7
 8006ac8:	1c5a      	adds	r2, r3, #1
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	685b      	ldr	r3, [r3, #4]
       ||
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	d047      	beq.n	8006b62 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	73fb      	strb	r3, [r7, #15]
 8006ad6:	e044      	b.n	8006b62 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	2b03      	cmp	r3, #3
 8006ade:	d018      	beq.n	8006b12 <RCCEx_PLLSAI2_Config+0x86>
 8006ae0:	2b03      	cmp	r3, #3
 8006ae2:	d825      	bhi.n	8006b30 <RCCEx_PLLSAI2_Config+0xa4>
 8006ae4:	2b01      	cmp	r3, #1
 8006ae6:	d002      	beq.n	8006aee <RCCEx_PLLSAI2_Config+0x62>
 8006ae8:	2b02      	cmp	r3, #2
 8006aea:	d009      	beq.n	8006b00 <RCCEx_PLLSAI2_Config+0x74>
 8006aec:	e020      	b.n	8006b30 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006aee:	4b55      	ldr	r3, [pc, #340]	@ (8006c44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f003 0302 	and.w	r3, r3, #2
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d11d      	bne.n	8006b36 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8006afa:	2301      	movs	r3, #1
 8006afc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006afe:	e01a      	b.n	8006b36 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006b00:	4b50      	ldr	r3, [pc, #320]	@ (8006c44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d116      	bne.n	8006b3a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006b10:	e013      	b.n	8006b3a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006b12:	4b4c      	ldr	r3, [pc, #304]	@ (8006c44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d10f      	bne.n	8006b3e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006b1e:	4b49      	ldr	r3, [pc, #292]	@ (8006c44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d109      	bne.n	8006b3e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006b2e:	e006      	b.n	8006b3e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006b30:	2301      	movs	r3, #1
 8006b32:	73fb      	strb	r3, [r7, #15]
      break;
 8006b34:	e004      	b.n	8006b40 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006b36:	bf00      	nop
 8006b38:	e002      	b.n	8006b40 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006b3a:	bf00      	nop
 8006b3c:	e000      	b.n	8006b40 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006b3e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006b40:	7bfb      	ldrb	r3, [r7, #15]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d10d      	bne.n	8006b62 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006b46:	4b3f      	ldr	r3, [pc, #252]	@ (8006c44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b48:	68db      	ldr	r3, [r3, #12]
 8006b4a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6819      	ldr	r1, [r3, #0]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	3b01      	subs	r3, #1
 8006b58:	011b      	lsls	r3, r3, #4
 8006b5a:	430b      	orrs	r3, r1
 8006b5c:	4939      	ldr	r1, [pc, #228]	@ (8006c44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006b62:	7bfb      	ldrb	r3, [r7, #15]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d167      	bne.n	8006c38 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006b68:	4b36      	ldr	r3, [pc, #216]	@ (8006c44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a35      	ldr	r2, [pc, #212]	@ (8006c44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006b72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b74:	f7fb fb42 	bl	80021fc <HAL_GetTick>
 8006b78:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006b7a:	e009      	b.n	8006b90 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006b7c:	f7fb fb3e 	bl	80021fc <HAL_GetTick>
 8006b80:	4602      	mov	r2, r0
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	1ad3      	subs	r3, r2, r3
 8006b86:	2b02      	cmp	r3, #2
 8006b88:	d902      	bls.n	8006b90 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006b8a:	2303      	movs	r3, #3
 8006b8c:	73fb      	strb	r3, [r7, #15]
        break;
 8006b8e:	e005      	b.n	8006b9c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006b90:	4b2c      	ldr	r3, [pc, #176]	@ (8006c44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d1ef      	bne.n	8006b7c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006b9c:	7bfb      	ldrb	r3, [r7, #15]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d14a      	bne.n	8006c38 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d111      	bne.n	8006bcc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006ba8:	4b26      	ldr	r3, [pc, #152]	@ (8006c44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006baa:	695b      	ldr	r3, [r3, #20]
 8006bac:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8006bb0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006bb4:	687a      	ldr	r2, [r7, #4]
 8006bb6:	6892      	ldr	r2, [r2, #8]
 8006bb8:	0211      	lsls	r1, r2, #8
 8006bba:	687a      	ldr	r2, [r7, #4]
 8006bbc:	68d2      	ldr	r2, [r2, #12]
 8006bbe:	0912      	lsrs	r2, r2, #4
 8006bc0:	0452      	lsls	r2, r2, #17
 8006bc2:	430a      	orrs	r2, r1
 8006bc4:	491f      	ldr	r1, [pc, #124]	@ (8006c44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	614b      	str	r3, [r1, #20]
 8006bca:	e011      	b.n	8006bf0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006bcc:	4b1d      	ldr	r3, [pc, #116]	@ (8006c44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006bce:	695b      	ldr	r3, [r3, #20]
 8006bd0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8006bd4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006bd8:	687a      	ldr	r2, [r7, #4]
 8006bda:	6892      	ldr	r2, [r2, #8]
 8006bdc:	0211      	lsls	r1, r2, #8
 8006bde:	687a      	ldr	r2, [r7, #4]
 8006be0:	6912      	ldr	r2, [r2, #16]
 8006be2:	0852      	lsrs	r2, r2, #1
 8006be4:	3a01      	subs	r2, #1
 8006be6:	0652      	lsls	r2, r2, #25
 8006be8:	430a      	orrs	r2, r1
 8006bea:	4916      	ldr	r1, [pc, #88]	@ (8006c44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006bec:	4313      	orrs	r3, r2
 8006bee:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006bf0:	4b14      	ldr	r3, [pc, #80]	@ (8006c44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a13      	ldr	r2, [pc, #76]	@ (8006c44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006bf6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006bfa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bfc:	f7fb fafe 	bl	80021fc <HAL_GetTick>
 8006c00:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006c02:	e009      	b.n	8006c18 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006c04:	f7fb fafa 	bl	80021fc <HAL_GetTick>
 8006c08:	4602      	mov	r2, r0
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	1ad3      	subs	r3, r2, r3
 8006c0e:	2b02      	cmp	r3, #2
 8006c10:	d902      	bls.n	8006c18 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8006c12:	2303      	movs	r3, #3
 8006c14:	73fb      	strb	r3, [r7, #15]
          break;
 8006c16:	e005      	b.n	8006c24 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006c18:	4b0a      	ldr	r3, [pc, #40]	@ (8006c44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d0ef      	beq.n	8006c04 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8006c24:	7bfb      	ldrb	r3, [r7, #15]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d106      	bne.n	8006c38 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006c2a:	4b06      	ldr	r3, [pc, #24]	@ (8006c44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c2c:	695a      	ldr	r2, [r3, #20]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	695b      	ldr	r3, [r3, #20]
 8006c32:	4904      	ldr	r1, [pc, #16]	@ (8006c44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c34:	4313      	orrs	r3, r2
 8006c36:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006c38:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3710      	adds	r7, #16
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}
 8006c42:	bf00      	nop
 8006c44:	40021000 	.word	0x40021000

08006c48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b082      	sub	sp, #8
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d101      	bne.n	8006c5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006c56:	2301      	movs	r3, #1
 8006c58:	e049      	b.n	8006cee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c60:	b2db      	uxtb	r3, r3
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d106      	bne.n	8006c74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f7fb f8cc 	bl	8001e0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2202      	movs	r2, #2
 8006c78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681a      	ldr	r2, [r3, #0]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	3304      	adds	r3, #4
 8006c84:	4619      	mov	r1, r3
 8006c86:	4610      	mov	r0, r2
 8006c88:	f000 f9d0 	bl	800702c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2201      	movs	r2, #1
 8006c90:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2201      	movs	r2, #1
 8006c98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2201      	movs	r2, #1
 8006cb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2201      	movs	r2, #1
 8006cd0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2201      	movs	r2, #1
 8006ce0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006cec:	2300      	movs	r3, #0
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3708      	adds	r7, #8
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}
	...

08006cf8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b085      	sub	sp, #20
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d06:	b2db      	uxtb	r3, r3
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	d001      	beq.n	8006d10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	e04f      	b.n	8006db0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2202      	movs	r2, #2
 8006d14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	68da      	ldr	r2, [r3, #12]
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f042 0201 	orr.w	r2, r2, #1
 8006d26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a23      	ldr	r2, [pc, #140]	@ (8006dbc <HAL_TIM_Base_Start_IT+0xc4>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d01d      	beq.n	8006d6e <HAL_TIM_Base_Start_IT+0x76>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d3a:	d018      	beq.n	8006d6e <HAL_TIM_Base_Start_IT+0x76>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a1f      	ldr	r2, [pc, #124]	@ (8006dc0 <HAL_TIM_Base_Start_IT+0xc8>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d013      	beq.n	8006d6e <HAL_TIM_Base_Start_IT+0x76>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a1e      	ldr	r2, [pc, #120]	@ (8006dc4 <HAL_TIM_Base_Start_IT+0xcc>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d00e      	beq.n	8006d6e <HAL_TIM_Base_Start_IT+0x76>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a1c      	ldr	r2, [pc, #112]	@ (8006dc8 <HAL_TIM_Base_Start_IT+0xd0>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d009      	beq.n	8006d6e <HAL_TIM_Base_Start_IT+0x76>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a1b      	ldr	r2, [pc, #108]	@ (8006dcc <HAL_TIM_Base_Start_IT+0xd4>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d004      	beq.n	8006d6e <HAL_TIM_Base_Start_IT+0x76>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a19      	ldr	r2, [pc, #100]	@ (8006dd0 <HAL_TIM_Base_Start_IT+0xd8>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d115      	bne.n	8006d9a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	689a      	ldr	r2, [r3, #8]
 8006d74:	4b17      	ldr	r3, [pc, #92]	@ (8006dd4 <HAL_TIM_Base_Start_IT+0xdc>)
 8006d76:	4013      	ands	r3, r2
 8006d78:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2b06      	cmp	r3, #6
 8006d7e:	d015      	beq.n	8006dac <HAL_TIM_Base_Start_IT+0xb4>
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d86:	d011      	beq.n	8006dac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	681a      	ldr	r2, [r3, #0]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f042 0201 	orr.w	r2, r2, #1
 8006d96:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d98:	e008      	b.n	8006dac <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	681a      	ldr	r2, [r3, #0]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f042 0201 	orr.w	r2, r2, #1
 8006da8:	601a      	str	r2, [r3, #0]
 8006daa:	e000      	b.n	8006dae <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006dae:	2300      	movs	r3, #0
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	3714      	adds	r7, #20
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr
 8006dbc:	40012c00 	.word	0x40012c00
 8006dc0:	40000400 	.word	0x40000400
 8006dc4:	40000800 	.word	0x40000800
 8006dc8:	40000c00 	.word	0x40000c00
 8006dcc:	40013400 	.word	0x40013400
 8006dd0:	40014000 	.word	0x40014000
 8006dd4:	00010007 	.word	0x00010007

08006dd8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b084      	sub	sp, #16
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	68db      	ldr	r3, [r3, #12]
 8006de6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	691b      	ldr	r3, [r3, #16]
 8006dee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	f003 0302 	and.w	r3, r3, #2
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d020      	beq.n	8006e3c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	f003 0302 	and.w	r3, r3, #2
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d01b      	beq.n	8006e3c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f06f 0202 	mvn.w	r2, #2
 8006e0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2201      	movs	r2, #1
 8006e12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	699b      	ldr	r3, [r3, #24]
 8006e1a:	f003 0303 	and.w	r3, r3, #3
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d003      	beq.n	8006e2a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f000 f8e4 	bl	8006ff0 <HAL_TIM_IC_CaptureCallback>
 8006e28:	e005      	b.n	8006e36 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f000 f8d6 	bl	8006fdc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f000 f8e7 	bl	8007004 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	f003 0304 	and.w	r3, r3, #4
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d020      	beq.n	8006e88 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	f003 0304 	and.w	r3, r3, #4
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d01b      	beq.n	8006e88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f06f 0204 	mvn.w	r2, #4
 8006e58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2202      	movs	r2, #2
 8006e5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	699b      	ldr	r3, [r3, #24]
 8006e66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d003      	beq.n	8006e76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f000 f8be 	bl	8006ff0 <HAL_TIM_IC_CaptureCallback>
 8006e74:	e005      	b.n	8006e82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f000 f8b0 	bl	8006fdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f000 f8c1 	bl	8007004 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2200      	movs	r2, #0
 8006e86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	f003 0308 	and.w	r3, r3, #8
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d020      	beq.n	8006ed4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	f003 0308 	and.w	r3, r3, #8
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d01b      	beq.n	8006ed4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f06f 0208 	mvn.w	r2, #8
 8006ea4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2204      	movs	r2, #4
 8006eaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	69db      	ldr	r3, [r3, #28]
 8006eb2:	f003 0303 	and.w	r3, r3, #3
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d003      	beq.n	8006ec2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f000 f898 	bl	8006ff0 <HAL_TIM_IC_CaptureCallback>
 8006ec0:	e005      	b.n	8006ece <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f000 f88a 	bl	8006fdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f000 f89b 	bl	8007004 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	f003 0310 	and.w	r3, r3, #16
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d020      	beq.n	8006f20 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	f003 0310 	and.w	r3, r3, #16
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d01b      	beq.n	8006f20 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f06f 0210 	mvn.w	r2, #16
 8006ef0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2208      	movs	r2, #8
 8006ef6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	69db      	ldr	r3, [r3, #28]
 8006efe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d003      	beq.n	8006f0e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 f872 	bl	8006ff0 <HAL_TIM_IC_CaptureCallback>
 8006f0c:	e005      	b.n	8006f1a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f000 f864 	bl	8006fdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f000 f875 	bl	8007004 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	f003 0301 	and.w	r3, r3, #1
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d00c      	beq.n	8006f44 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	f003 0301 	and.w	r3, r3, #1
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d007      	beq.n	8006f44 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f06f 0201 	mvn.w	r2, #1
 8006f3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f7fa f904 	bl	800114c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d00c      	beq.n	8006f68 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d007      	beq.n	8006f68 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006f60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f000 f98e 	bl	8007284 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d00c      	beq.n	8006f8c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d007      	beq.n	8006f8c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006f84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f000 f986 	bl	8007298 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d00c      	beq.n	8006fb0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d007      	beq.n	8006fb0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006fa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f000 f834 	bl	8007018 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	f003 0320 	and.w	r3, r3, #32
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d00c      	beq.n	8006fd4 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	f003 0320 	and.w	r3, r3, #32
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d007      	beq.n	8006fd4 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f06f 0220 	mvn.w	r2, #32
 8006fcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f000 f94e 	bl	8007270 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006fd4:	bf00      	nop
 8006fd6:	3710      	adds	r7, #16
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}

08006fdc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b083      	sub	sp, #12
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006fe4:	bf00      	nop
 8006fe6:	370c      	adds	r7, #12
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr

08006ff0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b083      	sub	sp, #12
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006ff8:	bf00      	nop
 8006ffa:	370c      	adds	r7, #12
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007002:	4770      	bx	lr

08007004 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007004:	b480      	push	{r7}
 8007006:	b083      	sub	sp, #12
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800700c:	bf00      	nop
 800700e:	370c      	adds	r7, #12
 8007010:	46bd      	mov	sp, r7
 8007012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007016:	4770      	bx	lr

08007018 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007018:	b480      	push	{r7}
 800701a:	b083      	sub	sp, #12
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007020:	bf00      	nop
 8007022:	370c      	adds	r7, #12
 8007024:	46bd      	mov	sp, r7
 8007026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702a:	4770      	bx	lr

0800702c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800702c:	b480      	push	{r7}
 800702e:	b085      	sub	sp, #20
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
 8007034:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	4a40      	ldr	r2, [pc, #256]	@ (8007140 <TIM_Base_SetConfig+0x114>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d013      	beq.n	800706c <TIM_Base_SetConfig+0x40>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800704a:	d00f      	beq.n	800706c <TIM_Base_SetConfig+0x40>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	4a3d      	ldr	r2, [pc, #244]	@ (8007144 <TIM_Base_SetConfig+0x118>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d00b      	beq.n	800706c <TIM_Base_SetConfig+0x40>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	4a3c      	ldr	r2, [pc, #240]	@ (8007148 <TIM_Base_SetConfig+0x11c>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d007      	beq.n	800706c <TIM_Base_SetConfig+0x40>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	4a3b      	ldr	r2, [pc, #236]	@ (800714c <TIM_Base_SetConfig+0x120>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d003      	beq.n	800706c <TIM_Base_SetConfig+0x40>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	4a3a      	ldr	r2, [pc, #232]	@ (8007150 <TIM_Base_SetConfig+0x124>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d108      	bne.n	800707e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007072:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	685b      	ldr	r3, [r3, #4]
 8007078:	68fa      	ldr	r2, [r7, #12]
 800707a:	4313      	orrs	r3, r2
 800707c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	4a2f      	ldr	r2, [pc, #188]	@ (8007140 <TIM_Base_SetConfig+0x114>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d01f      	beq.n	80070c6 <TIM_Base_SetConfig+0x9a>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800708c:	d01b      	beq.n	80070c6 <TIM_Base_SetConfig+0x9a>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	4a2c      	ldr	r2, [pc, #176]	@ (8007144 <TIM_Base_SetConfig+0x118>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d017      	beq.n	80070c6 <TIM_Base_SetConfig+0x9a>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	4a2b      	ldr	r2, [pc, #172]	@ (8007148 <TIM_Base_SetConfig+0x11c>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d013      	beq.n	80070c6 <TIM_Base_SetConfig+0x9a>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	4a2a      	ldr	r2, [pc, #168]	@ (800714c <TIM_Base_SetConfig+0x120>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d00f      	beq.n	80070c6 <TIM_Base_SetConfig+0x9a>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	4a29      	ldr	r2, [pc, #164]	@ (8007150 <TIM_Base_SetConfig+0x124>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d00b      	beq.n	80070c6 <TIM_Base_SetConfig+0x9a>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	4a28      	ldr	r2, [pc, #160]	@ (8007154 <TIM_Base_SetConfig+0x128>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d007      	beq.n	80070c6 <TIM_Base_SetConfig+0x9a>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	4a27      	ldr	r2, [pc, #156]	@ (8007158 <TIM_Base_SetConfig+0x12c>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d003      	beq.n	80070c6 <TIM_Base_SetConfig+0x9a>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	4a26      	ldr	r2, [pc, #152]	@ (800715c <TIM_Base_SetConfig+0x130>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d108      	bne.n	80070d8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80070cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	68db      	ldr	r3, [r3, #12]
 80070d2:	68fa      	ldr	r2, [r7, #12]
 80070d4:	4313      	orrs	r3, r2
 80070d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	695b      	ldr	r3, [r3, #20]
 80070e2:	4313      	orrs	r3, r2
 80070e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	68fa      	ldr	r2, [r7, #12]
 80070ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	689a      	ldr	r2, [r3, #8]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	681a      	ldr	r2, [r3, #0]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	4a10      	ldr	r2, [pc, #64]	@ (8007140 <TIM_Base_SetConfig+0x114>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d00f      	beq.n	8007124 <TIM_Base_SetConfig+0xf8>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	4a12      	ldr	r2, [pc, #72]	@ (8007150 <TIM_Base_SetConfig+0x124>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d00b      	beq.n	8007124 <TIM_Base_SetConfig+0xf8>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	4a11      	ldr	r2, [pc, #68]	@ (8007154 <TIM_Base_SetConfig+0x128>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d007      	beq.n	8007124 <TIM_Base_SetConfig+0xf8>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	4a10      	ldr	r2, [pc, #64]	@ (8007158 <TIM_Base_SetConfig+0x12c>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d003      	beq.n	8007124 <TIM_Base_SetConfig+0xf8>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	4a0f      	ldr	r2, [pc, #60]	@ (800715c <TIM_Base_SetConfig+0x130>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d103      	bne.n	800712c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	691a      	ldr	r2, [r3, #16]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2201      	movs	r2, #1
 8007130:	615a      	str	r2, [r3, #20]
}
 8007132:	bf00      	nop
 8007134:	3714      	adds	r7, #20
 8007136:	46bd      	mov	sp, r7
 8007138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713c:	4770      	bx	lr
 800713e:	bf00      	nop
 8007140:	40012c00 	.word	0x40012c00
 8007144:	40000400 	.word	0x40000400
 8007148:	40000800 	.word	0x40000800
 800714c:	40000c00 	.word	0x40000c00
 8007150:	40013400 	.word	0x40013400
 8007154:	40014000 	.word	0x40014000
 8007158:	40014400 	.word	0x40014400
 800715c:	40014800 	.word	0x40014800

08007160 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007160:	b480      	push	{r7}
 8007162:	b085      	sub	sp, #20
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
 8007168:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007170:	2b01      	cmp	r3, #1
 8007172:	d101      	bne.n	8007178 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007174:	2302      	movs	r3, #2
 8007176:	e068      	b.n	800724a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2201      	movs	r2, #1
 800717c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2202      	movs	r2, #2
 8007184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	689b      	ldr	r3, [r3, #8]
 8007196:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a2e      	ldr	r2, [pc, #184]	@ (8007258 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d004      	beq.n	80071ac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a2d      	ldr	r2, [pc, #180]	@ (800725c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d108      	bne.n	80071be <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80071b2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	68fa      	ldr	r2, [r7, #12]
 80071ba:	4313      	orrs	r3, r2
 80071bc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071c4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	68fa      	ldr	r2, [r7, #12]
 80071cc:	4313      	orrs	r3, r2
 80071ce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	68fa      	ldr	r2, [r7, #12]
 80071d6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a1e      	ldr	r2, [pc, #120]	@ (8007258 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d01d      	beq.n	800721e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071ea:	d018      	beq.n	800721e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a1b      	ldr	r2, [pc, #108]	@ (8007260 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d013      	beq.n	800721e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a1a      	ldr	r2, [pc, #104]	@ (8007264 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d00e      	beq.n	800721e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a18      	ldr	r2, [pc, #96]	@ (8007268 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d009      	beq.n	800721e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a13      	ldr	r2, [pc, #76]	@ (800725c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d004      	beq.n	800721e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a14      	ldr	r2, [pc, #80]	@ (800726c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d10c      	bne.n	8007238 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007224:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	689b      	ldr	r3, [r3, #8]
 800722a:	68ba      	ldr	r2, [r7, #8]
 800722c:	4313      	orrs	r3, r2
 800722e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	68ba      	ldr	r2, [r7, #8]
 8007236:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2201      	movs	r2, #1
 800723c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2200      	movs	r2, #0
 8007244:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007248:	2300      	movs	r3, #0
}
 800724a:	4618      	mov	r0, r3
 800724c:	3714      	adds	r7, #20
 800724e:	46bd      	mov	sp, r7
 8007250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007254:	4770      	bx	lr
 8007256:	bf00      	nop
 8007258:	40012c00 	.word	0x40012c00
 800725c:	40013400 	.word	0x40013400
 8007260:	40000400 	.word	0x40000400
 8007264:	40000800 	.word	0x40000800
 8007268:	40000c00 	.word	0x40000c00
 800726c:	40014000 	.word	0x40014000

08007270 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007270:	b480      	push	{r7}
 8007272:	b083      	sub	sp, #12
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007278:	bf00      	nop
 800727a:	370c      	adds	r7, #12
 800727c:	46bd      	mov	sp, r7
 800727e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007282:	4770      	bx	lr

08007284 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007284:	b480      	push	{r7}
 8007286:	b083      	sub	sp, #12
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800728c:	bf00      	nop
 800728e:	370c      	adds	r7, #12
 8007290:	46bd      	mov	sp, r7
 8007292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007296:	4770      	bx	lr

08007298 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007298:	b480      	push	{r7}
 800729a:	b083      	sub	sp, #12
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80072a0:	bf00      	nop
 80072a2:	370c      	adds	r7, #12
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr

080072ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b082      	sub	sp, #8
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d101      	bne.n	80072be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80072ba:	2301      	movs	r3, #1
 80072bc:	e040      	b.n	8007340 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d106      	bne.n	80072d4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2200      	movs	r2, #0
 80072ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f7fa fdc2 	bl	8001e58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2224      	movs	r2, #36	@ 0x24
 80072d8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	681a      	ldr	r2, [r3, #0]
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f022 0201 	bic.w	r2, r2, #1
 80072e8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d002      	beq.n	80072f8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f000 fe74 	bl	8007fe0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f000 fbb9 	bl	8007a70 <UART_SetConfig>
 80072fe:	4603      	mov	r3, r0
 8007300:	2b01      	cmp	r3, #1
 8007302:	d101      	bne.n	8007308 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007304:	2301      	movs	r3, #1
 8007306:	e01b      	b.n	8007340 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	685a      	ldr	r2, [r3, #4]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007316:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	689a      	ldr	r2, [r3, #8]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007326:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	681a      	ldr	r2, [r3, #0]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f042 0201 	orr.w	r2, r2, #1
 8007336:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f000 fef3 	bl	8008124 <UART_CheckIdleState>
 800733e:	4603      	mov	r3, r0
}
 8007340:	4618      	mov	r0, r3
 8007342:	3708      	adds	r7, #8
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}

08007348 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b08a      	sub	sp, #40	@ 0x28
 800734c:	af02      	add	r7, sp, #8
 800734e:	60f8      	str	r0, [r7, #12]
 8007350:	60b9      	str	r1, [r7, #8]
 8007352:	603b      	str	r3, [r7, #0]
 8007354:	4613      	mov	r3, r2
 8007356:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800735c:	2b20      	cmp	r3, #32
 800735e:	d177      	bne.n	8007450 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d002      	beq.n	800736c <HAL_UART_Transmit+0x24>
 8007366:	88fb      	ldrh	r3, [r7, #6]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d101      	bne.n	8007370 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800736c:	2301      	movs	r3, #1
 800736e:	e070      	b.n	8007452 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	2200      	movs	r2, #0
 8007374:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	2221      	movs	r2, #33	@ 0x21
 800737c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800737e:	f7fa ff3d 	bl	80021fc <HAL_GetTick>
 8007382:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	88fa      	ldrh	r2, [r7, #6]
 8007388:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	88fa      	ldrh	r2, [r7, #6]
 8007390:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	689b      	ldr	r3, [r3, #8]
 8007398:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800739c:	d108      	bne.n	80073b0 <HAL_UART_Transmit+0x68>
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	691b      	ldr	r3, [r3, #16]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d104      	bne.n	80073b0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80073a6:	2300      	movs	r3, #0
 80073a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	61bb      	str	r3, [r7, #24]
 80073ae:	e003      	b.n	80073b8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80073b4:	2300      	movs	r3, #0
 80073b6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80073b8:	e02f      	b.n	800741a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	9300      	str	r3, [sp, #0]
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	2200      	movs	r2, #0
 80073c2:	2180      	movs	r1, #128	@ 0x80
 80073c4:	68f8      	ldr	r0, [r7, #12]
 80073c6:	f000 ff55 	bl	8008274 <UART_WaitOnFlagUntilTimeout>
 80073ca:	4603      	mov	r3, r0
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d004      	beq.n	80073da <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2220      	movs	r2, #32
 80073d4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80073d6:	2303      	movs	r3, #3
 80073d8:	e03b      	b.n	8007452 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80073da:	69fb      	ldr	r3, [r7, #28]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d10b      	bne.n	80073f8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80073e0:	69bb      	ldr	r3, [r7, #24]
 80073e2:	881a      	ldrh	r2, [r3, #0]
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80073ec:	b292      	uxth	r2, r2
 80073ee:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80073f0:	69bb      	ldr	r3, [r7, #24]
 80073f2:	3302      	adds	r3, #2
 80073f4:	61bb      	str	r3, [r7, #24]
 80073f6:	e007      	b.n	8007408 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80073f8:	69fb      	ldr	r3, [r7, #28]
 80073fa:	781a      	ldrb	r2, [r3, #0]
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007402:	69fb      	ldr	r3, [r7, #28]
 8007404:	3301      	adds	r3, #1
 8007406:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800740e:	b29b      	uxth	r3, r3
 8007410:	3b01      	subs	r3, #1
 8007412:	b29a      	uxth	r2, r3
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007420:	b29b      	uxth	r3, r3
 8007422:	2b00      	cmp	r3, #0
 8007424:	d1c9      	bne.n	80073ba <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	9300      	str	r3, [sp, #0]
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	2200      	movs	r2, #0
 800742e:	2140      	movs	r1, #64	@ 0x40
 8007430:	68f8      	ldr	r0, [r7, #12]
 8007432:	f000 ff1f 	bl	8008274 <UART_WaitOnFlagUntilTimeout>
 8007436:	4603      	mov	r3, r0
 8007438:	2b00      	cmp	r3, #0
 800743a:	d004      	beq.n	8007446 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	2220      	movs	r2, #32
 8007440:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8007442:	2303      	movs	r3, #3
 8007444:	e005      	b.n	8007452 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2220      	movs	r2, #32
 800744a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800744c:	2300      	movs	r3, #0
 800744e:	e000      	b.n	8007452 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8007450:	2302      	movs	r3, #2
  }
}
 8007452:	4618      	mov	r0, r3
 8007454:	3720      	adds	r7, #32
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}
	...

0800745c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b0ba      	sub	sp, #232	@ 0xe8
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	69db      	ldr	r3, [r3, #28]
 800746a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	689b      	ldr	r3, [r3, #8]
 800747e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007482:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007486:	f640 030f 	movw	r3, #2063	@ 0x80f
 800748a:	4013      	ands	r3, r2
 800748c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007490:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007494:	2b00      	cmp	r3, #0
 8007496:	d115      	bne.n	80074c4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007498:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800749c:	f003 0320 	and.w	r3, r3, #32
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d00f      	beq.n	80074c4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80074a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074a8:	f003 0320 	and.w	r3, r3, #32
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d009      	beq.n	80074c4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	f000 82ae 	beq.w	8007a16 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	4798      	blx	r3
      }
      return;
 80074c2:	e2a8      	b.n	8007a16 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80074c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	f000 8117 	beq.w	80076fc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80074ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80074d2:	f003 0301 	and.w	r3, r3, #1
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d106      	bne.n	80074e8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80074da:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80074de:	4b85      	ldr	r3, [pc, #532]	@ (80076f4 <HAL_UART_IRQHandler+0x298>)
 80074e0:	4013      	ands	r3, r2
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	f000 810a 	beq.w	80076fc <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80074e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074ec:	f003 0301 	and.w	r3, r3, #1
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d011      	beq.n	8007518 <HAL_UART_IRQHandler+0xbc>
 80074f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d00b      	beq.n	8007518 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	2201      	movs	r2, #1
 8007506:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800750e:	f043 0201 	orr.w	r2, r3, #1
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007518:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800751c:	f003 0302 	and.w	r3, r3, #2
 8007520:	2b00      	cmp	r3, #0
 8007522:	d011      	beq.n	8007548 <HAL_UART_IRQHandler+0xec>
 8007524:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007528:	f003 0301 	and.w	r3, r3, #1
 800752c:	2b00      	cmp	r3, #0
 800752e:	d00b      	beq.n	8007548 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	2202      	movs	r2, #2
 8007536:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800753e:	f043 0204 	orr.w	r2, r3, #4
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007548:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800754c:	f003 0304 	and.w	r3, r3, #4
 8007550:	2b00      	cmp	r3, #0
 8007552:	d011      	beq.n	8007578 <HAL_UART_IRQHandler+0x11c>
 8007554:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007558:	f003 0301 	and.w	r3, r3, #1
 800755c:	2b00      	cmp	r3, #0
 800755e:	d00b      	beq.n	8007578 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	2204      	movs	r2, #4
 8007566:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800756e:	f043 0202 	orr.w	r2, r3, #2
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007578:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800757c:	f003 0308 	and.w	r3, r3, #8
 8007580:	2b00      	cmp	r3, #0
 8007582:	d017      	beq.n	80075b4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007584:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007588:	f003 0320 	and.w	r3, r3, #32
 800758c:	2b00      	cmp	r3, #0
 800758e:	d105      	bne.n	800759c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007590:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007594:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007598:	2b00      	cmp	r3, #0
 800759a:	d00b      	beq.n	80075b4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	2208      	movs	r2, #8
 80075a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80075aa:	f043 0208 	orr.w	r2, r3, #8
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80075b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d012      	beq.n	80075e6 <HAL_UART_IRQHandler+0x18a>
 80075c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075c4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d00c      	beq.n	80075e6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80075d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80075dc:	f043 0220 	orr.w	r2, r3, #32
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	f000 8214 	beq.w	8007a1a <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80075f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075f6:	f003 0320 	and.w	r3, r3, #32
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d00d      	beq.n	800761a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80075fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007602:	f003 0320 	and.w	r3, r3, #32
 8007606:	2b00      	cmp	r3, #0
 8007608:	d007      	beq.n	800761a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800760e:	2b00      	cmp	r3, #0
 8007610:	d003      	beq.n	800761a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007620:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	689b      	ldr	r3, [r3, #8]
 800762a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800762e:	2b40      	cmp	r3, #64	@ 0x40
 8007630:	d005      	beq.n	800763e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007632:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007636:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800763a:	2b00      	cmp	r3, #0
 800763c:	d04f      	beq.n	80076de <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f000 fe7f 	bl	8008342 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	689b      	ldr	r3, [r3, #8]
 800764a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800764e:	2b40      	cmp	r3, #64	@ 0x40
 8007650:	d141      	bne.n	80076d6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	3308      	adds	r3, #8
 8007658:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800765c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007660:	e853 3f00 	ldrex	r3, [r3]
 8007664:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007668:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800766c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007670:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	3308      	adds	r3, #8
 800767a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800767e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007682:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007686:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800768a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800768e:	e841 2300 	strex	r3, r2, [r1]
 8007692:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007696:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800769a:	2b00      	cmp	r3, #0
 800769c:	d1d9      	bne.n	8007652 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d013      	beq.n	80076ce <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80076aa:	4a13      	ldr	r2, [pc, #76]	@ (80076f8 <HAL_UART_IRQHandler+0x29c>)
 80076ac:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80076b2:	4618      	mov	r0, r3
 80076b4:	f7fd fcae 	bl	8005014 <HAL_DMA_Abort_IT>
 80076b8:	4603      	mov	r3, r0
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d017      	beq.n	80076ee <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80076c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076c4:	687a      	ldr	r2, [r7, #4]
 80076c6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80076c8:	4610      	mov	r0, r2
 80076ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076cc:	e00f      	b.n	80076ee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f000 f9b8 	bl	8007a44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076d4:	e00b      	b.n	80076ee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f000 f9b4 	bl	8007a44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076dc:	e007      	b.n	80076ee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f000 f9b0 	bl	8007a44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2200      	movs	r2, #0
 80076e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80076ec:	e195      	b.n	8007a1a <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076ee:	bf00      	nop
    return;
 80076f0:	e193      	b.n	8007a1a <HAL_UART_IRQHandler+0x5be>
 80076f2:	bf00      	nop
 80076f4:	04000120 	.word	0x04000120
 80076f8:	0800840b 	.word	0x0800840b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007700:	2b01      	cmp	r3, #1
 8007702:	f040 814e 	bne.w	80079a2 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007706:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800770a:	f003 0310 	and.w	r3, r3, #16
 800770e:	2b00      	cmp	r3, #0
 8007710:	f000 8147 	beq.w	80079a2 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007714:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007718:	f003 0310 	and.w	r3, r3, #16
 800771c:	2b00      	cmp	r3, #0
 800771e:	f000 8140 	beq.w	80079a2 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	2210      	movs	r2, #16
 8007728:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	689b      	ldr	r3, [r3, #8]
 8007730:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007734:	2b40      	cmp	r3, #64	@ 0x40
 8007736:	f040 80b8 	bne.w	80078aa <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	685b      	ldr	r3, [r3, #4]
 8007742:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007746:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800774a:	2b00      	cmp	r3, #0
 800774c:	f000 8167 	beq.w	8007a1e <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007756:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800775a:	429a      	cmp	r2, r3
 800775c:	f080 815f 	bcs.w	8007a1e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007766:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f003 0320 	and.w	r3, r3, #32
 8007776:	2b00      	cmp	r3, #0
 8007778:	f040 8086 	bne.w	8007888 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007784:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007788:	e853 3f00 	ldrex	r3, [r3]
 800778c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007790:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007794:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007798:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	461a      	mov	r2, r3
 80077a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80077a6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80077aa:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80077b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80077b6:	e841 2300 	strex	r3, r2, [r1]
 80077ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80077be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d1da      	bne.n	800777c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	3308      	adds	r3, #8
 80077cc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80077d0:	e853 3f00 	ldrex	r3, [r3]
 80077d4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80077d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80077d8:	f023 0301 	bic.w	r3, r3, #1
 80077dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	3308      	adds	r3, #8
 80077e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80077ea:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80077ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077f0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80077f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80077f6:	e841 2300 	strex	r3, r2, [r1]
 80077fa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80077fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d1e1      	bne.n	80077c6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	3308      	adds	r3, #8
 8007808:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800780a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800780c:	e853 3f00 	ldrex	r3, [r3]
 8007810:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007812:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007814:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007818:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	3308      	adds	r3, #8
 8007822:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007826:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007828:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800782a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800782c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800782e:	e841 2300 	strex	r3, r2, [r1]
 8007832:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007834:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007836:	2b00      	cmp	r3, #0
 8007838:	d1e3      	bne.n	8007802 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2220      	movs	r2, #32
 800783e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2200      	movs	r2, #0
 8007846:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800784e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007850:	e853 3f00 	ldrex	r3, [r3]
 8007854:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007856:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007858:	f023 0310 	bic.w	r3, r3, #16
 800785c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	461a      	mov	r2, r3
 8007866:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800786a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800786c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800786e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007870:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007872:	e841 2300 	strex	r3, r2, [r1]
 8007876:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007878:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800787a:	2b00      	cmp	r3, #0
 800787c:	d1e4      	bne.n	8007848 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007882:	4618      	mov	r0, r3
 8007884:	f7fd fb88 	bl	8004f98 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2202      	movs	r2, #2
 800788c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800789a:	b29b      	uxth	r3, r3
 800789c:	1ad3      	subs	r3, r2, r3
 800789e:	b29b      	uxth	r3, r3
 80078a0:	4619      	mov	r1, r3
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 f8d8 	bl	8007a58 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80078a8:	e0b9      	b.n	8007a1e <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80078b6:	b29b      	uxth	r3, r3
 80078b8:	1ad3      	subs	r3, r2, r3
 80078ba:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80078c4:	b29b      	uxth	r3, r3
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	f000 80ab 	beq.w	8007a22 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 80078cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	f000 80a6 	beq.w	8007a22 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078de:	e853 3f00 	ldrex	r3, [r3]
 80078e2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80078e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80078ea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	461a      	mov	r2, r3
 80078f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80078f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80078fa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078fc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80078fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007900:	e841 2300 	strex	r3, r2, [r1]
 8007904:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007906:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007908:	2b00      	cmp	r3, #0
 800790a:	d1e4      	bne.n	80078d6 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	3308      	adds	r3, #8
 8007912:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007916:	e853 3f00 	ldrex	r3, [r3]
 800791a:	623b      	str	r3, [r7, #32]
   return(result);
 800791c:	6a3b      	ldr	r3, [r7, #32]
 800791e:	f023 0301 	bic.w	r3, r3, #1
 8007922:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	3308      	adds	r3, #8
 800792c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007930:	633a      	str	r2, [r7, #48]	@ 0x30
 8007932:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007934:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007936:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007938:	e841 2300 	strex	r3, r2, [r1]
 800793c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800793e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007940:	2b00      	cmp	r3, #0
 8007942:	d1e3      	bne.n	800790c <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2220      	movs	r2, #32
 8007948:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2200      	movs	r2, #0
 8007950:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2200      	movs	r2, #0
 8007956:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800795e:	693b      	ldr	r3, [r7, #16]
 8007960:	e853 3f00 	ldrex	r3, [r3]
 8007964:	60fb      	str	r3, [r7, #12]
   return(result);
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	f023 0310 	bic.w	r3, r3, #16
 800796c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	461a      	mov	r2, r3
 8007976:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800797a:	61fb      	str	r3, [r7, #28]
 800797c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800797e:	69b9      	ldr	r1, [r7, #24]
 8007980:	69fa      	ldr	r2, [r7, #28]
 8007982:	e841 2300 	strex	r3, r2, [r1]
 8007986:	617b      	str	r3, [r7, #20]
   return(result);
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d1e4      	bne.n	8007958 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2202      	movs	r2, #2
 8007992:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007994:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007998:	4619      	mov	r1, r3
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f000 f85c 	bl	8007a58 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80079a0:	e03f      	b.n	8007a22 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80079a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d00e      	beq.n	80079cc <HAL_UART_IRQHandler+0x570>
 80079ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80079b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d008      	beq.n	80079cc <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80079c2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f000 fd60 	bl	800848a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80079ca:	e02d      	b.n	8007a28 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80079cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d00e      	beq.n	80079f6 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80079d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d008      	beq.n	80079f6 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d01c      	beq.n	8007a26 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	4798      	blx	r3
    }
    return;
 80079f4:	e017      	b.n	8007a26 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80079f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d012      	beq.n	8007a28 <HAL_UART_IRQHandler+0x5cc>
 8007a02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d00c      	beq.n	8007a28 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f000 fd11 	bl	8008436 <UART_EndTransmit_IT>
    return;
 8007a14:	e008      	b.n	8007a28 <HAL_UART_IRQHandler+0x5cc>
      return;
 8007a16:	bf00      	nop
 8007a18:	e006      	b.n	8007a28 <HAL_UART_IRQHandler+0x5cc>
    return;
 8007a1a:	bf00      	nop
 8007a1c:	e004      	b.n	8007a28 <HAL_UART_IRQHandler+0x5cc>
      return;
 8007a1e:	bf00      	nop
 8007a20:	e002      	b.n	8007a28 <HAL_UART_IRQHandler+0x5cc>
      return;
 8007a22:	bf00      	nop
 8007a24:	e000      	b.n	8007a28 <HAL_UART_IRQHandler+0x5cc>
    return;
 8007a26:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007a28:	37e8      	adds	r7, #232	@ 0xe8
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}
 8007a2e:	bf00      	nop

08007a30 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b083      	sub	sp, #12
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007a38:	bf00      	nop
 8007a3a:	370c      	adds	r7, #12
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a42:	4770      	bx	lr

08007a44 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007a44:	b480      	push	{r7}
 8007a46:	b083      	sub	sp, #12
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007a4c:	bf00      	nop
 8007a4e:	370c      	adds	r7, #12
 8007a50:	46bd      	mov	sp, r7
 8007a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a56:	4770      	bx	lr

08007a58 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b083      	sub	sp, #12
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
 8007a60:	460b      	mov	r3, r1
 8007a62:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007a64:	bf00      	nop
 8007a66:	370c      	adds	r7, #12
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6e:	4770      	bx	lr

08007a70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a74:	b08a      	sub	sp, #40	@ 0x28
 8007a76:	af00      	add	r7, sp, #0
 8007a78:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	689a      	ldr	r2, [r3, #8]
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	691b      	ldr	r3, [r3, #16]
 8007a88:	431a      	orrs	r2, r3
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	695b      	ldr	r3, [r3, #20]
 8007a8e:	431a      	orrs	r2, r3
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	69db      	ldr	r3, [r3, #28]
 8007a94:	4313      	orrs	r3, r2
 8007a96:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	681a      	ldr	r2, [r3, #0]
 8007a9e:	4ba4      	ldr	r3, [pc, #656]	@ (8007d30 <UART_SetConfig+0x2c0>)
 8007aa0:	4013      	ands	r3, r2
 8007aa2:	68fa      	ldr	r2, [r7, #12]
 8007aa4:	6812      	ldr	r2, [r2, #0]
 8007aa6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007aa8:	430b      	orrs	r3, r1
 8007aaa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	685b      	ldr	r3, [r3, #4]
 8007ab2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	68da      	ldr	r2, [r3, #12]
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	430a      	orrs	r2, r1
 8007ac0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	699b      	ldr	r3, [r3, #24]
 8007ac6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4a99      	ldr	r2, [pc, #612]	@ (8007d34 <UART_SetConfig+0x2c4>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d004      	beq.n	8007adc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	6a1b      	ldr	r3, [r3, #32]
 8007ad6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	689b      	ldr	r3, [r3, #8]
 8007ae2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007aec:	430a      	orrs	r2, r1
 8007aee:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4a90      	ldr	r2, [pc, #576]	@ (8007d38 <UART_SetConfig+0x2c8>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d126      	bne.n	8007b48 <UART_SetConfig+0xd8>
 8007afa:	4b90      	ldr	r3, [pc, #576]	@ (8007d3c <UART_SetConfig+0x2cc>)
 8007afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b00:	f003 0303 	and.w	r3, r3, #3
 8007b04:	2b03      	cmp	r3, #3
 8007b06:	d81b      	bhi.n	8007b40 <UART_SetConfig+0xd0>
 8007b08:	a201      	add	r2, pc, #4	@ (adr r2, 8007b10 <UART_SetConfig+0xa0>)
 8007b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b0e:	bf00      	nop
 8007b10:	08007b21 	.word	0x08007b21
 8007b14:	08007b31 	.word	0x08007b31
 8007b18:	08007b29 	.word	0x08007b29
 8007b1c:	08007b39 	.word	0x08007b39
 8007b20:	2301      	movs	r3, #1
 8007b22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b26:	e116      	b.n	8007d56 <UART_SetConfig+0x2e6>
 8007b28:	2302      	movs	r3, #2
 8007b2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b2e:	e112      	b.n	8007d56 <UART_SetConfig+0x2e6>
 8007b30:	2304      	movs	r3, #4
 8007b32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b36:	e10e      	b.n	8007d56 <UART_SetConfig+0x2e6>
 8007b38:	2308      	movs	r3, #8
 8007b3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b3e:	e10a      	b.n	8007d56 <UART_SetConfig+0x2e6>
 8007b40:	2310      	movs	r3, #16
 8007b42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b46:	e106      	b.n	8007d56 <UART_SetConfig+0x2e6>
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4a7c      	ldr	r2, [pc, #496]	@ (8007d40 <UART_SetConfig+0x2d0>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d138      	bne.n	8007bc4 <UART_SetConfig+0x154>
 8007b52:	4b7a      	ldr	r3, [pc, #488]	@ (8007d3c <UART_SetConfig+0x2cc>)
 8007b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b58:	f003 030c 	and.w	r3, r3, #12
 8007b5c:	2b0c      	cmp	r3, #12
 8007b5e:	d82d      	bhi.n	8007bbc <UART_SetConfig+0x14c>
 8007b60:	a201      	add	r2, pc, #4	@ (adr r2, 8007b68 <UART_SetConfig+0xf8>)
 8007b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b66:	bf00      	nop
 8007b68:	08007b9d 	.word	0x08007b9d
 8007b6c:	08007bbd 	.word	0x08007bbd
 8007b70:	08007bbd 	.word	0x08007bbd
 8007b74:	08007bbd 	.word	0x08007bbd
 8007b78:	08007bad 	.word	0x08007bad
 8007b7c:	08007bbd 	.word	0x08007bbd
 8007b80:	08007bbd 	.word	0x08007bbd
 8007b84:	08007bbd 	.word	0x08007bbd
 8007b88:	08007ba5 	.word	0x08007ba5
 8007b8c:	08007bbd 	.word	0x08007bbd
 8007b90:	08007bbd 	.word	0x08007bbd
 8007b94:	08007bbd 	.word	0x08007bbd
 8007b98:	08007bb5 	.word	0x08007bb5
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ba2:	e0d8      	b.n	8007d56 <UART_SetConfig+0x2e6>
 8007ba4:	2302      	movs	r3, #2
 8007ba6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007baa:	e0d4      	b.n	8007d56 <UART_SetConfig+0x2e6>
 8007bac:	2304      	movs	r3, #4
 8007bae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007bb2:	e0d0      	b.n	8007d56 <UART_SetConfig+0x2e6>
 8007bb4:	2308      	movs	r3, #8
 8007bb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007bba:	e0cc      	b.n	8007d56 <UART_SetConfig+0x2e6>
 8007bbc:	2310      	movs	r3, #16
 8007bbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007bc2:	e0c8      	b.n	8007d56 <UART_SetConfig+0x2e6>
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4a5e      	ldr	r2, [pc, #376]	@ (8007d44 <UART_SetConfig+0x2d4>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d125      	bne.n	8007c1a <UART_SetConfig+0x1aa>
 8007bce:	4b5b      	ldr	r3, [pc, #364]	@ (8007d3c <UART_SetConfig+0x2cc>)
 8007bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bd4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007bd8:	2b30      	cmp	r3, #48	@ 0x30
 8007bda:	d016      	beq.n	8007c0a <UART_SetConfig+0x19a>
 8007bdc:	2b30      	cmp	r3, #48	@ 0x30
 8007bde:	d818      	bhi.n	8007c12 <UART_SetConfig+0x1a2>
 8007be0:	2b20      	cmp	r3, #32
 8007be2:	d00a      	beq.n	8007bfa <UART_SetConfig+0x18a>
 8007be4:	2b20      	cmp	r3, #32
 8007be6:	d814      	bhi.n	8007c12 <UART_SetConfig+0x1a2>
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d002      	beq.n	8007bf2 <UART_SetConfig+0x182>
 8007bec:	2b10      	cmp	r3, #16
 8007bee:	d008      	beq.n	8007c02 <UART_SetConfig+0x192>
 8007bf0:	e00f      	b.n	8007c12 <UART_SetConfig+0x1a2>
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007bf8:	e0ad      	b.n	8007d56 <UART_SetConfig+0x2e6>
 8007bfa:	2302      	movs	r3, #2
 8007bfc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c00:	e0a9      	b.n	8007d56 <UART_SetConfig+0x2e6>
 8007c02:	2304      	movs	r3, #4
 8007c04:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c08:	e0a5      	b.n	8007d56 <UART_SetConfig+0x2e6>
 8007c0a:	2308      	movs	r3, #8
 8007c0c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c10:	e0a1      	b.n	8007d56 <UART_SetConfig+0x2e6>
 8007c12:	2310      	movs	r3, #16
 8007c14:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c18:	e09d      	b.n	8007d56 <UART_SetConfig+0x2e6>
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	4a4a      	ldr	r2, [pc, #296]	@ (8007d48 <UART_SetConfig+0x2d8>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d125      	bne.n	8007c70 <UART_SetConfig+0x200>
 8007c24:	4b45      	ldr	r3, [pc, #276]	@ (8007d3c <UART_SetConfig+0x2cc>)
 8007c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c2a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007c2e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007c30:	d016      	beq.n	8007c60 <UART_SetConfig+0x1f0>
 8007c32:	2bc0      	cmp	r3, #192	@ 0xc0
 8007c34:	d818      	bhi.n	8007c68 <UART_SetConfig+0x1f8>
 8007c36:	2b80      	cmp	r3, #128	@ 0x80
 8007c38:	d00a      	beq.n	8007c50 <UART_SetConfig+0x1e0>
 8007c3a:	2b80      	cmp	r3, #128	@ 0x80
 8007c3c:	d814      	bhi.n	8007c68 <UART_SetConfig+0x1f8>
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d002      	beq.n	8007c48 <UART_SetConfig+0x1d8>
 8007c42:	2b40      	cmp	r3, #64	@ 0x40
 8007c44:	d008      	beq.n	8007c58 <UART_SetConfig+0x1e8>
 8007c46:	e00f      	b.n	8007c68 <UART_SetConfig+0x1f8>
 8007c48:	2300      	movs	r3, #0
 8007c4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c4e:	e082      	b.n	8007d56 <UART_SetConfig+0x2e6>
 8007c50:	2302      	movs	r3, #2
 8007c52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c56:	e07e      	b.n	8007d56 <UART_SetConfig+0x2e6>
 8007c58:	2304      	movs	r3, #4
 8007c5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c5e:	e07a      	b.n	8007d56 <UART_SetConfig+0x2e6>
 8007c60:	2308      	movs	r3, #8
 8007c62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c66:	e076      	b.n	8007d56 <UART_SetConfig+0x2e6>
 8007c68:	2310      	movs	r3, #16
 8007c6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c6e:	e072      	b.n	8007d56 <UART_SetConfig+0x2e6>
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4a35      	ldr	r2, [pc, #212]	@ (8007d4c <UART_SetConfig+0x2dc>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d12a      	bne.n	8007cd0 <UART_SetConfig+0x260>
 8007c7a:	4b30      	ldr	r3, [pc, #192]	@ (8007d3c <UART_SetConfig+0x2cc>)
 8007c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c80:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007c84:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007c88:	d01a      	beq.n	8007cc0 <UART_SetConfig+0x250>
 8007c8a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007c8e:	d81b      	bhi.n	8007cc8 <UART_SetConfig+0x258>
 8007c90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c94:	d00c      	beq.n	8007cb0 <UART_SetConfig+0x240>
 8007c96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c9a:	d815      	bhi.n	8007cc8 <UART_SetConfig+0x258>
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d003      	beq.n	8007ca8 <UART_SetConfig+0x238>
 8007ca0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ca4:	d008      	beq.n	8007cb8 <UART_SetConfig+0x248>
 8007ca6:	e00f      	b.n	8007cc8 <UART_SetConfig+0x258>
 8007ca8:	2300      	movs	r3, #0
 8007caa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007cae:	e052      	b.n	8007d56 <UART_SetConfig+0x2e6>
 8007cb0:	2302      	movs	r3, #2
 8007cb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007cb6:	e04e      	b.n	8007d56 <UART_SetConfig+0x2e6>
 8007cb8:	2304      	movs	r3, #4
 8007cba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007cbe:	e04a      	b.n	8007d56 <UART_SetConfig+0x2e6>
 8007cc0:	2308      	movs	r3, #8
 8007cc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007cc6:	e046      	b.n	8007d56 <UART_SetConfig+0x2e6>
 8007cc8:	2310      	movs	r3, #16
 8007cca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007cce:	e042      	b.n	8007d56 <UART_SetConfig+0x2e6>
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a17      	ldr	r2, [pc, #92]	@ (8007d34 <UART_SetConfig+0x2c4>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d13a      	bne.n	8007d50 <UART_SetConfig+0x2e0>
 8007cda:	4b18      	ldr	r3, [pc, #96]	@ (8007d3c <UART_SetConfig+0x2cc>)
 8007cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ce0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007ce4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007ce8:	d01a      	beq.n	8007d20 <UART_SetConfig+0x2b0>
 8007cea:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007cee:	d81b      	bhi.n	8007d28 <UART_SetConfig+0x2b8>
 8007cf0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007cf4:	d00c      	beq.n	8007d10 <UART_SetConfig+0x2a0>
 8007cf6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007cfa:	d815      	bhi.n	8007d28 <UART_SetConfig+0x2b8>
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d003      	beq.n	8007d08 <UART_SetConfig+0x298>
 8007d00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d04:	d008      	beq.n	8007d18 <UART_SetConfig+0x2a8>
 8007d06:	e00f      	b.n	8007d28 <UART_SetConfig+0x2b8>
 8007d08:	2300      	movs	r3, #0
 8007d0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007d0e:	e022      	b.n	8007d56 <UART_SetConfig+0x2e6>
 8007d10:	2302      	movs	r3, #2
 8007d12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007d16:	e01e      	b.n	8007d56 <UART_SetConfig+0x2e6>
 8007d18:	2304      	movs	r3, #4
 8007d1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007d1e:	e01a      	b.n	8007d56 <UART_SetConfig+0x2e6>
 8007d20:	2308      	movs	r3, #8
 8007d22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007d26:	e016      	b.n	8007d56 <UART_SetConfig+0x2e6>
 8007d28:	2310      	movs	r3, #16
 8007d2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007d2e:	e012      	b.n	8007d56 <UART_SetConfig+0x2e6>
 8007d30:	efff69f3 	.word	0xefff69f3
 8007d34:	40008000 	.word	0x40008000
 8007d38:	40013800 	.word	0x40013800
 8007d3c:	40021000 	.word	0x40021000
 8007d40:	40004400 	.word	0x40004400
 8007d44:	40004800 	.word	0x40004800
 8007d48:	40004c00 	.word	0x40004c00
 8007d4c:	40005000 	.word	0x40005000
 8007d50:	2310      	movs	r3, #16
 8007d52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	4a9f      	ldr	r2, [pc, #636]	@ (8007fd8 <UART_SetConfig+0x568>)
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d17a      	bne.n	8007e56 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007d60:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007d64:	2b08      	cmp	r3, #8
 8007d66:	d824      	bhi.n	8007db2 <UART_SetConfig+0x342>
 8007d68:	a201      	add	r2, pc, #4	@ (adr r2, 8007d70 <UART_SetConfig+0x300>)
 8007d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d6e:	bf00      	nop
 8007d70:	08007d95 	.word	0x08007d95
 8007d74:	08007db3 	.word	0x08007db3
 8007d78:	08007d9d 	.word	0x08007d9d
 8007d7c:	08007db3 	.word	0x08007db3
 8007d80:	08007da3 	.word	0x08007da3
 8007d84:	08007db3 	.word	0x08007db3
 8007d88:	08007db3 	.word	0x08007db3
 8007d8c:	08007db3 	.word	0x08007db3
 8007d90:	08007dab 	.word	0x08007dab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d94:	f7fe fa10 	bl	80061b8 <HAL_RCC_GetPCLK1Freq>
 8007d98:	61f8      	str	r0, [r7, #28]
        break;
 8007d9a:	e010      	b.n	8007dbe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d9c:	4b8f      	ldr	r3, [pc, #572]	@ (8007fdc <UART_SetConfig+0x56c>)
 8007d9e:	61fb      	str	r3, [r7, #28]
        break;
 8007da0:	e00d      	b.n	8007dbe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007da2:	f7fe f971 	bl	8006088 <HAL_RCC_GetSysClockFreq>
 8007da6:	61f8      	str	r0, [r7, #28]
        break;
 8007da8:	e009      	b.n	8007dbe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007daa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007dae:	61fb      	str	r3, [r7, #28]
        break;
 8007db0:	e005      	b.n	8007dbe <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007db2:	2300      	movs	r3, #0
 8007db4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007db6:	2301      	movs	r3, #1
 8007db8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007dbc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007dbe:	69fb      	ldr	r3, [r7, #28]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	f000 80fb 	beq.w	8007fbc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	685a      	ldr	r2, [r3, #4]
 8007dca:	4613      	mov	r3, r2
 8007dcc:	005b      	lsls	r3, r3, #1
 8007dce:	4413      	add	r3, r2
 8007dd0:	69fa      	ldr	r2, [r7, #28]
 8007dd2:	429a      	cmp	r2, r3
 8007dd4:	d305      	bcc.n	8007de2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	685b      	ldr	r3, [r3, #4]
 8007dda:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007ddc:	69fa      	ldr	r2, [r7, #28]
 8007dde:	429a      	cmp	r2, r3
 8007de0:	d903      	bls.n	8007dea <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007de2:	2301      	movs	r3, #1
 8007de4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007de8:	e0e8      	b.n	8007fbc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007dea:	69fb      	ldr	r3, [r7, #28]
 8007dec:	2200      	movs	r2, #0
 8007dee:	461c      	mov	r4, r3
 8007df0:	4615      	mov	r5, r2
 8007df2:	f04f 0200 	mov.w	r2, #0
 8007df6:	f04f 0300 	mov.w	r3, #0
 8007dfa:	022b      	lsls	r3, r5, #8
 8007dfc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007e00:	0222      	lsls	r2, r4, #8
 8007e02:	68f9      	ldr	r1, [r7, #12]
 8007e04:	6849      	ldr	r1, [r1, #4]
 8007e06:	0849      	lsrs	r1, r1, #1
 8007e08:	2000      	movs	r0, #0
 8007e0a:	4688      	mov	r8, r1
 8007e0c:	4681      	mov	r9, r0
 8007e0e:	eb12 0a08 	adds.w	sl, r2, r8
 8007e12:	eb43 0b09 	adc.w	fp, r3, r9
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	685b      	ldr	r3, [r3, #4]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	603b      	str	r3, [r7, #0]
 8007e1e:	607a      	str	r2, [r7, #4]
 8007e20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e24:	4650      	mov	r0, sl
 8007e26:	4659      	mov	r1, fp
 8007e28:	f7f8 fe18 	bl	8000a5c <__aeabi_uldivmod>
 8007e2c:	4602      	mov	r2, r0
 8007e2e:	460b      	mov	r3, r1
 8007e30:	4613      	mov	r3, r2
 8007e32:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007e34:	69bb      	ldr	r3, [r7, #24]
 8007e36:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007e3a:	d308      	bcc.n	8007e4e <UART_SetConfig+0x3de>
 8007e3c:	69bb      	ldr	r3, [r7, #24]
 8007e3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007e42:	d204      	bcs.n	8007e4e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	69ba      	ldr	r2, [r7, #24]
 8007e4a:	60da      	str	r2, [r3, #12]
 8007e4c:	e0b6      	b.n	8007fbc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007e4e:	2301      	movs	r3, #1
 8007e50:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007e54:	e0b2      	b.n	8007fbc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	69db      	ldr	r3, [r3, #28]
 8007e5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007e5e:	d15e      	bne.n	8007f1e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007e60:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007e64:	2b08      	cmp	r3, #8
 8007e66:	d828      	bhi.n	8007eba <UART_SetConfig+0x44a>
 8007e68:	a201      	add	r2, pc, #4	@ (adr r2, 8007e70 <UART_SetConfig+0x400>)
 8007e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e6e:	bf00      	nop
 8007e70:	08007e95 	.word	0x08007e95
 8007e74:	08007e9d 	.word	0x08007e9d
 8007e78:	08007ea5 	.word	0x08007ea5
 8007e7c:	08007ebb 	.word	0x08007ebb
 8007e80:	08007eab 	.word	0x08007eab
 8007e84:	08007ebb 	.word	0x08007ebb
 8007e88:	08007ebb 	.word	0x08007ebb
 8007e8c:	08007ebb 	.word	0x08007ebb
 8007e90:	08007eb3 	.word	0x08007eb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e94:	f7fe f990 	bl	80061b8 <HAL_RCC_GetPCLK1Freq>
 8007e98:	61f8      	str	r0, [r7, #28]
        break;
 8007e9a:	e014      	b.n	8007ec6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e9c:	f7fe f9a2 	bl	80061e4 <HAL_RCC_GetPCLK2Freq>
 8007ea0:	61f8      	str	r0, [r7, #28]
        break;
 8007ea2:	e010      	b.n	8007ec6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ea4:	4b4d      	ldr	r3, [pc, #308]	@ (8007fdc <UART_SetConfig+0x56c>)
 8007ea6:	61fb      	str	r3, [r7, #28]
        break;
 8007ea8:	e00d      	b.n	8007ec6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007eaa:	f7fe f8ed 	bl	8006088 <HAL_RCC_GetSysClockFreq>
 8007eae:	61f8      	str	r0, [r7, #28]
        break;
 8007eb0:	e009      	b.n	8007ec6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007eb2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007eb6:	61fb      	str	r3, [r7, #28]
        break;
 8007eb8:	e005      	b.n	8007ec6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007ec4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007ec6:	69fb      	ldr	r3, [r7, #28]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d077      	beq.n	8007fbc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007ecc:	69fb      	ldr	r3, [r7, #28]
 8007ece:	005a      	lsls	r2, r3, #1
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	685b      	ldr	r3, [r3, #4]
 8007ed4:	085b      	lsrs	r3, r3, #1
 8007ed6:	441a      	add	r2, r3
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	685b      	ldr	r3, [r3, #4]
 8007edc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ee0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ee2:	69bb      	ldr	r3, [r7, #24]
 8007ee4:	2b0f      	cmp	r3, #15
 8007ee6:	d916      	bls.n	8007f16 <UART_SetConfig+0x4a6>
 8007ee8:	69bb      	ldr	r3, [r7, #24]
 8007eea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007eee:	d212      	bcs.n	8007f16 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007ef0:	69bb      	ldr	r3, [r7, #24]
 8007ef2:	b29b      	uxth	r3, r3
 8007ef4:	f023 030f 	bic.w	r3, r3, #15
 8007ef8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007efa:	69bb      	ldr	r3, [r7, #24]
 8007efc:	085b      	lsrs	r3, r3, #1
 8007efe:	b29b      	uxth	r3, r3
 8007f00:	f003 0307 	and.w	r3, r3, #7
 8007f04:	b29a      	uxth	r2, r3
 8007f06:	8afb      	ldrh	r3, [r7, #22]
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	8afa      	ldrh	r2, [r7, #22]
 8007f12:	60da      	str	r2, [r3, #12]
 8007f14:	e052      	b.n	8007fbc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007f16:	2301      	movs	r3, #1
 8007f18:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007f1c:	e04e      	b.n	8007fbc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007f1e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007f22:	2b08      	cmp	r3, #8
 8007f24:	d827      	bhi.n	8007f76 <UART_SetConfig+0x506>
 8007f26:	a201      	add	r2, pc, #4	@ (adr r2, 8007f2c <UART_SetConfig+0x4bc>)
 8007f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f2c:	08007f51 	.word	0x08007f51
 8007f30:	08007f59 	.word	0x08007f59
 8007f34:	08007f61 	.word	0x08007f61
 8007f38:	08007f77 	.word	0x08007f77
 8007f3c:	08007f67 	.word	0x08007f67
 8007f40:	08007f77 	.word	0x08007f77
 8007f44:	08007f77 	.word	0x08007f77
 8007f48:	08007f77 	.word	0x08007f77
 8007f4c:	08007f6f 	.word	0x08007f6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f50:	f7fe f932 	bl	80061b8 <HAL_RCC_GetPCLK1Freq>
 8007f54:	61f8      	str	r0, [r7, #28]
        break;
 8007f56:	e014      	b.n	8007f82 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f58:	f7fe f944 	bl	80061e4 <HAL_RCC_GetPCLK2Freq>
 8007f5c:	61f8      	str	r0, [r7, #28]
        break;
 8007f5e:	e010      	b.n	8007f82 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f60:	4b1e      	ldr	r3, [pc, #120]	@ (8007fdc <UART_SetConfig+0x56c>)
 8007f62:	61fb      	str	r3, [r7, #28]
        break;
 8007f64:	e00d      	b.n	8007f82 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f66:	f7fe f88f 	bl	8006088 <HAL_RCC_GetSysClockFreq>
 8007f6a:	61f8      	str	r0, [r7, #28]
        break;
 8007f6c:	e009      	b.n	8007f82 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007f72:	61fb      	str	r3, [r7, #28]
        break;
 8007f74:	e005      	b.n	8007f82 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007f76:	2300      	movs	r3, #0
 8007f78:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007f80:	bf00      	nop
    }

    if (pclk != 0U)
 8007f82:	69fb      	ldr	r3, [r7, #28]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d019      	beq.n	8007fbc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	685b      	ldr	r3, [r3, #4]
 8007f8c:	085a      	lsrs	r2, r3, #1
 8007f8e:	69fb      	ldr	r3, [r7, #28]
 8007f90:	441a      	add	r2, r3
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	685b      	ldr	r3, [r3, #4]
 8007f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f9a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f9c:	69bb      	ldr	r3, [r7, #24]
 8007f9e:	2b0f      	cmp	r3, #15
 8007fa0:	d909      	bls.n	8007fb6 <UART_SetConfig+0x546>
 8007fa2:	69bb      	ldr	r3, [r7, #24]
 8007fa4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007fa8:	d205      	bcs.n	8007fb6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007faa:	69bb      	ldr	r3, [r7, #24]
 8007fac:	b29a      	uxth	r2, r3
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	60da      	str	r2, [r3, #12]
 8007fb4:	e002      	b.n	8007fbc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007fc8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	3728      	adds	r7, #40	@ 0x28
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007fd6:	bf00      	nop
 8007fd8:	40008000 	.word	0x40008000
 8007fdc:	00f42400 	.word	0x00f42400

08007fe0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b083      	sub	sp, #12
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fec:	f003 0308 	and.w	r3, r3, #8
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d00a      	beq.n	800800a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	685b      	ldr	r3, [r3, #4]
 8007ffa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	430a      	orrs	r2, r1
 8008008:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800800e:	f003 0301 	and.w	r3, r3, #1
 8008012:	2b00      	cmp	r3, #0
 8008014:	d00a      	beq.n	800802c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	685b      	ldr	r3, [r3, #4]
 800801c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	430a      	orrs	r2, r1
 800802a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008030:	f003 0302 	and.w	r3, r3, #2
 8008034:	2b00      	cmp	r3, #0
 8008036:	d00a      	beq.n	800804e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	685b      	ldr	r3, [r3, #4]
 800803e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	430a      	orrs	r2, r1
 800804c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008052:	f003 0304 	and.w	r3, r3, #4
 8008056:	2b00      	cmp	r3, #0
 8008058:	d00a      	beq.n	8008070 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	685b      	ldr	r3, [r3, #4]
 8008060:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	430a      	orrs	r2, r1
 800806e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008074:	f003 0310 	and.w	r3, r3, #16
 8008078:	2b00      	cmp	r3, #0
 800807a:	d00a      	beq.n	8008092 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	689b      	ldr	r3, [r3, #8]
 8008082:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	430a      	orrs	r2, r1
 8008090:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008096:	f003 0320 	and.w	r3, r3, #32
 800809a:	2b00      	cmp	r3, #0
 800809c:	d00a      	beq.n	80080b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	689b      	ldr	r3, [r3, #8]
 80080a4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	430a      	orrs	r2, r1
 80080b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d01a      	beq.n	80080f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	685b      	ldr	r3, [r3, #4]
 80080c6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	430a      	orrs	r2, r1
 80080d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80080de:	d10a      	bne.n	80080f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	430a      	orrs	r2, r1
 80080f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d00a      	beq.n	8008118 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	685b      	ldr	r3, [r3, #4]
 8008108:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	430a      	orrs	r2, r1
 8008116:	605a      	str	r2, [r3, #4]
  }
}
 8008118:	bf00      	nop
 800811a:	370c      	adds	r7, #12
 800811c:	46bd      	mov	sp, r7
 800811e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008122:	4770      	bx	lr

08008124 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b098      	sub	sp, #96	@ 0x60
 8008128:	af02      	add	r7, sp, #8
 800812a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2200      	movs	r2, #0
 8008130:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008134:	f7fa f862 	bl	80021fc <HAL_GetTick>
 8008138:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f003 0308 	and.w	r3, r3, #8
 8008144:	2b08      	cmp	r3, #8
 8008146:	d12e      	bne.n	80081a6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008148:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800814c:	9300      	str	r3, [sp, #0]
 800814e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008150:	2200      	movs	r2, #0
 8008152:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f000 f88c 	bl	8008274 <UART_WaitOnFlagUntilTimeout>
 800815c:	4603      	mov	r3, r0
 800815e:	2b00      	cmp	r3, #0
 8008160:	d021      	beq.n	80081a6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008168:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800816a:	e853 3f00 	ldrex	r3, [r3]
 800816e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008170:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008172:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008176:	653b      	str	r3, [r7, #80]	@ 0x50
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	461a      	mov	r2, r3
 800817e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008180:	647b      	str	r3, [r7, #68]	@ 0x44
 8008182:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008184:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008186:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008188:	e841 2300 	strex	r3, r2, [r1]
 800818c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800818e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008190:	2b00      	cmp	r3, #0
 8008192:	d1e6      	bne.n	8008162 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2220      	movs	r2, #32
 8008198:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2200      	movs	r2, #0
 800819e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80081a2:	2303      	movs	r3, #3
 80081a4:	e062      	b.n	800826c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f003 0304 	and.w	r3, r3, #4
 80081b0:	2b04      	cmp	r3, #4
 80081b2:	d149      	bne.n	8008248 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80081b4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80081b8:	9300      	str	r3, [sp, #0]
 80081ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80081bc:	2200      	movs	r2, #0
 80081be:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f000 f856 	bl	8008274 <UART_WaitOnFlagUntilTimeout>
 80081c8:	4603      	mov	r3, r0
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d03c      	beq.n	8008248 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081d6:	e853 3f00 	ldrex	r3, [r3]
 80081da:	623b      	str	r3, [r7, #32]
   return(result);
 80081dc:	6a3b      	ldr	r3, [r7, #32]
 80081de:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80081e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	461a      	mov	r2, r3
 80081ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80081ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80081ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081f0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80081f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80081f4:	e841 2300 	strex	r3, r2, [r1]
 80081f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80081fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d1e6      	bne.n	80081ce <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	3308      	adds	r3, #8
 8008206:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008208:	693b      	ldr	r3, [r7, #16]
 800820a:	e853 3f00 	ldrex	r3, [r3]
 800820e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	f023 0301 	bic.w	r3, r3, #1
 8008216:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	3308      	adds	r3, #8
 800821e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008220:	61fa      	str	r2, [r7, #28]
 8008222:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008224:	69b9      	ldr	r1, [r7, #24]
 8008226:	69fa      	ldr	r2, [r7, #28]
 8008228:	e841 2300 	strex	r3, r2, [r1]
 800822c:	617b      	str	r3, [r7, #20]
   return(result);
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d1e5      	bne.n	8008200 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2220      	movs	r2, #32
 8008238:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2200      	movs	r2, #0
 8008240:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008244:	2303      	movs	r3, #3
 8008246:	e011      	b.n	800826c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2220      	movs	r2, #32
 800824c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2220      	movs	r2, #32
 8008252:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2200      	movs	r2, #0
 800825a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2200      	movs	r2, #0
 8008260:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2200      	movs	r2, #0
 8008266:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800826a:	2300      	movs	r3, #0
}
 800826c:	4618      	mov	r0, r3
 800826e:	3758      	adds	r7, #88	@ 0x58
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}

08008274 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b084      	sub	sp, #16
 8008278:	af00      	add	r7, sp, #0
 800827a:	60f8      	str	r0, [r7, #12]
 800827c:	60b9      	str	r1, [r7, #8]
 800827e:	603b      	str	r3, [r7, #0]
 8008280:	4613      	mov	r3, r2
 8008282:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008284:	e049      	b.n	800831a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008286:	69bb      	ldr	r3, [r7, #24]
 8008288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800828c:	d045      	beq.n	800831a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800828e:	f7f9 ffb5 	bl	80021fc <HAL_GetTick>
 8008292:	4602      	mov	r2, r0
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	1ad3      	subs	r3, r2, r3
 8008298:	69ba      	ldr	r2, [r7, #24]
 800829a:	429a      	cmp	r2, r3
 800829c:	d302      	bcc.n	80082a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800829e:	69bb      	ldr	r3, [r7, #24]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d101      	bne.n	80082a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80082a4:	2303      	movs	r3, #3
 80082a6:	e048      	b.n	800833a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f003 0304 	and.w	r3, r3, #4
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d031      	beq.n	800831a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	69db      	ldr	r3, [r3, #28]
 80082bc:	f003 0308 	and.w	r3, r3, #8
 80082c0:	2b08      	cmp	r3, #8
 80082c2:	d110      	bne.n	80082e6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	2208      	movs	r2, #8
 80082ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80082cc:	68f8      	ldr	r0, [r7, #12]
 80082ce:	f000 f838 	bl	8008342 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	2208      	movs	r2, #8
 80082d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	2200      	movs	r2, #0
 80082de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80082e2:	2301      	movs	r3, #1
 80082e4:	e029      	b.n	800833a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	69db      	ldr	r3, [r3, #28]
 80082ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80082f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80082f4:	d111      	bne.n	800831a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80082fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008300:	68f8      	ldr	r0, [r7, #12]
 8008302:	f000 f81e 	bl	8008342 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	2220      	movs	r2, #32
 800830a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	2200      	movs	r2, #0
 8008312:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8008316:	2303      	movs	r3, #3
 8008318:	e00f      	b.n	800833a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	69da      	ldr	r2, [r3, #28]
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	4013      	ands	r3, r2
 8008324:	68ba      	ldr	r2, [r7, #8]
 8008326:	429a      	cmp	r2, r3
 8008328:	bf0c      	ite	eq
 800832a:	2301      	moveq	r3, #1
 800832c:	2300      	movne	r3, #0
 800832e:	b2db      	uxtb	r3, r3
 8008330:	461a      	mov	r2, r3
 8008332:	79fb      	ldrb	r3, [r7, #7]
 8008334:	429a      	cmp	r2, r3
 8008336:	d0a6      	beq.n	8008286 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008338:	2300      	movs	r3, #0
}
 800833a:	4618      	mov	r0, r3
 800833c:	3710      	adds	r7, #16
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}

08008342 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008342:	b480      	push	{r7}
 8008344:	b095      	sub	sp, #84	@ 0x54
 8008346:	af00      	add	r7, sp, #0
 8008348:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008350:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008352:	e853 3f00 	ldrex	r3, [r3]
 8008356:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800835a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800835e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	461a      	mov	r2, r3
 8008366:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008368:	643b      	str	r3, [r7, #64]	@ 0x40
 800836a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800836c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800836e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008370:	e841 2300 	strex	r3, r2, [r1]
 8008374:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008376:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008378:	2b00      	cmp	r3, #0
 800837a:	d1e6      	bne.n	800834a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	3308      	adds	r3, #8
 8008382:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008384:	6a3b      	ldr	r3, [r7, #32]
 8008386:	e853 3f00 	ldrex	r3, [r3]
 800838a:	61fb      	str	r3, [r7, #28]
   return(result);
 800838c:	69fb      	ldr	r3, [r7, #28]
 800838e:	f023 0301 	bic.w	r3, r3, #1
 8008392:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	3308      	adds	r3, #8
 800839a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800839c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800839e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80083a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80083a4:	e841 2300 	strex	r3, r2, [r1]
 80083a8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80083aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d1e5      	bne.n	800837c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80083b4:	2b01      	cmp	r3, #1
 80083b6:	d118      	bne.n	80083ea <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	e853 3f00 	ldrex	r3, [r3]
 80083c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	f023 0310 	bic.w	r3, r3, #16
 80083cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	461a      	mov	r2, r3
 80083d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80083d6:	61bb      	str	r3, [r7, #24]
 80083d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083da:	6979      	ldr	r1, [r7, #20]
 80083dc:	69ba      	ldr	r2, [r7, #24]
 80083de:	e841 2300 	strex	r3, r2, [r1]
 80083e2:	613b      	str	r3, [r7, #16]
   return(result);
 80083e4:	693b      	ldr	r3, [r7, #16]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d1e6      	bne.n	80083b8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2220      	movs	r2, #32
 80083ee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2200      	movs	r2, #0
 80083f6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2200      	movs	r2, #0
 80083fc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80083fe:	bf00      	nop
 8008400:	3754      	adds	r7, #84	@ 0x54
 8008402:	46bd      	mov	sp, r7
 8008404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008408:	4770      	bx	lr

0800840a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800840a:	b580      	push	{r7, lr}
 800840c:	b084      	sub	sp, #16
 800840e:	af00      	add	r7, sp, #0
 8008410:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008416:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	2200      	movs	r2, #0
 800841c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	2200      	movs	r2, #0
 8008424:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008428:	68f8      	ldr	r0, [r7, #12]
 800842a:	f7ff fb0b 	bl	8007a44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800842e:	bf00      	nop
 8008430:	3710      	adds	r7, #16
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}

08008436 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008436:	b580      	push	{r7, lr}
 8008438:	b088      	sub	sp, #32
 800843a:	af00      	add	r7, sp, #0
 800843c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	e853 3f00 	ldrex	r3, [r3]
 800844a:	60bb      	str	r3, [r7, #8]
   return(result);
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008452:	61fb      	str	r3, [r7, #28]
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	461a      	mov	r2, r3
 800845a:	69fb      	ldr	r3, [r7, #28]
 800845c:	61bb      	str	r3, [r7, #24]
 800845e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008460:	6979      	ldr	r1, [r7, #20]
 8008462:	69ba      	ldr	r2, [r7, #24]
 8008464:	e841 2300 	strex	r3, r2, [r1]
 8008468:	613b      	str	r3, [r7, #16]
   return(result);
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d1e6      	bne.n	800843e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2220      	movs	r2, #32
 8008474:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2200      	movs	r2, #0
 800847a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	f7ff fad7 	bl	8007a30 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008482:	bf00      	nop
 8008484:	3720      	adds	r7, #32
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}

0800848a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800848a:	b480      	push	{r7}
 800848c:	b083      	sub	sp, #12
 800848e:	af00      	add	r7, sp, #0
 8008490:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008492:	bf00      	nop
 8008494:	370c      	adds	r7, #12
 8008496:	46bd      	mov	sp, r7
 8008498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849c:	4770      	bx	lr
	...

080084a0 <siprintf>:
 80084a0:	b40e      	push	{r1, r2, r3}
 80084a2:	b500      	push	{lr}
 80084a4:	b09c      	sub	sp, #112	@ 0x70
 80084a6:	ab1d      	add	r3, sp, #116	@ 0x74
 80084a8:	9002      	str	r0, [sp, #8]
 80084aa:	9006      	str	r0, [sp, #24]
 80084ac:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80084b0:	4809      	ldr	r0, [pc, #36]	@ (80084d8 <siprintf+0x38>)
 80084b2:	9107      	str	r1, [sp, #28]
 80084b4:	9104      	str	r1, [sp, #16]
 80084b6:	4909      	ldr	r1, [pc, #36]	@ (80084dc <siprintf+0x3c>)
 80084b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80084bc:	9105      	str	r1, [sp, #20]
 80084be:	6800      	ldr	r0, [r0, #0]
 80084c0:	9301      	str	r3, [sp, #4]
 80084c2:	a902      	add	r1, sp, #8
 80084c4:	f000 f994 	bl	80087f0 <_svfiprintf_r>
 80084c8:	9b02      	ldr	r3, [sp, #8]
 80084ca:	2200      	movs	r2, #0
 80084cc:	701a      	strb	r2, [r3, #0]
 80084ce:	b01c      	add	sp, #112	@ 0x70
 80084d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80084d4:	b003      	add	sp, #12
 80084d6:	4770      	bx	lr
 80084d8:	20000018 	.word	0x20000018
 80084dc:	ffff0208 	.word	0xffff0208

080084e0 <memset>:
 80084e0:	4402      	add	r2, r0
 80084e2:	4603      	mov	r3, r0
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d100      	bne.n	80084ea <memset+0xa>
 80084e8:	4770      	bx	lr
 80084ea:	f803 1b01 	strb.w	r1, [r3], #1
 80084ee:	e7f9      	b.n	80084e4 <memset+0x4>

080084f0 <__errno>:
 80084f0:	4b01      	ldr	r3, [pc, #4]	@ (80084f8 <__errno+0x8>)
 80084f2:	6818      	ldr	r0, [r3, #0]
 80084f4:	4770      	bx	lr
 80084f6:	bf00      	nop
 80084f8:	20000018 	.word	0x20000018

080084fc <__libc_init_array>:
 80084fc:	b570      	push	{r4, r5, r6, lr}
 80084fe:	4d0d      	ldr	r5, [pc, #52]	@ (8008534 <__libc_init_array+0x38>)
 8008500:	4c0d      	ldr	r4, [pc, #52]	@ (8008538 <__libc_init_array+0x3c>)
 8008502:	1b64      	subs	r4, r4, r5
 8008504:	10a4      	asrs	r4, r4, #2
 8008506:	2600      	movs	r6, #0
 8008508:	42a6      	cmp	r6, r4
 800850a:	d109      	bne.n	8008520 <__libc_init_array+0x24>
 800850c:	4d0b      	ldr	r5, [pc, #44]	@ (800853c <__libc_init_array+0x40>)
 800850e:	4c0c      	ldr	r4, [pc, #48]	@ (8008540 <__libc_init_array+0x44>)
 8008510:	f000 fc66 	bl	8008de0 <_init>
 8008514:	1b64      	subs	r4, r4, r5
 8008516:	10a4      	asrs	r4, r4, #2
 8008518:	2600      	movs	r6, #0
 800851a:	42a6      	cmp	r6, r4
 800851c:	d105      	bne.n	800852a <__libc_init_array+0x2e>
 800851e:	bd70      	pop	{r4, r5, r6, pc}
 8008520:	f855 3b04 	ldr.w	r3, [r5], #4
 8008524:	4798      	blx	r3
 8008526:	3601      	adds	r6, #1
 8008528:	e7ee      	b.n	8008508 <__libc_init_array+0xc>
 800852a:	f855 3b04 	ldr.w	r3, [r5], #4
 800852e:	4798      	blx	r3
 8008530:	3601      	adds	r6, #1
 8008532:	e7f2      	b.n	800851a <__libc_init_array+0x1e>
 8008534:	08008fac 	.word	0x08008fac
 8008538:	08008fac 	.word	0x08008fac
 800853c:	08008fac 	.word	0x08008fac
 8008540:	08008fb0 	.word	0x08008fb0

08008544 <__retarget_lock_acquire_recursive>:
 8008544:	4770      	bx	lr

08008546 <__retarget_lock_release_recursive>:
 8008546:	4770      	bx	lr

08008548 <_free_r>:
 8008548:	b538      	push	{r3, r4, r5, lr}
 800854a:	4605      	mov	r5, r0
 800854c:	2900      	cmp	r1, #0
 800854e:	d041      	beq.n	80085d4 <_free_r+0x8c>
 8008550:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008554:	1f0c      	subs	r4, r1, #4
 8008556:	2b00      	cmp	r3, #0
 8008558:	bfb8      	it	lt
 800855a:	18e4      	addlt	r4, r4, r3
 800855c:	f000 f8e0 	bl	8008720 <__malloc_lock>
 8008560:	4a1d      	ldr	r2, [pc, #116]	@ (80085d8 <_free_r+0x90>)
 8008562:	6813      	ldr	r3, [r2, #0]
 8008564:	b933      	cbnz	r3, 8008574 <_free_r+0x2c>
 8008566:	6063      	str	r3, [r4, #4]
 8008568:	6014      	str	r4, [r2, #0]
 800856a:	4628      	mov	r0, r5
 800856c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008570:	f000 b8dc 	b.w	800872c <__malloc_unlock>
 8008574:	42a3      	cmp	r3, r4
 8008576:	d908      	bls.n	800858a <_free_r+0x42>
 8008578:	6820      	ldr	r0, [r4, #0]
 800857a:	1821      	adds	r1, r4, r0
 800857c:	428b      	cmp	r3, r1
 800857e:	bf01      	itttt	eq
 8008580:	6819      	ldreq	r1, [r3, #0]
 8008582:	685b      	ldreq	r3, [r3, #4]
 8008584:	1809      	addeq	r1, r1, r0
 8008586:	6021      	streq	r1, [r4, #0]
 8008588:	e7ed      	b.n	8008566 <_free_r+0x1e>
 800858a:	461a      	mov	r2, r3
 800858c:	685b      	ldr	r3, [r3, #4]
 800858e:	b10b      	cbz	r3, 8008594 <_free_r+0x4c>
 8008590:	42a3      	cmp	r3, r4
 8008592:	d9fa      	bls.n	800858a <_free_r+0x42>
 8008594:	6811      	ldr	r1, [r2, #0]
 8008596:	1850      	adds	r0, r2, r1
 8008598:	42a0      	cmp	r0, r4
 800859a:	d10b      	bne.n	80085b4 <_free_r+0x6c>
 800859c:	6820      	ldr	r0, [r4, #0]
 800859e:	4401      	add	r1, r0
 80085a0:	1850      	adds	r0, r2, r1
 80085a2:	4283      	cmp	r3, r0
 80085a4:	6011      	str	r1, [r2, #0]
 80085a6:	d1e0      	bne.n	800856a <_free_r+0x22>
 80085a8:	6818      	ldr	r0, [r3, #0]
 80085aa:	685b      	ldr	r3, [r3, #4]
 80085ac:	6053      	str	r3, [r2, #4]
 80085ae:	4408      	add	r0, r1
 80085b0:	6010      	str	r0, [r2, #0]
 80085b2:	e7da      	b.n	800856a <_free_r+0x22>
 80085b4:	d902      	bls.n	80085bc <_free_r+0x74>
 80085b6:	230c      	movs	r3, #12
 80085b8:	602b      	str	r3, [r5, #0]
 80085ba:	e7d6      	b.n	800856a <_free_r+0x22>
 80085bc:	6820      	ldr	r0, [r4, #0]
 80085be:	1821      	adds	r1, r4, r0
 80085c0:	428b      	cmp	r3, r1
 80085c2:	bf04      	itt	eq
 80085c4:	6819      	ldreq	r1, [r3, #0]
 80085c6:	685b      	ldreq	r3, [r3, #4]
 80085c8:	6063      	str	r3, [r4, #4]
 80085ca:	bf04      	itt	eq
 80085cc:	1809      	addeq	r1, r1, r0
 80085ce:	6021      	streq	r1, [r4, #0]
 80085d0:	6054      	str	r4, [r2, #4]
 80085d2:	e7ca      	b.n	800856a <_free_r+0x22>
 80085d4:	bd38      	pop	{r3, r4, r5, pc}
 80085d6:	bf00      	nop
 80085d8:	20000478 	.word	0x20000478

080085dc <sbrk_aligned>:
 80085dc:	b570      	push	{r4, r5, r6, lr}
 80085de:	4e0f      	ldr	r6, [pc, #60]	@ (800861c <sbrk_aligned+0x40>)
 80085e0:	460c      	mov	r4, r1
 80085e2:	6831      	ldr	r1, [r6, #0]
 80085e4:	4605      	mov	r5, r0
 80085e6:	b911      	cbnz	r1, 80085ee <sbrk_aligned+0x12>
 80085e8:	f000 fba6 	bl	8008d38 <_sbrk_r>
 80085ec:	6030      	str	r0, [r6, #0]
 80085ee:	4621      	mov	r1, r4
 80085f0:	4628      	mov	r0, r5
 80085f2:	f000 fba1 	bl	8008d38 <_sbrk_r>
 80085f6:	1c43      	adds	r3, r0, #1
 80085f8:	d103      	bne.n	8008602 <sbrk_aligned+0x26>
 80085fa:	f04f 34ff 	mov.w	r4, #4294967295
 80085fe:	4620      	mov	r0, r4
 8008600:	bd70      	pop	{r4, r5, r6, pc}
 8008602:	1cc4      	adds	r4, r0, #3
 8008604:	f024 0403 	bic.w	r4, r4, #3
 8008608:	42a0      	cmp	r0, r4
 800860a:	d0f8      	beq.n	80085fe <sbrk_aligned+0x22>
 800860c:	1a21      	subs	r1, r4, r0
 800860e:	4628      	mov	r0, r5
 8008610:	f000 fb92 	bl	8008d38 <_sbrk_r>
 8008614:	3001      	adds	r0, #1
 8008616:	d1f2      	bne.n	80085fe <sbrk_aligned+0x22>
 8008618:	e7ef      	b.n	80085fa <sbrk_aligned+0x1e>
 800861a:	bf00      	nop
 800861c:	20000474 	.word	0x20000474

08008620 <_malloc_r>:
 8008620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008624:	1ccd      	adds	r5, r1, #3
 8008626:	f025 0503 	bic.w	r5, r5, #3
 800862a:	3508      	adds	r5, #8
 800862c:	2d0c      	cmp	r5, #12
 800862e:	bf38      	it	cc
 8008630:	250c      	movcc	r5, #12
 8008632:	2d00      	cmp	r5, #0
 8008634:	4606      	mov	r6, r0
 8008636:	db01      	blt.n	800863c <_malloc_r+0x1c>
 8008638:	42a9      	cmp	r1, r5
 800863a:	d904      	bls.n	8008646 <_malloc_r+0x26>
 800863c:	230c      	movs	r3, #12
 800863e:	6033      	str	r3, [r6, #0]
 8008640:	2000      	movs	r0, #0
 8008642:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008646:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800871c <_malloc_r+0xfc>
 800864a:	f000 f869 	bl	8008720 <__malloc_lock>
 800864e:	f8d8 3000 	ldr.w	r3, [r8]
 8008652:	461c      	mov	r4, r3
 8008654:	bb44      	cbnz	r4, 80086a8 <_malloc_r+0x88>
 8008656:	4629      	mov	r1, r5
 8008658:	4630      	mov	r0, r6
 800865a:	f7ff ffbf 	bl	80085dc <sbrk_aligned>
 800865e:	1c43      	adds	r3, r0, #1
 8008660:	4604      	mov	r4, r0
 8008662:	d158      	bne.n	8008716 <_malloc_r+0xf6>
 8008664:	f8d8 4000 	ldr.w	r4, [r8]
 8008668:	4627      	mov	r7, r4
 800866a:	2f00      	cmp	r7, #0
 800866c:	d143      	bne.n	80086f6 <_malloc_r+0xd6>
 800866e:	2c00      	cmp	r4, #0
 8008670:	d04b      	beq.n	800870a <_malloc_r+0xea>
 8008672:	6823      	ldr	r3, [r4, #0]
 8008674:	4639      	mov	r1, r7
 8008676:	4630      	mov	r0, r6
 8008678:	eb04 0903 	add.w	r9, r4, r3
 800867c:	f000 fb5c 	bl	8008d38 <_sbrk_r>
 8008680:	4581      	cmp	r9, r0
 8008682:	d142      	bne.n	800870a <_malloc_r+0xea>
 8008684:	6821      	ldr	r1, [r4, #0]
 8008686:	1a6d      	subs	r5, r5, r1
 8008688:	4629      	mov	r1, r5
 800868a:	4630      	mov	r0, r6
 800868c:	f7ff ffa6 	bl	80085dc <sbrk_aligned>
 8008690:	3001      	adds	r0, #1
 8008692:	d03a      	beq.n	800870a <_malloc_r+0xea>
 8008694:	6823      	ldr	r3, [r4, #0]
 8008696:	442b      	add	r3, r5
 8008698:	6023      	str	r3, [r4, #0]
 800869a:	f8d8 3000 	ldr.w	r3, [r8]
 800869e:	685a      	ldr	r2, [r3, #4]
 80086a0:	bb62      	cbnz	r2, 80086fc <_malloc_r+0xdc>
 80086a2:	f8c8 7000 	str.w	r7, [r8]
 80086a6:	e00f      	b.n	80086c8 <_malloc_r+0xa8>
 80086a8:	6822      	ldr	r2, [r4, #0]
 80086aa:	1b52      	subs	r2, r2, r5
 80086ac:	d420      	bmi.n	80086f0 <_malloc_r+0xd0>
 80086ae:	2a0b      	cmp	r2, #11
 80086b0:	d917      	bls.n	80086e2 <_malloc_r+0xc2>
 80086b2:	1961      	adds	r1, r4, r5
 80086b4:	42a3      	cmp	r3, r4
 80086b6:	6025      	str	r5, [r4, #0]
 80086b8:	bf18      	it	ne
 80086ba:	6059      	strne	r1, [r3, #4]
 80086bc:	6863      	ldr	r3, [r4, #4]
 80086be:	bf08      	it	eq
 80086c0:	f8c8 1000 	streq.w	r1, [r8]
 80086c4:	5162      	str	r2, [r4, r5]
 80086c6:	604b      	str	r3, [r1, #4]
 80086c8:	4630      	mov	r0, r6
 80086ca:	f000 f82f 	bl	800872c <__malloc_unlock>
 80086ce:	f104 000b 	add.w	r0, r4, #11
 80086d2:	1d23      	adds	r3, r4, #4
 80086d4:	f020 0007 	bic.w	r0, r0, #7
 80086d8:	1ac2      	subs	r2, r0, r3
 80086da:	bf1c      	itt	ne
 80086dc:	1a1b      	subne	r3, r3, r0
 80086de:	50a3      	strne	r3, [r4, r2]
 80086e0:	e7af      	b.n	8008642 <_malloc_r+0x22>
 80086e2:	6862      	ldr	r2, [r4, #4]
 80086e4:	42a3      	cmp	r3, r4
 80086e6:	bf0c      	ite	eq
 80086e8:	f8c8 2000 	streq.w	r2, [r8]
 80086ec:	605a      	strne	r2, [r3, #4]
 80086ee:	e7eb      	b.n	80086c8 <_malloc_r+0xa8>
 80086f0:	4623      	mov	r3, r4
 80086f2:	6864      	ldr	r4, [r4, #4]
 80086f4:	e7ae      	b.n	8008654 <_malloc_r+0x34>
 80086f6:	463c      	mov	r4, r7
 80086f8:	687f      	ldr	r7, [r7, #4]
 80086fa:	e7b6      	b.n	800866a <_malloc_r+0x4a>
 80086fc:	461a      	mov	r2, r3
 80086fe:	685b      	ldr	r3, [r3, #4]
 8008700:	42a3      	cmp	r3, r4
 8008702:	d1fb      	bne.n	80086fc <_malloc_r+0xdc>
 8008704:	2300      	movs	r3, #0
 8008706:	6053      	str	r3, [r2, #4]
 8008708:	e7de      	b.n	80086c8 <_malloc_r+0xa8>
 800870a:	230c      	movs	r3, #12
 800870c:	6033      	str	r3, [r6, #0]
 800870e:	4630      	mov	r0, r6
 8008710:	f000 f80c 	bl	800872c <__malloc_unlock>
 8008714:	e794      	b.n	8008640 <_malloc_r+0x20>
 8008716:	6005      	str	r5, [r0, #0]
 8008718:	e7d6      	b.n	80086c8 <_malloc_r+0xa8>
 800871a:	bf00      	nop
 800871c:	20000478 	.word	0x20000478

08008720 <__malloc_lock>:
 8008720:	4801      	ldr	r0, [pc, #4]	@ (8008728 <__malloc_lock+0x8>)
 8008722:	f7ff bf0f 	b.w	8008544 <__retarget_lock_acquire_recursive>
 8008726:	bf00      	nop
 8008728:	20000470 	.word	0x20000470

0800872c <__malloc_unlock>:
 800872c:	4801      	ldr	r0, [pc, #4]	@ (8008734 <__malloc_unlock+0x8>)
 800872e:	f7ff bf0a 	b.w	8008546 <__retarget_lock_release_recursive>
 8008732:	bf00      	nop
 8008734:	20000470 	.word	0x20000470

08008738 <__ssputs_r>:
 8008738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800873c:	688e      	ldr	r6, [r1, #8]
 800873e:	461f      	mov	r7, r3
 8008740:	42be      	cmp	r6, r7
 8008742:	680b      	ldr	r3, [r1, #0]
 8008744:	4682      	mov	sl, r0
 8008746:	460c      	mov	r4, r1
 8008748:	4690      	mov	r8, r2
 800874a:	d82d      	bhi.n	80087a8 <__ssputs_r+0x70>
 800874c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008750:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008754:	d026      	beq.n	80087a4 <__ssputs_r+0x6c>
 8008756:	6965      	ldr	r5, [r4, #20]
 8008758:	6909      	ldr	r1, [r1, #16]
 800875a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800875e:	eba3 0901 	sub.w	r9, r3, r1
 8008762:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008766:	1c7b      	adds	r3, r7, #1
 8008768:	444b      	add	r3, r9
 800876a:	106d      	asrs	r5, r5, #1
 800876c:	429d      	cmp	r5, r3
 800876e:	bf38      	it	cc
 8008770:	461d      	movcc	r5, r3
 8008772:	0553      	lsls	r3, r2, #21
 8008774:	d527      	bpl.n	80087c6 <__ssputs_r+0x8e>
 8008776:	4629      	mov	r1, r5
 8008778:	f7ff ff52 	bl	8008620 <_malloc_r>
 800877c:	4606      	mov	r6, r0
 800877e:	b360      	cbz	r0, 80087da <__ssputs_r+0xa2>
 8008780:	6921      	ldr	r1, [r4, #16]
 8008782:	464a      	mov	r2, r9
 8008784:	f000 fae8 	bl	8008d58 <memcpy>
 8008788:	89a3      	ldrh	r3, [r4, #12]
 800878a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800878e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008792:	81a3      	strh	r3, [r4, #12]
 8008794:	6126      	str	r6, [r4, #16]
 8008796:	6165      	str	r5, [r4, #20]
 8008798:	444e      	add	r6, r9
 800879a:	eba5 0509 	sub.w	r5, r5, r9
 800879e:	6026      	str	r6, [r4, #0]
 80087a0:	60a5      	str	r5, [r4, #8]
 80087a2:	463e      	mov	r6, r7
 80087a4:	42be      	cmp	r6, r7
 80087a6:	d900      	bls.n	80087aa <__ssputs_r+0x72>
 80087a8:	463e      	mov	r6, r7
 80087aa:	6820      	ldr	r0, [r4, #0]
 80087ac:	4632      	mov	r2, r6
 80087ae:	4641      	mov	r1, r8
 80087b0:	f000 faa8 	bl	8008d04 <memmove>
 80087b4:	68a3      	ldr	r3, [r4, #8]
 80087b6:	1b9b      	subs	r3, r3, r6
 80087b8:	60a3      	str	r3, [r4, #8]
 80087ba:	6823      	ldr	r3, [r4, #0]
 80087bc:	4433      	add	r3, r6
 80087be:	6023      	str	r3, [r4, #0]
 80087c0:	2000      	movs	r0, #0
 80087c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087c6:	462a      	mov	r2, r5
 80087c8:	f000 fad4 	bl	8008d74 <_realloc_r>
 80087cc:	4606      	mov	r6, r0
 80087ce:	2800      	cmp	r0, #0
 80087d0:	d1e0      	bne.n	8008794 <__ssputs_r+0x5c>
 80087d2:	6921      	ldr	r1, [r4, #16]
 80087d4:	4650      	mov	r0, sl
 80087d6:	f7ff feb7 	bl	8008548 <_free_r>
 80087da:	230c      	movs	r3, #12
 80087dc:	f8ca 3000 	str.w	r3, [sl]
 80087e0:	89a3      	ldrh	r3, [r4, #12]
 80087e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80087e6:	81a3      	strh	r3, [r4, #12]
 80087e8:	f04f 30ff 	mov.w	r0, #4294967295
 80087ec:	e7e9      	b.n	80087c2 <__ssputs_r+0x8a>
	...

080087f0 <_svfiprintf_r>:
 80087f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087f4:	4698      	mov	r8, r3
 80087f6:	898b      	ldrh	r3, [r1, #12]
 80087f8:	061b      	lsls	r3, r3, #24
 80087fa:	b09d      	sub	sp, #116	@ 0x74
 80087fc:	4607      	mov	r7, r0
 80087fe:	460d      	mov	r5, r1
 8008800:	4614      	mov	r4, r2
 8008802:	d510      	bpl.n	8008826 <_svfiprintf_r+0x36>
 8008804:	690b      	ldr	r3, [r1, #16]
 8008806:	b973      	cbnz	r3, 8008826 <_svfiprintf_r+0x36>
 8008808:	2140      	movs	r1, #64	@ 0x40
 800880a:	f7ff ff09 	bl	8008620 <_malloc_r>
 800880e:	6028      	str	r0, [r5, #0]
 8008810:	6128      	str	r0, [r5, #16]
 8008812:	b930      	cbnz	r0, 8008822 <_svfiprintf_r+0x32>
 8008814:	230c      	movs	r3, #12
 8008816:	603b      	str	r3, [r7, #0]
 8008818:	f04f 30ff 	mov.w	r0, #4294967295
 800881c:	b01d      	add	sp, #116	@ 0x74
 800881e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008822:	2340      	movs	r3, #64	@ 0x40
 8008824:	616b      	str	r3, [r5, #20]
 8008826:	2300      	movs	r3, #0
 8008828:	9309      	str	r3, [sp, #36]	@ 0x24
 800882a:	2320      	movs	r3, #32
 800882c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008830:	f8cd 800c 	str.w	r8, [sp, #12]
 8008834:	2330      	movs	r3, #48	@ 0x30
 8008836:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80089d4 <_svfiprintf_r+0x1e4>
 800883a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800883e:	f04f 0901 	mov.w	r9, #1
 8008842:	4623      	mov	r3, r4
 8008844:	469a      	mov	sl, r3
 8008846:	f813 2b01 	ldrb.w	r2, [r3], #1
 800884a:	b10a      	cbz	r2, 8008850 <_svfiprintf_r+0x60>
 800884c:	2a25      	cmp	r2, #37	@ 0x25
 800884e:	d1f9      	bne.n	8008844 <_svfiprintf_r+0x54>
 8008850:	ebba 0b04 	subs.w	fp, sl, r4
 8008854:	d00b      	beq.n	800886e <_svfiprintf_r+0x7e>
 8008856:	465b      	mov	r3, fp
 8008858:	4622      	mov	r2, r4
 800885a:	4629      	mov	r1, r5
 800885c:	4638      	mov	r0, r7
 800885e:	f7ff ff6b 	bl	8008738 <__ssputs_r>
 8008862:	3001      	adds	r0, #1
 8008864:	f000 80a7 	beq.w	80089b6 <_svfiprintf_r+0x1c6>
 8008868:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800886a:	445a      	add	r2, fp
 800886c:	9209      	str	r2, [sp, #36]	@ 0x24
 800886e:	f89a 3000 	ldrb.w	r3, [sl]
 8008872:	2b00      	cmp	r3, #0
 8008874:	f000 809f 	beq.w	80089b6 <_svfiprintf_r+0x1c6>
 8008878:	2300      	movs	r3, #0
 800887a:	f04f 32ff 	mov.w	r2, #4294967295
 800887e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008882:	f10a 0a01 	add.w	sl, sl, #1
 8008886:	9304      	str	r3, [sp, #16]
 8008888:	9307      	str	r3, [sp, #28]
 800888a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800888e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008890:	4654      	mov	r4, sl
 8008892:	2205      	movs	r2, #5
 8008894:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008898:	484e      	ldr	r0, [pc, #312]	@ (80089d4 <_svfiprintf_r+0x1e4>)
 800889a:	f7f7 fca1 	bl	80001e0 <memchr>
 800889e:	9a04      	ldr	r2, [sp, #16]
 80088a0:	b9d8      	cbnz	r0, 80088da <_svfiprintf_r+0xea>
 80088a2:	06d0      	lsls	r0, r2, #27
 80088a4:	bf44      	itt	mi
 80088a6:	2320      	movmi	r3, #32
 80088a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80088ac:	0711      	lsls	r1, r2, #28
 80088ae:	bf44      	itt	mi
 80088b0:	232b      	movmi	r3, #43	@ 0x2b
 80088b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80088b6:	f89a 3000 	ldrb.w	r3, [sl]
 80088ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80088bc:	d015      	beq.n	80088ea <_svfiprintf_r+0xfa>
 80088be:	9a07      	ldr	r2, [sp, #28]
 80088c0:	4654      	mov	r4, sl
 80088c2:	2000      	movs	r0, #0
 80088c4:	f04f 0c0a 	mov.w	ip, #10
 80088c8:	4621      	mov	r1, r4
 80088ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80088ce:	3b30      	subs	r3, #48	@ 0x30
 80088d0:	2b09      	cmp	r3, #9
 80088d2:	d94b      	bls.n	800896c <_svfiprintf_r+0x17c>
 80088d4:	b1b0      	cbz	r0, 8008904 <_svfiprintf_r+0x114>
 80088d6:	9207      	str	r2, [sp, #28]
 80088d8:	e014      	b.n	8008904 <_svfiprintf_r+0x114>
 80088da:	eba0 0308 	sub.w	r3, r0, r8
 80088de:	fa09 f303 	lsl.w	r3, r9, r3
 80088e2:	4313      	orrs	r3, r2
 80088e4:	9304      	str	r3, [sp, #16]
 80088e6:	46a2      	mov	sl, r4
 80088e8:	e7d2      	b.n	8008890 <_svfiprintf_r+0xa0>
 80088ea:	9b03      	ldr	r3, [sp, #12]
 80088ec:	1d19      	adds	r1, r3, #4
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	9103      	str	r1, [sp, #12]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	bfbb      	ittet	lt
 80088f6:	425b      	neglt	r3, r3
 80088f8:	f042 0202 	orrlt.w	r2, r2, #2
 80088fc:	9307      	strge	r3, [sp, #28]
 80088fe:	9307      	strlt	r3, [sp, #28]
 8008900:	bfb8      	it	lt
 8008902:	9204      	strlt	r2, [sp, #16]
 8008904:	7823      	ldrb	r3, [r4, #0]
 8008906:	2b2e      	cmp	r3, #46	@ 0x2e
 8008908:	d10a      	bne.n	8008920 <_svfiprintf_r+0x130>
 800890a:	7863      	ldrb	r3, [r4, #1]
 800890c:	2b2a      	cmp	r3, #42	@ 0x2a
 800890e:	d132      	bne.n	8008976 <_svfiprintf_r+0x186>
 8008910:	9b03      	ldr	r3, [sp, #12]
 8008912:	1d1a      	adds	r2, r3, #4
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	9203      	str	r2, [sp, #12]
 8008918:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800891c:	3402      	adds	r4, #2
 800891e:	9305      	str	r3, [sp, #20]
 8008920:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80089e4 <_svfiprintf_r+0x1f4>
 8008924:	7821      	ldrb	r1, [r4, #0]
 8008926:	2203      	movs	r2, #3
 8008928:	4650      	mov	r0, sl
 800892a:	f7f7 fc59 	bl	80001e0 <memchr>
 800892e:	b138      	cbz	r0, 8008940 <_svfiprintf_r+0x150>
 8008930:	9b04      	ldr	r3, [sp, #16]
 8008932:	eba0 000a 	sub.w	r0, r0, sl
 8008936:	2240      	movs	r2, #64	@ 0x40
 8008938:	4082      	lsls	r2, r0
 800893a:	4313      	orrs	r3, r2
 800893c:	3401      	adds	r4, #1
 800893e:	9304      	str	r3, [sp, #16]
 8008940:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008944:	4824      	ldr	r0, [pc, #144]	@ (80089d8 <_svfiprintf_r+0x1e8>)
 8008946:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800894a:	2206      	movs	r2, #6
 800894c:	f7f7 fc48 	bl	80001e0 <memchr>
 8008950:	2800      	cmp	r0, #0
 8008952:	d036      	beq.n	80089c2 <_svfiprintf_r+0x1d2>
 8008954:	4b21      	ldr	r3, [pc, #132]	@ (80089dc <_svfiprintf_r+0x1ec>)
 8008956:	bb1b      	cbnz	r3, 80089a0 <_svfiprintf_r+0x1b0>
 8008958:	9b03      	ldr	r3, [sp, #12]
 800895a:	3307      	adds	r3, #7
 800895c:	f023 0307 	bic.w	r3, r3, #7
 8008960:	3308      	adds	r3, #8
 8008962:	9303      	str	r3, [sp, #12]
 8008964:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008966:	4433      	add	r3, r6
 8008968:	9309      	str	r3, [sp, #36]	@ 0x24
 800896a:	e76a      	b.n	8008842 <_svfiprintf_r+0x52>
 800896c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008970:	460c      	mov	r4, r1
 8008972:	2001      	movs	r0, #1
 8008974:	e7a8      	b.n	80088c8 <_svfiprintf_r+0xd8>
 8008976:	2300      	movs	r3, #0
 8008978:	3401      	adds	r4, #1
 800897a:	9305      	str	r3, [sp, #20]
 800897c:	4619      	mov	r1, r3
 800897e:	f04f 0c0a 	mov.w	ip, #10
 8008982:	4620      	mov	r0, r4
 8008984:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008988:	3a30      	subs	r2, #48	@ 0x30
 800898a:	2a09      	cmp	r2, #9
 800898c:	d903      	bls.n	8008996 <_svfiprintf_r+0x1a6>
 800898e:	2b00      	cmp	r3, #0
 8008990:	d0c6      	beq.n	8008920 <_svfiprintf_r+0x130>
 8008992:	9105      	str	r1, [sp, #20]
 8008994:	e7c4      	b.n	8008920 <_svfiprintf_r+0x130>
 8008996:	fb0c 2101 	mla	r1, ip, r1, r2
 800899a:	4604      	mov	r4, r0
 800899c:	2301      	movs	r3, #1
 800899e:	e7f0      	b.n	8008982 <_svfiprintf_r+0x192>
 80089a0:	ab03      	add	r3, sp, #12
 80089a2:	9300      	str	r3, [sp, #0]
 80089a4:	462a      	mov	r2, r5
 80089a6:	4b0e      	ldr	r3, [pc, #56]	@ (80089e0 <_svfiprintf_r+0x1f0>)
 80089a8:	a904      	add	r1, sp, #16
 80089aa:	4638      	mov	r0, r7
 80089ac:	f3af 8000 	nop.w
 80089b0:	1c42      	adds	r2, r0, #1
 80089b2:	4606      	mov	r6, r0
 80089b4:	d1d6      	bne.n	8008964 <_svfiprintf_r+0x174>
 80089b6:	89ab      	ldrh	r3, [r5, #12]
 80089b8:	065b      	lsls	r3, r3, #25
 80089ba:	f53f af2d 	bmi.w	8008818 <_svfiprintf_r+0x28>
 80089be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80089c0:	e72c      	b.n	800881c <_svfiprintf_r+0x2c>
 80089c2:	ab03      	add	r3, sp, #12
 80089c4:	9300      	str	r3, [sp, #0]
 80089c6:	462a      	mov	r2, r5
 80089c8:	4b05      	ldr	r3, [pc, #20]	@ (80089e0 <_svfiprintf_r+0x1f0>)
 80089ca:	a904      	add	r1, sp, #16
 80089cc:	4638      	mov	r0, r7
 80089ce:	f000 f879 	bl	8008ac4 <_printf_i>
 80089d2:	e7ed      	b.n	80089b0 <_svfiprintf_r+0x1c0>
 80089d4:	08008f70 	.word	0x08008f70
 80089d8:	08008f7a 	.word	0x08008f7a
 80089dc:	00000000 	.word	0x00000000
 80089e0:	08008739 	.word	0x08008739
 80089e4:	08008f76 	.word	0x08008f76

080089e8 <_printf_common>:
 80089e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089ec:	4616      	mov	r6, r2
 80089ee:	4698      	mov	r8, r3
 80089f0:	688a      	ldr	r2, [r1, #8]
 80089f2:	690b      	ldr	r3, [r1, #16]
 80089f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80089f8:	4293      	cmp	r3, r2
 80089fa:	bfb8      	it	lt
 80089fc:	4613      	movlt	r3, r2
 80089fe:	6033      	str	r3, [r6, #0]
 8008a00:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008a04:	4607      	mov	r7, r0
 8008a06:	460c      	mov	r4, r1
 8008a08:	b10a      	cbz	r2, 8008a0e <_printf_common+0x26>
 8008a0a:	3301      	adds	r3, #1
 8008a0c:	6033      	str	r3, [r6, #0]
 8008a0e:	6823      	ldr	r3, [r4, #0]
 8008a10:	0699      	lsls	r1, r3, #26
 8008a12:	bf42      	ittt	mi
 8008a14:	6833      	ldrmi	r3, [r6, #0]
 8008a16:	3302      	addmi	r3, #2
 8008a18:	6033      	strmi	r3, [r6, #0]
 8008a1a:	6825      	ldr	r5, [r4, #0]
 8008a1c:	f015 0506 	ands.w	r5, r5, #6
 8008a20:	d106      	bne.n	8008a30 <_printf_common+0x48>
 8008a22:	f104 0a19 	add.w	sl, r4, #25
 8008a26:	68e3      	ldr	r3, [r4, #12]
 8008a28:	6832      	ldr	r2, [r6, #0]
 8008a2a:	1a9b      	subs	r3, r3, r2
 8008a2c:	42ab      	cmp	r3, r5
 8008a2e:	dc26      	bgt.n	8008a7e <_printf_common+0x96>
 8008a30:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008a34:	6822      	ldr	r2, [r4, #0]
 8008a36:	3b00      	subs	r3, #0
 8008a38:	bf18      	it	ne
 8008a3a:	2301      	movne	r3, #1
 8008a3c:	0692      	lsls	r2, r2, #26
 8008a3e:	d42b      	bmi.n	8008a98 <_printf_common+0xb0>
 8008a40:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008a44:	4641      	mov	r1, r8
 8008a46:	4638      	mov	r0, r7
 8008a48:	47c8      	blx	r9
 8008a4a:	3001      	adds	r0, #1
 8008a4c:	d01e      	beq.n	8008a8c <_printf_common+0xa4>
 8008a4e:	6823      	ldr	r3, [r4, #0]
 8008a50:	6922      	ldr	r2, [r4, #16]
 8008a52:	f003 0306 	and.w	r3, r3, #6
 8008a56:	2b04      	cmp	r3, #4
 8008a58:	bf02      	ittt	eq
 8008a5a:	68e5      	ldreq	r5, [r4, #12]
 8008a5c:	6833      	ldreq	r3, [r6, #0]
 8008a5e:	1aed      	subeq	r5, r5, r3
 8008a60:	68a3      	ldr	r3, [r4, #8]
 8008a62:	bf0c      	ite	eq
 8008a64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a68:	2500      	movne	r5, #0
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	bfc4      	itt	gt
 8008a6e:	1a9b      	subgt	r3, r3, r2
 8008a70:	18ed      	addgt	r5, r5, r3
 8008a72:	2600      	movs	r6, #0
 8008a74:	341a      	adds	r4, #26
 8008a76:	42b5      	cmp	r5, r6
 8008a78:	d11a      	bne.n	8008ab0 <_printf_common+0xc8>
 8008a7a:	2000      	movs	r0, #0
 8008a7c:	e008      	b.n	8008a90 <_printf_common+0xa8>
 8008a7e:	2301      	movs	r3, #1
 8008a80:	4652      	mov	r2, sl
 8008a82:	4641      	mov	r1, r8
 8008a84:	4638      	mov	r0, r7
 8008a86:	47c8      	blx	r9
 8008a88:	3001      	adds	r0, #1
 8008a8a:	d103      	bne.n	8008a94 <_printf_common+0xac>
 8008a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a94:	3501      	adds	r5, #1
 8008a96:	e7c6      	b.n	8008a26 <_printf_common+0x3e>
 8008a98:	18e1      	adds	r1, r4, r3
 8008a9a:	1c5a      	adds	r2, r3, #1
 8008a9c:	2030      	movs	r0, #48	@ 0x30
 8008a9e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008aa2:	4422      	add	r2, r4
 8008aa4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008aa8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008aac:	3302      	adds	r3, #2
 8008aae:	e7c7      	b.n	8008a40 <_printf_common+0x58>
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	4622      	mov	r2, r4
 8008ab4:	4641      	mov	r1, r8
 8008ab6:	4638      	mov	r0, r7
 8008ab8:	47c8      	blx	r9
 8008aba:	3001      	adds	r0, #1
 8008abc:	d0e6      	beq.n	8008a8c <_printf_common+0xa4>
 8008abe:	3601      	adds	r6, #1
 8008ac0:	e7d9      	b.n	8008a76 <_printf_common+0x8e>
	...

08008ac4 <_printf_i>:
 8008ac4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ac8:	7e0f      	ldrb	r7, [r1, #24]
 8008aca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008acc:	2f78      	cmp	r7, #120	@ 0x78
 8008ace:	4691      	mov	r9, r2
 8008ad0:	4680      	mov	r8, r0
 8008ad2:	460c      	mov	r4, r1
 8008ad4:	469a      	mov	sl, r3
 8008ad6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008ada:	d807      	bhi.n	8008aec <_printf_i+0x28>
 8008adc:	2f62      	cmp	r7, #98	@ 0x62
 8008ade:	d80a      	bhi.n	8008af6 <_printf_i+0x32>
 8008ae0:	2f00      	cmp	r7, #0
 8008ae2:	f000 80d2 	beq.w	8008c8a <_printf_i+0x1c6>
 8008ae6:	2f58      	cmp	r7, #88	@ 0x58
 8008ae8:	f000 80b9 	beq.w	8008c5e <_printf_i+0x19a>
 8008aec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008af0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008af4:	e03a      	b.n	8008b6c <_printf_i+0xa8>
 8008af6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008afa:	2b15      	cmp	r3, #21
 8008afc:	d8f6      	bhi.n	8008aec <_printf_i+0x28>
 8008afe:	a101      	add	r1, pc, #4	@ (adr r1, 8008b04 <_printf_i+0x40>)
 8008b00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008b04:	08008b5d 	.word	0x08008b5d
 8008b08:	08008b71 	.word	0x08008b71
 8008b0c:	08008aed 	.word	0x08008aed
 8008b10:	08008aed 	.word	0x08008aed
 8008b14:	08008aed 	.word	0x08008aed
 8008b18:	08008aed 	.word	0x08008aed
 8008b1c:	08008b71 	.word	0x08008b71
 8008b20:	08008aed 	.word	0x08008aed
 8008b24:	08008aed 	.word	0x08008aed
 8008b28:	08008aed 	.word	0x08008aed
 8008b2c:	08008aed 	.word	0x08008aed
 8008b30:	08008c71 	.word	0x08008c71
 8008b34:	08008b9b 	.word	0x08008b9b
 8008b38:	08008c2b 	.word	0x08008c2b
 8008b3c:	08008aed 	.word	0x08008aed
 8008b40:	08008aed 	.word	0x08008aed
 8008b44:	08008c93 	.word	0x08008c93
 8008b48:	08008aed 	.word	0x08008aed
 8008b4c:	08008b9b 	.word	0x08008b9b
 8008b50:	08008aed 	.word	0x08008aed
 8008b54:	08008aed 	.word	0x08008aed
 8008b58:	08008c33 	.word	0x08008c33
 8008b5c:	6833      	ldr	r3, [r6, #0]
 8008b5e:	1d1a      	adds	r2, r3, #4
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	6032      	str	r2, [r6, #0]
 8008b64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008b68:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	e09d      	b.n	8008cac <_printf_i+0x1e8>
 8008b70:	6833      	ldr	r3, [r6, #0]
 8008b72:	6820      	ldr	r0, [r4, #0]
 8008b74:	1d19      	adds	r1, r3, #4
 8008b76:	6031      	str	r1, [r6, #0]
 8008b78:	0606      	lsls	r6, r0, #24
 8008b7a:	d501      	bpl.n	8008b80 <_printf_i+0xbc>
 8008b7c:	681d      	ldr	r5, [r3, #0]
 8008b7e:	e003      	b.n	8008b88 <_printf_i+0xc4>
 8008b80:	0645      	lsls	r5, r0, #25
 8008b82:	d5fb      	bpl.n	8008b7c <_printf_i+0xb8>
 8008b84:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008b88:	2d00      	cmp	r5, #0
 8008b8a:	da03      	bge.n	8008b94 <_printf_i+0xd0>
 8008b8c:	232d      	movs	r3, #45	@ 0x2d
 8008b8e:	426d      	negs	r5, r5
 8008b90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008b94:	4859      	ldr	r0, [pc, #356]	@ (8008cfc <_printf_i+0x238>)
 8008b96:	230a      	movs	r3, #10
 8008b98:	e011      	b.n	8008bbe <_printf_i+0xfa>
 8008b9a:	6821      	ldr	r1, [r4, #0]
 8008b9c:	6833      	ldr	r3, [r6, #0]
 8008b9e:	0608      	lsls	r0, r1, #24
 8008ba0:	f853 5b04 	ldr.w	r5, [r3], #4
 8008ba4:	d402      	bmi.n	8008bac <_printf_i+0xe8>
 8008ba6:	0649      	lsls	r1, r1, #25
 8008ba8:	bf48      	it	mi
 8008baa:	b2ad      	uxthmi	r5, r5
 8008bac:	2f6f      	cmp	r7, #111	@ 0x6f
 8008bae:	4853      	ldr	r0, [pc, #332]	@ (8008cfc <_printf_i+0x238>)
 8008bb0:	6033      	str	r3, [r6, #0]
 8008bb2:	bf14      	ite	ne
 8008bb4:	230a      	movne	r3, #10
 8008bb6:	2308      	moveq	r3, #8
 8008bb8:	2100      	movs	r1, #0
 8008bba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008bbe:	6866      	ldr	r6, [r4, #4]
 8008bc0:	60a6      	str	r6, [r4, #8]
 8008bc2:	2e00      	cmp	r6, #0
 8008bc4:	bfa2      	ittt	ge
 8008bc6:	6821      	ldrge	r1, [r4, #0]
 8008bc8:	f021 0104 	bicge.w	r1, r1, #4
 8008bcc:	6021      	strge	r1, [r4, #0]
 8008bce:	b90d      	cbnz	r5, 8008bd4 <_printf_i+0x110>
 8008bd0:	2e00      	cmp	r6, #0
 8008bd2:	d04b      	beq.n	8008c6c <_printf_i+0x1a8>
 8008bd4:	4616      	mov	r6, r2
 8008bd6:	fbb5 f1f3 	udiv	r1, r5, r3
 8008bda:	fb03 5711 	mls	r7, r3, r1, r5
 8008bde:	5dc7      	ldrb	r7, [r0, r7]
 8008be0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008be4:	462f      	mov	r7, r5
 8008be6:	42bb      	cmp	r3, r7
 8008be8:	460d      	mov	r5, r1
 8008bea:	d9f4      	bls.n	8008bd6 <_printf_i+0x112>
 8008bec:	2b08      	cmp	r3, #8
 8008bee:	d10b      	bne.n	8008c08 <_printf_i+0x144>
 8008bf0:	6823      	ldr	r3, [r4, #0]
 8008bf2:	07df      	lsls	r7, r3, #31
 8008bf4:	d508      	bpl.n	8008c08 <_printf_i+0x144>
 8008bf6:	6923      	ldr	r3, [r4, #16]
 8008bf8:	6861      	ldr	r1, [r4, #4]
 8008bfa:	4299      	cmp	r1, r3
 8008bfc:	bfde      	ittt	le
 8008bfe:	2330      	movle	r3, #48	@ 0x30
 8008c00:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008c04:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008c08:	1b92      	subs	r2, r2, r6
 8008c0a:	6122      	str	r2, [r4, #16]
 8008c0c:	f8cd a000 	str.w	sl, [sp]
 8008c10:	464b      	mov	r3, r9
 8008c12:	aa03      	add	r2, sp, #12
 8008c14:	4621      	mov	r1, r4
 8008c16:	4640      	mov	r0, r8
 8008c18:	f7ff fee6 	bl	80089e8 <_printf_common>
 8008c1c:	3001      	adds	r0, #1
 8008c1e:	d14a      	bne.n	8008cb6 <_printf_i+0x1f2>
 8008c20:	f04f 30ff 	mov.w	r0, #4294967295
 8008c24:	b004      	add	sp, #16
 8008c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c2a:	6823      	ldr	r3, [r4, #0]
 8008c2c:	f043 0320 	orr.w	r3, r3, #32
 8008c30:	6023      	str	r3, [r4, #0]
 8008c32:	4833      	ldr	r0, [pc, #204]	@ (8008d00 <_printf_i+0x23c>)
 8008c34:	2778      	movs	r7, #120	@ 0x78
 8008c36:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008c3a:	6823      	ldr	r3, [r4, #0]
 8008c3c:	6831      	ldr	r1, [r6, #0]
 8008c3e:	061f      	lsls	r7, r3, #24
 8008c40:	f851 5b04 	ldr.w	r5, [r1], #4
 8008c44:	d402      	bmi.n	8008c4c <_printf_i+0x188>
 8008c46:	065f      	lsls	r7, r3, #25
 8008c48:	bf48      	it	mi
 8008c4a:	b2ad      	uxthmi	r5, r5
 8008c4c:	6031      	str	r1, [r6, #0]
 8008c4e:	07d9      	lsls	r1, r3, #31
 8008c50:	bf44      	itt	mi
 8008c52:	f043 0320 	orrmi.w	r3, r3, #32
 8008c56:	6023      	strmi	r3, [r4, #0]
 8008c58:	b11d      	cbz	r5, 8008c62 <_printf_i+0x19e>
 8008c5a:	2310      	movs	r3, #16
 8008c5c:	e7ac      	b.n	8008bb8 <_printf_i+0xf4>
 8008c5e:	4827      	ldr	r0, [pc, #156]	@ (8008cfc <_printf_i+0x238>)
 8008c60:	e7e9      	b.n	8008c36 <_printf_i+0x172>
 8008c62:	6823      	ldr	r3, [r4, #0]
 8008c64:	f023 0320 	bic.w	r3, r3, #32
 8008c68:	6023      	str	r3, [r4, #0]
 8008c6a:	e7f6      	b.n	8008c5a <_printf_i+0x196>
 8008c6c:	4616      	mov	r6, r2
 8008c6e:	e7bd      	b.n	8008bec <_printf_i+0x128>
 8008c70:	6833      	ldr	r3, [r6, #0]
 8008c72:	6825      	ldr	r5, [r4, #0]
 8008c74:	6961      	ldr	r1, [r4, #20]
 8008c76:	1d18      	adds	r0, r3, #4
 8008c78:	6030      	str	r0, [r6, #0]
 8008c7a:	062e      	lsls	r6, r5, #24
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	d501      	bpl.n	8008c84 <_printf_i+0x1c0>
 8008c80:	6019      	str	r1, [r3, #0]
 8008c82:	e002      	b.n	8008c8a <_printf_i+0x1c6>
 8008c84:	0668      	lsls	r0, r5, #25
 8008c86:	d5fb      	bpl.n	8008c80 <_printf_i+0x1bc>
 8008c88:	8019      	strh	r1, [r3, #0]
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	6123      	str	r3, [r4, #16]
 8008c8e:	4616      	mov	r6, r2
 8008c90:	e7bc      	b.n	8008c0c <_printf_i+0x148>
 8008c92:	6833      	ldr	r3, [r6, #0]
 8008c94:	1d1a      	adds	r2, r3, #4
 8008c96:	6032      	str	r2, [r6, #0]
 8008c98:	681e      	ldr	r6, [r3, #0]
 8008c9a:	6862      	ldr	r2, [r4, #4]
 8008c9c:	2100      	movs	r1, #0
 8008c9e:	4630      	mov	r0, r6
 8008ca0:	f7f7 fa9e 	bl	80001e0 <memchr>
 8008ca4:	b108      	cbz	r0, 8008caa <_printf_i+0x1e6>
 8008ca6:	1b80      	subs	r0, r0, r6
 8008ca8:	6060      	str	r0, [r4, #4]
 8008caa:	6863      	ldr	r3, [r4, #4]
 8008cac:	6123      	str	r3, [r4, #16]
 8008cae:	2300      	movs	r3, #0
 8008cb0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008cb4:	e7aa      	b.n	8008c0c <_printf_i+0x148>
 8008cb6:	6923      	ldr	r3, [r4, #16]
 8008cb8:	4632      	mov	r2, r6
 8008cba:	4649      	mov	r1, r9
 8008cbc:	4640      	mov	r0, r8
 8008cbe:	47d0      	blx	sl
 8008cc0:	3001      	adds	r0, #1
 8008cc2:	d0ad      	beq.n	8008c20 <_printf_i+0x15c>
 8008cc4:	6823      	ldr	r3, [r4, #0]
 8008cc6:	079b      	lsls	r3, r3, #30
 8008cc8:	d413      	bmi.n	8008cf2 <_printf_i+0x22e>
 8008cca:	68e0      	ldr	r0, [r4, #12]
 8008ccc:	9b03      	ldr	r3, [sp, #12]
 8008cce:	4298      	cmp	r0, r3
 8008cd0:	bfb8      	it	lt
 8008cd2:	4618      	movlt	r0, r3
 8008cd4:	e7a6      	b.n	8008c24 <_printf_i+0x160>
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	4632      	mov	r2, r6
 8008cda:	4649      	mov	r1, r9
 8008cdc:	4640      	mov	r0, r8
 8008cde:	47d0      	blx	sl
 8008ce0:	3001      	adds	r0, #1
 8008ce2:	d09d      	beq.n	8008c20 <_printf_i+0x15c>
 8008ce4:	3501      	adds	r5, #1
 8008ce6:	68e3      	ldr	r3, [r4, #12]
 8008ce8:	9903      	ldr	r1, [sp, #12]
 8008cea:	1a5b      	subs	r3, r3, r1
 8008cec:	42ab      	cmp	r3, r5
 8008cee:	dcf2      	bgt.n	8008cd6 <_printf_i+0x212>
 8008cf0:	e7eb      	b.n	8008cca <_printf_i+0x206>
 8008cf2:	2500      	movs	r5, #0
 8008cf4:	f104 0619 	add.w	r6, r4, #25
 8008cf8:	e7f5      	b.n	8008ce6 <_printf_i+0x222>
 8008cfa:	bf00      	nop
 8008cfc:	08008f81 	.word	0x08008f81
 8008d00:	08008f92 	.word	0x08008f92

08008d04 <memmove>:
 8008d04:	4288      	cmp	r0, r1
 8008d06:	b510      	push	{r4, lr}
 8008d08:	eb01 0402 	add.w	r4, r1, r2
 8008d0c:	d902      	bls.n	8008d14 <memmove+0x10>
 8008d0e:	4284      	cmp	r4, r0
 8008d10:	4623      	mov	r3, r4
 8008d12:	d807      	bhi.n	8008d24 <memmove+0x20>
 8008d14:	1e43      	subs	r3, r0, #1
 8008d16:	42a1      	cmp	r1, r4
 8008d18:	d008      	beq.n	8008d2c <memmove+0x28>
 8008d1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008d1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008d22:	e7f8      	b.n	8008d16 <memmove+0x12>
 8008d24:	4402      	add	r2, r0
 8008d26:	4601      	mov	r1, r0
 8008d28:	428a      	cmp	r2, r1
 8008d2a:	d100      	bne.n	8008d2e <memmove+0x2a>
 8008d2c:	bd10      	pop	{r4, pc}
 8008d2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008d32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008d36:	e7f7      	b.n	8008d28 <memmove+0x24>

08008d38 <_sbrk_r>:
 8008d38:	b538      	push	{r3, r4, r5, lr}
 8008d3a:	4d06      	ldr	r5, [pc, #24]	@ (8008d54 <_sbrk_r+0x1c>)
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	4604      	mov	r4, r0
 8008d40:	4608      	mov	r0, r1
 8008d42:	602b      	str	r3, [r5, #0]
 8008d44:	f7f9 f978 	bl	8002038 <_sbrk>
 8008d48:	1c43      	adds	r3, r0, #1
 8008d4a:	d102      	bne.n	8008d52 <_sbrk_r+0x1a>
 8008d4c:	682b      	ldr	r3, [r5, #0]
 8008d4e:	b103      	cbz	r3, 8008d52 <_sbrk_r+0x1a>
 8008d50:	6023      	str	r3, [r4, #0]
 8008d52:	bd38      	pop	{r3, r4, r5, pc}
 8008d54:	2000046c 	.word	0x2000046c

08008d58 <memcpy>:
 8008d58:	440a      	add	r2, r1
 8008d5a:	4291      	cmp	r1, r2
 8008d5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008d60:	d100      	bne.n	8008d64 <memcpy+0xc>
 8008d62:	4770      	bx	lr
 8008d64:	b510      	push	{r4, lr}
 8008d66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d6e:	4291      	cmp	r1, r2
 8008d70:	d1f9      	bne.n	8008d66 <memcpy+0xe>
 8008d72:	bd10      	pop	{r4, pc}

08008d74 <_realloc_r>:
 8008d74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d78:	4680      	mov	r8, r0
 8008d7a:	4615      	mov	r5, r2
 8008d7c:	460c      	mov	r4, r1
 8008d7e:	b921      	cbnz	r1, 8008d8a <_realloc_r+0x16>
 8008d80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d84:	4611      	mov	r1, r2
 8008d86:	f7ff bc4b 	b.w	8008620 <_malloc_r>
 8008d8a:	b92a      	cbnz	r2, 8008d98 <_realloc_r+0x24>
 8008d8c:	f7ff fbdc 	bl	8008548 <_free_r>
 8008d90:	2400      	movs	r4, #0
 8008d92:	4620      	mov	r0, r4
 8008d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d98:	f000 f81a 	bl	8008dd0 <_malloc_usable_size_r>
 8008d9c:	4285      	cmp	r5, r0
 8008d9e:	4606      	mov	r6, r0
 8008da0:	d802      	bhi.n	8008da8 <_realloc_r+0x34>
 8008da2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008da6:	d8f4      	bhi.n	8008d92 <_realloc_r+0x1e>
 8008da8:	4629      	mov	r1, r5
 8008daa:	4640      	mov	r0, r8
 8008dac:	f7ff fc38 	bl	8008620 <_malloc_r>
 8008db0:	4607      	mov	r7, r0
 8008db2:	2800      	cmp	r0, #0
 8008db4:	d0ec      	beq.n	8008d90 <_realloc_r+0x1c>
 8008db6:	42b5      	cmp	r5, r6
 8008db8:	462a      	mov	r2, r5
 8008dba:	4621      	mov	r1, r4
 8008dbc:	bf28      	it	cs
 8008dbe:	4632      	movcs	r2, r6
 8008dc0:	f7ff ffca 	bl	8008d58 <memcpy>
 8008dc4:	4621      	mov	r1, r4
 8008dc6:	4640      	mov	r0, r8
 8008dc8:	f7ff fbbe 	bl	8008548 <_free_r>
 8008dcc:	463c      	mov	r4, r7
 8008dce:	e7e0      	b.n	8008d92 <_realloc_r+0x1e>

08008dd0 <_malloc_usable_size_r>:
 8008dd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008dd4:	1f18      	subs	r0, r3, #4
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	bfbc      	itt	lt
 8008dda:	580b      	ldrlt	r3, [r1, r0]
 8008ddc:	18c0      	addlt	r0, r0, r3
 8008dde:	4770      	bx	lr

08008de0 <_init>:
 8008de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008de2:	bf00      	nop
 8008de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008de6:	bc08      	pop	{r3}
 8008de8:	469e      	mov	lr, r3
 8008dea:	4770      	bx	lr

08008dec <_fini>:
 8008dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dee:	bf00      	nop
 8008df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008df2:	bc08      	pop	{r3}
 8008df4:	469e      	mov	lr, r3
 8008df6:	4770      	bx	lr
