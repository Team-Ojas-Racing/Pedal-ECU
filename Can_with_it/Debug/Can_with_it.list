
Can_with_it.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079fc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08007b8c  08007b8c  00017b8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c94  08007c94  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08007c94  08007c94  00017c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c9c  08007c9c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c9c  08007c9c  00017c9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ca0  08007ca0  00017ca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08007ca4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a8  20000068  08007d0c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000410  08007d0c  00020410  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018d7f  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003172  00000000  00000000  00038e5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001618  00000000  00000000  0003bfd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001137  00000000  00000000  0003d5e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000290f7  00000000  00000000  0003e71f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019276  00000000  00000000  00067816  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010a376  00000000  00000000  00080a8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006440  00000000  00000000  0018ae04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  00191244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007b74 	.word	0x08007b74

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08007b74 	.word	0x08007b74

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <HAL_TIM_PeriodElapsedCallback>:
static void MX_DAC1_Init(void);
static void MX_TIM6_Init(void);
static void MX_ADC1_Init(void);
/* USER CODE BEGIN PFP */
uint32_t dacInput(uint16_t adcinput1, uint16_t adcinput2);
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
	dac_val = dacInput(rawValues[0], rawValues[1]);
 8000584:	4b07      	ldr	r3, [pc, #28]	; (80005a4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000586:	881b      	ldrh	r3, [r3, #0]
 8000588:	4a06      	ldr	r2, [pc, #24]	; (80005a4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800058a:	8852      	ldrh	r2, [r2, #2]
 800058c:	4611      	mov	r1, r2
 800058e:	4618      	mov	r0, r3
 8000590:	f000 fafc 	bl	8000b8c <dacInput>
 8000594:	4603      	mov	r3, r0
 8000596:	4a04      	ldr	r2, [pc, #16]	; (80005a8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000598:	6013      	str	r3, [r2, #0]
}
 800059a:	bf00      	nop
 800059c:	3708      	adds	r7, #8
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	20000288 	.word	0x20000288
 80005a8:	200002ac 	.word	0x200002ac

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b590      	push	{r4, r7, lr}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b2:	f000 feab 	bl	800130c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b6:	f000 f8a9 	bl	800070c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ba:	f000 fa95 	bl	8000ae8 <MX_GPIO_Init>
  MX_DMA_Init();
 80005be:	f000 fa6d 	bl	8000a9c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005c2:	f000 fa3b 	bl	8000a3c <MX_USART2_UART_Init>
  MX_CAN1_Init();
 80005c6:	f000 f979 	bl	80008bc <MX_CAN1_Init>
  MX_DAC1_Init();
 80005ca:	f000 f9cf 	bl	800096c <MX_DAC1_Init>
  MX_TIM6_Init();
 80005ce:	f000 f9ff 	bl	80009d0 <MX_TIM6_Init>
  MX_ADC1_Init();
 80005d2:	f000 f8eb 	bl	80007ac <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  if(HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED)!=HAL_OK){
 80005d6:	217f      	movs	r1, #127	; 0x7f
 80005d8:	483f      	ldr	r0, [pc, #252]	; (80006d8 <main+0x12c>)
 80005da:	f002 f933 	bl	8002844 <HAL_ADCEx_Calibration_Start>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d011      	beq.n	8000608 <main+0x5c>
	  HAL_UART_Transmit(&huart2, (uint8_t*)adcNcalib, strlen(adcNcalib), 100);
 80005e4:	4b3d      	ldr	r3, [pc, #244]	; (80006dc <main+0x130>)
 80005e6:	681c      	ldr	r4, [r3, #0]
 80005e8:	4b3c      	ldr	r3, [pc, #240]	; (80006dc <main+0x130>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4618      	mov	r0, r3
 80005ee:	f7ff fdef 	bl	80001d0 <strlen>
 80005f2:	4603      	mov	r3, r0
 80005f4:	b29a      	uxth	r2, r3
 80005f6:	2364      	movs	r3, #100	; 0x64
 80005f8:	4621      	mov	r1, r4
 80005fa:	4839      	ldr	r0, [pc, #228]	; (80006e0 <main+0x134>)
 80005fc:	f005 fd6a 	bl	80060d4 <HAL_UART_Transmit>
	  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000600:	217f      	movs	r1, #127	; 0x7f
 8000602:	4835      	ldr	r0, [pc, #212]	; (80006d8 <main+0x12c>)
 8000604:	f002 f91e 	bl	8002844 <HAL_ADCEx_Calibration_Start>
  }

  uint32_t calibrationValue = HAL_ADCEx_Calibration_GetValue(&hadc1, ADC_SINGLE_ENDED);
 8000608:	217f      	movs	r1, #127	; 0x7f
 800060a:	4833      	ldr	r0, [pc, #204]	; (80006d8 <main+0x12c>)
 800060c:	f002 f97a 	bl	8002904 <HAL_ADCEx_Calibration_GetValue>
 8000610:	6078      	str	r0, [r7, #4]
  sprintf(msg,"%lu",calibrationValue);
 8000612:	687a      	ldr	r2, [r7, #4]
 8000614:	4933      	ldr	r1, [pc, #204]	; (80006e4 <main+0x138>)
 8000616:	4834      	ldr	r0, [pc, #208]	; (80006e8 <main+0x13c>)
 8000618:	f006 fe08 	bl	800722c <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 100);
 800061c:	4832      	ldr	r0, [pc, #200]	; (80006e8 <main+0x13c>)
 800061e:	f7ff fdd7 	bl	80001d0 <strlen>
 8000622:	4603      	mov	r3, r0
 8000624:	b29a      	uxth	r2, r3
 8000626:	2364      	movs	r3, #100	; 0x64
 8000628:	492f      	ldr	r1, [pc, #188]	; (80006e8 <main+0x13c>)
 800062a:	482d      	ldr	r0, [pc, #180]	; (80006e0 <main+0x134>)
 800062c:	f005 fd52 	bl	80060d4 <HAL_UART_Transmit>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)rawValues, 2);
 8000630:	2202      	movs	r2, #2
 8000632:	492e      	ldr	r1, [pc, #184]	; (80006ec <main+0x140>)
 8000634:	4828      	ldr	r0, [pc, #160]	; (80006d8 <main+0x12c>)
 8000636:	f001 fa55 	bl	8001ae4 <HAL_ADC_Start_DMA>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, &dac_val, 1, DAC_ALIGN_12B_R);
 800063a:	2300      	movs	r3, #0
 800063c:	9300      	str	r3, [sp, #0]
 800063e:	2301      	movs	r3, #1
 8000640:	4a2b      	ldr	r2, [pc, #172]	; (80006f0 <main+0x144>)
 8000642:	2100      	movs	r1, #0
 8000644:	482b      	ldr	r0, [pc, #172]	; (80006f4 <main+0x148>)
 8000646:	f002 ff4f 	bl	80034e8 <HAL_DAC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim6);
 800064a:	482b      	ldr	r0, [pc, #172]	; (80006f8 <main+0x14c>)
 800064c:	f005 fa1a 	bl	8005a84 <HAL_TIM_Base_Start_IT>
//	  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_val);
//	  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
//
//	  uint32_t getDac = HAL_DAC_GetValue(&hdac1, DAC_CHANNEL_1);

	  sprintf(msg,"adc1 val: %hu\r\n",(uint16_t)rawValues[0]);
 8000650:	4b26      	ldr	r3, [pc, #152]	; (80006ec <main+0x140>)
 8000652:	881b      	ldrh	r3, [r3, #0]
 8000654:	461a      	mov	r2, r3
 8000656:	4929      	ldr	r1, [pc, #164]	; (80006fc <main+0x150>)
 8000658:	4823      	ldr	r0, [pc, #140]	; (80006e8 <main+0x13c>)
 800065a:	f006 fde7 	bl	800722c <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800065e:	4822      	ldr	r0, [pc, #136]	; (80006e8 <main+0x13c>)
 8000660:	f7ff fdb6 	bl	80001d0 <strlen>
 8000664:	4603      	mov	r3, r0
 8000666:	b29a      	uxth	r2, r3
 8000668:	f04f 33ff 	mov.w	r3, #4294967295
 800066c:	491e      	ldr	r1, [pc, #120]	; (80006e8 <main+0x13c>)
 800066e:	481c      	ldr	r0, [pc, #112]	; (80006e0 <main+0x134>)
 8000670:	f005 fd30 	bl	80060d4 <HAL_UART_Transmit>

	  sprintf(msg,"adc2 val: %hu\r\n",(uint16_t)rawValues[1]);
 8000674:	4b1d      	ldr	r3, [pc, #116]	; (80006ec <main+0x140>)
 8000676:	885b      	ldrh	r3, [r3, #2]
 8000678:	461a      	mov	r2, r3
 800067a:	4921      	ldr	r1, [pc, #132]	; (8000700 <main+0x154>)
 800067c:	481a      	ldr	r0, [pc, #104]	; (80006e8 <main+0x13c>)
 800067e:	f006 fdd5 	bl	800722c <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000682:	4819      	ldr	r0, [pc, #100]	; (80006e8 <main+0x13c>)
 8000684:	f7ff fda4 	bl	80001d0 <strlen>
 8000688:	4603      	mov	r3, r0
 800068a:	b29a      	uxth	r2, r3
 800068c:	f04f 33ff 	mov.w	r3, #4294967295
 8000690:	4915      	ldr	r1, [pc, #84]	; (80006e8 <main+0x13c>)
 8000692:	4813      	ldr	r0, [pc, #76]	; (80006e0 <main+0x134>)
 8000694:	f005 fd1e 	bl	80060d4 <HAL_UART_Transmit>

	  getDac = HAL_DAC_GetValue(&hdac1, DAC_CHANNEL_1);
 8000698:	2100      	movs	r1, #0
 800069a:	4816      	ldr	r0, [pc, #88]	; (80006f4 <main+0x148>)
 800069c:	f003 f872 	bl	8003784 <HAL_DAC_GetValue>
 80006a0:	4603      	mov	r3, r0
 80006a2:	4a18      	ldr	r2, [pc, #96]	; (8000704 <main+0x158>)
 80006a4:	6013      	str	r3, [r2, #0]

	  sprintf(msg,"dac val: %hu\r\n",(uint16_t)getDac);
 80006a6:	4b17      	ldr	r3, [pc, #92]	; (8000704 <main+0x158>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	b29b      	uxth	r3, r3
 80006ac:	461a      	mov	r2, r3
 80006ae:	4916      	ldr	r1, [pc, #88]	; (8000708 <main+0x15c>)
 80006b0:	480d      	ldr	r0, [pc, #52]	; (80006e8 <main+0x13c>)
 80006b2:	f006 fdbb 	bl	800722c <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80006b6:	480c      	ldr	r0, [pc, #48]	; (80006e8 <main+0x13c>)
 80006b8:	f7ff fd8a 	bl	80001d0 <strlen>
 80006bc:	4603      	mov	r3, r0
 80006be:	b29a      	uxth	r2, r3
 80006c0:	f04f 33ff 	mov.w	r3, #4294967295
 80006c4:	4908      	ldr	r1, [pc, #32]	; (80006e8 <main+0x13c>)
 80006c6:	4806      	ldr	r0, [pc, #24]	; (80006e0 <main+0x134>)
 80006c8:	f005 fd04 	bl	80060d4 <HAL_UART_Transmit>

	  HAL_Delay(300);
 80006cc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80006d0:	f000 fe98 	bl	8001404 <HAL_Delay>
	  sprintf(msg,"adc1 val: %hu\r\n",(uint16_t)rawValues[0]);
 80006d4:	e7bc      	b.n	8000650 <main+0xa4>
 80006d6:	bf00      	nop
 80006d8:	20000084 	.word	0x20000084
 80006dc:	20000000 	.word	0x20000000
 80006e0:	20000200 	.word	0x20000200
 80006e4:	08007be4 	.word	0x08007be4
 80006e8:	2000028c 	.word	0x2000028c
 80006ec:	20000288 	.word	0x20000288
 80006f0:	200002ac 	.word	0x200002ac
 80006f4:	20000158 	.word	0x20000158
 80006f8:	200001b4 	.word	0x200001b4
 80006fc:	08007be8 	.word	0x08007be8
 8000700:	08007bf8 	.word	0x08007bf8
 8000704:	200002b0 	.word	0x200002b0
 8000708:	08007c08 	.word	0x08007c08

0800070c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b096      	sub	sp, #88	; 0x58
 8000710:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000712:	f107 0314 	add.w	r3, r7, #20
 8000716:	2244      	movs	r2, #68	; 0x44
 8000718:	2100      	movs	r1, #0
 800071a:	4618      	mov	r0, r3
 800071c:	f006 fda6 	bl	800726c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000720:	463b      	mov	r3, r7
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]
 800072c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800072e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000732:	f003 fe3d 	bl	80043b0 <HAL_PWREx_ControlVoltageScaling>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800073c:	f000 fabc 	bl	8000cb8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000740:	2301      	movs	r3, #1
 8000742:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000744:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000748:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800074a:	2302      	movs	r3, #2
 800074c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800074e:	2303      	movs	r3, #3
 8000750:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000752:	2301      	movs	r3, #1
 8000754:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000756:	2314      	movs	r3, #20
 8000758:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800075a:	2307      	movs	r3, #7
 800075c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800075e:	2302      	movs	r3, #2
 8000760:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000762:	2302      	movs	r3, #2
 8000764:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000766:	f107 0314 	add.w	r3, r7, #20
 800076a:	4618      	mov	r0, r3
 800076c:	f003 fe76 	bl	800445c <HAL_RCC_OscConfig>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000776:	f000 fa9f 	bl	8000cb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800077a:	230f      	movs	r3, #15
 800077c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800077e:	2303      	movs	r3, #3
 8000780:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000782:	2300      	movs	r3, #0
 8000784:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000786:	2300      	movs	r3, #0
 8000788:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800078a:	2300      	movs	r3, #0
 800078c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800078e:	463b      	mov	r3, r7
 8000790:	2104      	movs	r1, #4
 8000792:	4618      	mov	r0, r3
 8000794:	f004 fa3e 	bl	8004c14 <HAL_RCC_ClockConfig>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800079e:	f000 fa8b 	bl	8000cb8 <Error_Handler>
  }
}
 80007a2:	bf00      	nop
 80007a4:	3758      	adds	r7, #88	; 0x58
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
	...

080007ac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08a      	sub	sp, #40	; 0x28
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80007b2:	f107 031c 	add.w	r3, r7, #28
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007be:	1d3b      	adds	r3, r7, #4
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	609a      	str	r2, [r3, #8]
 80007c8:	60da      	str	r2, [r3, #12]
 80007ca:	611a      	str	r2, [r3, #16]
 80007cc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007ce:	4b37      	ldr	r3, [pc, #220]	; (80008ac <MX_ADC1_Init+0x100>)
 80007d0:	4a37      	ldr	r2, [pc, #220]	; (80008b0 <MX_ADC1_Init+0x104>)
 80007d2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007d4:	4b35      	ldr	r3, [pc, #212]	; (80008ac <MX_ADC1_Init+0x100>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007da:	4b34      	ldr	r3, [pc, #208]	; (80008ac <MX_ADC1_Init+0x100>)
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007e0:	4b32      	ldr	r3, [pc, #200]	; (80008ac <MX_ADC1_Init+0x100>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80007e6:	4b31      	ldr	r3, [pc, #196]	; (80008ac <MX_ADC1_Init+0x100>)
 80007e8:	2201      	movs	r2, #1
 80007ea:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007ec:	4b2f      	ldr	r3, [pc, #188]	; (80008ac <MX_ADC1_Init+0x100>)
 80007ee:	2204      	movs	r2, #4
 80007f0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007f2:	4b2e      	ldr	r3, [pc, #184]	; (80008ac <MX_ADC1_Init+0x100>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80007f8:	4b2c      	ldr	r3, [pc, #176]	; (80008ac <MX_ADC1_Init+0x100>)
 80007fa:	2201      	movs	r2, #1
 80007fc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 80007fe:	4b2b      	ldr	r3, [pc, #172]	; (80008ac <MX_ADC1_Init+0x100>)
 8000800:	2202      	movs	r2, #2
 8000802:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000804:	4b29      	ldr	r3, [pc, #164]	; (80008ac <MX_ADC1_Init+0x100>)
 8000806:	2200      	movs	r2, #0
 8000808:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 800080c:	4b27      	ldr	r3, [pc, #156]	; (80008ac <MX_ADC1_Init+0x100>)
 800080e:	f44f 62e8 	mov.w	r2, #1856	; 0x740
 8000812:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000814:	4b25      	ldr	r3, [pc, #148]	; (80008ac <MX_ADC1_Init+0x100>)
 8000816:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800081a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800081c:	4b23      	ldr	r3, [pc, #140]	; (80008ac <MX_ADC1_Init+0x100>)
 800081e:	2201      	movs	r2, #1
 8000820:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000824:	4b21      	ldr	r3, [pc, #132]	; (80008ac <MX_ADC1_Init+0x100>)
 8000826:	2200      	movs	r2, #0
 8000828:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800082a:	4b20      	ldr	r3, [pc, #128]	; (80008ac <MX_ADC1_Init+0x100>)
 800082c:	2200      	movs	r2, #0
 800082e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000832:	481e      	ldr	r0, [pc, #120]	; (80008ac <MX_ADC1_Init+0x100>)
 8000834:	f001 f806 	bl	8001844 <HAL_ADC_Init>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 800083e:	f000 fa3b 	bl	8000cb8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000842:	2300      	movs	r3, #0
 8000844:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000846:	f107 031c 	add.w	r3, r7, #28
 800084a:	4619      	mov	r1, r3
 800084c:	4817      	ldr	r0, [pc, #92]	; (80008ac <MX_ADC1_Init+0x100>)
 800084e:	f002 f869 	bl	8002924 <HAL_ADCEx_MultiModeConfigChannel>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000858:	f000 fa2e 	bl	8000cb8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800085c:	4b15      	ldr	r3, [pc, #84]	; (80008b4 <MX_ADC1_Init+0x108>)
 800085e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000860:	2306      	movs	r3, #6
 8000862:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8000864:	2306      	movs	r3, #6
 8000866:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000868:	237f      	movs	r3, #127	; 0x7f
 800086a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800086c:	2304      	movs	r3, #4
 800086e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000870:	2300      	movs	r3, #0
 8000872:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000874:	1d3b      	adds	r3, r7, #4
 8000876:	4619      	mov	r1, r3
 8000878:	480c      	ldr	r0, [pc, #48]	; (80008ac <MX_ADC1_Init+0x100>)
 800087a:	f001 fa0d 	bl	8001c98 <HAL_ADC_ConfigChannel>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000884:	f000 fa18 	bl	8000cb8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000888:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <MX_ADC1_Init+0x10c>)
 800088a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800088c:	230c      	movs	r3, #12
 800088e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000890:	1d3b      	adds	r3, r7, #4
 8000892:	4619      	mov	r1, r3
 8000894:	4805      	ldr	r0, [pc, #20]	; (80008ac <MX_ADC1_Init+0x100>)
 8000896:	f001 f9ff 	bl	8001c98 <HAL_ADC_ConfigChannel>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 80008a0:	f000 fa0a 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008a4:	bf00      	nop
 80008a6:	3728      	adds	r7, #40	; 0x28
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	20000084 	.word	0x20000084
 80008b0:	50040000 	.word	0x50040000
 80008b4:	14f00020 	.word	0x14f00020
 80008b8:	19200040 	.word	0x19200040

080008bc <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08a      	sub	sp, #40	; 0x28
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN CAN1_Init 1 */
	CAN_FilterTypeDef sFilterConfig;

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80008c2:	4b28      	ldr	r3, [pc, #160]	; (8000964 <MX_CAN1_Init+0xa8>)
 80008c4:	4a28      	ldr	r2, [pc, #160]	; (8000968 <MX_CAN1_Init+0xac>)
 80008c6:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 80008c8:	4b26      	ldr	r3, [pc, #152]	; (8000964 <MX_CAN1_Init+0xa8>)
 80008ca:	2205      	movs	r2, #5
 80008cc:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80008ce:	4b25      	ldr	r3, [pc, #148]	; (8000964 <MX_CAN1_Init+0xa8>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80008d4:	4b23      	ldr	r3, [pc, #140]	; (8000964 <MX_CAN1_Init+0xa8>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 80008da:	4b22      	ldr	r3, [pc, #136]	; (8000964 <MX_CAN1_Init+0xa8>)
 80008dc:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80008e0:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80008e2:	4b20      	ldr	r3, [pc, #128]	; (8000964 <MX_CAN1_Init+0xa8>)
 80008e4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80008e8:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80008ea:	4b1e      	ldr	r3, [pc, #120]	; (8000964 <MX_CAN1_Init+0xa8>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80008f0:	4b1c      	ldr	r3, [pc, #112]	; (8000964 <MX_CAN1_Init+0xa8>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80008f6:	4b1b      	ldr	r3, [pc, #108]	; (8000964 <MX_CAN1_Init+0xa8>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80008fc:	4b19      	ldr	r3, [pc, #100]	; (8000964 <MX_CAN1_Init+0xa8>)
 80008fe:	2200      	movs	r2, #0
 8000900:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000902:	4b18      	ldr	r3, [pc, #96]	; (8000964 <MX_CAN1_Init+0xa8>)
 8000904:	2200      	movs	r2, #0
 8000906:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000908:	4b16      	ldr	r3, [pc, #88]	; (8000964 <MX_CAN1_Init+0xa8>)
 800090a:	2200      	movs	r2, #0
 800090c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800090e:	4815      	ldr	r0, [pc, #84]	; (8000964 <MX_CAN1_Init+0xa8>)
 8000910:	f002 f8b8 	bl	8002a84 <HAL_CAN_Init>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 800091a:	f000 f9cd 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  sFilterConfig.FilterBank = 0;
 800091e:	2300      	movs	r3, #0
 8000920:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000922:	2300      	movs	r3, #0
 8000924:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000926:	2301      	movs	r3, #1
 8000928:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 800092a:	2300      	movs	r3, #0
 800092c:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 800092e:	2300      	movs	r3, #0
 8000930:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 8000932:	2300      	movs	r3, #0
 8000934:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 8000936:	2300      	movs	r3, #0
 8000938:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800093a:	2300      	movs	r3, #0
 800093c:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 800093e:	2301      	movs	r3, #1
 8000940:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 8000942:	230e      	movs	r3, #14
 8000944:	627b      	str	r3, [r7, #36]	; 0x24

  if(HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK){
 8000946:	463b      	mov	r3, r7
 8000948:	4619      	mov	r1, r3
 800094a:	4806      	ldr	r0, [pc, #24]	; (8000964 <MX_CAN1_Init+0xa8>)
 800094c:	f002 f995 	bl	8002c7a <HAL_CAN_ConfigFilter>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_CAN1_Init+0x9e>
      /* Filter configuration Error */
      Error_Handler();
 8000956:	f000 f9af 	bl	8000cb8 <Error_Handler>
    }
  /* USER CODE END CAN1_Init 2 */

}
 800095a:	bf00      	nop
 800095c:	3728      	adds	r7, #40	; 0x28
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	20000130 	.word	0x20000130
 8000968:	40006400 	.word	0x40006400

0800096c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b08a      	sub	sp, #40	; 0x28
 8000970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000972:	1d3b      	adds	r3, r7, #4
 8000974:	2224      	movs	r2, #36	; 0x24
 8000976:	2100      	movs	r1, #0
 8000978:	4618      	mov	r0, r3
 800097a:	f006 fc77 	bl	800726c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800097e:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <MX_DAC1_Init+0x5c>)
 8000980:	4a12      	ldr	r2, [pc, #72]	; (80009cc <MX_DAC1_Init+0x60>)
 8000982:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000984:	4810      	ldr	r0, [pc, #64]	; (80009c8 <MX_DAC1_Init+0x5c>)
 8000986:	f002 fd8c 	bl	80034a2 <HAL_DAC_Init>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000990:	f000 f992 	bl	8000cb8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000994:	2300      	movs	r3, #0
 8000996:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8000998:	2304      	movs	r3, #4
 800099a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800099c:	2300      	movs	r3, #0
 800099e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80009a0:	2300      	movs	r3, #0
 80009a2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80009a4:	2300      	movs	r3, #0
 80009a6:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80009a8:	1d3b      	adds	r3, r7, #4
 80009aa:	2200      	movs	r2, #0
 80009ac:	4619      	mov	r1, r3
 80009ae:	4806      	ldr	r0, [pc, #24]	; (80009c8 <MX_DAC1_Init+0x5c>)
 80009b0:	f002 fefd 	bl	80037ae <HAL_DAC_ConfigChannel>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80009ba:	f000 f97d 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80009be:	bf00      	nop
 80009c0:	3728      	adds	r7, #40	; 0x28
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	20000158 	.word	0x20000158
 80009cc:	40007400 	.word	0x40007400

080009d0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009d6:	1d3b      	adds	r3, r7, #4
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80009e0:	4b14      	ldr	r3, [pc, #80]	; (8000a34 <MX_TIM6_Init+0x64>)
 80009e2:	4a15      	ldr	r2, [pc, #84]	; (8000a38 <MX_TIM6_Init+0x68>)
 80009e4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80009e6:	4b13      	ldr	r3, [pc, #76]	; (8000a34 <MX_TIM6_Init+0x64>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ec:	4b11      	ldr	r3, [pc, #68]	; (8000a34 <MX_TIM6_Init+0x64>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80009f2:	4b10      	ldr	r3, [pc, #64]	; (8000a34 <MX_TIM6_Init+0x64>)
 80009f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009f8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009fa:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <MX_TIM6_Init+0x64>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000a00:	480c      	ldr	r0, [pc, #48]	; (8000a34 <MX_TIM6_Init+0x64>)
 8000a02:	f004 ffe7 	bl	80059d4 <HAL_TIM_Base_Init>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000a0c:	f000 f954 	bl	8000cb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000a10:	2320      	movs	r3, #32
 8000a12:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a14:	2300      	movs	r3, #0
 8000a16:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000a18:	1d3b      	adds	r3, r7, #4
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4805      	ldr	r0, [pc, #20]	; (8000a34 <MX_TIM6_Init+0x64>)
 8000a1e:	f005 fa65 	bl	8005eec <HAL_TIMEx_MasterConfigSynchronization>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000a28:	f000 f946 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000a2c:	bf00      	nop
 8000a2e:	3710      	adds	r7, #16
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	200001b4 	.word	0x200001b4
 8000a38:	40001000 	.word	0x40001000

08000a3c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a40:	4b14      	ldr	r3, [pc, #80]	; (8000a94 <MX_USART2_UART_Init+0x58>)
 8000a42:	4a15      	ldr	r2, [pc, #84]	; (8000a98 <MX_USART2_UART_Init+0x5c>)
 8000a44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a46:	4b13      	ldr	r3, [pc, #76]	; (8000a94 <MX_USART2_UART_Init+0x58>)
 8000a48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a4e:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <MX_USART2_UART_Init+0x58>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a54:	4b0f      	ldr	r3, [pc, #60]	; (8000a94 <MX_USART2_UART_Init+0x58>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a5a:	4b0e      	ldr	r3, [pc, #56]	; (8000a94 <MX_USART2_UART_Init+0x58>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a60:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <MX_USART2_UART_Init+0x58>)
 8000a62:	220c      	movs	r2, #12
 8000a64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a66:	4b0b      	ldr	r3, [pc, #44]	; (8000a94 <MX_USART2_UART_Init+0x58>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a6c:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <MX_USART2_UART_Init+0x58>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a72:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <MX_USART2_UART_Init+0x58>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a78:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <MX_USART2_UART_Init+0x58>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a7e:	4805      	ldr	r0, [pc, #20]	; (8000a94 <MX_USART2_UART_Init+0x58>)
 8000a80:	f005 fada 	bl	8006038 <HAL_UART_Init>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a8a:	f000 f915 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	20000200 	.word	0x20000200
 8000a98:	40004400 	.word	0x40004400

08000a9c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000aa2:	4b10      	ldr	r3, [pc, #64]	; (8000ae4 <MX_DMA_Init+0x48>)
 8000aa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000aa6:	4a0f      	ldr	r2, [pc, #60]	; (8000ae4 <MX_DMA_Init+0x48>)
 8000aa8:	f043 0301 	orr.w	r3, r3, #1
 8000aac:	6493      	str	r3, [r2, #72]	; 0x48
 8000aae:	4b0d      	ldr	r3, [pc, #52]	; (8000ae4 <MX_DMA_Init+0x48>)
 8000ab0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ab2:	f003 0301 	and.w	r3, r3, #1
 8000ab6:	607b      	str	r3, [r7, #4]
 8000ab8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000aba:	2200      	movs	r2, #0
 8000abc:	2100      	movs	r1, #0
 8000abe:	200b      	movs	r0, #11
 8000ac0:	f002 fcb9 	bl	8003436 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ac4:	200b      	movs	r0, #11
 8000ac6:	f002 fcd2 	bl	800346e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000aca:	2200      	movs	r2, #0
 8000acc:	2100      	movs	r1, #0
 8000ace:	200d      	movs	r0, #13
 8000ad0:	f002 fcb1 	bl	8003436 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000ad4:	200d      	movs	r0, #13
 8000ad6:	f002 fcca 	bl	800346e <HAL_NVIC_EnableIRQ>

}
 8000ada:	bf00      	nop
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40021000 	.word	0x40021000

08000ae8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08a      	sub	sp, #40	; 0x28
 8000aec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aee:	f107 0314 	add.w	r3, r7, #20
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	605a      	str	r2, [r3, #4]
 8000af8:	609a      	str	r2, [r3, #8]
 8000afa:	60da      	str	r2, [r3, #12]
 8000afc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000afe:	4b21      	ldr	r3, [pc, #132]	; (8000b84 <MX_GPIO_Init+0x9c>)
 8000b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b02:	4a20      	ldr	r2, [pc, #128]	; (8000b84 <MX_GPIO_Init+0x9c>)
 8000b04:	f043 0304 	orr.w	r3, r3, #4
 8000b08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b0a:	4b1e      	ldr	r3, [pc, #120]	; (8000b84 <MX_GPIO_Init+0x9c>)
 8000b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b0e:	f003 0304 	and.w	r3, r3, #4
 8000b12:	613b      	str	r3, [r7, #16]
 8000b14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b16:	4b1b      	ldr	r3, [pc, #108]	; (8000b84 <MX_GPIO_Init+0x9c>)
 8000b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b1a:	4a1a      	ldr	r2, [pc, #104]	; (8000b84 <MX_GPIO_Init+0x9c>)
 8000b1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b22:	4b18      	ldr	r3, [pc, #96]	; (8000b84 <MX_GPIO_Init+0x9c>)
 8000b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b2a:	60fb      	str	r3, [r7, #12]
 8000b2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2e:	4b15      	ldr	r3, [pc, #84]	; (8000b84 <MX_GPIO_Init+0x9c>)
 8000b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b32:	4a14      	ldr	r2, [pc, #80]	; (8000b84 <MX_GPIO_Init+0x9c>)
 8000b34:	f043 0301 	orr.w	r3, r3, #1
 8000b38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b3a:	4b12      	ldr	r3, [pc, #72]	; (8000b84 <MX_GPIO_Init+0x9c>)
 8000b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b3e:	f003 0301 	and.w	r3, r3, #1
 8000b42:	60bb      	str	r3, [r7, #8]
 8000b44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b46:	4b0f      	ldr	r3, [pc, #60]	; (8000b84 <MX_GPIO_Init+0x9c>)
 8000b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b4a:	4a0e      	ldr	r2, [pc, #56]	; (8000b84 <MX_GPIO_Init+0x9c>)
 8000b4c:	f043 0302 	orr.w	r3, r3, #2
 8000b50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b52:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <MX_GPIO_Init+0x9c>)
 8000b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b56:	f003 0302 	and.w	r3, r3, #2
 8000b5a:	607b      	str	r3, [r7, #4]
 8000b5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b64:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b6e:	f107 0314 	add.w	r3, r7, #20
 8000b72:	4619      	mov	r1, r3
 8000b74:	4804      	ldr	r0, [pc, #16]	; (8000b88 <MX_GPIO_Init+0xa0>)
 8000b76:	f003 fa4b 	bl	8004010 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b7a:	bf00      	nop
 8000b7c:	3728      	adds	r7, #40	; 0x28
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40021000 	.word	0x40021000
 8000b88:	48000800 	.word	0x48000800

08000b8c <dacInput>:

/* USER CODE BEGIN 4 */

uint32_t dacInput(uint16_t adcinput1, uint16_t adcinput2){
 8000b8c:	b590      	push	{r4, r7, lr}
 8000b8e:	b087      	sub	sp, #28
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	460a      	mov	r2, r1
 8000b96:	80fb      	strh	r3, [r7, #6]
 8000b98:	4613      	mov	r3, r2
 8000b9a:	80bb      	strh	r3, [r7, #4]
	static uint16_t counter = 0;
	static uint32_t rawcheck1 = 0;
	static uint32_t rawcheck2 = 0;

	uint32_t out = 0;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	617b      	str	r3, [r7, #20]

	uint32_t raw1 = adcinput1;
 8000ba0:	88fb      	ldrh	r3, [r7, #6]
 8000ba2:	613b      	str	r3, [r7, #16]
	uint32_t raw2 = adcinput2*9/8;
 8000ba4:	88ba      	ldrh	r2, [r7, #4]
 8000ba6:	4613      	mov	r3, r2
 8000ba8:	00db      	lsls	r3, r3, #3
 8000baa:	4413      	add	r3, r2
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	da00      	bge.n	8000bb2 <dacInput+0x26>
 8000bb0:	3307      	adds	r3, #7
 8000bb2:	10db      	asrs	r3, r3, #3
 8000bb4:	60fb      	str	r3, [r7, #12]

	uint32_t deviationCheck = abs(raw1-raw2)/100;
 8000bb6:	693a      	ldr	r2, [r7, #16]
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	1ad3      	subs	r3, r2, r3
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	bfb8      	it	lt
 8000bc0:	425b      	neglt	r3, r3
 8000bc2:	4a36      	ldr	r2, [pc, #216]	; (8000c9c <dacInput+0x110>)
 8000bc4:	fb82 1203 	smull	r1, r2, r2, r3
 8000bc8:	1152      	asrs	r2, r2, #5
 8000bca:	17db      	asrs	r3, r3, #31
 8000bcc:	1ad3      	subs	r3, r2, r3
 8000bce:	60bb      	str	r3, [r7, #8]

	//check if both values are same for 1 second
	if((raw1!=0) && (raw2!=0) && raw1 == raw2){
 8000bd0:	693b      	ldr	r3, [r7, #16]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d042      	beq.n	8000c5c <dacInput+0xd0>
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d03f      	beq.n	8000c5c <dacInput+0xd0>
 8000bdc:	693a      	ldr	r2, [r7, #16]
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	429a      	cmp	r2, r3
 8000be2:	d13b      	bne.n	8000c5c <dacInput+0xd0>
		//check if raw1 is continuously the same
		if((raw1 != rawcheck1) && (raw2 != rawcheck2)){
 8000be4:	4b2e      	ldr	r3, [pc, #184]	; (8000ca0 <dacInput+0x114>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	693a      	ldr	r2, [r7, #16]
 8000bea:	429a      	cmp	r2, r3
 8000bec:	d007      	beq.n	8000bfe <dacInput+0x72>
 8000bee:	4b2d      	ldr	r3, [pc, #180]	; (8000ca4 <dacInput+0x118>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	68fa      	ldr	r2, [r7, #12]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	d002      	beq.n	8000bfe <dacInput+0x72>
			counter = 0;
 8000bf8:	4b2b      	ldr	r3, [pc, #172]	; (8000ca8 <dacInput+0x11c>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	801a      	strh	r2, [r3, #0]
		}
		//set static value to be compared later
		rawcheck1 = raw1;
 8000bfe:	4a28      	ldr	r2, [pc, #160]	; (8000ca0 <dacInput+0x114>)
 8000c00:	693b      	ldr	r3, [r7, #16]
 8000c02:	6013      	str	r3, [r2, #0]
		rawcheck2 = raw2;
 8000c04:	4a27      	ldr	r2, [pc, #156]	; (8000ca4 <dacInput+0x118>)
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	6013      	str	r3, [r2, #0]

		counter++;
 8000c0a:	4b27      	ldr	r3, [pc, #156]	; (8000ca8 <dacInput+0x11c>)
 8000c0c:	881b      	ldrh	r3, [r3, #0]
 8000c0e:	3301      	adds	r3, #1
 8000c10:	b29a      	uxth	r2, r3
 8000c12:	4b25      	ldr	r3, [pc, #148]	; (8000ca8 <dacInput+0x11c>)
 8000c14:	801a      	strh	r2, [r3, #0]

		if(counter > 999){
 8000c16:	4b24      	ldr	r3, [pc, #144]	; (8000ca8 <dacInput+0x11c>)
 8000c18:	881b      	ldrh	r3, [r3, #0]
 8000c1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000c1e:	d337      	bcc.n	8000c90 <dacInput+0x104>
			counter = 0;
 8000c20:	4b21      	ldr	r3, [pc, #132]	; (8000ca8 <dacInput+0x11c>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	801a      	strh	r2, [r3, #0]
			//compare to see if they are still the same
			if(rawcheck1 == raw1 && rawcheck2 == raw2){
 8000c26:	4b1e      	ldr	r3, [pc, #120]	; (8000ca0 <dacInput+0x114>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	693a      	ldr	r2, [r7, #16]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	d12f      	bne.n	8000c90 <dacInput+0x104>
 8000c30:	4b1c      	ldr	r3, [pc, #112]	; (8000ca4 <dacInput+0x118>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	68fa      	ldr	r2, [r7, #12]
 8000c36:	429a      	cmp	r2, r3
 8000c38:	d12a      	bne.n	8000c90 <dacInput+0x104>
				out = 0;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	617b      	str	r3, [r7, #20]
				HAL_UART_Transmit(&huart2, (uint8_t*)potShortPedal, strlen(potShortPedal), 100);
 8000c3e:	4b1b      	ldr	r3, [pc, #108]	; (8000cac <dacInput+0x120>)
 8000c40:	681c      	ldr	r4, [r3, #0]
 8000c42:	4b1a      	ldr	r3, [pc, #104]	; (8000cac <dacInput+0x120>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4618      	mov	r0, r3
 8000c48:	f7ff fac2 	bl	80001d0 <strlen>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	b29a      	uxth	r2, r3
 8000c50:	2364      	movs	r3, #100	; 0x64
 8000c52:	4621      	mov	r1, r4
 8000c54:	4816      	ldr	r0, [pc, #88]	; (8000cb0 <dacInput+0x124>)
 8000c56:	f005 fa3d 	bl	80060d4 <HAL_UART_Transmit>
		if(counter > 999){
 8000c5a:	e019      	b.n	8000c90 <dacInput+0x104>
			}
		}
	}
	//check deviation
	else if(deviationCheck>0.1){
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d010      	beq.n	8000c84 <dacInput+0xf8>
		out = 0;
 8000c62:	2300      	movs	r3, #0
 8000c64:	617b      	str	r3, [r7, #20]
		HAL_UART_Transmit(&huart2, (uint8_t*)deviationCheckFail, strlen(deviationCheckFail), 100);
 8000c66:	4b13      	ldr	r3, [pc, #76]	; (8000cb4 <dacInput+0x128>)
 8000c68:	681c      	ldr	r4, [r3, #0]
 8000c6a:	4b12      	ldr	r3, [pc, #72]	; (8000cb4 <dacInput+0x128>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f7ff faae 	bl	80001d0 <strlen>
 8000c74:	4603      	mov	r3, r0
 8000c76:	b29a      	uxth	r2, r3
 8000c78:	2364      	movs	r3, #100	; 0x64
 8000c7a:	4621      	mov	r1, r4
 8000c7c:	480c      	ldr	r0, [pc, #48]	; (8000cb0 <dacInput+0x124>)
 8000c7e:	f005 fa29 	bl	80060d4 <HAL_UART_Transmit>
 8000c82:	e006      	b.n	8000c92 <dacInput+0x106>
	}
	//regular output function(average value)
	else{
		out = ((raw1+raw2)/2);
 8000c84:	693a      	ldr	r2, [r7, #16]
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	4413      	add	r3, r2
 8000c8a:	085b      	lsrs	r3, r3, #1
 8000c8c:	617b      	str	r3, [r7, #20]
 8000c8e:	e000      	b.n	8000c92 <dacInput+0x106>
		if(counter > 999){
 8000c90:	bf00      	nop
	}

	return out;
 8000c92:	697b      	ldr	r3, [r7, #20]
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	371c      	adds	r7, #28
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd90      	pop	{r4, r7, pc}
 8000c9c:	51eb851f 	.word	0x51eb851f
 8000ca0:	200002b4 	.word	0x200002b4
 8000ca4:	200002b8 	.word	0x200002b8
 8000ca8:	200002bc 	.word	0x200002bc
 8000cac:	20000004 	.word	0x20000004
 8000cb0:	20000200 	.word	0x20000200
 8000cb4:	20000008 	.word	0x20000008

08000cb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
 \brief   Disable IRQ Interrupts
 \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void) {
	__ASM volatile ("cpsid i" : : : "memory");
 8000cbc:	b672      	cpsid	i
}
 8000cbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	2120      	movs	r1, #32
 8000cc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cc8:	f003 fb4c 	bl	8004364 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8000ccc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cd0:	f000 fb98 	bl	8001404 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	2120      	movs	r1, #32
 8000cd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cdc:	f003 fb42 	bl	8004364 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8000ce0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ce4:	f000 fb8e 	bl	8001404 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000ce8:	e7ea      	b.n	8000cc0 <Error_Handler+0x8>
	...

08000cec <HAL_MspInit>:

/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MspInit 0 */

	/* USER CODE END MspInit 0 */

	__HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cf2:	4b0f      	ldr	r3, [pc, #60]	; (8000d30 <HAL_MspInit+0x44>)
 8000cf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cf6:	4a0e      	ldr	r2, [pc, #56]	; (8000d30 <HAL_MspInit+0x44>)
 8000cf8:	f043 0301 	orr.w	r3, r3, #1
 8000cfc:	6613      	str	r3, [r2, #96]	; 0x60
 8000cfe:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <HAL_MspInit+0x44>)
 8000d00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d02:	f003 0301 	and.w	r3, r3, #1
 8000d06:	607b      	str	r3, [r7, #4]
 8000d08:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_PWR_CLK_ENABLE();
 8000d0a:	4b09      	ldr	r3, [pc, #36]	; (8000d30 <HAL_MspInit+0x44>)
 8000d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d0e:	4a08      	ldr	r2, [pc, #32]	; (8000d30 <HAL_MspInit+0x44>)
 8000d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d14:	6593      	str	r3, [r2, #88]	; 0x58
 8000d16:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <HAL_MspInit+0x44>)
 8000d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d1e:	603b      	str	r3, [r7, #0]
 8000d20:	683b      	ldr	r3, [r7, #0]
	/* System interrupt init*/

	/* USER CODE BEGIN MspInit 1 */

	/* USER CODE END MspInit 1 */
}
 8000d22:	bf00      	nop
 8000d24:	370c      	adds	r7, #12
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	40021000 	.word	0x40021000

08000d34 <HAL_ADC_MspInit>:
 * @brief ADC MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hadc: ADC handle pointer
 * @retval None
 */
void HAL_ADC_MspInit(ADC_HandleTypeDef *hadc) {
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b0ac      	sub	sp, #176	; 0xb0
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000d3c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
 8000d48:	60da      	str	r2, [r3, #12]
 8000d4a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000d4c:	f107 0314 	add.w	r3, r7, #20
 8000d50:	2288      	movs	r2, #136	; 0x88
 8000d52:	2100      	movs	r1, #0
 8000d54:	4618      	mov	r0, r3
 8000d56:	f006 fa89 	bl	800726c <memset>
	if (hadc->Instance == ADC1) {
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a3d      	ldr	r2, [pc, #244]	; (8000e54 <HAL_ADC_MspInit+0x120>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d173      	bne.n	8000e4c <HAL_ADC_MspInit+0x118>

		/* USER CODE END ADC1_MspInit 0 */

		/** Initializes the peripherals clock
		 */
		PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d64:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d68:	617b      	str	r3, [r7, #20]
		PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000d6a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d6e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8000d72:	2303      	movs	r3, #3
 8000d74:	61bb      	str	r3, [r7, #24]
		PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000d76:	2301      	movs	r3, #1
 8000d78:	61fb      	str	r3, [r7, #28]
		PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000d7a:	2310      	movs	r3, #16
 8000d7c:	623b      	str	r3, [r7, #32]
		PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000d7e:	2307      	movs	r3, #7
 8000d80:	627b      	str	r3, [r7, #36]	; 0x24
		PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000d82:	2302      	movs	r3, #2
 8000d84:	62bb      	str	r3, [r7, #40]	; 0x28
		PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000d86:	2302      	movs	r3, #2
 8000d88:	62fb      	str	r3, [r7, #44]	; 0x2c
		PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000d8a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000d8e:	633b      	str	r3, [r7, #48]	; 0x30
		if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000d90:	f107 0314 	add.w	r3, r7, #20
 8000d94:	4618      	mov	r0, r3
 8000d96:	f004 f961 	bl	800505c <HAL_RCCEx_PeriphCLKConfig>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <HAL_ADC_MspInit+0x70>
			Error_Handler();
 8000da0:	f7ff ff8a 	bl	8000cb8 <Error_Handler>
		}

		/* Peripheral clock enable */
		__HAL_RCC_ADC_CLK_ENABLE();
 8000da4:	4b2c      	ldr	r3, [pc, #176]	; (8000e58 <HAL_ADC_MspInit+0x124>)
 8000da6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da8:	4a2b      	ldr	r2, [pc, #172]	; (8000e58 <HAL_ADC_MspInit+0x124>)
 8000daa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000dae:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000db0:	4b29      	ldr	r3, [pc, #164]	; (8000e58 <HAL_ADC_MspInit+0x124>)
 8000db2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000db8:	613b      	str	r3, [r7, #16]
 8000dba:	693b      	ldr	r3, [r7, #16]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 8000dbc:	4b26      	ldr	r3, [pc, #152]	; (8000e58 <HAL_ADC_MspInit+0x124>)
 8000dbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc0:	4a25      	ldr	r2, [pc, #148]	; (8000e58 <HAL_ADC_MspInit+0x124>)
 8000dc2:	f043 0301 	orr.w	r3, r3, #1
 8000dc6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dc8:	4b23      	ldr	r3, [pc, #140]	; (8000e58 <HAL_ADC_MspInit+0x124>)
 8000dca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dcc:	f003 0301 	and.w	r3, r3, #1
 8000dd0:	60fb      	str	r3, [r7, #12]
 8000dd2:	68fb      	ldr	r3, [r7, #12]
		/**ADC1 GPIO Configuration
		 PA0     ------> ADC1_IN5
		 PA1     ------> ADC1_IN6
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000dd4:	2303      	movs	r3, #3
 8000dd6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000dda:	230b      	movs	r3, #11
 8000ddc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000dea:	4619      	mov	r1, r3
 8000dec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000df0:	f003 f90e 	bl	8004010 <HAL_GPIO_Init>

		/* ADC1 DMA Init */
		/* ADC1 Init */
		hdma_adc1.Instance = DMA1_Channel1;
 8000df4:	4b19      	ldr	r3, [pc, #100]	; (8000e5c <HAL_ADC_MspInit+0x128>)
 8000df6:	4a1a      	ldr	r2, [pc, #104]	; (8000e60 <HAL_ADC_MspInit+0x12c>)
 8000df8:	601a      	str	r2, [r3, #0]
		hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000dfa:	4b18      	ldr	r3, [pc, #96]	; (8000e5c <HAL_ADC_MspInit+0x128>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	605a      	str	r2, [r3, #4]
		hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e00:	4b16      	ldr	r3, [pc, #88]	; (8000e5c <HAL_ADC_MspInit+0x128>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	609a      	str	r2, [r3, #8]
		hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e06:	4b15      	ldr	r3, [pc, #84]	; (8000e5c <HAL_ADC_MspInit+0x128>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	60da      	str	r2, [r3, #12]
		hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e0c:	4b13      	ldr	r3, [pc, #76]	; (8000e5c <HAL_ADC_MspInit+0x128>)
 8000e0e:	2280      	movs	r2, #128	; 0x80
 8000e10:	611a      	str	r2, [r3, #16]
		hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e12:	4b12      	ldr	r3, [pc, #72]	; (8000e5c <HAL_ADC_MspInit+0x128>)
 8000e14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e18:	615a      	str	r2, [r3, #20]
		hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e1a:	4b10      	ldr	r3, [pc, #64]	; (8000e5c <HAL_ADC_MspInit+0x128>)
 8000e1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e20:	619a      	str	r2, [r3, #24]
		hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000e22:	4b0e      	ldr	r3, [pc, #56]	; (8000e5c <HAL_ADC_MspInit+0x128>)
 8000e24:	2220      	movs	r2, #32
 8000e26:	61da      	str	r2, [r3, #28]
		hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000e28:	4b0c      	ldr	r3, [pc, #48]	; (8000e5c <HAL_ADC_MspInit+0x128>)
 8000e2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e2e:	621a      	str	r2, [r3, #32]
		if (HAL_DMA_Init(&hdma_adc1) != HAL_OK) {
 8000e30:	480a      	ldr	r0, [pc, #40]	; (8000e5c <HAL_ADC_MspInit+0x128>)
 8000e32:	f002 fe77 	bl	8003b24 <HAL_DMA_Init>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <HAL_ADC_MspInit+0x10c>
			Error_Handler();
 8000e3c:	f7ff ff3c 	bl	8000cb8 <Error_Handler>
		}

		__HAL_LINKDMA(hadc, DMA_Handle, hdma_adc1);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	4a06      	ldr	r2, [pc, #24]	; (8000e5c <HAL_ADC_MspInit+0x128>)
 8000e44:	64da      	str	r2, [r3, #76]	; 0x4c
 8000e46:	4a05      	ldr	r2, [pc, #20]	; (8000e5c <HAL_ADC_MspInit+0x128>)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	6293      	str	r3, [r2, #40]	; 0x28
		/* USER CODE BEGIN ADC1_MspInit 1 */

		/* USER CODE END ADC1_MspInit 1 */
	}

}
 8000e4c:	bf00      	nop
 8000e4e:	37b0      	adds	r7, #176	; 0xb0
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	50040000 	.word	0x50040000
 8000e58:	40021000 	.word	0x40021000
 8000e5c:	200000e8 	.word	0x200000e8
 8000e60:	40020008 	.word	0x40020008

08000e64 <HAL_CAN_MspInit>:
 * @brief CAN MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hcan: CAN handle pointer
 * @retval None
 */
void HAL_CAN_MspInit(CAN_HandleTypeDef *hcan) {
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08a      	sub	sp, #40	; 0x28
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000e6c:	f107 0314 	add.w	r3, r7, #20
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
 8000e7a:	611a      	str	r2, [r3, #16]
	if (hcan->Instance == CAN1) {
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a28      	ldr	r2, [pc, #160]	; (8000f24 <HAL_CAN_MspInit+0xc0>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d149      	bne.n	8000f1a <HAL_CAN_MspInit+0xb6>
		/* USER CODE BEGIN CAN1_MspInit 0 */

		/* USER CODE END CAN1_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_CAN1_CLK_ENABLE();
 8000e86:	4b28      	ldr	r3, [pc, #160]	; (8000f28 <HAL_CAN_MspInit+0xc4>)
 8000e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e8a:	4a27      	ldr	r2, [pc, #156]	; (8000f28 <HAL_CAN_MspInit+0xc4>)
 8000e8c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e90:	6593      	str	r3, [r2, #88]	; 0x58
 8000e92:	4b25      	ldr	r3, [pc, #148]	; (8000f28 <HAL_CAN_MspInit+0xc4>)
 8000e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e9a:	613b      	str	r3, [r7, #16]
 8000e9c:	693b      	ldr	r3, [r7, #16]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9e:	4b22      	ldr	r3, [pc, #136]	; (8000f28 <HAL_CAN_MspInit+0xc4>)
 8000ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ea2:	4a21      	ldr	r2, [pc, #132]	; (8000f28 <HAL_CAN_MspInit+0xc4>)
 8000ea4:	f043 0301 	orr.w	r3, r3, #1
 8000ea8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eaa:	4b1f      	ldr	r3, [pc, #124]	; (8000f28 <HAL_CAN_MspInit+0xc4>)
 8000eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eae:	f003 0301 	and.w	r3, r3, #1
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
		/**CAN1 GPIO Configuration
		 PA11     ------> CAN1_RX
		 PA12     ------> CAN1_TX
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12;
 8000eb6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000eba:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000ec8:	2309      	movs	r3, #9
 8000eca:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ecc:	f107 0314 	add.w	r3, r7, #20
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ed6:	f003 f89b 	bl	8004010 <HAL_GPIO_Init>

		/* CAN1 interrupt Init */
		HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8000eda:	2200      	movs	r2, #0
 8000edc:	2100      	movs	r1, #0
 8000ede:	2013      	movs	r0, #19
 8000ee0:	f002 faa9 	bl	8003436 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000ee4:	2013      	movs	r0, #19
 8000ee6:	f002 fac2 	bl	800346e <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000eea:	2200      	movs	r2, #0
 8000eec:	2100      	movs	r1, #0
 8000eee:	2014      	movs	r0, #20
 8000ef0:	f002 faa1 	bl	8003436 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000ef4:	2014      	movs	r0, #20
 8000ef6:	f002 faba 	bl	800346e <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000efa:	2200      	movs	r2, #0
 8000efc:	2100      	movs	r1, #0
 8000efe:	2015      	movs	r0, #21
 8000f00:	f002 fa99 	bl	8003436 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000f04:	2015      	movs	r0, #21
 8000f06:	f002 fab2 	bl	800346e <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	2016      	movs	r0, #22
 8000f10:	f002 fa91 	bl	8003436 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000f14:	2016      	movs	r0, #22
 8000f16:	f002 faaa 	bl	800346e <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN CAN1_MspInit 1 */

		/* USER CODE END CAN1_MspInit 1 */
	}

}
 8000f1a:	bf00      	nop
 8000f1c:	3728      	adds	r7, #40	; 0x28
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40006400 	.word	0x40006400
 8000f28:	40021000 	.word	0x40021000

08000f2c <HAL_DAC_MspInit>:
 * @brief DAC MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hdac: DAC handle pointer
 * @retval None
 */
void HAL_DAC_MspInit(DAC_HandleTypeDef *hdac) {
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b08a      	sub	sp, #40	; 0x28
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000f34:	f107 0314 	add.w	r3, r7, #20
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	605a      	str	r2, [r3, #4]
 8000f3e:	609a      	str	r2, [r3, #8]
 8000f40:	60da      	str	r2, [r3, #12]
 8000f42:	611a      	str	r2, [r3, #16]
	if (hdac->Instance == DAC1) {
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a2f      	ldr	r2, [pc, #188]	; (8001008 <HAL_DAC_MspInit+0xdc>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d157      	bne.n	8000ffe <HAL_DAC_MspInit+0xd2>
		/* USER CODE BEGIN DAC1_MspInit 0 */

		/* USER CODE END DAC1_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_DAC1_CLK_ENABLE();
 8000f4e:	4b2f      	ldr	r3, [pc, #188]	; (800100c <HAL_DAC_MspInit+0xe0>)
 8000f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f52:	4a2e      	ldr	r2, [pc, #184]	; (800100c <HAL_DAC_MspInit+0xe0>)
 8000f54:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000f58:	6593      	str	r3, [r2, #88]	; 0x58
 8000f5a:	4b2c      	ldr	r3, [pc, #176]	; (800100c <HAL_DAC_MspInit+0xe0>)
 8000f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f5e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000f62:	613b      	str	r3, [r7, #16]
 8000f64:	693b      	ldr	r3, [r7, #16]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 8000f66:	4b29      	ldr	r3, [pc, #164]	; (800100c <HAL_DAC_MspInit+0xe0>)
 8000f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f6a:	4a28      	ldr	r2, [pc, #160]	; (800100c <HAL_DAC_MspInit+0xe0>)
 8000f6c:	f043 0301 	orr.w	r3, r3, #1
 8000f70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f72:	4b26      	ldr	r3, [pc, #152]	; (800100c <HAL_DAC_MspInit+0xe0>)
 8000f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f76:	f003 0301 	and.w	r3, r3, #1
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
		/**DAC1 GPIO Configuration
		 PA4     ------> DAC1_OUT1
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f7e:	2310      	movs	r3, #16
 8000f80:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f82:	2303      	movs	r3, #3
 8000f84:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f86:	2300      	movs	r3, #0
 8000f88:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f8a:	f107 0314 	add.w	r3, r7, #20
 8000f8e:	4619      	mov	r1, r3
 8000f90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f94:	f003 f83c 	bl	8004010 <HAL_GPIO_Init>

		/* DAC1 DMA Init */
		/* DAC_CH1 Init */
		hdma_dac_ch1.Instance = DMA1_Channel3;
 8000f98:	4b1d      	ldr	r3, [pc, #116]	; (8001010 <HAL_DAC_MspInit+0xe4>)
 8000f9a:	4a1e      	ldr	r2, [pc, #120]	; (8001014 <HAL_DAC_MspInit+0xe8>)
 8000f9c:	601a      	str	r2, [r3, #0]
		hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 8000f9e:	4b1c      	ldr	r3, [pc, #112]	; (8001010 <HAL_DAC_MspInit+0xe4>)
 8000fa0:	2206      	movs	r2, #6
 8000fa2:	605a      	str	r2, [r3, #4]
		hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000fa4:	4b1a      	ldr	r3, [pc, #104]	; (8001010 <HAL_DAC_MspInit+0xe4>)
 8000fa6:	2210      	movs	r2, #16
 8000fa8:	609a      	str	r2, [r3, #8]
		hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000faa:	4b19      	ldr	r3, [pc, #100]	; (8001010 <HAL_DAC_MspInit+0xe4>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	60da      	str	r2, [r3, #12]
		hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000fb0:	4b17      	ldr	r3, [pc, #92]	; (8001010 <HAL_DAC_MspInit+0xe4>)
 8000fb2:	2280      	movs	r2, #128	; 0x80
 8000fb4:	611a      	str	r2, [r3, #16]
		hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000fb6:	4b16      	ldr	r3, [pc, #88]	; (8001010 <HAL_DAC_MspInit+0xe4>)
 8000fb8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fbc:	615a      	str	r2, [r3, #20]
		hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000fbe:	4b14      	ldr	r3, [pc, #80]	; (8001010 <HAL_DAC_MspInit+0xe4>)
 8000fc0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fc4:	619a      	str	r2, [r3, #24]
		hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8000fc6:	4b12      	ldr	r3, [pc, #72]	; (8001010 <HAL_DAC_MspInit+0xe4>)
 8000fc8:	2220      	movs	r2, #32
 8000fca:	61da      	str	r2, [r3, #28]
		hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000fcc:	4b10      	ldr	r3, [pc, #64]	; (8001010 <HAL_DAC_MspInit+0xe4>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	621a      	str	r2, [r3, #32]
		if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK) {
 8000fd2:	480f      	ldr	r0, [pc, #60]	; (8001010 <HAL_DAC_MspInit+0xe4>)
 8000fd4:	f002 fda6 	bl	8003b24 <HAL_DMA_Init>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <HAL_DAC_MspInit+0xb6>
			Error_Handler();
 8000fde:	f7ff fe6b 	bl	8000cb8 <Error_Handler>
		}

		__HAL_LINKDMA(hdac, DMA_Handle1, hdma_dac_ch1);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a0a      	ldr	r2, [pc, #40]	; (8001010 <HAL_DAC_MspInit+0xe4>)
 8000fe6:	609a      	str	r2, [r3, #8]
 8000fe8:	4a09      	ldr	r2, [pc, #36]	; (8001010 <HAL_DAC_MspInit+0xe4>)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6293      	str	r3, [r2, #40]	; 0x28

		/* DAC1 interrupt Init */
		HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8000fee:	2200      	movs	r2, #0
 8000ff0:	2101      	movs	r1, #1
 8000ff2:	2036      	movs	r0, #54	; 0x36
 8000ff4:	f002 fa1f 	bl	8003436 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ff8:	2036      	movs	r0, #54	; 0x36
 8000ffa:	f002 fa38 	bl	800346e <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN DAC1_MspInit 1 */

		/* USER CODE END DAC1_MspInit 1 */
	}

}
 8000ffe:	bf00      	nop
 8001000:	3728      	adds	r7, #40	; 0x28
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40007400 	.word	0x40007400
 800100c:	40021000 	.word	0x40021000
 8001010:	2000016c 	.word	0x2000016c
 8001014:	40020030 	.word	0x40020030

08001018 <HAL_TIM_Base_MspInit>:
 * @brief TIM_Base MSP Initialization
 * This function configures the hardware resources used in this example
 * @param htim_base: TIM_Base handle pointer
 * @retval None
 */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim_base) {
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
	if (htim_base->Instance == TIM6) {
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a0d      	ldr	r2, [pc, #52]	; (800105c <HAL_TIM_Base_MspInit+0x44>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d113      	bne.n	8001052 <HAL_TIM_Base_MspInit+0x3a>
		/* USER CODE BEGIN TIM6_MspInit 0 */

		/* USER CODE END TIM6_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_TIM6_CLK_ENABLE();
 800102a:	4b0d      	ldr	r3, [pc, #52]	; (8001060 <HAL_TIM_Base_MspInit+0x48>)
 800102c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800102e:	4a0c      	ldr	r2, [pc, #48]	; (8001060 <HAL_TIM_Base_MspInit+0x48>)
 8001030:	f043 0310 	orr.w	r3, r3, #16
 8001034:	6593      	str	r3, [r2, #88]	; 0x58
 8001036:	4b0a      	ldr	r3, [pc, #40]	; (8001060 <HAL_TIM_Base_MspInit+0x48>)
 8001038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800103a:	f003 0310 	and.w	r3, r3, #16
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	68fb      	ldr	r3, [r7, #12]
		/* TIM6 interrupt Init */
		HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8001042:	2200      	movs	r2, #0
 8001044:	2101      	movs	r1, #1
 8001046:	2036      	movs	r0, #54	; 0x36
 8001048:	f002 f9f5 	bl	8003436 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800104c:	2036      	movs	r0, #54	; 0x36
 800104e:	f002 fa0e 	bl	800346e <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN TIM6_MspInit 1 */

		/* USER CODE END TIM6_MspInit 1 */
	}

}
 8001052:	bf00      	nop
 8001054:	3710      	adds	r7, #16
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	40001000 	.word	0x40001000
 8001060:	40021000 	.word	0x40021000

08001064 <HAL_UART_MspInit>:
 * @brief UART MSP Initialization
 * This function configures the hardware resources used in this example
 * @param huart: UART handle pointer
 * @retval None
 */
void HAL_UART_MspInit(UART_HandleTypeDef *huart) {
 8001064:	b580      	push	{r7, lr}
 8001066:	b0ac      	sub	sp, #176	; 0xb0
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800106c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
 800107a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 800107c:	f107 0314 	add.w	r3, r7, #20
 8001080:	2288      	movs	r2, #136	; 0x88
 8001082:	2100      	movs	r1, #0
 8001084:	4618      	mov	r0, r3
 8001086:	f006 f8f1 	bl	800726c <memset>
	if (huart->Instance == USART2) {
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a25      	ldr	r2, [pc, #148]	; (8001124 <HAL_UART_MspInit+0xc0>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d143      	bne.n	800111c <HAL_UART_MspInit+0xb8>

		/* USER CODE END USART2_MspInit 0 */

		/** Initializes the peripherals clock
		 */
		PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001094:	2302      	movs	r3, #2
 8001096:	617b      	str	r3, [r7, #20]
		PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001098:	2300      	movs	r3, #0
 800109a:	653b      	str	r3, [r7, #80]	; 0x50
		if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 800109c:	f107 0314 	add.w	r3, r7, #20
 80010a0:	4618      	mov	r0, r3
 80010a2:	f003 ffdb 	bl	800505c <HAL_RCCEx_PeriphCLKConfig>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <HAL_UART_MspInit+0x4c>
			Error_Handler();
 80010ac:	f7ff fe04 	bl	8000cb8 <Error_Handler>
		}

		/* Peripheral clock enable */
		__HAL_RCC_USART2_CLK_ENABLE();
 80010b0:	4b1d      	ldr	r3, [pc, #116]	; (8001128 <HAL_UART_MspInit+0xc4>)
 80010b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010b4:	4a1c      	ldr	r2, [pc, #112]	; (8001128 <HAL_UART_MspInit+0xc4>)
 80010b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010ba:	6593      	str	r3, [r2, #88]	; 0x58
 80010bc:	4b1a      	ldr	r3, [pc, #104]	; (8001128 <HAL_UART_MspInit+0xc4>)
 80010be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c4:	613b      	str	r3, [r7, #16]
 80010c6:	693b      	ldr	r3, [r7, #16]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 80010c8:	4b17      	ldr	r3, [pc, #92]	; (8001128 <HAL_UART_MspInit+0xc4>)
 80010ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010cc:	4a16      	ldr	r2, [pc, #88]	; (8001128 <HAL_UART_MspInit+0xc4>)
 80010ce:	f043 0301 	orr.w	r3, r3, #1
 80010d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010d4:	4b14      	ldr	r3, [pc, #80]	; (8001128 <HAL_UART_MspInit+0xc4>)
 80010d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d8:	f003 0301 	and.w	r3, r3, #1
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	68fb      	ldr	r3, [r7, #12]
		/**USART2 GPIO Configuration
		 PA2     ------> USART2_TX
		 PA3     ------> USART2_RX
		 */
		GPIO_InitStruct.Pin = USART_TX_Pin | USART_RX_Pin;
 80010e0:	230c      	movs	r3, #12
 80010e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e6:	2302      	movs	r3, #2
 80010e8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f2:	2303      	movs	r3, #3
 80010f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010f8:	2307      	movs	r3, #7
 80010fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fe:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001102:	4619      	mov	r1, r3
 8001104:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001108:	f002 ff82 	bl	8004010 <HAL_GPIO_Init>

		/* USART2 interrupt Init */
		HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800110c:	2200      	movs	r2, #0
 800110e:	2100      	movs	r1, #0
 8001110:	2026      	movs	r0, #38	; 0x26
 8001112:	f002 f990 	bl	8003436 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001116:	2026      	movs	r0, #38	; 0x26
 8001118:	f002 f9a9 	bl	800346e <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN USART2_MspInit 1 */

		/* USER CODE END USART2_MspInit 1 */
	}

}
 800111c:	bf00      	nop
 800111e:	37b0      	adds	r7, #176	; 0xb0
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	40004400 	.word	0x40004400
 8001128:	40021000 	.word	0x40021000

0800112c <NMI_Handler>:
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8001130:	e7fe      	b.n	8001130 <NMI_Handler+0x4>

08001132 <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 8001132:	b480      	push	{r7}
 8001134:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 8001136:	e7fe      	b.n	8001136 <HardFault_Handler+0x4>

08001138 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 800113c:	e7fe      	b.n	800113c <MemManage_Handler+0x4>

0800113e <BusFault_Handler>:
}

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 800113e:	b480      	push	{r7}
 8001140:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 8001142:	e7fe      	b.n	8001142 <BusFault_Handler+0x4>

08001144 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 8001148:	e7fe      	b.n	8001148 <UsageFault_Handler+0x4>

0800114a <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 800114a:	b480      	push	{r7}
 800114c:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 800114e:	bf00      	nop
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 800115c:	bf00      	nop
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr

08001166 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 8001166:	b480      	push	{r7}
 8001168:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 800116a:	bf00      	nop
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr

08001174 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8001178:	f000 f924 	bl	80013c4 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 800117c:	bf00      	nop
 800117e:	bd80      	pop	{r7, pc}

08001180 <DMA1_Channel1_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles DMA1 channel1 global interrupt.
 */
void DMA1_Channel1_IRQHandler(void) {
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

	/* USER CODE END DMA1_Channel1_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_adc1);
 8001184:	4802      	ldr	r0, [pc, #8]	; (8001190 <DMA1_Channel1_IRQHandler+0x10>)
 8001186:	f002 fe64 	bl	8003e52 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

	/* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	200000e8 	.word	0x200000e8

08001194 <DMA1_Channel3_IRQHandler>:

/**
 * @brief This function handles DMA1 channel3 global interrupt.
 */
void DMA1_Channel3_IRQHandler(void) {
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

	/* USER CODE END DMA1_Channel3_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8001198:	4802      	ldr	r0, [pc, #8]	; (80011a4 <DMA1_Channel3_IRQHandler+0x10>)
 800119a:	f002 fe5a 	bl	8003e52 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

	/* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	2000016c 	.word	0x2000016c

080011a8 <CAN1_TX_IRQHandler>:

/**
 * @brief This function handles CAN1 TX interrupt.
 */
void CAN1_TX_IRQHandler(void) {
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN CAN1_TX_IRQn 0 */

	/* USER CODE END CAN1_TX_IRQn 0 */
	HAL_CAN_IRQHandler(&hcan1);
 80011ac:	4802      	ldr	r0, [pc, #8]	; (80011b8 <CAN1_TX_IRQHandler+0x10>)
 80011ae:	f001 fe2e 	bl	8002e0e <HAL_CAN_IRQHandler>
	/* USER CODE BEGIN CAN1_TX_IRQn 1 */

	/* USER CODE END CAN1_TX_IRQn 1 */
}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20000130 	.word	0x20000130

080011bc <CAN1_RX0_IRQHandler>:

/**
 * @brief This function handles CAN1 RX0 interrupt.
 */
void CAN1_RX0_IRQHandler(void) {
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN CAN1_RX0_IRQn 0 */

	/* USER CODE END CAN1_RX0_IRQn 0 */
	HAL_CAN_IRQHandler(&hcan1);
 80011c0:	4802      	ldr	r0, [pc, #8]	; (80011cc <CAN1_RX0_IRQHandler+0x10>)
 80011c2:	f001 fe24 	bl	8002e0e <HAL_CAN_IRQHandler>
	/* USER CODE BEGIN CAN1_RX0_IRQn 1 */

	/* USER CODE END CAN1_RX0_IRQn 1 */
}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20000130 	.word	0x20000130

080011d0 <CAN1_RX1_IRQHandler>:

/**
 * @brief This function handles CAN1 RX1 interrupt.
 */
void CAN1_RX1_IRQHandler(void) {
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN CAN1_RX1_IRQn 0 */

	/* USER CODE END CAN1_RX1_IRQn 0 */
	HAL_CAN_IRQHandler(&hcan1);
 80011d4:	4802      	ldr	r0, [pc, #8]	; (80011e0 <CAN1_RX1_IRQHandler+0x10>)
 80011d6:	f001 fe1a 	bl	8002e0e <HAL_CAN_IRQHandler>
	/* USER CODE BEGIN CAN1_RX1_IRQn 1 */

	/* USER CODE END CAN1_RX1_IRQn 1 */
}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	20000130 	.word	0x20000130

080011e4 <CAN1_SCE_IRQHandler>:

/**
 * @brief This function handles CAN1 SCE interrupt.
 */
void CAN1_SCE_IRQHandler(void) {
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN CAN1_SCE_IRQn 0 */

	/* USER CODE END CAN1_SCE_IRQn 0 */
	HAL_CAN_IRQHandler(&hcan1);
 80011e8:	4802      	ldr	r0, [pc, #8]	; (80011f4 <CAN1_SCE_IRQHandler+0x10>)
 80011ea:	f001 fe10 	bl	8002e0e <HAL_CAN_IRQHandler>
	/* USER CODE BEGIN CAN1_SCE_IRQn 1 */

	/* USER CODE END CAN1_SCE_IRQn 1 */
}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20000130 	.word	0x20000130

080011f8 <USART2_IRQHandler>:

/**
 * @brief This function handles USART2 global interrupt.
 */
void USART2_IRQHandler(void) {
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART2_IRQn 0 */

	/* USER CODE END USART2_IRQn 0 */
	HAL_UART_IRQHandler(&huart2);
 80011fc:	4802      	ldr	r0, [pc, #8]	; (8001208 <USART2_IRQHandler+0x10>)
 80011fe:	f004 fff3 	bl	80061e8 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART2_IRQn 1 */

	/* USER CODE END USART2_IRQn 1 */
}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	20000200 	.word	0x20000200

0800120c <TIM6_DAC_IRQHandler>:

/**
 * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
 */
void TIM6_DAC_IRQHandler(void) {
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM6_DAC_IRQn 0 */

	/* USER CODE END TIM6_DAC_IRQn 0 */
	HAL_TIM_IRQHandler(&htim6);
 8001210:	4803      	ldr	r0, [pc, #12]	; (8001220 <TIM6_DAC_IRQHandler+0x14>)
 8001212:	f004 fca7 	bl	8005b64 <HAL_TIM_IRQHandler>
	HAL_DAC_IRQHandler(&hdac1);
 8001216:	4803      	ldr	r0, [pc, #12]	; (8001224 <TIM6_DAC_IRQHandler+0x18>)
 8001218:	f002 fa32 	bl	8003680 <HAL_DAC_IRQHandler>
	/* USER CODE BEGIN TIM6_DAC_IRQn 1 */

	/* USER CODE END TIM6_DAC_IRQn 1 */
}
 800121c:	bf00      	nop
 800121e:	bd80      	pop	{r7, pc}
 8001220:	200001b4 	.word	0x200001b4
 8001224:	20000158 	.word	0x20000158

08001228 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001230:	4a14      	ldr	r2, [pc, #80]	; (8001284 <_sbrk+0x5c>)
 8001232:	4b15      	ldr	r3, [pc, #84]	; (8001288 <_sbrk+0x60>)
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800123c:	4b13      	ldr	r3, [pc, #76]	; (800128c <_sbrk+0x64>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d102      	bne.n	800124a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001244:	4b11      	ldr	r3, [pc, #68]	; (800128c <_sbrk+0x64>)
 8001246:	4a12      	ldr	r2, [pc, #72]	; (8001290 <_sbrk+0x68>)
 8001248:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800124a:	4b10      	ldr	r3, [pc, #64]	; (800128c <_sbrk+0x64>)
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4413      	add	r3, r2
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	429a      	cmp	r2, r3
 8001256:	d207      	bcs.n	8001268 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001258:	f006 f810 	bl	800727c <__errno>
 800125c:	4603      	mov	r3, r0
 800125e:	220c      	movs	r2, #12
 8001260:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001262:	f04f 33ff 	mov.w	r3, #4294967295
 8001266:	e009      	b.n	800127c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001268:	4b08      	ldr	r3, [pc, #32]	; (800128c <_sbrk+0x64>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800126e:	4b07      	ldr	r3, [pc, #28]	; (800128c <_sbrk+0x64>)
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4413      	add	r3, r2
 8001276:	4a05      	ldr	r2, [pc, #20]	; (800128c <_sbrk+0x64>)
 8001278:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800127a:	68fb      	ldr	r3, [r7, #12]
}
 800127c:	4618      	mov	r0, r3
 800127e:	3718      	adds	r7, #24
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	20018000 	.word	0x20018000
 8001288:	00000400 	.word	0x00000400
 800128c:	200002c0 	.word	0x200002c0
 8001290:	20000410 	.word	0x20000410

08001294 <SystemInit>:
/**
 * @brief  Setup the microcontroller system.
 * @retval None
 */

void SystemInit(void) {
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 20U) | (3UL << 22U)); /* set CP10 and CP11 Full Access */
 8001298:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <SystemInit+0x20>)
 800129a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800129e:	4a05      	ldr	r2, [pc, #20]	; (80012b4 <SystemInit+0x20>)
 80012a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	e000ed00 	.word	0xe000ed00

080012b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80012b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012f0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80012bc:	f7ff ffea 	bl	8001294 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012c0:	480c      	ldr	r0, [pc, #48]	; (80012f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80012c2:	490d      	ldr	r1, [pc, #52]	; (80012f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012c4:	4a0d      	ldr	r2, [pc, #52]	; (80012fc <LoopForever+0xe>)
  movs r3, #0
 80012c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012c8:	e002      	b.n	80012d0 <LoopCopyDataInit>

080012ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ce:	3304      	adds	r3, #4

080012d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012d4:	d3f9      	bcc.n	80012ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012d6:	4a0a      	ldr	r2, [pc, #40]	; (8001300 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012d8:	4c0a      	ldr	r4, [pc, #40]	; (8001304 <LoopForever+0x16>)
  movs r3, #0
 80012da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012dc:	e001      	b.n	80012e2 <LoopFillZerobss>

080012de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012e0:	3204      	adds	r2, #4

080012e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012e4:	d3fb      	bcc.n	80012de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012e6:	f005 ffcf 	bl	8007288 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012ea:	f7ff f95f 	bl	80005ac <main>

080012ee <LoopForever>:

LoopForever:
    b LoopForever
 80012ee:	e7fe      	b.n	80012ee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80012f0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80012f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012f8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80012fc:	08007ca4 	.word	0x08007ca4
  ldr r2, =_sbss
 8001300:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001304:	20000410 	.word	0x20000410

08001308 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001308:	e7fe      	b.n	8001308 <ADC1_2_IRQHandler>
	...

0800130c <HAL_Init>:
 *         Once done, time base tick starts incrementing: the tick variable counter is incremented
 *         each 1ms in the SysTick_Handler() interrupt handler.
 *
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_Init(void) {
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status = HAL_OK;
 8001312:	2300      	movs	r3, #0
 8001314:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
	__HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001316:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <HAL_Init+0x3c>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a0b      	ldr	r2, [pc, #44]	; (8001348 <HAL_Init+0x3c>)
 800131c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001320:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

	/* Set Interrupt Group Priority */
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001322:	2003      	movs	r0, #3
 8001324:	f002 f87c 	bl	8003420 <HAL_NVIC_SetPriorityGrouping>

	/* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
	if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK) {
 8001328:	2000      	movs	r0, #0
 800132a:	f000 f80f 	bl	800134c <HAL_InitTick>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d002      	beq.n	800133a <HAL_Init+0x2e>
		status = HAL_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	71fb      	strb	r3, [r7, #7]
 8001338:	e001      	b.n	800133e <HAL_Init+0x32>
	} else {
		/* Init the low level hardware */
		HAL_MspInit();
 800133a:	f7ff fcd7 	bl	8000cec <HAL_MspInit>
	}

	/* Return function status */
	return status;
 800133e:	79fb      	ldrb	r3, [r7, #7]
}
 8001340:	4618      	mov	r0, r3
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	40022000 	.word	0x40022000

0800134c <HAL_InitTick>:
 *       The function is declared as __weak  to be overwritten  in case of other
 *       implementation  in user file.
 * @param TickPriority  Tick interrupt priority.
 * @retval HAL status
 */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority) {
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status = HAL_OK;
 8001354:	2300      	movs	r3, #0
 8001356:	73fb      	strb	r3, [r7, #15]

	/* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
	if ((uint32_t) uwTickFreq != 0U) {
 8001358:	4b17      	ldr	r3, [pc, #92]	; (80013b8 <HAL_InitTick+0x6c>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d023      	beq.n	80013a8 <HAL_InitTick+0x5c>
		/*Configure the SysTick to have interrupt in 1ms time basis*/
		if (HAL_SYSTICK_Config(
 8001360:	4b16      	ldr	r3, [pc, #88]	; (80013bc <HAL_InitTick+0x70>)
 8001362:	681a      	ldr	r2, [r3, #0]
				SystemCoreClock / (1000U / (uint32_t) uwTickFreq)) == 0U) {
 8001364:	4b14      	ldr	r3, [pc, #80]	; (80013b8 <HAL_InitTick+0x6c>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	4619      	mov	r1, r3
 800136a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800136e:	fbb3 f3f1 	udiv	r3, r3, r1
		if (HAL_SYSTICK_Config(
 8001372:	fbb2 f3f3 	udiv	r3, r2, r3
 8001376:	4618      	mov	r0, r3
 8001378:	f002 f887 	bl	800348a <HAL_SYSTICK_Config>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d10f      	bne.n	80013a2 <HAL_InitTick+0x56>
			/* Configure the SysTick IRQ priority */
			if (TickPriority < (1UL << __NVIC_PRIO_BITS)) {
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2b0f      	cmp	r3, #15
 8001386:	d809      	bhi.n	800139c <HAL_InitTick+0x50>
				HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001388:	2200      	movs	r2, #0
 800138a:	6879      	ldr	r1, [r7, #4]
 800138c:	f04f 30ff 	mov.w	r0, #4294967295
 8001390:	f002 f851 	bl	8003436 <HAL_NVIC_SetPriority>
				uwTickPrio = TickPriority;
 8001394:	4a0a      	ldr	r2, [pc, #40]	; (80013c0 <HAL_InitTick+0x74>)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6013      	str	r3, [r2, #0]
 800139a:	e007      	b.n	80013ac <HAL_InitTick+0x60>
			} else {
				status = HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	73fb      	strb	r3, [r7, #15]
 80013a0:	e004      	b.n	80013ac <HAL_InitTick+0x60>
			}
		} else {
			status = HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	73fb      	strb	r3, [r7, #15]
 80013a6:	e001      	b.n	80013ac <HAL_InitTick+0x60>
		}
	} else {
		status = HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	73fb      	strb	r3, [r7, #15]
	}

	/* Return function status */
	return status;
 80013ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3710      	adds	r7, #16
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20000014 	.word	0x20000014
 80013bc:	2000000c 	.word	0x2000000c
 80013c0:	20000010 	.word	0x20000010

080013c4 <HAL_IncTick>:
 *       in SysTick ISR.
 * @note This function is declared as __weak to be overwritten in case of other
 *      implementations in user file.
 * @retval None
 */
__weak void HAL_IncTick(void) {
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
	uwTick += (uint32_t) uwTickFreq;
 80013c8:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <HAL_IncTick+0x20>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	461a      	mov	r2, r3
 80013ce:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <HAL_IncTick+0x24>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4413      	add	r3, r2
 80013d4:	4a04      	ldr	r2, [pc, #16]	; (80013e8 <HAL_IncTick+0x24>)
 80013d6:	6013      	str	r3, [r2, #0]
}
 80013d8:	bf00      	nop
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	20000014 	.word	0x20000014
 80013e8:	200002c4 	.word	0x200002c4

080013ec <HAL_GetTick>:
 * @brief Provide a tick value in millisecond.
 * @note This function is declared as __weak to be overwritten in case of other
 *       implementations in user file.
 * @retval tick value
 */
__weak uint32_t HAL_GetTick(void) {
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
	return uwTick;
 80013f0:	4b03      	ldr	r3, [pc, #12]	; (8001400 <HAL_GetTick+0x14>)
 80013f2:	681b      	ldr	r3, [r3, #0]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	200002c4 	.word	0x200002c4

08001404 <HAL_Delay>:
 * @note This function is declared as __weak to be overwritten in case of other
 *       implementations in user file.
 * @param Delay  specifies the delay time length, in milliseconds.
 * @retval None
 */
__weak void HAL_Delay(uint32_t Delay) {
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
	uint32_t tickstart = HAL_GetTick();
 800140c:	f7ff ffee 	bl	80013ec <HAL_GetTick>
 8001410:	60b8      	str	r0, [r7, #8]
	uint32_t wait = Delay;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	60fb      	str	r3, [r7, #12]

	/* Add a period to guaranty minimum wait */
	if (wait < HAL_MAX_DELAY) {
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800141c:	d005      	beq.n	800142a <HAL_Delay+0x26>
		wait += (uint32_t) uwTickFreq;
 800141e:	4b0a      	ldr	r3, [pc, #40]	; (8001448 <HAL_Delay+0x44>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	461a      	mov	r2, r3
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	4413      	add	r3, r2
 8001428:	60fb      	str	r3, [r7, #12]
	}

	while ((HAL_GetTick() - tickstart) < wait) {
 800142a:	bf00      	nop
 800142c:	f7ff ffde 	bl	80013ec <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	68fa      	ldr	r2, [r7, #12]
 8001438:	429a      	cmp	r2, r3
 800143a:	d8f7      	bhi.n	800142c <HAL_Delay+0x28>
	}
}
 800143c:	bf00      	nop
 800143e:	bf00      	nop
 8001440:	3710      	adds	r7, #16
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	20000014 	.word	0x20000014

0800144c <LL_ADC_SetCommonClock>:
	 *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
	 *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
	 * @retval None
	 */
	__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON,
			uint32_t CommonClock) {
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
		MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC,
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	431a      	orrs	r2, r3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	609a      	str	r2, [r3, #8]
				CommonClock);
	}
 8001466:	bf00      	nop
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr

08001472 <LL_ADC_SetCommonPathInternalCh>:
	 *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
	 *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
	 * @retval None
	 */
	__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(
			ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal) {
 8001472:	b480      	push	{r7}
 8001474:	b083      	sub	sp, #12
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
 800147a:	6039      	str	r1, [r7, #0]
		MODIFY_REG(ADCxy_COMMON->CCR,
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	431a      	orrs	r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	609a      	str	r2, [r3, #8]
				ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
	}
 800148c:	bf00      	nop
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <LL_ADC_GetCommonPathInternalCh>:
	 *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
	 *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
	 *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
	 */
	__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(
			const ADC_Common_TypeDef *ADCxy_COMMON) {
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
		return (uint32_t) (READ_BIT(ADCxy_COMMON->CCR,
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
				ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
	}
 80014a8:	4618      	mov	r0, r3
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <LL_ADC_SetOffset>:
	 *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
	 * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
	 * @retval None
	 */
	__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety,
			uint32_t Channel, uint32_t OffsetLevel) {
 80014b4:	b480      	push	{r7}
 80014b6:	b087      	sub	sp, #28
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	60f8      	str	r0, [r7, #12]
 80014bc:	60b9      	str	r1, [r7, #8]
 80014be:	607a      	str	r2, [r7, #4]
 80014c0:	603b      	str	r3, [r7, #0]
		__IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	3360      	adds	r3, #96	; 0x60
 80014c6:	461a      	mov	r2, r3
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	4413      	add	r3, r2
 80014ce:	617b      	str	r3, [r7, #20]

		MODIFY_REG(*preg,
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	4b08      	ldr	r3, [pc, #32]	; (80014f8 <LL_ADC_SetOffset+0x44>)
 80014d6:	4013      	ands	r3, r2
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80014de:	683a      	ldr	r2, [r7, #0]
 80014e0:	430a      	orrs	r2, r1
 80014e2:	4313      	orrs	r3, r2
 80014e4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	601a      	str	r2, [r3, #0]
				ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
				ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
	}
 80014ec:	bf00      	nop
 80014ee:	371c      	adds	r7, #28
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr
 80014f8:	03fff000 	.word	0x03fff000

080014fc <LL_ADC_GetOffsetChannel>:
	 *         (1, 2, 3, 4) For ADC channel read back from ADC register,
	 *                      comparison with internal channel parameter to be done
	 *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
	 */
	__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx,
			uint32_t Offsety) {
 80014fc:	b480      	push	{r7}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	6039      	str	r1, [r7, #0]
		const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	3360      	adds	r3, #96	; 0x60
 800150a:	461a      	mov	r2, r3
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	4413      	add	r3, r2
 8001512:	60fb      	str	r3, [r7, #12]

		return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
	}
 800151c:	4618      	mov	r0, r3
 800151e:	3714      	adds	r7, #20
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr

08001528 <LL_ADC_SetOffsetState>:
	 *         @arg @ref LL_ADC_OFFSET_DISABLE
	 *         @arg @ref LL_ADC_OFFSET_ENABLE
	 * @retval None
	 */
	__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx,
			uint32_t Offsety, uint32_t OffsetState) {
 8001528:	b480      	push	{r7}
 800152a:	b087      	sub	sp, #28
 800152c:	af00      	add	r7, sp, #0
 800152e:	60f8      	str	r0, [r7, #12]
 8001530:	60b9      	str	r1, [r7, #8]
 8001532:	607a      	str	r2, [r7, #4]
		__IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	3360      	adds	r3, #96	; 0x60
 8001538:	461a      	mov	r2, r3
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	4413      	add	r3, r2
 8001540:	617b      	str	r3, [r7, #20]

		MODIFY_REG(*preg, ADC_OFR1_OFFSET1_EN, OffsetState);
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	431a      	orrs	r2, r3
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	601a      	str	r2, [r3, #0]
	}
 8001552:	bf00      	nop
 8001554:	371c      	adds	r7, #28
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr

0800155e <LL_ADC_REG_IsTriggerSourceSWStart>:
	 * @param  ADCx ADC instance
	 * @retval Value "0" if trigger source external trigger
	 *         Value "1" if trigger source SW start.
	 */
	__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(
			const ADC_TypeDef *ADCx) {
 800155e:	b480      	push	{r7}
 8001560:	b083      	sub	sp, #12
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
		return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	68db      	ldr	r3, [r3, #12]
 800156a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
				== (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800156e:	2b00      	cmp	r3, #0
 8001570:	d101      	bne.n	8001576 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001572:	2301      	movs	r3, #1
 8001574:	e000      	b.n	8001578 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001576:	2300      	movs	r3, #0
	}
 8001578:	4618      	mov	r0, r3
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <LL_ADC_REG_SetSequencerRanks>:
	 *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
	 *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
	 * @retval None
	 */
	__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx,
			uint32_t Rank, uint32_t Channel) {
 8001584:	b480      	push	{r7}
 8001586:	b087      	sub	sp, #28
 8001588:	af00      	add	r7, sp, #0
 800158a:	60f8      	str	r0, [r7, #12]
 800158c:	60b9      	str	r1, [r7, #8]
 800158e:	607a      	str	r2, [r7, #4]
		/* Set bits with content of parameter "Channel" with bits position          */
		/* in register and register position depending on parameter "Rank".         */
		/* Parameters "Rank" and "Channel" are used with masks because containing   */
		/* other bits reserved for other purpose.                                   */
		__IO uint32_t *preg =
				__ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	3330      	adds	r3, #48	; 0x30
 8001594:	461a      	mov	r2, r3
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	0a1b      	lsrs	r3, r3, #8
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	f003 030c 	and.w	r3, r3, #12
 80015a0:	4413      	add	r3, r2
		__IO uint32_t *preg =
 80015a2:	617b      	str	r3, [r7, #20]
						((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

		MODIFY_REG(*preg,
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	f003 031f 	and.w	r3, r3, #31
 80015ae:	211f      	movs	r1, #31
 80015b0:	fa01 f303 	lsl.w	r3, r1, r3
 80015b4:	43db      	mvns	r3, r3
 80015b6:	401a      	ands	r2, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	0e9b      	lsrs	r3, r3, #26
 80015bc:	f003 011f 	and.w	r1, r3, #31
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	f003 031f 	and.w	r3, r3, #31
 80015c6:	fa01 f303 	lsl.w	r3, r1, r3
 80015ca:	431a      	orrs	r2, r3
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	601a      	str	r2, [r3, #0]
				ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
				((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
	}
 80015d0:	bf00      	nop
 80015d2:	371c      	adds	r7, #28
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <LL_ADC_SetChannelSamplingTime>:
	 *             can be replaced by 3.5 ADC clock cycles.
	 *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
	 * @retval None
	 */
	__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx,
			uint32_t Channel, uint32_t SamplingTime) {
 80015dc:	b480      	push	{r7}
 80015de:	b087      	sub	sp, #28
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	60f8      	str	r0, [r7, #12]
 80015e4:	60b9      	str	r1, [r7, #8]
 80015e6:	607a      	str	r2, [r7, #4]
		/* Set bits with content of parameter "SamplingTime" with bits position     */
		/* in register and register position depending on parameter "Channel".      */
		/* Parameter "Channel" is used with masks because containing                */
		/* other bits reserved for other purpose.                                   */
		__IO uint32_t *preg =
				__ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	3314      	adds	r3, #20
 80015ec:	461a      	mov	r2, r3
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	0e5b      	lsrs	r3, r3, #25
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	f003 0304 	and.w	r3, r3, #4
 80015f8:	4413      	add	r3, r2
		__IO uint32_t *preg =
 80015fa:	617b      	str	r3, [r7, #20]
						((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

		MODIFY_REG(*preg,
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	0d1b      	lsrs	r3, r3, #20
 8001604:	f003 031f 	and.w	r3, r3, #31
 8001608:	2107      	movs	r1, #7
 800160a:	fa01 f303 	lsl.w	r3, r1, r3
 800160e:	43db      	mvns	r3, r3
 8001610:	401a      	ands	r2, r3
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	0d1b      	lsrs	r3, r3, #20
 8001616:	f003 031f 	and.w	r3, r3, #31
 800161a:	6879      	ldr	r1, [r7, #4]
 800161c:	fa01 f303 	lsl.w	r3, r1, r3
 8001620:	431a      	orrs	r2, r3
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	601a      	str	r2, [r3, #0]
				ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
				SamplingTime << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
	}
 8001626:	bf00      	nop
 8001628:	371c      	adds	r7, #28
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
	...

08001634 <LL_ADC_SetChannelSingleDiff>:
	 *         @arg @ref LL_ADC_SINGLE_ENDED
	 *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
	 * @retval None
	 */
	__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx,
			uint32_t Channel, uint32_t SingleDiff) {
 8001634:	b480      	push	{r7}
 8001636:	b085      	sub	sp, #20
 8001638:	af00      	add	r7, sp, #0
 800163a:	60f8      	str	r0, [r7, #12]
 800163c:	60b9      	str	r1, [r7, #8]
 800163e:	607a      	str	r2, [r7, #4]
		/* Bits of channels in single or differential mode are set only for         */
		/* differential mode (for single mode, mask of bits allowed to be set is    */
		/* shifted out of range of bits of channels in single or differential mode. */
		MODIFY_REG(ADCx->DIFSEL, Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800164c:	43db      	mvns	r3, r3
 800164e:	401a      	ands	r2, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	f003 0318 	and.w	r3, r3, #24
 8001656:	4908      	ldr	r1, [pc, #32]	; (8001678 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001658:	40d9      	lsrs	r1, r3
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	400b      	ands	r3, r1
 800165e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001662:	431a      	orrs	r2, r3
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
				(Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
	}
 800166a:	bf00      	nop
 800166c:	3714      	adds	r7, #20
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	0007ffff 	.word	0x0007ffff

0800167c <LL_ADC_GetMultimode>:
	 *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
	 *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
	 *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
	 */
	__STATIC_INLINE uint32_t LL_ADC_GetMultimode(
			const ADC_Common_TypeDef *ADCxy_COMMON) {
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
		return (uint32_t) (READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	f003 031f 	and.w	r3, r3, #31
	}
 800168c:	4618      	mov	r0, r3
 800168e:	370c      	adds	r7, #12
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <LL_ADC_DisableDeepPowerDown>:
	 *         ADC must be ADC disabled.
	 * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
	 * @param  ADCx ADC instance
	 * @retval None
	 */
	__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx) {
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
		/* Note: Write register with some additional bits forced to state reset     */
		/*       instead of modifying only the selected bit for this function,      */
		/*       to not interfere with bits with HW property "rs".                  */
		CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80016a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	6093      	str	r3, [r2, #8]
	}
 80016b0:	bf00      	nop
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <LL_ADC_IsDeepPowerDownEnabled>:
	 * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
	 * @param  ADCx ADC instance
	 * @retval 0: deep power down is disabled, 1: deep power down is enabled.
	 */
	__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(
			const ADC_TypeDef *ADCx) {
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
		return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ?
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
				1UL : 0UL);
 80016cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80016d0:	d101      	bne.n	80016d6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80016d2:	2301      	movs	r3, #1
 80016d4:	e000      	b.n	80016d8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80016d6:	2300      	movs	r3, #0
	}
 80016d8:	4618      	mov	r0, r3
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <LL_ADC_EnableInternalRegulator>:
	 *         ADC must be ADC disabled.
	 * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
	 * @param  ADCx ADC instance
	 * @retval None
	 */
	__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx) {
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
		/* Note: Write register with some additional bits forced to state reset     */
		/*       instead of modifying only the selected bit for this function,      */
		/*       to not interfere with bits with HW property "rs".                  */
		MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80016f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80016f8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	609a      	str	r2, [r3, #8]
	}
 8001700:	bf00      	nop
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <LL_ADC_IsInternalRegulatorEnabled>:
	 * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
	 * @param  ADCx ADC instance
	 * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
	 */
	__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(
			const ADC_TypeDef *ADCx) {
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
		return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ?
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
				1UL : 0UL);
 800171c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001720:	d101      	bne.n	8001726 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001722:	2301      	movs	r3, #1
 8001724:	e000      	b.n	8001728 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001726:	2300      	movs	r3, #0
	}
 8001728:	4618      	mov	r0, r3
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <LL_ADC_Enable>:
	 *         ADC must be ADC disabled and ADC internal voltage regulator enabled.
	 * @rmtoll CR       ADEN           LL_ADC_Enable
	 * @param  ADCx ADC instance
	 * @retval None
	 */
	__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx) {
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
		/* Note: Write register with some additional bits forced to state reset     */
		/*       instead of modifying only the selected bit for this function,      */
		/*       to not interfere with bits with HW property "rs".                  */
		MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADEN);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001744:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001748:	f043 0201 	orr.w	r2, r3, #1
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	609a      	str	r2, [r3, #8]
	}
 8001750:	bf00      	nop
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <LL_ADC_Disable>:
	 *         on either groups regular or injected.
	 * @rmtoll CR       ADDIS          LL_ADC_Disable
	 * @param  ADCx ADC instance
	 * @retval None
	 */
	__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx) {
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
		/* Note: Write register with some additional bits forced to state reset     */
		/*       instead of modifying only the selected bit for this function,      */
		/*       to not interfere with bits with HW property "rs".                  */
		MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADDIS);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800176c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001770:	f043 0202 	orr.w	r2, r3, #2
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	609a      	str	r2, [r3, #8]
	}
 8001778:	bf00      	nop
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <LL_ADC_IsEnabled>:
	 *         (not only core clock: this ADC has a dual clock domain)
	 * @rmtoll CR       ADEN           LL_ADC_IsEnabled
	 * @param  ADCx ADC instance
	 * @retval 0: ADC is disabled, 1: ADC is enabled.
	 */
	__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx) {
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
		return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	f003 0301 	and.w	r3, r3, #1
 8001794:	2b01      	cmp	r3, #1
 8001796:	d101      	bne.n	800179c <LL_ADC_IsEnabled+0x18>
 8001798:	2301      	movs	r3, #1
 800179a:	e000      	b.n	800179e <LL_ADC_IsEnabled+0x1a>
 800179c:	2300      	movs	r3, #0
	}
 800179e:	4618      	mov	r0, r3
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr

080017aa <LL_ADC_IsDisableOngoing>:
	 * @brief  Get the selected ADC instance disable state.
	 * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
	 * @param  ADCx ADC instance
	 * @retval 0: no ADC disable command on going.
	 */
	__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx) {
 80017aa:	b480      	push	{r7}
 80017ac:	b083      	sub	sp, #12
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
		return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d101      	bne.n	80017c2 <LL_ADC_IsDisableOngoing+0x18>
 80017be:	2301      	movs	r3, #1
 80017c0:	e000      	b.n	80017c4 <LL_ADC_IsDisableOngoing+0x1a>
 80017c2:	2300      	movs	r3, #0
	}
 80017c4:	4618      	mov	r0, r3
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <LL_ADC_REG_StartConversion>:
	 *         without ADC disable command on going.
	 * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
	 * @param  ADCx ADC instance
	 * @retval None
	 */
	__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx) {
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
		/* Note: Write register with some additional bits forced to state reset     */
		/*       instead of modifying only the selected bit for this function,      */
		/*       to not interfere with bits with HW property "rs".                  */
		MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADSTART);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80017e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80017e4:	f043 0204 	orr.w	r2, r3, #4
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	609a      	str	r2, [r3, #8]
	}
 80017ec:	bf00      	nop
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr

080017f8 <LL_ADC_REG_IsConversionOngoing>:
	 * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
	 * @param  ADCx ADC instance
	 * @retval 0: no conversion is on going on ADC group regular.
	 */
	__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(
			const ADC_TypeDef *ADCx) {
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
		return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ?
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	f003 0304 	and.w	r3, r3, #4
				1UL : 0UL);
 8001808:	2b04      	cmp	r3, #4
 800180a:	d101      	bne.n	8001810 <LL_ADC_REG_IsConversionOngoing+0x18>
 800180c:	2301      	movs	r3, #1
 800180e:	e000      	b.n	8001812 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001810:	2300      	movs	r3, #0
	}
 8001812:	4618      	mov	r0, r3
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr

0800181e <LL_ADC_INJ_IsConversionOngoing>:
	 * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
	 * @param  ADCx ADC instance
	 * @retval 0: no conversion is on going on ADC group injected.
	 */
	__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(
			const ADC_TypeDef *ADCx) {
 800181e:	b480      	push	{r7}
 8001820:	b083      	sub	sp, #12
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
		return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ?
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	f003 0308 	and.w	r3, r3, #8
				1UL : 0UL);
 800182e:	2b08      	cmp	r3, #8
 8001830:	d101      	bne.n	8001836 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001832:	2301      	movs	r3, #1
 8001834:	e000      	b.n	8001838 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001836:	2300      	movs	r3, #0
	}
 8001838:	4618      	mov	r0, r3
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <HAL_ADC_Init>:
 *         case of update of a parameter of ADC_InitTypeDef on the fly,
 *         without  disabling the other ADCs.
 * @param hadc ADC handle
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc) {
 8001844:	b590      	push	{r4, r7, lr}
 8001846:	b089      	sub	sp, #36	; 0x24
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800184c:	2300      	movs	r3, #0
 800184e:	77fb      	strb	r3, [r7, #31]
	uint32_t tmp_cfgr;
	uint32_t tmp_adc_is_conversion_on_going_regular;
	uint32_t tmp_adc_is_conversion_on_going_injected;
	__IO uint32_t wait_loop_index = 0UL;
 8001850:	2300      	movs	r3, #0
 8001852:	60fb      	str	r3, [r7, #12]

	/* Check ADC handle */
	if (hadc == NULL) {
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d101      	bne.n	800185e <HAL_ADC_Init+0x1a>
		return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e130      	b.n	8001ac0 <HAL_ADC_Init+0x27c>
	assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
	assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
	assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
	assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

	if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE) {
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	691b      	ldr	r3, [r3, #16]
 8001862:	2b00      	cmp	r3, #0
	assert_param(
			!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

	/* Actions performed only if ADC is coming from state reset:                */
	/* - Initialization of ADC MSP                                              */
	if (hadc->State == HAL_ADC_STATE_RESET) {
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001868:	2b00      	cmp	r3, #0
 800186a:	d109      	bne.n	8001880 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
		/* Init the low level hardware */
		HAL_ADC_MspInit(hadc);
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f7ff fa61 	bl	8000d34 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

		/* Set ADC error code to none */
		ADC_CLEAR_ERRORCODE(hadc);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2200      	movs	r2, #0
 8001876:	659a      	str	r2, [r3, #88]	; 0x58

		/* Initialize Lock */
		hadc->Lock = HAL_UNLOCKED;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2200      	movs	r2, #0
 800187c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	}

	/* - Exit from deep-power-down mode and ADC voltage regulator enable        */
	if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL) {
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff ff19 	bl	80016bc <LL_ADC_IsDeepPowerDownEnabled>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d004      	beq.n	800189a <HAL_ADC_Init+0x56>
		/* Disable ADC deep power down mode */
		LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff feff 	bl	8001698 <LL_ADC_DisableDeepPowerDown>
		/* System was in deep power down mode, calibration must
		 be relaunched or a previously saved calibration factor
		 re-applied once the ADC voltage regulator is enabled */
	}

	if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL) {
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4618      	mov	r0, r3
 80018a0:	f7ff ff34 	bl	800170c <LL_ADC_IsInternalRegulatorEnabled>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d115      	bne.n	80018d6 <HAL_ADC_Init+0x92>
		/* Enable ADC internal voltage regulator */
		LL_ADC_EnableInternalRegulator(hadc->Instance);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff ff18 	bl	80016e4 <LL_ADC_EnableInternalRegulator>

		/* Note: Variable divided by 2 to compensate partially              */
		/*       CPU processing cycles, scaling in us split to not          */
		/*       exceed 32 bits register capacity and handle low frequency. */
		wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)
				* ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80018b4:	4b84      	ldr	r3, [pc, #528]	; (8001ac8 <HAL_ADC_Init+0x284>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	099b      	lsrs	r3, r3, #6
 80018ba:	4a84      	ldr	r2, [pc, #528]	; (8001acc <HAL_ADC_Init+0x288>)
 80018bc:	fba2 2303 	umull	r2, r3, r2, r3
 80018c0:	099b      	lsrs	r3, r3, #6
 80018c2:	3301      	adds	r3, #1
 80018c4:	005b      	lsls	r3, r3, #1
		wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)
 80018c6:	60fb      	str	r3, [r7, #12]
		while (wait_loop_index != 0UL) {
 80018c8:	e002      	b.n	80018d0 <HAL_ADC_Init+0x8c>
			wait_loop_index--;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	3b01      	subs	r3, #1
 80018ce:	60fb      	str	r3, [r7, #12]
		while (wait_loop_index != 0UL) {
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d1f9      	bne.n	80018ca <HAL_ADC_Init+0x86>
	}

	/* Verification that ADC voltage regulator is correctly enabled, whether    */
	/* or not ADC is coming from state reset (if any potential problem of       */
	/* clocking, voltage regulator would not be enabled).                       */
	if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL) {
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4618      	mov	r0, r3
 80018dc:	f7ff ff16 	bl	800170c <LL_ADC_IsInternalRegulatorEnabled>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d10d      	bne.n	8001902 <HAL_ADC_Init+0xbe>
		/* Update ADC state machine to error */
		SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018ea:	f043 0210 	orr.w	r2, r3, #16
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	655a      	str	r2, [r3, #84]	; 0x54

		/* Set ADC error code to ADC peripheral internal error */
		SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018f6:	f043 0201 	orr.w	r2, r3, #1
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	659a      	str	r2, [r3, #88]	; 0x58

		tmp_hal_status = HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	77fb      	strb	r3, [r7, #31]
	/* Configuration of ADC parameters if previous preliminary actions are      */
	/* correctly completed and if there is no conversion on going on regular    */
	/* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
	/* called to update a parameter on the fly).                                */
	tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(
			hadc->Instance);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
	tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(
 8001906:	4618      	mov	r0, r3
 8001908:	f7ff ff76 	bl	80017f8 <LL_ADC_REG_IsConversionOngoing>
 800190c:	6178      	str	r0, [r7, #20]

	if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001912:	f003 0310 	and.w	r3, r3, #16
 8001916:	2b00      	cmp	r3, #0
 8001918:	f040 80c9 	bne.w	8001aae <HAL_ADC_Init+0x26a>
			&& (tmp_adc_is_conversion_on_going_regular == 0UL)) {
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	2b00      	cmp	r3, #0
 8001920:	f040 80c5 	bne.w	8001aae <HAL_ADC_Init+0x26a>
		/* Set ADC state */
		ADC_STATE_CLR_SET(hadc->State,
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001928:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800192c:	f043 0202 	orr.w	r2, r3, #2
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	655a      	str	r2, [r3, #84]	; 0x54
		/* Configuration of common ADC parameters                                 */

		/* Parameters update conditioned to ADC state:                            */
		/* Parameters that can be updated only when ADC is disabled:              */
		/*  - clock configuration                                                 */
		if (LL_ADC_IsEnabled(hadc->Instance) == 0UL) {
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff ff23 	bl	8001784 <LL_ADC_IsEnabled>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d115      	bne.n	8001970 <HAL_ADC_Init+0x12c>
			if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(
 8001944:	4862      	ldr	r0, [pc, #392]	; (8001ad0 <HAL_ADC_Init+0x28c>)
 8001946:	f7ff ff1d 	bl	8001784 <LL_ADC_IsEnabled>
 800194a:	4604      	mov	r4, r0
 800194c:	4861      	ldr	r0, [pc, #388]	; (8001ad4 <HAL_ADC_Init+0x290>)
 800194e:	f7ff ff19 	bl	8001784 <LL_ADC_IsEnabled>
 8001952:	4603      	mov	r3, r0
 8001954:	431c      	orrs	r4, r3
 8001956:	4860      	ldr	r0, [pc, #384]	; (8001ad8 <HAL_ADC_Init+0x294>)
 8001958:	f7ff ff14 	bl	8001784 <LL_ADC_IsEnabled>
 800195c:	4603      	mov	r3, r0
 800195e:	4323      	orrs	r3, r4
 8001960:	2b00      	cmp	r3, #0
 8001962:	d105      	bne.n	8001970 <HAL_ADC_Init+0x12c>
				/*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
				/*     HAL_ADCEx_MultiModeConfigChannel() )                             */
				/*   - internal measurement paths: Vbat, temperature sensor, Vref       */
				/*     (set into HAL_ADC_ConfigChannel() or                             */
				/*     HAL_ADCEx_InjectedConfigChannel() )                              */
				LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	4619      	mov	r1, r3
 800196a:	485c      	ldr	r0, [pc, #368]	; (8001adc <HAL_ADC_Init+0x298>)
 800196c:	f7ff fd6e 	bl	800144c <LL_ADC_SetCommonClock>
		/*  - external trigger polarity                Init.ExternalTrigConvEdge  */
		/*  - continuous conversion mode               Init.ContinuousConvMode    */
		/*  - overrun                                  Init.Overrun               */
		/*  - discontinuous mode                       Init.DiscontinuousConvMode */
		/*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
		tmp_cfgr = (ADC_CFGR_CONTINUOUS(
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	7e5b      	ldrb	r3, [r3, #25]
 8001974:	035a      	lsls	r2, r3, #13
				(uint32_t )hadc->Init.ContinuousConvMode)
				| hadc->Init.Overrun | hadc->Init.DataAlign
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800197a:	431a      	orrs	r2, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	431a      	orrs	r2, r3
				| hadc->Init.Resolution
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	431a      	orrs	r2, r3
				| ADC_CFGR_REG_DISCONTINUOUS(
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800198e:	041b      	lsls	r3, r3, #16
		tmp_cfgr = (ADC_CFGR_CONTINUOUS(
 8001990:	4313      	orrs	r3, r2
 8001992:	61bb      	str	r3, [r7, #24]
						(uint32_t )hadc->Init.DiscontinuousConvMode));

		if (hadc->Init.DiscontinuousConvMode == ENABLE) {
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f893 3020 	ldrb.w	r3, [r3, #32]
 800199a:	2b01      	cmp	r3, #1
 800199c:	d106      	bne.n	80019ac <HAL_ADC_Init+0x168>
			tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a2:	3b01      	subs	r3, #1
 80019a4:	045b      	lsls	r3, r3, #17
 80019a6:	69ba      	ldr	r2, [r7, #24]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	61bb      	str	r3, [r7, #24]
		/* Enable external trigger if trigger selection is different of software  */
		/* start.                                                                 */
		/* Note: This configuration keeps the hardware feature of parameter       */
		/*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
		/*       software start.                                                  */
		if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START) {
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d009      	beq.n	80019c8 <HAL_ADC_Init+0x184>
			tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
					| hadc->Init.ExternalTrigConvEdge);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c0:	4313      	orrs	r3, r2
			tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80019c2:	69ba      	ldr	r2, [r7, #24]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	61bb      	str	r3, [r7, #24]
		}

		/* Update Configuration Register CFGR */
		MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	68da      	ldr	r2, [r3, #12]
 80019ce:	4b44      	ldr	r3, [pc, #272]	; (8001ae0 <HAL_ADC_Init+0x29c>)
 80019d0:	4013      	ands	r3, r2
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	6812      	ldr	r2, [r2, #0]
 80019d6:	69b9      	ldr	r1, [r7, #24]
 80019d8:	430b      	orrs	r3, r1
 80019da:	60d3      	str	r3, [r2, #12]
		/* conversion on going on regular and injected groups:                    */
		/*  - DMA continuous request          Init.DMAContinuousRequests          */
		/*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
		/*  - Oversampling parameters         Init.Oversampling                   */
		tmp_adc_is_conversion_on_going_injected =
				LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7ff ff1c 	bl	800181e <LL_ADC_INJ_IsConversionOngoing>
 80019e6:	6138      	str	r0, [r7, #16]
		if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d13d      	bne.n	8001a6a <HAL_ADC_Init+0x226>
				&& (tmp_adc_is_conversion_on_going_injected == 0UL)) {
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d13a      	bne.n	8001a6a <HAL_ADC_Init+0x226>
			tmp_cfgr = (ADC_CFGR_DFSDM(hadc)
					| ADC_CFGR_AUTOWAIT((uint32_t )hadc->Init.LowPowerAutoWait)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	7e1b      	ldrb	r3, [r3, #24]
 80019f8:	039a      	lsls	r2, r3, #14
					| ADC_CFGR_DMACONTREQ(
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a00:	005b      	lsls	r3, r3, #1
			tmp_cfgr = (ADC_CFGR_DFSDM(hadc)
 8001a02:	4313      	orrs	r3, r2
 8001a04:	61bb      	str	r3, [r7, #24]
							(uint32_t )hadc->Init.DMAContinuousRequests));

			MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a10:	f023 0302 	bic.w	r3, r3, #2
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	6812      	ldr	r2, [r2, #0]
 8001a18:	69b9      	ldr	r1, [r7, #24]
 8001a1a:	430b      	orrs	r3, r1
 8001a1c:	60d3      	str	r3, [r2, #12]

			if (hadc->Init.OversamplingMode == ENABLE) {
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d118      	bne.n	8001a5a <HAL_ADC_Init+0x216>
				/* Configuration of Oversampler:                                      */
				/*  - Oversampling Ratio                                              */
				/*  - Right bit shift                                                 */
				/*  - Triggered mode                                                  */
				/*  - Oversampling mode (continued/resumed)                           */
				MODIFY_REG(hadc->Instance->CFGR2,
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	691b      	ldr	r3, [r3, #16]
 8001a2e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001a32:	f023 0304 	bic.w	r3, r3, #4
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001a3e:	4311      	orrs	r1, r2
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001a44:	4311      	orrs	r1, r2
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001a4a:	430a      	orrs	r2, r1
 8001a4c:	431a      	orrs	r2, r3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f042 0201 	orr.w	r2, r2, #1
 8001a56:	611a      	str	r2, [r3, #16]
 8001a58:	e007      	b.n	8001a6a <HAL_ADC_Init+0x226>
						ADC_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS | ADC_CFGR2_ROVSM,
						ADC_CFGR2_ROVSE | hadc->Init.Oversampling.Ratio | hadc->Init.Oversampling.RightBitShift | hadc->Init.Oversampling.TriggeredMode | hadc->Init.Oversampling.OversamplingStopReset);
			} else {
				/* Disable ADC oversampling scope on ADC group regular */
				CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	691a      	ldr	r2, [r3, #16]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f022 0201 	bic.w	r2, r2, #1
 8001a68:	611a      	str	r2, [r3, #16]
		/*   Note: Scan mode is not present by hardware on this device, but       */
		/*   emulated by software for alignment over all STM32 devices.           */
		/* - if scan mode is enabled, regular channels sequence length is set to  */
		/*   parameter "NbrOfConversion".                                         */

		if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE) {
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	691b      	ldr	r3, [r3, #16]
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d10c      	bne.n	8001a8c <HAL_ADC_Init+0x248>
			/* Set number of ranks in regular group sequencer */
			MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L,
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a78:	f023 010f 	bic.w	r1, r3, #15
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	69db      	ldr	r3, [r3, #28]
 8001a80:	1e5a      	subs	r2, r3, #1
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	430a      	orrs	r2, r1
 8001a88:	631a      	str	r2, [r3, #48]	; 0x30
 8001a8a:	e007      	b.n	8001a9c <HAL_ADC_Init+0x258>
					(hadc->Init.NbrOfConversion - (uint8_t )1));
		} else {
			CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f022 020f 	bic.w	r2, r2, #15
 8001a9a:	631a      	str	r2, [r3, #48]	; 0x30
		}

		/* Initialize the ADC state */
		/* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
		ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aa0:	f023 0303 	bic.w	r3, r3, #3
 8001aa4:	f043 0201 	orr.w	r2, r3, #1
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	655a      	str	r2, [r3, #84]	; 0x54
 8001aac:	e007      	b.n	8001abe <HAL_ADC_Init+0x27a>
	} else {
		/* Update ADC state machine to error */
		SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ab2:	f043 0210 	orr.w	r2, r3, #16
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	655a      	str	r2, [r3, #84]	; 0x54

		tmp_hal_status = HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	77fb      	strb	r3, [r7, #31]
	}

	/* Return function status */
	return tmp_hal_status;
 8001abe:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3724      	adds	r7, #36	; 0x24
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd90      	pop	{r4, r7, pc}
 8001ac8:	2000000c 	.word	0x2000000c
 8001acc:	053e2d63 	.word	0x053e2d63
 8001ad0:	50040000 	.word	0x50040000
 8001ad4:	50040100 	.word	0x50040100
 8001ad8:	50040200 	.word	0x50040200
 8001adc:	50040300 	.word	0x50040300
 8001ae0:	fff0c007 	.word	0xfff0c007

08001ae4 <HAL_ADC_Start_DMA>:
 * @param pData Destination Buffer address.
 * @param Length Number of data to be transferred from ADC peripheral to memory
 * @retval HAL status.
 */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData,
		uint32_t Length) {
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b086      	sub	sp, #24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
	uint32_t tmp_multimode_config = LL_ADC_GetMultimode(
 8001af0:	4853      	ldr	r0, [pc, #332]	; (8001c40 <HAL_ADC_Start_DMA+0x15c>)
 8001af2:	f7ff fdc3 	bl	800167c <LL_ADC_GetMultimode>
 8001af6:	6138      	str	r0, [r7, #16]

	/* Check the parameters */
	assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

	/* Perform ADC enable and conversion start if no conversion is on going */
	if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL) {
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff fe7b 	bl	80017f8 <LL_ADC_REG_IsConversionOngoing>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	f040 8093 	bne.w	8001c30 <HAL_ADC_Start_DMA+0x14c>
		/* Process locked */
		__HAL_LOCK(hadc);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d101      	bne.n	8001b18 <HAL_ADC_Start_DMA+0x34>
 8001b14:	2302      	movs	r3, #2
 8001b16:	e08e      	b.n	8001c36 <HAL_ADC_Start_DMA+0x152>
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
		/* Ensure that multimode regular conversions are not enabled.   */
		/* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
		if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a47      	ldr	r2, [pc, #284]	; (8001c44 <HAL_ADC_Start_DMA+0x160>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d008      	beq.n	8001b3c <HAL_ADC_Start_DMA+0x58>
				|| (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d005      	beq.n	8001b3c <HAL_ADC_Start_DMA+0x58>
				|| (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	2b05      	cmp	r3, #5
 8001b34:	d002      	beq.n	8001b3c <HAL_ADC_Start_DMA+0x58>
				|| (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN))
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	2b09      	cmp	r3, #9
 8001b3a:	d172      	bne.n	8001c22 <HAL_ADC_Start_DMA+0x13e>
#endif /* ADC_MULTIMODE_SUPPORT */
				{
			/* Enable the ADC peripheral */
			tmp_hal_status = ADC_Enable(hadc);
 8001b3c:	68f8      	ldr	r0, [r7, #12]
 8001b3e:	f000 fc9d 	bl	800247c <ADC_Enable>
 8001b42:	4603      	mov	r3, r0
 8001b44:	75fb      	strb	r3, [r7, #23]

			/* Start conversion if ADC is effectively enabled */
			if (tmp_hal_status == HAL_OK) {
 8001b46:	7dfb      	ldrb	r3, [r7, #23]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d165      	bne.n	8001c18 <HAL_ADC_Start_DMA+0x134>
				/* Set ADC state                                                        */
				/* - Clear state bitfield related to regular group conversion results   */
				/* - Set state bitfield related to regular operation                    */
				ADC_STATE_CLR_SET(hadc->State,
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b50:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001b54:	f023 0301 	bic.w	r3, r3, #1
 8001b58:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
				/* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
				 - if ADC instance is master or if multimode feature is not available
				 - if multimode setting is disabled (ADC instance slave in independent mode) */
				if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance)
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a38      	ldr	r2, [pc, #224]	; (8001c48 <HAL_ADC_Start_DMA+0x164>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d002      	beq.n	8001b70 <HAL_ADC_Start_DMA+0x8c>
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	e000      	b.n	8001b72 <HAL_ADC_Start_DMA+0x8e>
 8001b70:	4b36      	ldr	r3, [pc, #216]	; (8001c4c <HAL_ADC_Start_DMA+0x168>)
						== hadc->Instance)
 8001b72:	68fa      	ldr	r2, [r7, #12]
 8001b74:	6812      	ldr	r2, [r2, #0]
				if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d002      	beq.n	8001b80 <HAL_ADC_Start_DMA+0x9c>
						|| (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)) {
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d105      	bne.n	8001b8c <HAL_ADC_Start_DMA+0xa8>
					CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b84:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	655a      	str	r2, [r3, #84]	; 0x54
				}
#endif /* ADC_MULTIMODE_SUPPORT */

				/* Check if a conversion is on going on ADC group injected */
				if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL) {
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d006      	beq.n	8001ba6 <HAL_ADC_Start_DMA+0xc2>
					/* Reset ADC error code fields related to regular conversions only */
					CLEAR_BIT(hadc->ErrorCode,
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b9c:	f023 0206 	bic.w	r2, r3, #6
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	659a      	str	r2, [r3, #88]	; 0x58
 8001ba4:	e002      	b.n	8001bac <HAL_ADC_Start_DMA+0xc8>
							(HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
				} else {
					/* Reset all ADC error code fields */
					ADC_CLEAR_ERRORCODE(hadc);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	659a      	str	r2, [r3, #88]	; 0x58
				}

				/* Set the DMA transfer complete callback */
				hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bb0:	4a27      	ldr	r2, [pc, #156]	; (8001c50 <HAL_ADC_Start_DMA+0x16c>)
 8001bb2:	62da      	str	r2, [r3, #44]	; 0x2c

				/* Set the DMA half transfer complete callback */
				hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bb8:	4a26      	ldr	r2, [pc, #152]	; (8001c54 <HAL_ADC_Start_DMA+0x170>)
 8001bba:	631a      	str	r2, [r3, #48]	; 0x30

				/* Set the DMA error callback */
				hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bc0:	4a25      	ldr	r2, [pc, #148]	; (8001c58 <HAL_ADC_Start_DMA+0x174>)
 8001bc2:	635a      	str	r2, [r3, #52]	; 0x34
				/* ADC start (in case of SW start):                                   */

				/* Clear regular group conversion flag and overrun flag               */
				/* (To ensure of no unknown state from potential previous ADC         */
				/* operations)                                                        */
				__HAL_ADC_CLEAR_FLAG(hadc,
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	221c      	movs	r2, #28
 8001bca:	601a      	str	r2, [r3, #0]
						(ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));

				/* Process unlocked */
				/* Unlock before starting ADC conversions: in case of potential         */
				/* interruption, to let the process to ADC IRQ Handler.                 */
				__HAL_UNLOCK(hadc);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				/* With DMA, overrun event is always considered as an error even if
				 hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
				 ADC_IT_OVR is enabled. */
				__HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	685a      	ldr	r2, [r3, #4]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f042 0210 	orr.w	r2, r2, #16
 8001be2:	605a      	str	r2, [r3, #4]

				/* Enable ADC DMA mode */
				SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	68da      	ldr	r2, [r3, #12]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f042 0201 	orr.w	r2, r2, #1
 8001bf2:	60da      	str	r2, [r3, #12]

				/* Start the DMA channel */
				tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle,
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
						(uint32_t) &hadc->Instance->DR, (uint32_t) pData,
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	3340      	adds	r3, #64	; 0x40
				tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle,
 8001bfe:	4619      	mov	r1, r3
 8001c00:	68ba      	ldr	r2, [r7, #8]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	f002 f846 	bl	8003c94 <HAL_DMA_Start_IT>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	75fb      	strb	r3, [r7, #23]
				/* Enable conversion of regular group.                                  */
				/* If software start has been selected, conversion starts immediately.  */
				/* If external trigger has been selected, conversion will start at next */
				/* trigger event.                                                       */
				/* Start ADC group regular conversion */
				LL_ADC_REG_StartConversion(hadc->Instance);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff fddd 	bl	80017d0 <LL_ADC_REG_StartConversion>
			if (tmp_hal_status == HAL_OK) {
 8001c16:	e00d      	b.n	8001c34 <HAL_ADC_Start_DMA+0x150>
			} else {
				/* Process unlocked */
				__HAL_UNLOCK(hadc);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			if (tmp_hal_status == HAL_OK) {
 8001c20:	e008      	b.n	8001c34 <HAL_ADC_Start_DMA+0x150>
			}

		}
#if defined(ADC_MULTIMODE_SUPPORT)
		else {
			tmp_hal_status = HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	75fb      	strb	r3, [r7, #23]
			/* Process unlocked */
			__HAL_UNLOCK(hadc);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001c2e:	e001      	b.n	8001c34 <HAL_ADC_Start_DMA+0x150>
		}
#endif /* ADC_MULTIMODE_SUPPORT */
	} else {
		tmp_hal_status = HAL_BUSY;
 8001c30:	2302      	movs	r3, #2
 8001c32:	75fb      	strb	r3, [r7, #23]
	}

	/* Return function status */
	return tmp_hal_status;
 8001c34:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3718      	adds	r7, #24
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	50040300 	.word	0x50040300
 8001c44:	50040200 	.word	0x50040200
 8001c48:	50040100 	.word	0x50040100
 8001c4c:	50040000 	.word	0x50040000
 8001c50:	08002647 	.word	0x08002647
 8001c54:	0800271f 	.word	0x0800271f
 8001c58:	0800273b 	.word	0x0800273b

08001c5c <HAL_ADC_ConvCpltCallback>:
/**
 * @brief  Conversion complete callback in non-blocking mode.
 * @param hadc ADC handle
 * @retval None
 */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
	UNUSED(hadc);

	/* NOTE : This function should not be modified. When the callback is needed,
	 function HAL_ADC_ConvCpltCallback must be implemented in the user file.
	 */
}
 8001c64:	bf00      	nop
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <HAL_ADC_ConvHalfCpltCallback>:
/**
 * @brief  Conversion DMA half-transfer callback in non-blocking mode.
 * @param hadc ADC handle
 * @retval None
 */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
	UNUSED(hadc);

	/* NOTE : This function should not be modified. When the callback is needed,
	 function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
	 */
}
 8001c78:	bf00      	nop
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <HAL_ADC_ErrorCallback>:
 *           "HAL_ADC_Start_DMA()"
 *           (this function is also clearing overrun flag)
 * @param hadc ADC handle
 * @retval None
 */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc) {
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
	UNUSED(hadc);

	/* NOTE : This function should not be modified. When the callback is needed,
	 function HAL_ADC_ErrorCallback must be implemented in the user file.
	 */
}
 8001c8c:	bf00      	nop
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <HAL_ADC_ConfigChannel>:
 * @param hadc ADC handle
 * @param pConfig Structure of ADC channel assigned to ADC group regular.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc,
		const ADC_ChannelConfTypeDef *pConfig) {
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b0b6      	sub	sp, #216	; 0xd8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
	uint32_t tmpOffsetShifted;
	uint32_t tmp_config_internal_channel;
	__IO uint32_t wait_loop_index = 0UL;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	60bb      	str	r3, [r7, #8]
	} else {
		assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
	}

	/* Process locked */
	__HAL_LOCK(hadc);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d101      	bne.n	8001cba <HAL_ADC_ConfigChannel+0x22>
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	e3c9      	b.n	800244e <HAL_ADC_ConfigChannel+0x7b6>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	/* Parameters update conditioned to ADC state:                              */
	/* Parameters that can be updated when ADC is disabled or enabled without   */
	/* conversion on going on regular group:                                    */
	/*  - Channel number                                                        */
	/*  - Channel rank                                                          */
	if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL) {
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7ff fd96 	bl	80017f8 <LL_ADC_REG_IsConversionOngoing>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	f040 83aa 	bne.w	8002428 <HAL_ADC_ConfigChannel+0x790>
#if !defined (USE_FULL_ASSERT)
		uint32_t config_rank = pConfig->Rank;
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
		/* Correspondence for compatibility with legacy definition of             */
		/* sequencer ranks in direct number format. This correspondence can       */
		/* be done only on ranks 1 to 5 due to literal values.                    */
		/* Note: Sequencer ranks in direct number format are no more used         */
		/*       and are detected by activating USE_FULL_ASSERT feature.          */
		if (pConfig->Rank <= 5U) {
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	2b05      	cmp	r3, #5
 8001ce2:	d824      	bhi.n	8001d2e <HAL_ADC_ConfigChannel+0x96>
			switch (pConfig->Rank) {
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	3b02      	subs	r3, #2
 8001cea:	2b03      	cmp	r3, #3
 8001cec:	d81b      	bhi.n	8001d26 <HAL_ADC_ConfigChannel+0x8e>
 8001cee:	a201      	add	r2, pc, #4	; (adr r2, 8001cf4 <HAL_ADC_ConfigChannel+0x5c>)
 8001cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cf4:	08001d05 	.word	0x08001d05
 8001cf8:	08001d0d 	.word	0x08001d0d
 8001cfc:	08001d15 	.word	0x08001d15
 8001d00:	08001d1d 	.word	0x08001d1d
			case 2U:
				config_rank = ADC_REGULAR_RANK_2;
 8001d04:	230c      	movs	r3, #12
 8001d06:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
				break;
 8001d0a:	e010      	b.n	8001d2e <HAL_ADC_ConfigChannel+0x96>
			case 3U:
				config_rank = ADC_REGULAR_RANK_3;
 8001d0c:	2312      	movs	r3, #18
 8001d0e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
				break;
 8001d12:	e00c      	b.n	8001d2e <HAL_ADC_ConfigChannel+0x96>
			case 4U:
				config_rank = ADC_REGULAR_RANK_4;
 8001d14:	2318      	movs	r3, #24
 8001d16:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
				break;
 8001d1a:	e008      	b.n	8001d2e <HAL_ADC_ConfigChannel+0x96>
			case 5U:
				config_rank = ADC_REGULAR_RANK_5;
 8001d1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
				break;
 8001d24:	e003      	b.n	8001d2e <HAL_ADC_ConfigChannel+0x96>
				/* case 1U */
			default:
				config_rank = ADC_REGULAR_RANK_1;
 8001d26:	2306      	movs	r3, #6
 8001d28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
				break;
 8001d2c:	bf00      	nop
			}
		}
		/* Set ADC group regular sequence: channel on the selected scan sequence rank */
		LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank,
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6818      	ldr	r0, [r3, #0]
				pConfig->Channel);
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
		LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank,
 8001d36:	461a      	mov	r2, r3
 8001d38:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8001d3c:	f7ff fc22 	bl	8001584 <LL_ADC_REG_SetSequencerRanks>
		/* Parameters that can be updated when ADC is disabled or enabled without   */
		/* conversion on going on regular group:                                    */
		/*  - Channel sampling time                                                 */
		/*  - Channel offset                                                        */
		tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(
				hadc->Instance);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
		tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7ff fd57 	bl	80017f8 <LL_ADC_REG_IsConversionOngoing>
 8001d4a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
		tmp_adc_is_conversion_on_going_injected =
				LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7ff fd63 	bl	800181e <LL_ADC_INJ_IsConversionOngoing>
 8001d58:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
		if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d5c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	f040 81a4 	bne.w	80020ae <HAL_ADC_ConfigChannel+0x416>
				&& (tmp_adc_is_conversion_on_going_injected == 0UL)) {
 8001d66:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	f040 819f 	bne.w	80020ae <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
			/* Set sampling time of the selected ADC channel */
			LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel,
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6818      	ldr	r0, [r3, #0]
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	6819      	ldr	r1, [r3, #0]
					pConfig->SamplingTime);
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	689b      	ldr	r3, [r3, #8]
			LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel,
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	f7ff fc2d 	bl	80015dc <LL_ADC_SetChannelSamplingTime>

			/* Configure the offset: offset enable/disable, channel, offset value */

			/* Shift the offset with respect to the selected ADC resolution. */
			/* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
			tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc,
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	695a      	ldr	r2, [r3, #20]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	08db      	lsrs	r3, r3, #3
 8001d8e:	f003 0303 	and.w	r3, r3, #3
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
					(uint32_t )pConfig->Offset);

			if (pConfig->OffsetNumber != ADC_OFFSET_NONE) {
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	691b      	ldr	r3, [r3, #16]
 8001da0:	2b04      	cmp	r3, #4
 8001da2:	d00a      	beq.n	8001dba <HAL_ADC_ConfigChannel+0x122>
				/* Set ADC selected offset number */
				LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber,
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6818      	ldr	r0, [r3, #0]
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	6919      	ldr	r1, [r3, #16]
						pConfig->Channel, tmpOffsetShifted);
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	681a      	ldr	r2, [r3, #0]
				LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber,
 8001db0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001db4:	f7ff fb7e 	bl	80014b4 <LL_ADC_SetOffset>
 8001db8:	e179      	b.n	80020ae <HAL_ADC_ConfigChannel+0x416>

			} else {
				/* Scan each offset register to check if the selected channel is targeted. */
				/* If this is the case, the corresponding offset number is disabled.       */
				if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	2100      	movs	r1, #0
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7ff fb9b 	bl	80014fc <LL_ADC_GetOffsetChannel>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d10a      	bne.n	8001de6 <HAL_ADC_ConfigChannel+0x14e>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7ff fb90 	bl	80014fc <LL_ADC_GetOffsetChannel>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	0e9b      	lsrs	r3, r3, #26
 8001de0:	f003 021f 	and.w	r2, r3, #31
 8001de4:	e01e      	b.n	8001e24 <HAL_ADC_ConfigChannel+0x18c>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2100      	movs	r1, #0
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7ff fb85 	bl	80014fc <LL_ADC_GetOffsetChannel>
 8001df2:	4603      	mov	r3, r0
 8001df4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001dfc:	fa93 f3a3 	rbit	r3, r3
 8001e00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
	return result;
 8001e04:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001e08:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	 optimisations using the logic "value was passed to __builtin_clz, so it
	 is non-zero".
	 ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
	 single CLZ instruction.
	 */
	if (value == 0U) {
 8001e0c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d101      	bne.n	8001e18 <HAL_ADC_ConfigChannel+0x180>
		return 32U;
 8001e14:	2320      	movs	r3, #32
 8001e16:	e004      	b.n	8001e22 <HAL_ADC_ConfigChannel+0x18a>
	}
	return __builtin_clz(value);
 8001e18:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001e1c:	fab3 f383 	clz	r3, r3
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	461a      	mov	r2, r3
						LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel)) {
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d105      	bne.n	8001e3c <HAL_ADC_ConfigChannel+0x1a4>
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	0e9b      	lsrs	r3, r3, #26
 8001e36:	f003 031f 	and.w	r3, r3, #31
 8001e3a:	e018      	b.n	8001e6e <HAL_ADC_ConfigChannel+0x1d6>
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001e48:	fa93 f3a3 	rbit	r3, r3
 8001e4c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	return result;
 8001e50:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001e54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	if (value == 0U) {
 8001e58:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d101      	bne.n	8001e64 <HAL_ADC_ConfigChannel+0x1cc>
		return 32U;
 8001e60:	2320      	movs	r3, #32
 8001e62:	e004      	b.n	8001e6e <HAL_ADC_ConfigChannel+0x1d6>
	return __builtin_clz(value);
 8001e64:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001e68:	fab3 f383 	clz	r3, r3
 8001e6c:	b2db      	uxtb	r3, r3
				if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d106      	bne.n	8001e80 <HAL_ADC_ConfigChannel+0x1e8>
					LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1,
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	2200      	movs	r2, #0
 8001e78:	2100      	movs	r1, #0
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7ff fb54 	bl	8001528 <LL_ADC_SetOffsetState>
							LL_ADC_OFFSET_DISABLE);
				}
				if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2101      	movs	r1, #1
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7ff fb38 	bl	80014fc <LL_ADC_GetOffsetChannel>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d10a      	bne.n	8001eac <HAL_ADC_ConfigChannel+0x214>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	2101      	movs	r1, #1
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7ff fb2d 	bl	80014fc <LL_ADC_GetOffsetChannel>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	0e9b      	lsrs	r3, r3, #26
 8001ea6:	f003 021f 	and.w	r2, r3, #31
 8001eaa:	e01e      	b.n	8001eea <HAL_ADC_ConfigChannel+0x252>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2101      	movs	r1, #1
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7ff fb22 	bl	80014fc <LL_ADC_GetOffsetChannel>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ebe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001ec2:	fa93 f3a3 	rbit	r3, r3
 8001ec6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	return result;
 8001eca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ece:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	if (value == 0U) {
 8001ed2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d101      	bne.n	8001ede <HAL_ADC_ConfigChannel+0x246>
		return 32U;
 8001eda:	2320      	movs	r3, #32
 8001edc:	e004      	b.n	8001ee8 <HAL_ADC_ConfigChannel+0x250>
	return __builtin_clz(value);
 8001ede:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001ee2:	fab3 f383 	clz	r3, r3
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	461a      	mov	r2, r3
						LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel)) {
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d105      	bne.n	8001f02 <HAL_ADC_ConfigChannel+0x26a>
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	0e9b      	lsrs	r3, r3, #26
 8001efc:	f003 031f 	and.w	r3, r3, #31
 8001f00:	e018      	b.n	8001f34 <HAL_ADC_ConfigChannel+0x29c>
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001f0e:	fa93 f3a3 	rbit	r3, r3
 8001f12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	return result;
 8001f16:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f1a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	if (value == 0U) {
 8001f1e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d101      	bne.n	8001f2a <HAL_ADC_ConfigChannel+0x292>
		return 32U;
 8001f26:	2320      	movs	r3, #32
 8001f28:	e004      	b.n	8001f34 <HAL_ADC_ConfigChannel+0x29c>
	return __builtin_clz(value);
 8001f2a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001f2e:	fab3 f383 	clz	r3, r3
 8001f32:	b2db      	uxtb	r3, r3
				if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d106      	bne.n	8001f46 <HAL_ADC_ConfigChannel+0x2ae>
					LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2,
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	2101      	movs	r1, #1
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7ff faf1 	bl	8001528 <LL_ADC_SetOffsetState>
							LL_ADC_OFFSET_DISABLE);
				}
				if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	2102      	movs	r1, #2
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7ff fad5 	bl	80014fc <LL_ADC_GetOffsetChannel>
 8001f52:	4603      	mov	r3, r0
 8001f54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d10a      	bne.n	8001f72 <HAL_ADC_ConfigChannel+0x2da>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	2102      	movs	r1, #2
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7ff faca 	bl	80014fc <LL_ADC_GetOffsetChannel>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	0e9b      	lsrs	r3, r3, #26
 8001f6c:	f003 021f 	and.w	r2, r3, #31
 8001f70:	e01e      	b.n	8001fb0 <HAL_ADC_ConfigChannel+0x318>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2102      	movs	r1, #2
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7ff fabf 	bl	80014fc <LL_ADC_GetOffsetChannel>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f84:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001f88:	fa93 f3a3 	rbit	r3, r3
 8001f8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	return result;
 8001f90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f94:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	if (value == 0U) {
 8001f98:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d101      	bne.n	8001fa4 <HAL_ADC_ConfigChannel+0x30c>
		return 32U;
 8001fa0:	2320      	movs	r3, #32
 8001fa2:	e004      	b.n	8001fae <HAL_ADC_ConfigChannel+0x316>
	return __builtin_clz(value);
 8001fa4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001fa8:	fab3 f383 	clz	r3, r3
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	461a      	mov	r2, r3
						LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel)) {
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d105      	bne.n	8001fc8 <HAL_ADC_ConfigChannel+0x330>
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	0e9b      	lsrs	r3, r3, #26
 8001fc2:	f003 031f 	and.w	r3, r3, #31
 8001fc6:	e014      	b.n	8001ff2 <HAL_ADC_ConfigChannel+0x35a>
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	67fb      	str	r3, [r7, #124]	; 0x7c
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001fd0:	fa93 f3a3 	rbit	r3, r3
 8001fd4:	67bb      	str	r3, [r7, #120]	; 0x78
	return result;
 8001fd6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001fd8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	if (value == 0U) {
 8001fdc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d101      	bne.n	8001fe8 <HAL_ADC_ConfigChannel+0x350>
		return 32U;
 8001fe4:	2320      	movs	r3, #32
 8001fe6:	e004      	b.n	8001ff2 <HAL_ADC_ConfigChannel+0x35a>
	return __builtin_clz(value);
 8001fe8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001fec:	fab3 f383 	clz	r3, r3
 8001ff0:	b2db      	uxtb	r3, r3
				if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d106      	bne.n	8002004 <HAL_ADC_ConfigChannel+0x36c>
					LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3,
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	2102      	movs	r1, #2
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7ff fa92 	bl	8001528 <LL_ADC_SetOffsetState>
							LL_ADC_OFFSET_DISABLE);
				}
				if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2103      	movs	r1, #3
 800200a:	4618      	mov	r0, r3
 800200c:	f7ff fa76 	bl	80014fc <LL_ADC_GetOffsetChannel>
 8002010:	4603      	mov	r3, r0
 8002012:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002016:	2b00      	cmp	r3, #0
 8002018:	d10a      	bne.n	8002030 <HAL_ADC_ConfigChannel+0x398>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	2103      	movs	r1, #3
 8002020:	4618      	mov	r0, r3
 8002022:	f7ff fa6b 	bl	80014fc <LL_ADC_GetOffsetChannel>
 8002026:	4603      	mov	r3, r0
 8002028:	0e9b      	lsrs	r3, r3, #26
 800202a:	f003 021f 	and.w	r2, r3, #31
 800202e:	e017      	b.n	8002060 <HAL_ADC_ConfigChannel+0x3c8>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2103      	movs	r1, #3
 8002036:	4618      	mov	r0, r3
 8002038:	f7ff fa60 	bl	80014fc <LL_ADC_GetOffsetChannel>
 800203c:	4603      	mov	r3, r0
 800203e:	673b      	str	r3, [r7, #112]	; 0x70
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002040:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002042:	fa93 f3a3 	rbit	r3, r3
 8002046:	66fb      	str	r3, [r7, #108]	; 0x6c
	return result;
 8002048:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800204a:	677b      	str	r3, [r7, #116]	; 0x74
	if (value == 0U) {
 800204c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800204e:	2b00      	cmp	r3, #0
 8002050:	d101      	bne.n	8002056 <HAL_ADC_ConfigChannel+0x3be>
		return 32U;
 8002052:	2320      	movs	r3, #32
 8002054:	e003      	b.n	800205e <HAL_ADC_ConfigChannel+0x3c6>
	return __builtin_clz(value);
 8002056:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002058:	fab3 f383 	clz	r3, r3
 800205c:	b2db      	uxtb	r3, r3
 800205e:	461a      	mov	r2, r3
						LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel)) {
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002068:	2b00      	cmp	r3, #0
 800206a:	d105      	bne.n	8002078 <HAL_ADC_ConfigChannel+0x3e0>
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	0e9b      	lsrs	r3, r3, #26
 8002072:	f003 031f 	and.w	r3, r3, #31
 8002076:	e011      	b.n	800209c <HAL_ADC_ConfigChannel+0x404>
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	667b      	str	r3, [r7, #100]	; 0x64
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002080:	fa93 f3a3 	rbit	r3, r3
 8002084:	663b      	str	r3, [r7, #96]	; 0x60
	return result;
 8002086:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002088:	66bb      	str	r3, [r7, #104]	; 0x68
	if (value == 0U) {
 800208a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800208c:	2b00      	cmp	r3, #0
 800208e:	d101      	bne.n	8002094 <HAL_ADC_ConfigChannel+0x3fc>
		return 32U;
 8002090:	2320      	movs	r3, #32
 8002092:	e003      	b.n	800209c <HAL_ADC_ConfigChannel+0x404>
	return __builtin_clz(value);
 8002094:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002096:	fab3 f383 	clz	r3, r3
 800209a:	b2db      	uxtb	r3, r3
				if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(
 800209c:	429a      	cmp	r2, r3
 800209e:	d106      	bne.n	80020ae <HAL_ADC_ConfigChannel+0x416>
					LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4,
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2200      	movs	r2, #0
 80020a6:	2103      	movs	r1, #3
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7ff fa3d 	bl	8001528 <LL_ADC_SetOffsetState>
		}

		/* Parameters update conditioned to ADC state:                              */
		/* Parameters that can be updated only when ADC is disabled:                */
		/*  - Single or differential mode                                           */
		if (LL_ADC_IsEnabled(hadc->Instance) == 0UL) {
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7ff fb66 	bl	8001784 <LL_ADC_IsEnabled>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	f040 8140 	bne.w	8002340 <HAL_ADC_ConfigChannel+0x6a8>
			/* Set mode single-ended or differential input of the selected ADC channel */
			LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel,
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6818      	ldr	r0, [r3, #0]
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	6819      	ldr	r1, [r3, #0]
					pConfig->SingleDiff);
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	68db      	ldr	r3, [r3, #12]
			LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel,
 80020cc:	461a      	mov	r2, r3
 80020ce:	f7ff fab1 	bl	8001634 <LL_ADC_SetChannelSingleDiff>

			/* Configuration of differential mode */
			if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED) {
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	4a8f      	ldr	r2, [pc, #572]	; (8002314 <HAL_ADC_ConfigChannel+0x67c>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	f040 8131 	bne.w	8002340 <HAL_ADC_ConfigChannel+0x6a8>
				/* Set sampling time of the selected ADC channel */
				/* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
				LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6818      	ldr	r0, [r3, #0]
						(uint32_t) (__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d10b      	bne.n	8002106 <HAL_ADC_ConfigChannel+0x46e>
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	0e9b      	lsrs	r3, r3, #26
 80020f4:	3301      	adds	r3, #1
 80020f6:	f003 031f 	and.w	r3, r3, #31
 80020fa:	2b09      	cmp	r3, #9
 80020fc:	bf94      	ite	ls
 80020fe:	2301      	movls	r3, #1
 8002100:	2300      	movhi	r3, #0
 8002102:	b2db      	uxtb	r3, r3
 8002104:	e019      	b.n	800213a <HAL_ADC_ConfigChannel+0x4a2>
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	65bb      	str	r3, [r7, #88]	; 0x58
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800210c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800210e:	fa93 f3a3 	rbit	r3, r3
 8002112:	657b      	str	r3, [r7, #84]	; 0x54
	return result;
 8002114:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002116:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (value == 0U) {
 8002118:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800211a:	2b00      	cmp	r3, #0
 800211c:	d101      	bne.n	8002122 <HAL_ADC_ConfigChannel+0x48a>
		return 32U;
 800211e:	2320      	movs	r3, #32
 8002120:	e003      	b.n	800212a <HAL_ADC_ConfigChannel+0x492>
	return __builtin_clz(value);
 8002122:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002124:	fab3 f383 	clz	r3, r3
 8002128:	b2db      	uxtb	r3, r3
 800212a:	3301      	adds	r3, #1
 800212c:	f003 031f 	and.w	r3, r3, #31
 8002130:	2b09      	cmp	r3, #9
 8002132:	bf94      	ite	ls
 8002134:	2301      	movls	r3, #1
 8002136:	2300      	movhi	r3, #0
 8002138:	b2db      	uxtb	r3, r3
				LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800213a:	2b00      	cmp	r3, #0
 800213c:	d079      	beq.n	8002232 <HAL_ADC_ConfigChannel+0x59a>
						(uint32_t) (__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002146:	2b00      	cmp	r3, #0
 8002148:	d107      	bne.n	800215a <HAL_ADC_ConfigChannel+0x4c2>
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	0e9b      	lsrs	r3, r3, #26
 8002150:	3301      	adds	r3, #1
 8002152:	069b      	lsls	r3, r3, #26
 8002154:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002158:	e015      	b.n	8002186 <HAL_ADC_ConfigChannel+0x4ee>
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	64fb      	str	r3, [r7, #76]	; 0x4c
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002160:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002162:	fa93 f3a3 	rbit	r3, r3
 8002166:	64bb      	str	r3, [r7, #72]	; 0x48
	return result;
 8002168:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800216a:	653b      	str	r3, [r7, #80]	; 0x50
	if (value == 0U) {
 800216c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800216e:	2b00      	cmp	r3, #0
 8002170:	d101      	bne.n	8002176 <HAL_ADC_ConfigChannel+0x4de>
		return 32U;
 8002172:	2320      	movs	r3, #32
 8002174:	e003      	b.n	800217e <HAL_ADC_ConfigChannel+0x4e6>
	return __builtin_clz(value);
 8002176:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002178:	fab3 f383 	clz	r3, r3
 800217c:	b2db      	uxtb	r3, r3
 800217e:	3301      	adds	r3, #1
 8002180:	069b      	lsls	r3, r3, #26
 8002182:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800218e:	2b00      	cmp	r3, #0
 8002190:	d109      	bne.n	80021a6 <HAL_ADC_ConfigChannel+0x50e>
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	0e9b      	lsrs	r3, r3, #26
 8002198:	3301      	adds	r3, #1
 800219a:	f003 031f 	and.w	r3, r3, #31
 800219e:	2101      	movs	r1, #1
 80021a0:	fa01 f303 	lsl.w	r3, r1, r3
 80021a4:	e017      	b.n	80021d6 <HAL_ADC_ConfigChannel+0x53e>
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	643b      	str	r3, [r7, #64]	; 0x40
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021ae:	fa93 f3a3 	rbit	r3, r3
 80021b2:	63fb      	str	r3, [r7, #60]	; 0x3c
	return result;
 80021b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021b6:	647b      	str	r3, [r7, #68]	; 0x44
	if (value == 0U) {
 80021b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d101      	bne.n	80021c2 <HAL_ADC_ConfigChannel+0x52a>
		return 32U;
 80021be:	2320      	movs	r3, #32
 80021c0:	e003      	b.n	80021ca <HAL_ADC_ConfigChannel+0x532>
	return __builtin_clz(value);
 80021c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021c4:	fab3 f383 	clz	r3, r3
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	3301      	adds	r3, #1
 80021cc:	f003 031f 	and.w	r3, r3, #31
 80021d0:	2101      	movs	r1, #1
 80021d2:	fa01 f303 	lsl.w	r3, r1, r3
 80021d6:	ea42 0103 	orr.w	r1, r2, r3
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d10a      	bne.n	80021fc <HAL_ADC_ConfigChannel+0x564>
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	0e9b      	lsrs	r3, r3, #26
 80021ec:	3301      	adds	r3, #1
 80021ee:	f003 021f 	and.w	r2, r3, #31
 80021f2:	4613      	mov	r3, r2
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	4413      	add	r3, r2
 80021f8:	051b      	lsls	r3, r3, #20
 80021fa:	e018      	b.n	800222e <HAL_ADC_ConfigChannel+0x596>
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	637b      	str	r3, [r7, #52]	; 0x34
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002204:	fa93 f3a3 	rbit	r3, r3
 8002208:	633b      	str	r3, [r7, #48]	; 0x30
	return result;
 800220a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800220c:	63bb      	str	r3, [r7, #56]	; 0x38
	if (value == 0U) {
 800220e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002210:	2b00      	cmp	r3, #0
 8002212:	d101      	bne.n	8002218 <HAL_ADC_ConfigChannel+0x580>
		return 32U;
 8002214:	2320      	movs	r3, #32
 8002216:	e003      	b.n	8002220 <HAL_ADC_ConfigChannel+0x588>
	return __builtin_clz(value);
 8002218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800221a:	fab3 f383 	clz	r3, r3
 800221e:	b2db      	uxtb	r3, r3
 8002220:	3301      	adds	r3, #1
 8002222:	f003 021f 	and.w	r2, r3, #31
 8002226:	4613      	mov	r3, r2
 8002228:	005b      	lsls	r3, r3, #1
 800222a:	4413      	add	r3, r2
 800222c:	051b      	lsls	r3, r3, #20
				LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800222e:	430b      	orrs	r3, r1
 8002230:	e081      	b.n	8002336 <HAL_ADC_ConfigChannel+0x69e>
						(uint32_t) (__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800223a:	2b00      	cmp	r3, #0
 800223c:	d107      	bne.n	800224e <HAL_ADC_ConfigChannel+0x5b6>
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	0e9b      	lsrs	r3, r3, #26
 8002244:	3301      	adds	r3, #1
 8002246:	069b      	lsls	r3, r3, #26
 8002248:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800224c:	e015      	b.n	800227a <HAL_ADC_ConfigChannel+0x5e2>
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	62bb      	str	r3, [r7, #40]	; 0x28
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002256:	fa93 f3a3 	rbit	r3, r3
 800225a:	627b      	str	r3, [r7, #36]	; 0x24
	return result;
 800225c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225e:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (value == 0U) {
 8002260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002262:	2b00      	cmp	r3, #0
 8002264:	d101      	bne.n	800226a <HAL_ADC_ConfigChannel+0x5d2>
		return 32U;
 8002266:	2320      	movs	r3, #32
 8002268:	e003      	b.n	8002272 <HAL_ADC_ConfigChannel+0x5da>
	return __builtin_clz(value);
 800226a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800226c:	fab3 f383 	clz	r3, r3
 8002270:	b2db      	uxtb	r3, r3
 8002272:	3301      	adds	r3, #1
 8002274:	069b      	lsls	r3, r3, #26
 8002276:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002282:	2b00      	cmp	r3, #0
 8002284:	d109      	bne.n	800229a <HAL_ADC_ConfigChannel+0x602>
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	0e9b      	lsrs	r3, r3, #26
 800228c:	3301      	adds	r3, #1
 800228e:	f003 031f 	and.w	r3, r3, #31
 8002292:	2101      	movs	r1, #1
 8002294:	fa01 f303 	lsl.w	r3, r1, r3
 8002298:	e017      	b.n	80022ca <HAL_ADC_ConfigChannel+0x632>
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	61fb      	str	r3, [r7, #28]
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	fa93 f3a3 	rbit	r3, r3
 80022a6:	61bb      	str	r3, [r7, #24]
	return result;
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	623b      	str	r3, [r7, #32]
	if (value == 0U) {
 80022ac:	6a3b      	ldr	r3, [r7, #32]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d101      	bne.n	80022b6 <HAL_ADC_ConfigChannel+0x61e>
		return 32U;
 80022b2:	2320      	movs	r3, #32
 80022b4:	e003      	b.n	80022be <HAL_ADC_ConfigChannel+0x626>
	return __builtin_clz(value);
 80022b6:	6a3b      	ldr	r3, [r7, #32]
 80022b8:	fab3 f383 	clz	r3, r3
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	3301      	adds	r3, #1
 80022c0:	f003 031f 	and.w	r3, r3, #31
 80022c4:	2101      	movs	r1, #1
 80022c6:	fa01 f303 	lsl.w	r3, r1, r3
 80022ca:	ea42 0103 	orr.w	r1, r2, r3
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d10d      	bne.n	80022f6 <HAL_ADC_ConfigChannel+0x65e>
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	0e9b      	lsrs	r3, r3, #26
 80022e0:	3301      	adds	r3, #1
 80022e2:	f003 021f 	and.w	r2, r3, #31
 80022e6:	4613      	mov	r3, r2
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	4413      	add	r3, r2
 80022ec:	3b1e      	subs	r3, #30
 80022ee:	051b      	lsls	r3, r3, #20
 80022f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80022f4:	e01e      	b.n	8002334 <HAL_ADC_ConfigChannel+0x69c>
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	613b      	str	r3, [r7, #16]
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	fa93 f3a3 	rbit	r3, r3
 8002302:	60fb      	str	r3, [r7, #12]
	return result;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	617b      	str	r3, [r7, #20]
	if (value == 0U) {
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d104      	bne.n	8002318 <HAL_ADC_ConfigChannel+0x680>
		return 32U;
 800230e:	2320      	movs	r3, #32
 8002310:	e006      	b.n	8002320 <HAL_ADC_ConfigChannel+0x688>
 8002312:	bf00      	nop
 8002314:	407f0000 	.word	0x407f0000
	return __builtin_clz(value);
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	fab3 f383 	clz	r3, r3
 800231e:	b2db      	uxtb	r3, r3
 8002320:	3301      	adds	r3, #1
 8002322:	f003 021f 	and.w	r2, r3, #31
 8002326:	4613      	mov	r3, r2
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	4413      	add	r3, r2
 800232c:	3b1e      	subs	r3, #30
 800232e:	051b      	lsls	r3, r3, #20
 8002330:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
				LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002334:	430b      	orrs	r3, r1
								(__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) + 1UL) & 0x1FUL)),
						pConfig->SamplingTime);
 8002336:	683a      	ldr	r2, [r7, #0]
 8002338:	6892      	ldr	r2, [r2, #8]
				LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800233a:	4619      	mov	r1, r3
 800233c:	f7ff f94e 	bl	80015dc <LL_ADC_SetChannelSamplingTime>
		/* If internal channel selected, enable dedicated internal buffers and    */
		/* paths.                                                                 */
		/* Note: these internal measurement paths can be disabled using           */
		/* HAL_ADC_DeInit().                                                      */

		if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel)) {
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	4b44      	ldr	r3, [pc, #272]	; (8002458 <HAL_ADC_ConfigChannel+0x7c0>)
 8002346:	4013      	ands	r3, r2
 8002348:	2b00      	cmp	r3, #0
 800234a:	d07a      	beq.n	8002442 <HAL_ADC_ConfigChannel+0x7aa>
			tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(
 800234c:	4843      	ldr	r0, [pc, #268]	; (800245c <HAL_ADC_ConfigChannel+0x7c4>)
 800234e:	f7ff f8a3 	bl	8001498 <LL_ADC_GetCommonPathInternalCh>
 8002352:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
					__LL_ADC_COMMON_INSTANCE(hadc->Instance));

			/* If the requested internal measurement path has already been enabled, */
			/* bypass the configuration processing.                                 */
			if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a41      	ldr	r2, [pc, #260]	; (8002460 <HAL_ADC_ConfigChannel+0x7c8>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d12c      	bne.n	80023ba <HAL_ADC_ConfigChannel+0x722>
					&& ((tmp_config_internal_channel
							& LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL)) {
 8002360:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002364:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
					&& ((tmp_config_internal_channel
 8002368:	2b00      	cmp	r3, #0
 800236a:	d126      	bne.n	80023ba <HAL_ADC_ConfigChannel+0x722>
				if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc)) {
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a3c      	ldr	r2, [pc, #240]	; (8002464 <HAL_ADC_ConfigChannel+0x7cc>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d004      	beq.n	8002380 <HAL_ADC_ConfigChannel+0x6e8>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a3b      	ldr	r2, [pc, #236]	; (8002468 <HAL_ADC_ConfigChannel+0x7d0>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d15d      	bne.n	800243c <HAL_ADC_ConfigChannel+0x7a4>
					LL_ADC_SetCommonPathInternalCh(
 8002380:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002384:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002388:	4619      	mov	r1, r3
 800238a:	4834      	ldr	r0, [pc, #208]	; (800245c <HAL_ADC_ConfigChannel+0x7c4>)
 800238c:	f7ff f871 	bl	8001472 <LL_ADC_SetCommonPathInternalCh>
					/* Wait loop initialization and execution */
					/* Note: Variable divided by 2 to compensate partially              */
					/*       CPU processing cycles, scaling in us split to not          */
					/*       exceed 32 bits register capacity and handle low frequency. */
					wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
							* ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002390:	4b36      	ldr	r3, [pc, #216]	; (800246c <HAL_ADC_ConfigChannel+0x7d4>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	099b      	lsrs	r3, r3, #6
 8002396:	4a36      	ldr	r2, [pc, #216]	; (8002470 <HAL_ADC_ConfigChannel+0x7d8>)
 8002398:	fba2 2303 	umull	r2, r3, r2, r3
 800239c:	099b      	lsrs	r3, r3, #6
 800239e:	1c5a      	adds	r2, r3, #1
 80023a0:	4613      	mov	r3, r2
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	4413      	add	r3, r2
 80023a6:	009b      	lsls	r3, r3, #2
					wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 80023a8:	60bb      	str	r3, [r7, #8]
					while (wait_loop_index != 0UL) {
 80023aa:	e002      	b.n	80023b2 <HAL_ADC_ConfigChannel+0x71a>
						wait_loop_index--;
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	3b01      	subs	r3, #1
 80023b0:	60bb      	str	r3, [r7, #8]
					while (wait_loop_index != 0UL) {
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d1f9      	bne.n	80023ac <HAL_ADC_ConfigChannel+0x714>
				if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc)) {
 80023b8:	e040      	b.n	800243c <HAL_ADC_ConfigChannel+0x7a4>
					}
				}
			} else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a2d      	ldr	r2, [pc, #180]	; (8002474 <HAL_ADC_ConfigChannel+0x7dc>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d118      	bne.n	80023f6 <HAL_ADC_ConfigChannel+0x75e>
					&& ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT)
 80023c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80023c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d112      	bne.n	80023f6 <HAL_ADC_ConfigChannel+0x75e>
							== 0UL)) {
				if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc)) {
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a23      	ldr	r2, [pc, #140]	; (8002464 <HAL_ADC_ConfigChannel+0x7cc>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d004      	beq.n	80023e4 <HAL_ADC_ConfigChannel+0x74c>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a22      	ldr	r2, [pc, #136]	; (8002468 <HAL_ADC_ConfigChannel+0x7d0>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d12d      	bne.n	8002440 <HAL_ADC_ConfigChannel+0x7a8>
					LL_ADC_SetCommonPathInternalCh(
 80023e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80023e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023ec:	4619      	mov	r1, r3
 80023ee:	481b      	ldr	r0, [pc, #108]	; (800245c <HAL_ADC_ConfigChannel+0x7c4>)
 80023f0:	f7ff f83f 	bl	8001472 <LL_ADC_SetCommonPathInternalCh>
				if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc)) {
 80023f4:	e024      	b.n	8002440 <HAL_ADC_ConfigChannel+0x7a8>
							__LL_ADC_COMMON_INSTANCE(hadc->Instance),
							LL_ADC_PATH_INTERNAL_VBAT
									| tmp_config_internal_channel);
				}
			} else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a1f      	ldr	r2, [pc, #124]	; (8002478 <HAL_ADC_ConfigChannel+0x7e0>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d120      	bne.n	8002442 <HAL_ADC_ConfigChannel+0x7aa>
					&& ((tmp_config_internal_channel
							& LL_ADC_PATH_INTERNAL_VREFINT) == 0UL)) {
 8002400:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002404:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
					&& ((tmp_config_internal_channel
 8002408:	2b00      	cmp	r3, #0
 800240a:	d11a      	bne.n	8002442 <HAL_ADC_ConfigChannel+0x7aa>
				if (ADC_VREFINT_INSTANCE(hadc)) {
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a14      	ldr	r2, [pc, #80]	; (8002464 <HAL_ADC_ConfigChannel+0x7cc>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d115      	bne.n	8002442 <HAL_ADC_ConfigChannel+0x7aa>
					LL_ADC_SetCommonPathInternalCh(
 8002416:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800241a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800241e:	4619      	mov	r1, r3
 8002420:	480e      	ldr	r0, [pc, #56]	; (800245c <HAL_ADC_ConfigChannel+0x7c4>)
 8002422:	f7ff f826 	bl	8001472 <LL_ADC_SetCommonPathInternalCh>
 8002426:	e00c      	b.n	8002442 <HAL_ADC_ConfigChannel+0x7aa>
	/* If a conversion is on going on regular group, no update on regular       */
	/* channel could be done on neither of the channel configuration structure  */
	/* parameters.                                                              */
	else {
		/* Update ADC state machine to error */
		SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800242c:	f043 0220 	orr.w	r2, r3, #32
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	655a      	str	r2, [r3, #84]	; 0x54

		tmp_hal_status = HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800243a:	e002      	b.n	8002442 <HAL_ADC_ConfigChannel+0x7aa>
				if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc)) {
 800243c:	bf00      	nop
 800243e:	e000      	b.n	8002442 <HAL_ADC_ConfigChannel+0x7aa>
				if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc)) {
 8002440:	bf00      	nop
	}

	/* Process unlocked */
	__HAL_UNLOCK(hadc);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	/* Return function status */
	return tmp_hal_status;
 800244a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800244e:	4618      	mov	r0, r3
 8002450:	37d8      	adds	r7, #216	; 0xd8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	80080000 	.word	0x80080000
 800245c:	50040300 	.word	0x50040300
 8002460:	c7520000 	.word	0xc7520000
 8002464:	50040000 	.word	0x50040000
 8002468:	50040200 	.word	0x50040200
 800246c:	2000000c 	.word	0x2000000c
 8002470:	053e2d63 	.word	0x053e2d63
 8002474:	cb840000 	.word	0xcb840000
 8002478:	80000001 	.word	0x80000001

0800247c <ADC_Enable>:
 * @note   Prerequisite condition to use this function: ADC must be disabled
 *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
 * @param hadc ADC handle
 * @retval HAL status.
 */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc) {
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
	uint32_t tickstart;
	__IO uint32_t wait_loop_index = 0UL;
 8002484:	2300      	movs	r3, #0
 8002486:	60bb      	str	r3, [r7, #8]

	/* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
	/* enabling phase not yet completed: flag ADC ready not yet set).           */
	/* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
	/* causes: ADC clock not running, ...).                                     */
	if (LL_ADC_IsEnabled(hadc->Instance) == 0UL) {
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4618      	mov	r0, r3
 800248e:	f7ff f979 	bl	8001784 <LL_ADC_IsEnabled>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d169      	bne.n	800256c <ADC_Enable+0xf0>
		/* Check if conditions to enable the ADC are fulfilled */
		if ((hadc->Instance->CR
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	689a      	ldr	r2, [r3, #8]
				& (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART
 800249e:	4b36      	ldr	r3, [pc, #216]	; (8002578 <ADC_Enable+0xfc>)
 80024a0:	4013      	ands	r3, r2
		if ((hadc->Instance->CR
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d00d      	beq.n	80024c2 <ADC_Enable+0x46>
						| ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN))
				!= 0UL) {
			/* Update ADC state machine to error */
			SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024aa:	f043 0210 	orr.w	r2, r3, #16
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	655a      	str	r2, [r3, #84]	; 0x54

			/* Set ADC error code to ADC peripheral internal error */
			SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024b6:	f043 0201 	orr.w	r2, r3, #1
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	659a      	str	r2, [r3, #88]	; 0x58

			return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e055      	b.n	800256e <ADC_Enable+0xf2>
		}

		/* Enable the ADC peripheral */
		LL_ADC_Enable(hadc->Instance);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7ff f934 	bl	8001734 <LL_ADC_Enable>

		if ((LL_ADC_GetCommonPathInternalCh(
 80024cc:	482b      	ldr	r0, [pc, #172]	; (800257c <ADC_Enable+0x100>)
 80024ce:	f7fe ffe3 	bl	8001498 <LL_ADC_GetCommonPathInternalCh>
 80024d2:	4603      	mov	r3, r0
				__LL_ADC_COMMON_INSTANCE(hadc->Instance))
				& LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL) {
 80024d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
		if ((LL_ADC_GetCommonPathInternalCh(
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d013      	beq.n	8002504 <ADC_Enable+0x88>
			/* Wait loop initialization and execution */
			/* Note: Variable divided by 2 to compensate partially              */
			/*       CPU processing cycles, scaling in us split to not          */
			/*       exceed 32 bits register capacity and handle low frequency. */
			wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
					* ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80024dc:	4b28      	ldr	r3, [pc, #160]	; (8002580 <ADC_Enable+0x104>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	099b      	lsrs	r3, r3, #6
 80024e2:	4a28      	ldr	r2, [pc, #160]	; (8002584 <ADC_Enable+0x108>)
 80024e4:	fba2 2303 	umull	r2, r3, r2, r3
 80024e8:	099b      	lsrs	r3, r3, #6
 80024ea:	1c5a      	adds	r2, r3, #1
 80024ec:	4613      	mov	r3, r2
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	4413      	add	r3, r2
 80024f2:	009b      	lsls	r3, r3, #2
			wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 80024f4:	60bb      	str	r3, [r7, #8]
			while (wait_loop_index != 0UL) {
 80024f6:	e002      	b.n	80024fe <ADC_Enable+0x82>
				wait_loop_index--;
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	3b01      	subs	r3, #1
 80024fc:	60bb      	str	r3, [r7, #8]
			while (wait_loop_index != 0UL) {
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d1f9      	bne.n	80024f8 <ADC_Enable+0x7c>
			}
		}

		/* Wait for ADC effectively enabled */
		tickstart = HAL_GetTick();
 8002504:	f7fe ff72 	bl	80013ec <HAL_GetTick>
 8002508:	60f8      	str	r0, [r7, #12]

		while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL) {
 800250a:	e028      	b.n	800255e <ADC_Enable+0xe2>
			 The workaround is to continue setting ADEN until ADRDY is becomes 1.
			 Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
			 4 ADC clock cycle duration */
			/* Note: Test of ADC enabled required due to hardware constraint to     */
			/*       not enable ADC if already enabled.                             */
			if (LL_ADC_IsEnabled(hadc->Instance) == 0UL) {
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4618      	mov	r0, r3
 8002512:	f7ff f937 	bl	8001784 <LL_ADC_IsEnabled>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d104      	bne.n	8002526 <ADC_Enable+0xaa>
				LL_ADC_Enable(hadc->Instance);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4618      	mov	r0, r3
 8002522:	f7ff f907 	bl	8001734 <LL_ADC_Enable>
			}

			if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT) {
 8002526:	f7fe ff61 	bl	80013ec <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	2b02      	cmp	r3, #2
 8002532:	d914      	bls.n	800255e <ADC_Enable+0xe2>
				/* New check to avoid false timeout detection in case of preemption */
				if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL) {
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0301 	and.w	r3, r3, #1
 800253e:	2b01      	cmp	r3, #1
 8002540:	d00d      	beq.n	800255e <ADC_Enable+0xe2>
					/* Update ADC state machine to error */
					SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002546:	f043 0210 	orr.w	r2, r3, #16
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	655a      	str	r2, [r3, #84]	; 0x54

					/* Set ADC error code to ADC peripheral internal error */
					SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002552:	f043 0201 	orr.w	r2, r3, #1
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	659a      	str	r2, [r3, #88]	; 0x58

					return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e007      	b.n	800256e <ADC_Enable+0xf2>
		while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL) {
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0301 	and.w	r3, r3, #1
 8002568:	2b01      	cmp	r3, #1
 800256a:	d1cf      	bne.n	800250c <ADC_Enable+0x90>
			}
		}
	}

	/* Return HAL status */
	return HAL_OK;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3710      	adds	r7, #16
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	8000003f 	.word	0x8000003f
 800257c:	50040300 	.word	0x50040300
 8002580:	2000000c 	.word	0x2000000c
 8002584:	053e2d63 	.word	0x053e2d63

08002588 <ADC_Disable>:
 * @note   Prerequisite condition to use this function: ADC conversions must be
 *         stopped.
 * @param hadc ADC handle
 * @retval HAL status.
 */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc) {
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
	uint32_t tickstart;
	const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(
			hadc->Instance);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
	const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(
 8002594:	4618      	mov	r0, r3
 8002596:	f7ff f908 	bl	80017aa <LL_ADC_IsDisableOngoing>
 800259a:	60f8      	str	r0, [r7, #12]

	/* Verification if ADC is not already disabled:                             */
	/* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
	/*       disabled.                                                          */
	if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7ff f8ef 	bl	8001784 <LL_ADC_IsEnabled>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d047      	beq.n	800263c <ADC_Disable+0xb4>
			&& (tmp_adc_is_disable_on_going == 0UL)) {
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d144      	bne.n	800263c <ADC_Disable+0xb4>
		/* Check if conditions to disable the ADC are fulfilled */
		if ((hadc->Instance->CR
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	689b      	ldr	r3, [r3, #8]
				& (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN))
 80025b8:	f003 030d 	and.w	r3, r3, #13
		if ((hadc->Instance->CR
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d10c      	bne.n	80025da <ADC_Disable+0x52>
				== ADC_CR_ADEN) {
			/* Disable the ADC peripheral */
			LL_ADC_Disable(hadc->Instance);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7ff f8c9 	bl	800175c <LL_ADC_Disable>
			__HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	2203      	movs	r2, #3
 80025d0:	601a      	str	r2, [r3, #0]
			return HAL_ERROR;
		}

		/* Wait for ADC effectively disabled */
		/* Get tick count */
		tickstart = HAL_GetTick();
 80025d2:	f7fe ff0b 	bl	80013ec <HAL_GetTick>
 80025d6:	60b8      	str	r0, [r7, #8]

		while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL) {
 80025d8:	e029      	b.n	800262e <ADC_Disable+0xa6>
			SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025de:	f043 0210 	orr.w	r2, r3, #16
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	655a      	str	r2, [r3, #84]	; 0x54
			SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ea:	f043 0201 	orr.w	r2, r3, #1
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	659a      	str	r2, [r3, #88]	; 0x58
			return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e023      	b.n	800263e <ADC_Disable+0xb6>
			if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT) {
 80025f6:	f7fe fef9 	bl	80013ec <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	2b02      	cmp	r3, #2
 8002602:	d914      	bls.n	800262e <ADC_Disable+0xa6>
				/* New check to avoid false timeout detection in case of preemption */
				if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL) {
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	2b00      	cmp	r3, #0
 8002610:	d00d      	beq.n	800262e <ADC_Disable+0xa6>
					/* Update ADC state machine to error */
					SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002616:	f043 0210 	orr.w	r2, r3, #16
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	655a      	str	r2, [r3, #84]	; 0x54

					/* Set ADC error code to ADC peripheral internal error */
					SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002622:	f043 0201 	orr.w	r2, r3, #1
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	659a      	str	r2, [r3, #88]	; 0x58

					return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e007      	b.n	800263e <ADC_Disable+0xb6>
		while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL) {
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f003 0301 	and.w	r3, r3, #1
 8002638:	2b00      	cmp	r3, #0
 800263a:	d1dc      	bne.n	80025f6 <ADC_Disable+0x6e>
			}
		}
	}

	/* Return HAL status */
	return HAL_OK;
 800263c:	2300      	movs	r3, #0
}
 800263e:	4618      	mov	r0, r3
 8002640:	3710      	adds	r7, #16
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}

08002646 <ADC_DMAConvCplt>:
/**
 * @brief  DMA transfer complete callback.
 * @param hdma pointer to DMA handle.
 * @retval None
 */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma) {
 8002646:	b580      	push	{r7, lr}
 8002648:	b084      	sub	sp, #16
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
	/* Retrieve ADC handle corresponding to current DMA handle */
	ADC_HandleTypeDef *hadc =
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002652:	60fb      	str	r3, [r7, #12]
			(ADC_HandleTypeDef*) ((DMA_HandleTypeDef*) hdma)->Parent;

	/* Update state machine on conversion status if not in error state */
	if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002658:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800265c:	2b00      	cmp	r3, #0
 800265e:	d14b      	bne.n	80026f8 <ADC_DMAConvCplt+0xb2>
			== 0UL) {
		/* Set ADC state */
		SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002664:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	655a      	str	r2, [r3, #84]	; 0x54

		/* Determine whether any further conversion upcoming on group regular     */
		/* by external trigger, continuous mode or scan sequence on going         */
		/* to disable interruption.                                               */
		/* Is it the end of the regular sequence ? */
		if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL) {
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0308 	and.w	r3, r3, #8
 8002676:	2b00      	cmp	r3, #0
 8002678:	d021      	beq.n	80026be <ADC_DMAConvCplt+0x78>
			/* Are conversions software-triggered ? */
			if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL) {
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4618      	mov	r0, r3
 8002680:	f7fe ff6d 	bl	800155e <LL_ADC_REG_IsTriggerSourceSWStart>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d032      	beq.n	80026f0 <ADC_DMAConvCplt+0xaa>
				/* Is CONT bit set ? */
				if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL) {
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d12b      	bne.n	80026f0 <ADC_DMAConvCplt+0xaa>
					/* CONT bit is not set, no more conversions expected */
					CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800269c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	655a      	str	r2, [r3, #84]	; 0x54
					if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL) {
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d11f      	bne.n	80026f0 <ADC_DMAConvCplt+0xaa>
						SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b4:	f043 0201 	orr.w	r2, r3, #1
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	655a      	str	r2, [r3, #84]	; 0x54
 80026bc:	e018      	b.n	80026f0 <ADC_DMAConvCplt+0xaa>
				}
			}
		} else {
			/* DMA End of Transfer interrupt was triggered but conversions sequence
			 is not over. If DMACFG is set to 0, conversions are stopped. */
			if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL) {
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	f003 0302 	and.w	r3, r3, #2
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d111      	bne.n	80026f0 <ADC_DMAConvCplt+0xaa>
				/* DMACFG bit is not set, conversions are stopped. */
				CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	655a      	str	r2, [r3, #84]	; 0x54
				if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL) {
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d105      	bne.n	80026f0 <ADC_DMAConvCplt+0xaa>
					SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026e8:	f043 0201 	orr.w	r2, r3, #1
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	655a      	str	r2, [r3, #84]	; 0x54

		/* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
		HAL_ADC_ConvCpltCallback(hadc);
 80026f0:	68f8      	ldr	r0, [r7, #12]
 80026f2:	f7ff fab3 	bl	8001c5c <HAL_ADC_ConvCpltCallback>
		} else {
			/* Call ADC DMA error callback */
			hadc->DMA_Handle->XferErrorCallback(hdma);
		}
	}
}
 80026f6:	e00e      	b.n	8002716 <ADC_DMAConvCplt+0xd0>
		if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL) {
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026fc:	f003 0310 	and.w	r3, r3, #16
 8002700:	2b00      	cmp	r3, #0
 8002702:	d003      	beq.n	800270c <ADC_DMAConvCplt+0xc6>
			HAL_ADC_ErrorCallback(hadc);
 8002704:	68f8      	ldr	r0, [r7, #12]
 8002706:	f7ff fabd 	bl	8001c84 <HAL_ADC_ErrorCallback>
}
 800270a:	e004      	b.n	8002716 <ADC_DMAConvCplt+0xd0>
			hadc->DMA_Handle->XferErrorCallback(hdma);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	4798      	blx	r3
}
 8002716:	bf00      	nop
 8002718:	3710      	adds	r7, #16
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <ADC_DMAHalfConvCplt>:
/**
 * @brief  DMA half transfer complete callback.
 * @param hdma pointer to DMA handle.
 * @retval None
 */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma) {
 800271e:	b580      	push	{r7, lr}
 8002720:	b084      	sub	sp, #16
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
	/* Retrieve ADC handle corresponding to current DMA handle */
	ADC_HandleTypeDef *hadc =
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800272a:	60fb      	str	r3, [r7, #12]

	/* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
	HAL_ADC_ConvHalfCpltCallback(hadc);
 800272c:	68f8      	ldr	r0, [r7, #12]
 800272e:	f7ff fa9f 	bl	8001c70 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002732:	bf00      	nop
 8002734:	3710      	adds	r7, #16
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}

0800273a <ADC_DMAError>:
/**
 * @brief  DMA error callback.
 * @param hdma pointer to DMA handle.
 * @retval None
 */
void ADC_DMAError(DMA_HandleTypeDef *hdma) {
 800273a:	b580      	push	{r7, lr}
 800273c:	b084      	sub	sp, #16
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
	/* Retrieve ADC handle corresponding to current DMA handle */
	ADC_HandleTypeDef *hadc =
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002746:	60fb      	str	r3, [r7, #12]
			(ADC_HandleTypeDef*) ((DMA_HandleTypeDef*) hdma)->Parent;

	/* Set ADC state */
	SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800274c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	655a      	str	r2, [r3, #84]	; 0x54

	/* Set ADC error code to DMA error */
	SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002758:	f043 0204 	orr.w	r2, r3, #4
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	659a      	str	r2, [r3, #88]	; 0x58

	/* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
	HAL_ADC_ErrorCallback(hadc);
 8002760:	68f8      	ldr	r0, [r7, #12]
 8002762:	f7ff fa8f 	bl	8001c84 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002766:	bf00      	nop
 8002768:	3710      	adds	r7, #16
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}

0800276e <LL_ADC_GetCalibrationFactor>:
			const ADC_TypeDef *ADCx, uint32_t SingleDiff) {
 800276e:	b480      	push	{r7}
 8002770:	b083      	sub	sp, #12
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
 8002776:	6039      	str	r1, [r7, #0]
		return (uint32_t) (READ_BIT(ADCx->CALFACT,
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	4013      	ands	r3, r2
 8002782:	f003 127f 	and.w	r2, r3, #8323199	; 0x7f007f
				>> ((SingleDiff & ADC_SINGLEDIFF_CALIB_F_BIT_D_MASK) >>
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	0b1b      	lsrs	r3, r3, #12
 800278a:	f003 0310 	and.w	r3, r3, #16
		return (uint32_t) (READ_BIT(ADCx->CALFACT,
 800278e:	fa22 f303 	lsr.w	r3, r2, r3
	}
 8002792:	4618      	mov	r0, r3
 8002794:	370c      	adds	r7, #12
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr

0800279e <LL_ADC_IsEnabled>:
	__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx) {
 800279e:	b480      	push	{r7}
 80027a0:	b083      	sub	sp, #12
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
		return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d101      	bne.n	80027b6 <LL_ADC_IsEnabled+0x18>
 80027b2:	2301      	movs	r3, #1
 80027b4:	e000      	b.n	80027b8 <LL_ADC_IsEnabled+0x1a>
 80027b6:	2300      	movs	r3, #0
	}
 80027b8:	4618      	mov	r0, r3
 80027ba:	370c      	adds	r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <LL_ADC_StartCalibration>:
			uint32_t SingleDiff) {
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]
		MODIFY_REG(ADCx->CR, ADC_CR_ADCALDIF | ADC_CR_BITS_PROPERTY_RS,
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80027d6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80027da:	683a      	ldr	r2, [r7, #0]
 80027dc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80027e0:	4313      	orrs	r3, r2
 80027e2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	609a      	str	r2, [r3, #8]
	}
 80027ea:	bf00      	nop
 80027ec:	370c      	adds	r7, #12
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr

080027f6 <LL_ADC_IsCalibrationOnGoing>:
			const ADC_TypeDef *ADCx) {
 80027f6:	b480      	push	{r7}
 80027f8:	b083      	sub	sp, #12
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
		return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002806:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800280a:	d101      	bne.n	8002810 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800280c:	2301      	movs	r3, #1
 800280e:	e000      	b.n	8002812 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002810:	2300      	movs	r3, #0
	}
 8002812:	4618      	mov	r0, r3
 8002814:	370c      	adds	r7, #12
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr

0800281e <LL_ADC_REG_IsConversionOngoing>:
			const ADC_TypeDef *ADCx) {
 800281e:	b480      	push	{r7}
 8002820:	b083      	sub	sp, #12
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
		return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ?
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	f003 0304 	and.w	r3, r3, #4
				1UL : 0UL);
 800282e:	2b04      	cmp	r3, #4
 8002830:	d101      	bne.n	8002836 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002832:	2301      	movs	r3, #1
 8002834:	e000      	b.n	8002838 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002836:	2300      	movs	r3, #0
	}
 8002838:	4618      	mov	r0, r3
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <HAL_ADCEx_Calibration_Start>:
 *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
 *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc,
		uint32_t SingleDiff) {
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef tmp_hal_status;
	__IO uint32_t wait_loop_index = 0UL;
 800284e:	2300      	movs	r3, #0
 8002850:	60bb      	str	r3, [r7, #8]
	/* Check the parameters */
	assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
	assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

	/* Process locked */
	__HAL_LOCK(hadc);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002858:	2b01      	cmp	r3, #1
 800285a:	d101      	bne.n	8002860 <HAL_ADCEx_Calibration_Start+0x1c>
 800285c:	2302      	movs	r3, #2
 800285e:	e04d      	b.n	80028fc <HAL_ADCEx_Calibration_Start+0xb8>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	/* Calibration prerequisite: ADC must be disabled. */

	/* Disable the ADC (if not already disabled) */
	tmp_hal_status = ADC_Disable(hadc);
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f7ff fe8d 	bl	8002588 <ADC_Disable>
 800286e:	4603      	mov	r3, r0
 8002870:	73fb      	strb	r3, [r7, #15]

	/* Check if ADC is effectively disabled */
	if (tmp_hal_status == HAL_OK) {
 8002872:	7bfb      	ldrb	r3, [r7, #15]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d136      	bne.n	80028e6 <HAL_ADCEx_Calibration_Start+0xa2>
		/* Set ADC state */
		ADC_STATE_CLR_SET(hadc->State,
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800287c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002880:	f023 0302 	bic.w	r3, r3, #2
 8002884:	f043 0202 	orr.w	r2, r3, #2
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	655a      	str	r2, [r3, #84]	; 0x54
				HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
				HAL_ADC_STATE_BUSY_INTERNAL);

		/* Start ADC calibration in mode single-ended or differential */
		LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	6839      	ldr	r1, [r7, #0]
 8002892:	4618      	mov	r0, r3
 8002894:	f7ff ff96 	bl	80027c4 <LL_ADC_StartCalibration>

		/* Wait for calibration completion */
		while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL) {
 8002898:	e014      	b.n	80028c4 <HAL_ADCEx_Calibration_Start+0x80>
			wait_loop_index++;
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	3301      	adds	r3, #1
 800289e:	60bb      	str	r3, [r7, #8]
			if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT) {
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 80028a6:	d30d      	bcc.n	80028c4 <HAL_ADCEx_Calibration_Start+0x80>
				/* Update ADC state machine to error */
				ADC_STATE_CLR_SET(hadc->State,
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ac:	f023 0312 	bic.w	r3, r3, #18
 80028b0:	f043 0210 	orr.w	r2, r3, #16
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	655a      	str	r2, [r3, #84]	; 0x54
						HAL_ADC_STATE_BUSY_INTERNAL,
						HAL_ADC_STATE_ERROR_INTERNAL);

				/* Process unlocked */
				__HAL_UNLOCK(hadc);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e01b      	b.n	80028fc <HAL_ADCEx_Calibration_Start+0xb8>
		while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL) {
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7ff ff94 	bl	80027f6 <LL_ADC_IsCalibrationOnGoing>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d1e2      	bne.n	800289a <HAL_ADCEx_Calibration_Start+0x56>
			}
		}

		/* Set ADC state */
		ADC_STATE_CLR_SET(hadc->State,
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028d8:	f023 0303 	bic.w	r3, r3, #3
 80028dc:	f043 0201 	orr.w	r2, r3, #1
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	655a      	str	r2, [r3, #84]	; 0x54
 80028e4:	e005      	b.n	80028f2 <HAL_ADCEx_Calibration_Start+0xae>
				HAL_ADC_STATE_BUSY_INTERNAL,
				HAL_ADC_STATE_READY);
	} else {
		SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ea:	f043 0210 	orr.w	r2, r3, #16
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	655a      	str	r2, [r3, #84]	; 0x54
		/* Note: No need to update variable "tmp_hal_status" here: already set    */
		/*       to state "HAL_ERROR" by function disabling the ADC.              */
	}

	/* Process unlocked */
	__HAL_UNLOCK(hadc);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	/* Return function status */
	return tmp_hal_status;
 80028fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3710      	adds	r7, #16
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}

08002904 <HAL_ADCEx_Calibration_GetValue>:
 *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
 *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
 * @retval Calibration value.
 */
uint32_t HAL_ADCEx_Calibration_GetValue(const ADC_HandleTypeDef *hadc,
		uint32_t SingleDiff) {
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
	/* Check the parameters */
	assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
	assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

	/* Return the selected ADC calibration value */
	return LL_ADC_GetCalibrationFactor(hadc->Instance, SingleDiff);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	6839      	ldr	r1, [r7, #0]
 8002914:	4618      	mov	r0, r3
 8002916:	f7ff ff2a 	bl	800276e <LL_ADC_GetCalibrationFactor>
 800291a:	4603      	mov	r3, r0
}
 800291c:	4618      	mov	r0, r3
 800291e:	3708      	adds	r7, #8
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}

08002924 <HAL_ADCEx_MultiModeConfigChannel>:
 * @param hadc Master ADC handle
 * @param pMultimode Structure of ADC multimode configuration
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc,
		const ADC_MultiModeTypeDef *pMultimode) {
 8002924:	b590      	push	{r4, r7, lr}
 8002926:	b09f      	sub	sp, #124	; 0x7c
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800292e:	2300      	movs	r3, #0
 8002930:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
		assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
	}

	/* Process locked */
	__HAL_LOCK(hadc);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800293a:	2b01      	cmp	r3, #1
 800293c:	d101      	bne.n	8002942 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800293e:	2302      	movs	r3, #2
 8002940:	e093      	b.n	8002a6a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2201      	movs	r2, #1
 8002946:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	/* Temporary handle minimum initialization */
	__HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800294a:	2300      	movs	r3, #0
 800294c:	65fb      	str	r3, [r7, #92]	; 0x5c
	ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800294e:	2300      	movs	r3, #0
 8002950:	663b      	str	r3, [r7, #96]	; 0x60

	ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a47      	ldr	r2, [pc, #284]	; (8002a74 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d102      	bne.n	8002962 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800295c:	4b46      	ldr	r3, [pc, #280]	; (8002a78 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800295e:	60bb      	str	r3, [r7, #8]
 8002960:	e001      	b.n	8002966 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002962:	2300      	movs	r3, #0
 8002964:	60bb      	str	r3, [r7, #8]

	if (tmp_hadc_slave.Instance == NULL) {
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d10b      	bne.n	8002984 <HAL_ADCEx_MultiModeConfigChannel+0x60>
		/* Update ADC state machine to error */
		SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002970:	f043 0220 	orr.w	r2, r3, #32
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	655a      	str	r2, [r3, #84]	; 0x54

		/* Process unlocked */
		__HAL_UNLOCK(hadc);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

		return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e072      	b.n	8002a6a <HAL_ADCEx_MultiModeConfigChannel+0x146>
	/* Parameters that can be updated when ADC is disabled or enabled without   */
	/* conversion on going on regular group:                                    */
	/*  - Multimode DMA configuration                                           */
	/*  - Multimode DMA mode                                                    */
	tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing(
			(&tmp_hadc_slave)->Instance);
 8002984:	68bb      	ldr	r3, [r7, #8]
	tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing(
 8002986:	4618      	mov	r0, r3
 8002988:	f7ff ff49 	bl	800281e <LL_ADC_REG_IsConversionOngoing>
 800298c:	6738      	str	r0, [r7, #112]	; 0x70
	if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4618      	mov	r0, r3
 8002994:	f7ff ff43 	bl	800281e <LL_ADC_REG_IsConversionOngoing>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d154      	bne.n	8002a48 <HAL_ADCEx_MultiModeConfigChannel+0x124>
			&& (tmp_hadc_slave_conversion_on_going == 0UL)) {
 800299e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d151      	bne.n	8002a48 <HAL_ADCEx_MultiModeConfigChannel+0x124>
		/* Pointer to the common control register */
		tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80029a4:	4b35      	ldr	r3, [pc, #212]	; (8002a7c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80029a6:	66fb      	str	r3, [r7, #108]	; 0x6c

		/* If multimode is selected, configure all multimode parameters.          */
		/* Otherwise, reset multimode parameters (can be used in case of          */
		/* transition from multimode to independent mode).                        */
		if (pMultimode->Mode != ADC_MODE_INDEPENDENT) {
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d02c      	beq.n	8002a0a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
			MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80029b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	6859      	ldr	r1, [r3, #4]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80029c2:	035b      	lsls	r3, r3, #13
 80029c4:	430b      	orrs	r3, r1
 80029c6:	431a      	orrs	r2, r3
 80029c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029ca:	609a      	str	r2, [r3, #8]
			/*      from 1 to 10 clock cycles for 10 bits,                              */
			/*      from 1 to 8 clock cycles for 8 bits                                 */
			/*      from 1 to 6 clock cycles for 6 bits                                 */
			/*    If a higher delay is selected, it will be clipped to maximum delay    */
			/*    range                                                                 */
			if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(
 80029cc:	4829      	ldr	r0, [pc, #164]	; (8002a74 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80029ce:	f7ff fee6 	bl	800279e <LL_ADC_IsEnabled>
 80029d2:	4604      	mov	r4, r0
 80029d4:	4828      	ldr	r0, [pc, #160]	; (8002a78 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80029d6:	f7ff fee2 	bl	800279e <LL_ADC_IsEnabled>
 80029da:	4603      	mov	r3, r0
 80029dc:	431c      	orrs	r4, r3
 80029de:	4828      	ldr	r0, [pc, #160]	; (8002a80 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80029e0:	f7ff fedd 	bl	800279e <LL_ADC_IsEnabled>
 80029e4:	4603      	mov	r3, r0
 80029e6:	4323      	orrs	r3, r4
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d137      	bne.n	8002a5c <HAL_ADCEx_MultiModeConfigChannel+0x138>
					__LL_ADC_COMMON_INSTANCE(hadc->Instance))
					== 0UL) {
				MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY,
 80029ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80029f4:	f023 030f 	bic.w	r3, r3, #15
 80029f8:	683a      	ldr	r2, [r7, #0]
 80029fa:	6811      	ldr	r1, [r2, #0]
 80029fc:	683a      	ldr	r2, [r7, #0]
 80029fe:	6892      	ldr	r2, [r2, #8]
 8002a00:	430a      	orrs	r2, r1
 8002a02:	431a      	orrs	r2, r3
 8002a04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a06:	609a      	str	r2, [r3, #8]
		if (pMultimode->Mode != ADC_MODE_INDEPENDENT) {
 8002a08:	e028      	b.n	8002a5c <HAL_ADCEx_MultiModeConfigChannel+0x138>
						pMultimode->Mode | pMultimode->TwoSamplingDelay);
			}
		} else /* ADC_MODE_INDEPENDENT */
		{
			CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002a0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a14:	609a      	str	r2, [r3, #8]

			/* Parameters that can be updated only when ADC is disabled:                */
			/*  - Multimode mode selection                                              */
			/*  - Multimode delay                                                       */
			if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(
 8002a16:	4817      	ldr	r0, [pc, #92]	; (8002a74 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002a18:	f7ff fec1 	bl	800279e <LL_ADC_IsEnabled>
 8002a1c:	4604      	mov	r4, r0
 8002a1e:	4816      	ldr	r0, [pc, #88]	; (8002a78 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002a20:	f7ff febd 	bl	800279e <LL_ADC_IsEnabled>
 8002a24:	4603      	mov	r3, r0
 8002a26:	431c      	orrs	r4, r3
 8002a28:	4815      	ldr	r0, [pc, #84]	; (8002a80 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002a2a:	f7ff feb8 	bl	800279e <LL_ADC_IsEnabled>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	4323      	orrs	r3, r4
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d112      	bne.n	8002a5c <HAL_ADCEx_MultiModeConfigChannel+0x138>
					__LL_ADC_COMMON_INSTANCE(hadc->Instance))
					== 0UL) {
				CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002a36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002a3e:	f023 030f 	bic.w	r3, r3, #15
 8002a42:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002a44:	6093      	str	r3, [r2, #8]
		if (pMultimode->Mode != ADC_MODE_INDEPENDENT) {
 8002a46:	e009      	b.n	8002a5c <HAL_ADCEx_MultiModeConfigChannel+0x138>
	}
	/* If one of the ADC sharing the same common group is enabled, no update    */
	/* could be done on neither of the multimode structure parameters.          */
	else {
		/* Update ADC state machine to error */
		SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a4c:	f043 0220 	orr.w	r2, r3, #32
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	655a      	str	r2, [r3, #84]	; 0x54

		tmp_hal_status = HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002a5a:	e000      	b.n	8002a5e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
		if (pMultimode->Mode != ADC_MODE_INDEPENDENT) {
 8002a5c:	bf00      	nop
	}

	/* Process unlocked */
	__HAL_UNLOCK(hadc);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	/* Return function status */
	return tmp_hal_status;
 8002a66:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	377c      	adds	r7, #124	; 0x7c
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd90      	pop	{r4, r7, pc}
 8002a72:	bf00      	nop
 8002a74:	50040000 	.word	0x50040000
 8002a78:	50040100 	.word	0x50040100
 8002a7c:	50040300 	.word	0x50040300
 8002a80:	50040200 	.word	0x50040200

08002a84 <HAL_CAN_Init>:
 *         parameters in the CAN_InitStruct.
 * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 *         the configuration information for the specified CAN.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan) {
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
	uint32_t tickstart;

	/* Check CAN handle */
	if (hcan == NULL) {
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d101      	bne.n	8002a96 <HAL_CAN_Init+0x12>
		return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e0ed      	b.n	8002c72 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
	if (hcan->State == HAL_CAN_STATE_RESET) {
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d102      	bne.n	8002aa8 <HAL_CAN_Init+0x24>
		/* Init the low level hardware: CLOCK, NVIC */
		HAL_CAN_MspInit(hcan);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f7fe f9de 	bl	8000e64 <HAL_CAN_MspInit>
	}
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

	/* Request initialisation */
	SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f042 0201 	orr.w	r2, r2, #1
 8002ab6:	601a      	str	r2, [r3, #0]

	/* Get tick */
	tickstart = HAL_GetTick();
 8002ab8:	f7fe fc98 	bl	80013ec <HAL_GetTick>
 8002abc:	60f8      	str	r0, [r7, #12]

	/* Wait initialisation acknowledge */
	while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U) {
 8002abe:	e012      	b.n	8002ae6 <HAL_CAN_Init+0x62>
		if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE) {
 8002ac0:	f7fe fc94 	bl	80013ec <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	2b0a      	cmp	r3, #10
 8002acc:	d90b      	bls.n	8002ae6 <HAL_CAN_Init+0x62>
			/* Update error code */
			hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	625a      	str	r2, [r3, #36]	; 0x24

			/* Change CAN state */
			hcan->State = HAL_CAN_STATE_ERROR;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2205      	movs	r2, #5
 8002ade:	f883 2020 	strb.w	r2, [r3, #32]

			return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e0c5      	b.n	8002c72 <HAL_CAN_Init+0x1ee>
	while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U) {
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f003 0301 	and.w	r3, r3, #1
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d0e5      	beq.n	8002ac0 <HAL_CAN_Init+0x3c>
		}
	}

	/* Exit from sleep mode */
	CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f022 0202 	bic.w	r2, r2, #2
 8002b02:	601a      	str	r2, [r3, #0]

	/* Get tick */
	tickstart = HAL_GetTick();
 8002b04:	f7fe fc72 	bl	80013ec <HAL_GetTick>
 8002b08:	60f8      	str	r0, [r7, #12]

	/* Check Sleep mode leave acknowledge */
	while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U) {
 8002b0a:	e012      	b.n	8002b32 <HAL_CAN_Init+0xae>
		if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE) {
 8002b0c:	f7fe fc6e 	bl	80013ec <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b0a      	cmp	r3, #10
 8002b18:	d90b      	bls.n	8002b32 <HAL_CAN_Init+0xae>
			/* Update error code */
			hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	625a      	str	r2, [r3, #36]	; 0x24

			/* Change CAN state */
			hcan->State = HAL_CAN_STATE_ERROR;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2205      	movs	r2, #5
 8002b2a:	f883 2020 	strb.w	r2, [r3, #32]

			return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e09f      	b.n	8002c72 <HAL_CAN_Init+0x1ee>
	while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U) {
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f003 0302 	and.w	r3, r3, #2
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d1e5      	bne.n	8002b0c <HAL_CAN_Init+0x88>
		}
	}

	/* Set the time triggered communication mode */
	if (hcan->Init.TimeTriggeredMode == ENABLE) {
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	7e1b      	ldrb	r3, [r3, #24]
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d108      	bne.n	8002b5a <HAL_CAN_Init+0xd6>
		SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b56:	601a      	str	r2, [r3, #0]
 8002b58:	e007      	b.n	8002b6a <HAL_CAN_Init+0xe6>
	} else {
		CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b68:	601a      	str	r2, [r3, #0]
	}

	/* Set the automatic bus-off management */
	if (hcan->Init.AutoBusOff == ENABLE) {
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	7e5b      	ldrb	r3, [r3, #25]
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d108      	bne.n	8002b84 <HAL_CAN_Init+0x100>
		SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b80:	601a      	str	r2, [r3, #0]
 8002b82:	e007      	b.n	8002b94 <HAL_CAN_Init+0x110>
	} else {
		CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b92:	601a      	str	r2, [r3, #0]
	}

	/* Set the automatic wake-up mode */
	if (hcan->Init.AutoWakeUp == ENABLE) {
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	7e9b      	ldrb	r3, [r3, #26]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d108      	bne.n	8002bae <HAL_CAN_Init+0x12a>
		SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f042 0220 	orr.w	r2, r2, #32
 8002baa:	601a      	str	r2, [r3, #0]
 8002bac:	e007      	b.n	8002bbe <HAL_CAN_Init+0x13a>
	} else {
		CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f022 0220 	bic.w	r2, r2, #32
 8002bbc:	601a      	str	r2, [r3, #0]
	}

	/* Set the automatic retransmission */
	if (hcan->Init.AutoRetransmission == ENABLE) {
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	7edb      	ldrb	r3, [r3, #27]
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d108      	bne.n	8002bd8 <HAL_CAN_Init+0x154>
		CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f022 0210 	bic.w	r2, r2, #16
 8002bd4:	601a      	str	r2, [r3, #0]
 8002bd6:	e007      	b.n	8002be8 <HAL_CAN_Init+0x164>
	} else {
		SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f042 0210 	orr.w	r2, r2, #16
 8002be6:	601a      	str	r2, [r3, #0]
	}

	/* Set the receive FIFO locked mode */
	if (hcan->Init.ReceiveFifoLocked == ENABLE) {
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	7f1b      	ldrb	r3, [r3, #28]
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d108      	bne.n	8002c02 <HAL_CAN_Init+0x17e>
		SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f042 0208 	orr.w	r2, r2, #8
 8002bfe:	601a      	str	r2, [r3, #0]
 8002c00:	e007      	b.n	8002c12 <HAL_CAN_Init+0x18e>
	} else {
		CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f022 0208 	bic.w	r2, r2, #8
 8002c10:	601a      	str	r2, [r3, #0]
	}

	/* Set the transmit FIFO priority */
	if (hcan->Init.TransmitFifoPriority == ENABLE) {
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	7f5b      	ldrb	r3, [r3, #29]
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d108      	bne.n	8002c2c <HAL_CAN_Init+0x1a8>
		SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f042 0204 	orr.w	r2, r2, #4
 8002c28:	601a      	str	r2, [r3, #0]
 8002c2a:	e007      	b.n	8002c3c <HAL_CAN_Init+0x1b8>
	} else {
		CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f022 0204 	bic.w	r2, r2, #4
 8002c3a:	601a      	str	r2, [r3, #0]
	}

	/* Set the bit timing register */
	WRITE_REG(hcan->Instance->BTR,
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	689a      	ldr	r2, [r3, #8]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	431a      	orrs	r2, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	431a      	orrs	r2, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	695b      	ldr	r3, [r3, #20]
 8002c50:	ea42 0103 	orr.w	r1, r2, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	1e5a      	subs	r2, r3, #1
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	430a      	orrs	r2, r1
 8002c60:	61da      	str	r2, [r3, #28]
			(uint32_t )(hcan->Init.Mode | hcan->Init.SyncJumpWidth
					| hcan->Init.TimeSeg1 | hcan->Init.TimeSeg2
					| (hcan->Init.Prescaler - 1U)));

	/* Initialize the error code */
	hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	625a      	str	r2, [r3, #36]	; 0x24

	/* Initialize the CAN state */
	hcan->State = HAL_CAN_STATE_READY;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 2020 	strb.w	r2, [r3, #32]

	/* Return function status */
	return HAL_OK;
 8002c70:	2300      	movs	r3, #0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3710      	adds	r7, #16
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}

08002c7a <HAL_CAN_ConfigFilter>:
 * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
 *         contains the filter configuration information.
 * @retval None
 */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan,
		const CAN_FilterTypeDef *sFilterConfig) {
 8002c7a:	b480      	push	{r7}
 8002c7c:	b087      	sub	sp, #28
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
 8002c82:	6039      	str	r1, [r7, #0]
	uint32_t filternbrbitpos;
	CAN_TypeDef *can_ip = hcan->Instance;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	617b      	str	r3, [r7, #20]
	HAL_CAN_StateTypeDef state = hcan->State;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c90:	74fb      	strb	r3, [r7, #19]

	if ((state == HAL_CAN_STATE_READY) || (state == HAL_CAN_STATE_LISTENING)) {
 8002c92:	7cfb      	ldrb	r3, [r7, #19]
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d003      	beq.n	8002ca0 <HAL_CAN_ConfigFilter+0x26>
 8002c98:	7cfb      	ldrb	r3, [r7, #19]
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	f040 80aa 	bne.w	8002df4 <HAL_CAN_ConfigFilter+0x17a>
		/* Check the parameters */
		assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

		/* Initialisation mode for the filter */
		SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002ca6:	f043 0201 	orr.w	r2, r3, #1
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
		/* Convert filter number into bit position */
		filternbrbitpos = (uint32_t) 1 << (sFilterConfig->FilterBank & 0x1FU);
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	695b      	ldr	r3, [r3, #20]
 8002cb4:	f003 031f 	and.w	r3, r3, #31
 8002cb8:	2201      	movs	r2, #1
 8002cba:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbe:	60fb      	str	r3, [r7, #12]

		/* Filter Deactivation */
		CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	43db      	mvns	r3, r3
 8002cca:	401a      	ands	r2, r3
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

		/* Filter Scale */
		if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT) {
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	69db      	ldr	r3, [r3, #28]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d123      	bne.n	8002d22 <HAL_CAN_ConfigFilter+0xa8>
			/* 16-bit scale for the filter */
			CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	43db      	mvns	r3, r3
 8002ce4:	401a      	ands	r2, r3
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

			/* First 16-bit identifier and First 16-bit mask */
			/* Or First 16-bit identifier and Second 16-bit identifier */
			can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
					((0x0000FFFFU & (uint32_t) sFilterConfig->FilterMaskIdLow)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	68db      	ldr	r3, [r3, #12]
							<< 16U)
 8002cf0:	0419      	lsls	r1, r3, #16
							| (0x0000FFFFU
									& (uint32_t) sFilterConfig->FilterIdLow);
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	b29b      	uxth	r3, r3
			can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002cf8:	683a      	ldr	r2, [r7, #0]
 8002cfa:	6952      	ldr	r2, [r2, #20]
							| (0x0000FFFFU
 8002cfc:	4319      	orrs	r1, r3
			can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	3248      	adds	r2, #72	; 0x48
 8002d02:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

			/* Second 16-bit identifier and Second 16-bit mask */
			/* Or Third 16-bit identifier and Fourth 16-bit identifier */
			can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
					((0x0000FFFFU & (uint32_t) sFilterConfig->FilterMaskIdHigh)
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	689b      	ldr	r3, [r3, #8]
							<< 16U)
 8002d0a:	0419      	lsls	r1, r3, #16
							| (0x0000FFFFU
									& (uint32_t) sFilterConfig->FilterIdHigh);
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	b29a      	uxth	r2, r3
			can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	695b      	ldr	r3, [r3, #20]
							| (0x0000FFFFU
 8002d16:	430a      	orrs	r2, r1
			can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002d18:	6979      	ldr	r1, [r7, #20]
 8002d1a:	3348      	adds	r3, #72	; 0x48
 8002d1c:	00db      	lsls	r3, r3, #3
 8002d1e:	440b      	add	r3, r1
 8002d20:	605a      	str	r2, [r3, #4]
		}

		if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT) {
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	69db      	ldr	r3, [r3, #28]
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d122      	bne.n	8002d70 <HAL_CAN_ConfigFilter+0xf6>
			/* 32-bit scale for the filter */
			SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	431a      	orrs	r2, r3
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

			/* 32-bit identifier or First 32-bit identifier */
			can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
					((0x0000FFFFU & (uint32_t) sFilterConfig->FilterIdHigh)
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
							<< 16U)
 8002d3e:	0419      	lsls	r1, r3, #16
							| (0x0000FFFFU
									& (uint32_t) sFilterConfig->FilterIdLow);
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	b29b      	uxth	r3, r3
			can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002d46:	683a      	ldr	r2, [r7, #0]
 8002d48:	6952      	ldr	r2, [r2, #20]
							| (0x0000FFFFU
 8002d4a:	4319      	orrs	r1, r3
			can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	3248      	adds	r2, #72	; 0x48
 8002d50:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

			/* 32-bit mask or Second 32-bit identifier */
			can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
					((0x0000FFFFU & (uint32_t) sFilterConfig->FilterMaskIdHigh)
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	689b      	ldr	r3, [r3, #8]
							<< 16U)
 8002d58:	0419      	lsls	r1, r3, #16
							| (0x0000FFFFU
									& (uint32_t) sFilterConfig->FilterMaskIdLow);
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	b29a      	uxth	r2, r3
			can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	695b      	ldr	r3, [r3, #20]
							| (0x0000FFFFU
 8002d64:	430a      	orrs	r2, r1
			can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002d66:	6979      	ldr	r1, [r7, #20]
 8002d68:	3348      	adds	r3, #72	; 0x48
 8002d6a:	00db      	lsls	r3, r3, #3
 8002d6c:	440b      	add	r3, r1
 8002d6e:	605a      	str	r2, [r3, #4]
		}

		/* Filter Mode */
		if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK) {
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	699b      	ldr	r3, [r3, #24]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d109      	bne.n	8002d8c <HAL_CAN_ConfigFilter+0x112>
			/* Id/Mask mode for the filter*/
			CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	43db      	mvns	r3, r3
 8002d82:	401a      	ands	r2, r3
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002d8a:	e007      	b.n	8002d9c <HAL_CAN_ConfigFilter+0x122>
		} else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
		{
			/* Identifier list mode for the filter*/
			SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	431a      	orrs	r2, r3
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		}

		/* Filter FIFO assignment */
		if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0) {
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	691b      	ldr	r3, [r3, #16]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d109      	bne.n	8002db8 <HAL_CAN_ConfigFilter+0x13e>
			/* FIFO 0 assignation for the filter */
			CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	43db      	mvns	r3, r3
 8002dae:	401a      	ands	r2, r3
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002db6:	e007      	b.n	8002dc8 <HAL_CAN_ConfigFilter+0x14e>
		} else {
			/* FIFO 1 assignation for the filter */
			SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	431a      	orrs	r2, r3
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
		}

		/* Filter activation */
		if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE) {
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	6a1b      	ldr	r3, [r3, #32]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d107      	bne.n	8002de0 <HAL_CAN_ConfigFilter+0x166>
			SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	431a      	orrs	r2, r3
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
		}

		/* Leave the initialisation mode for the filter */
		CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002de6:	f023 0201 	bic.w	r2, r3, #1
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

		/* Return function status */
		return HAL_OK;
 8002df0:	2300      	movs	r3, #0
 8002df2:	e006      	b.n	8002e02 <HAL_CAN_ConfigFilter+0x188>
	} else {
		/* Update error code */
		hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	625a      	str	r2, [r3, #36]	; 0x24

		return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
	}
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	371c      	adds	r7, #28
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr

08002e0e <HAL_CAN_IRQHandler>:
 * @brief  Handles CAN interrupt request
 * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 *         the configuration information for the specified CAN.
 * @retval None
 */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan) {
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	b08a      	sub	sp, #40	; 0x28
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
	uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002e16:	2300      	movs	r3, #0
 8002e18:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	695b      	ldr	r3, [r3, #20]
 8002e20:	623b      	str	r3, [r7, #32]
	uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	61fb      	str	r3, [r7, #28]
	uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	61bb      	str	r3, [r7, #24]
	uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	617b      	str	r3, [r7, #20]
	uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	691b      	ldr	r3, [r3, #16]
 8002e40:	613b      	str	r3, [r7, #16]
	uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	60fb      	str	r3, [r7, #12]

	/* Transmit Mailbox empty interrupt management *****************************/
	if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U) {
 8002e4a:	6a3b      	ldr	r3, [r7, #32]
 8002e4c:	f003 0301 	and.w	r3, r3, #1
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d07c      	beq.n	8002f4e <HAL_CAN_IRQHandler+0x140>
		/* Transmit Mailbox 0 management *****************************************/
		if ((tsrflags & CAN_TSR_RQCP0) != 0U) {
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	f003 0301 	and.w	r3, r3, #1
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d023      	beq.n	8002ea6 <HAL_CAN_IRQHandler+0x98>
			/* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
			__HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	2201      	movs	r2, #1
 8002e64:	609a      	str	r2, [r3, #8]

			if ((tsrflags & CAN_TSR_TXOK0) != 0U) {
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	f003 0302 	and.w	r3, r3, #2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d003      	beq.n	8002e78 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
				/* Call weak (surcharged) callback */
				HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f000 f983 	bl	800317c <HAL_CAN_TxMailbox0CompleteCallback>
 8002e76:	e016      	b.n	8002ea6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
			} else {
				if ((tsrflags & CAN_TSR_ALST0) != 0U) {
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	f003 0304 	and.w	r3, r3, #4
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d004      	beq.n	8002e8c <HAL_CAN_IRQHandler+0x7e>
					/* Update error code */
					errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e84:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002e88:	627b      	str	r3, [r7, #36]	; 0x24
 8002e8a:	e00c      	b.n	8002ea6 <HAL_CAN_IRQHandler+0x98>
				} else if ((tsrflags & CAN_TSR_TERR0) != 0U) {
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	f003 0308 	and.w	r3, r3, #8
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d004      	beq.n	8002ea0 <HAL_CAN_IRQHandler+0x92>
					/* Update error code */
					errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e98:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e9c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e9e:	e002      	b.n	8002ea6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
					/* Call weak (surcharged) callback */
					HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f000 f989 	bl	80031b8 <HAL_CAN_TxMailbox0AbortCallback>
				}
			}
		}

		/* Transmit Mailbox 1 management *****************************************/
		if ((tsrflags & CAN_TSR_RQCP1) != 0U) {
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d024      	beq.n	8002efa <HAL_CAN_IRQHandler+0xec>
			/* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
			__HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002eb8:	609a      	str	r2, [r3, #8]

			if ((tsrflags & CAN_TSR_TXOK1) != 0U) {
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d003      	beq.n	8002ecc <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
				/* Call weak (surcharged) callback */
				HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f000 f963 	bl	8003190 <HAL_CAN_TxMailbox1CompleteCallback>
 8002eca:	e016      	b.n	8002efa <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
			} else {
				if ((tsrflags & CAN_TSR_ALST1) != 0U) {
 8002ecc:	69bb      	ldr	r3, [r7, #24]
 8002ece:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d004      	beq.n	8002ee0 <HAL_CAN_IRQHandler+0xd2>
					/* Update error code */
					errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002edc:	627b      	str	r3, [r7, #36]	; 0x24
 8002ede:	e00c      	b.n	8002efa <HAL_CAN_IRQHandler+0xec>
				} else if ((tsrflags & CAN_TSR_TERR1) != 0U) {
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d004      	beq.n	8002ef4 <HAL_CAN_IRQHandler+0xe6>
					/* Update error code */
					errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ef0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ef2:	e002      	b.n	8002efa <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
					/* Call weak (surcharged) callback */
					HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f000 f969 	bl	80031cc <HAL_CAN_TxMailbox1AbortCallback>
				}
			}
		}

		/* Transmit Mailbox 2 management *****************************************/
		if ((tsrflags & CAN_TSR_RQCP2) != 0U) {
 8002efa:	69bb      	ldr	r3, [r7, #24]
 8002efc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d024      	beq.n	8002f4e <HAL_CAN_IRQHandler+0x140>
			/* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
			__HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002f0c:	609a      	str	r2, [r3, #8]

			if ((tsrflags & CAN_TSR_TXOK2) != 0U) {
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d003      	beq.n	8002f20 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
				/* Call weak (surcharged) callback */
				HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f000 f943 	bl	80031a4 <HAL_CAN_TxMailbox2CompleteCallback>
 8002f1e:	e016      	b.n	8002f4e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
			} else {
				if ((tsrflags & CAN_TSR_ALST2) != 0U) {
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d004      	beq.n	8002f34 <HAL_CAN_IRQHandler+0x126>
					/* Update error code */
					errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f30:	627b      	str	r3, [r7, #36]	; 0x24
 8002f32:	e00c      	b.n	8002f4e <HAL_CAN_IRQHandler+0x140>
				} else if ((tsrflags & CAN_TSR_TERR2) != 0U) {
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d004      	beq.n	8002f48 <HAL_CAN_IRQHandler+0x13a>
					/* Update error code */
					errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f44:	627b      	str	r3, [r7, #36]	; 0x24
 8002f46:	e002      	b.n	8002f4e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
					/* Call weak (surcharged) callback */
					HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f000 f949 	bl	80031e0 <HAL_CAN_TxMailbox2AbortCallback>
			}
		}
	}

	/* Receive FIFO 0 overrun interrupt management *****************************/
	if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U) {
 8002f4e:	6a3b      	ldr	r3, [r7, #32]
 8002f50:	f003 0308 	and.w	r3, r3, #8
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d00c      	beq.n	8002f72 <HAL_CAN_IRQHandler+0x164>
		if ((rf0rflags & CAN_RF0R_FOVR0) != 0U) {
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	f003 0310 	and.w	r3, r3, #16
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d007      	beq.n	8002f72 <HAL_CAN_IRQHandler+0x164>
			/* Set CAN error code to Rx Fifo 0 overrun error */
			errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f64:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f68:	627b      	str	r3, [r7, #36]	; 0x24

			/* Clear FIFO0 Overrun Flag */
			__HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2210      	movs	r2, #16
 8002f70:	60da      	str	r2, [r3, #12]
		}
	}

	/* Receive FIFO 0 full interrupt management ********************************/
	if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U) {
 8002f72:	6a3b      	ldr	r3, [r7, #32]
 8002f74:	f003 0304 	and.w	r3, r3, #4
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d00b      	beq.n	8002f94 <HAL_CAN_IRQHandler+0x186>
		if ((rf0rflags & CAN_RF0R_FULL0) != 0U) {
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	f003 0308 	and.w	r3, r3, #8
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d006      	beq.n	8002f94 <HAL_CAN_IRQHandler+0x186>
			/* Clear FIFO 0 full Flag */
			__HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2208      	movs	r2, #8
 8002f8c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
			/* Call weak (surcharged) callback */
			HAL_CAN_RxFifo0FullCallback(hcan);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f000 f93a 	bl	8003208 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
		}
	}

	/* Receive FIFO 0 message pending interrupt management *********************/
	if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U) {
 8002f94:	6a3b      	ldr	r3, [r7, #32]
 8002f96:	f003 0302 	and.w	r3, r3, #2
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d009      	beq.n	8002fb2 <HAL_CAN_IRQHandler+0x1a4>
		/* Check if message is still pending */
		if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U) {
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	f003 0303 	and.w	r3, r3, #3
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d002      	beq.n	8002fb2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
			/* Call weak (surcharged) callback */
			HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f000 f921 	bl	80031f4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
		}
	}

	/* Receive FIFO 1 overrun interrupt management *****************************/
	if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U) {
 8002fb2:	6a3b      	ldr	r3, [r7, #32]
 8002fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d00c      	beq.n	8002fd6 <HAL_CAN_IRQHandler+0x1c8>
		if ((rf1rflags & CAN_RF1R_FOVR1) != 0U) {
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	f003 0310 	and.w	r3, r3, #16
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d007      	beq.n	8002fd6 <HAL_CAN_IRQHandler+0x1c8>
			/* Set CAN error code to Rx Fifo 1 overrun error */
			errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002fcc:	627b      	str	r3, [r7, #36]	; 0x24

			/* Clear FIFO1 Overrun Flag */
			__HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	2210      	movs	r2, #16
 8002fd4:	611a      	str	r2, [r3, #16]
		}
	}

	/* Receive FIFO 1 full interrupt management ********************************/
	if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U) {
 8002fd6:	6a3b      	ldr	r3, [r7, #32]
 8002fd8:	f003 0320 	and.w	r3, r3, #32
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d00b      	beq.n	8002ff8 <HAL_CAN_IRQHandler+0x1ea>
		if ((rf1rflags & CAN_RF1R_FULL1) != 0U) {
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	f003 0308 	and.w	r3, r3, #8
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d006      	beq.n	8002ff8 <HAL_CAN_IRQHandler+0x1ea>
			/* Clear FIFO 1 full Flag */
			__HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2208      	movs	r2, #8
 8002ff0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
			/* Call weak (surcharged) callback */
			HAL_CAN_RxFifo1FullCallback(hcan);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f000 f91c 	bl	8003230 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
		}
	}

	/* Receive FIFO 1 message pending interrupt management *********************/
	if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U) {
 8002ff8:	6a3b      	ldr	r3, [r7, #32]
 8002ffa:	f003 0310 	and.w	r3, r3, #16
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d009      	beq.n	8003016 <HAL_CAN_IRQHandler+0x208>
		/* Check if message is still pending */
		if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U) {
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	691b      	ldr	r3, [r3, #16]
 8003008:	f003 0303 	and.w	r3, r3, #3
 800300c:	2b00      	cmp	r3, #0
 800300e:	d002      	beq.n	8003016 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
			/* Call weak (surcharged) callback */
			HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f000 f903 	bl	800321c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
		}
	}

	/* Sleep interrupt management *********************************************/
	if ((interrupts & CAN_IT_SLEEP_ACK) != 0U) {
 8003016:	6a3b      	ldr	r3, [r7, #32]
 8003018:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d00b      	beq.n	8003038 <HAL_CAN_IRQHandler+0x22a>
		if ((msrflags & CAN_MSR_SLAKI) != 0U) {
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	f003 0310 	and.w	r3, r3, #16
 8003026:	2b00      	cmp	r3, #0
 8003028:	d006      	beq.n	8003038 <HAL_CAN_IRQHandler+0x22a>
			/* Clear Sleep interrupt Flag */
			__HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2210      	movs	r2, #16
 8003030:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
			/* Call weak (surcharged) callback */
			HAL_CAN_SleepCallback(hcan);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f000 f906 	bl	8003244 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
		}
	}

	/* WakeUp interrupt management *********************************************/
	if ((interrupts & CAN_IT_WAKEUP) != 0U) {
 8003038:	6a3b      	ldr	r3, [r7, #32]
 800303a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d00b      	beq.n	800305a <HAL_CAN_IRQHandler+0x24c>
		if ((msrflags & CAN_MSR_WKUI) != 0U) {
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	f003 0308 	and.w	r3, r3, #8
 8003048:	2b00      	cmp	r3, #0
 800304a:	d006      	beq.n	800305a <HAL_CAN_IRQHandler+0x24c>
			/* Clear WakeUp Flag */
			__HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2208      	movs	r2, #8
 8003052:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
			/* Call weak (surcharged) callback */
			HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f000 f8ff 	bl	8003258 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
		}
	}

	/* Error interrupts management *********************************************/
	if ((interrupts & CAN_IT_ERROR) != 0U) {
 800305a:	6a3b      	ldr	r3, [r7, #32]
 800305c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003060:	2b00      	cmp	r3, #0
 8003062:	d07b      	beq.n	800315c <HAL_CAN_IRQHandler+0x34e>
		if ((msrflags & CAN_MSR_ERRI) != 0U) {
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	f003 0304 	and.w	r3, r3, #4
 800306a:	2b00      	cmp	r3, #0
 800306c:	d072      	beq.n	8003154 <HAL_CAN_IRQHandler+0x346>
			/* Check Error Warning Flag */
			if (((interrupts & CAN_IT_ERROR_WARNING) != 0U)
 800306e:	6a3b      	ldr	r3, [r7, #32]
 8003070:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003074:	2b00      	cmp	r3, #0
 8003076:	d008      	beq.n	800308a <HAL_CAN_IRQHandler+0x27c>
					&& ((esrflags & CAN_ESR_EWGF) != 0U)) {
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f003 0301 	and.w	r3, r3, #1
 800307e:	2b00      	cmp	r3, #0
 8003080:	d003      	beq.n	800308a <HAL_CAN_IRQHandler+0x27c>
				/* Set CAN error code to Error Warning */
				errorcode |= HAL_CAN_ERROR_EWG;
 8003082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003084:	f043 0301 	orr.w	r3, r3, #1
 8003088:	627b      	str	r3, [r7, #36]	; 0x24

				/* No need for clear of Error Warning Flag as read-only */
			}

			/* Check Error Passive Flag */
			if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U)
 800308a:	6a3b      	ldr	r3, [r7, #32]
 800308c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003090:	2b00      	cmp	r3, #0
 8003092:	d008      	beq.n	80030a6 <HAL_CAN_IRQHandler+0x298>
					&& ((esrflags & CAN_ESR_EPVF) != 0U)) {
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f003 0302 	and.w	r3, r3, #2
 800309a:	2b00      	cmp	r3, #0
 800309c:	d003      	beq.n	80030a6 <HAL_CAN_IRQHandler+0x298>
				/* Set CAN error code to Error Passive */
				errorcode |= HAL_CAN_ERROR_EPV;
 800309e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a0:	f043 0302 	orr.w	r3, r3, #2
 80030a4:	627b      	str	r3, [r7, #36]	; 0x24

				/* No need for clear of Error Passive Flag as read-only */
			}

			/* Check Bus-off Flag */
			if (((interrupts & CAN_IT_BUSOFF) != 0U)
 80030a6:	6a3b      	ldr	r3, [r7, #32]
 80030a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d008      	beq.n	80030c2 <HAL_CAN_IRQHandler+0x2b4>
					&& ((esrflags & CAN_ESR_BOFF) != 0U)) {
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f003 0304 	and.w	r3, r3, #4
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d003      	beq.n	80030c2 <HAL_CAN_IRQHandler+0x2b4>
				/* Set CAN error code to Bus-Off */
				errorcode |= HAL_CAN_ERROR_BOF;
 80030ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030bc:	f043 0304 	orr.w	r3, r3, #4
 80030c0:	627b      	str	r3, [r7, #36]	; 0x24

				/* No need for clear of Error Bus-Off as read-only */
			}

			/* Check Last Error Code Flag */
			if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U)
 80030c2:	6a3b      	ldr	r3, [r7, #32]
 80030c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d043      	beq.n	8003154 <HAL_CAN_IRQHandler+0x346>
					&& ((esrflags & CAN_ESR_LEC) != 0U)) {
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d03e      	beq.n	8003154 <HAL_CAN_IRQHandler+0x346>
				switch (esrflags & CAN_ESR_LEC) {
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80030dc:	2b60      	cmp	r3, #96	; 0x60
 80030de:	d02b      	beq.n	8003138 <HAL_CAN_IRQHandler+0x32a>
 80030e0:	2b60      	cmp	r3, #96	; 0x60
 80030e2:	d82e      	bhi.n	8003142 <HAL_CAN_IRQHandler+0x334>
 80030e4:	2b50      	cmp	r3, #80	; 0x50
 80030e6:	d022      	beq.n	800312e <HAL_CAN_IRQHandler+0x320>
 80030e8:	2b50      	cmp	r3, #80	; 0x50
 80030ea:	d82a      	bhi.n	8003142 <HAL_CAN_IRQHandler+0x334>
 80030ec:	2b40      	cmp	r3, #64	; 0x40
 80030ee:	d019      	beq.n	8003124 <HAL_CAN_IRQHandler+0x316>
 80030f0:	2b40      	cmp	r3, #64	; 0x40
 80030f2:	d826      	bhi.n	8003142 <HAL_CAN_IRQHandler+0x334>
 80030f4:	2b30      	cmp	r3, #48	; 0x30
 80030f6:	d010      	beq.n	800311a <HAL_CAN_IRQHandler+0x30c>
 80030f8:	2b30      	cmp	r3, #48	; 0x30
 80030fa:	d822      	bhi.n	8003142 <HAL_CAN_IRQHandler+0x334>
 80030fc:	2b10      	cmp	r3, #16
 80030fe:	d002      	beq.n	8003106 <HAL_CAN_IRQHandler+0x2f8>
 8003100:	2b20      	cmp	r3, #32
 8003102:	d005      	beq.n	8003110 <HAL_CAN_IRQHandler+0x302>
				case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
					/* Set CAN error code to CRC error */
					errorcode |= HAL_CAN_ERROR_CRC;
					break;
				default:
					break;
 8003104:	e01d      	b.n	8003142 <HAL_CAN_IRQHandler+0x334>
					errorcode |= HAL_CAN_ERROR_STF;
 8003106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003108:	f043 0308 	orr.w	r3, r3, #8
 800310c:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800310e:	e019      	b.n	8003144 <HAL_CAN_IRQHandler+0x336>
					errorcode |= HAL_CAN_ERROR_FOR;
 8003110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003112:	f043 0310 	orr.w	r3, r3, #16
 8003116:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8003118:	e014      	b.n	8003144 <HAL_CAN_IRQHandler+0x336>
					errorcode |= HAL_CAN_ERROR_ACK;
 800311a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311c:	f043 0320 	orr.w	r3, r3, #32
 8003120:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8003122:	e00f      	b.n	8003144 <HAL_CAN_IRQHandler+0x336>
					errorcode |= HAL_CAN_ERROR_BR;
 8003124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003126:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800312a:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800312c:	e00a      	b.n	8003144 <HAL_CAN_IRQHandler+0x336>
					errorcode |= HAL_CAN_ERROR_BD;
 800312e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003130:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003134:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8003136:	e005      	b.n	8003144 <HAL_CAN_IRQHandler+0x336>
					errorcode |= HAL_CAN_ERROR_CRC;
 8003138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800313e:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8003140:	e000      	b.n	8003144 <HAL_CAN_IRQHandler+0x336>
					break;
 8003142:	bf00      	nop
				}

				/* Clear Last error code Flag */
				CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	699a      	ldr	r2, [r3, #24]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003152:	619a      	str	r2, [r3, #24]
			}
		}

		/* Clear ERRI Flag */
		__HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2204      	movs	r2, #4
 800315a:	605a      	str	r2, [r3, #4]
	}

	/* Call the Error call Back in case of Errors */
	if (errorcode != HAL_CAN_ERROR_NONE) {
 800315c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315e:	2b00      	cmp	r3, #0
 8003160:	d008      	beq.n	8003174 <HAL_CAN_IRQHandler+0x366>
		/* Update error code in handle */
		hcan->ErrorCode |= errorcode;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003168:	431a      	orrs	r2, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
		/* Call weak (surcharged) callback */
		HAL_CAN_ErrorCallback(hcan);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f000 f87c 	bl	800326c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
	}
}
 8003174:	bf00      	nop
 8003176:	3728      	adds	r7, #40	; 0x28
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <HAL_CAN_TxMailbox0CompleteCallback>:
 * @brief  Transmission Mailbox 0 complete callback.
 * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 *         the configuration information for the specified CAN.
 * @retval None
 */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan) {
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]

	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
	 user file
	 */
}
 8003184:	bf00      	nop
 8003186:	370c      	adds	r7, #12
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr

08003190 <HAL_CAN_TxMailbox1CompleteCallback>:
 * @brief  Transmission Mailbox 1 complete callback.
 * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 *         the configuration information for the specified CAN.
 * @retval None
 */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan) {
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]

	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
	 user file
	 */
}
 8003198:	bf00      	nop
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr

080031a4 <HAL_CAN_TxMailbox2CompleteCallback>:
 * @brief  Transmission Mailbox 2 complete callback.
 * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 *         the configuration information for the specified CAN.
 * @retval None
 */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan) {
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]

	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
	 user file
	 */
}
 80031ac:	bf00      	nop
 80031ae:	370c      	adds	r7, #12
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <HAL_CAN_TxMailbox0AbortCallback>:
 * @brief  Transmission Mailbox 0 Cancellation callback.
 * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
 *         the configuration information for the specified CAN.
 * @retval None
 */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan) {
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]

	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
	 user file
	 */
}
 80031c0:	bf00      	nop
 80031c2:	370c      	adds	r7, #12
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr

080031cc <HAL_CAN_TxMailbox1AbortCallback>:
 * @brief  Transmission Mailbox 1 Cancellation callback.
 * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
 *         the configuration information for the specified CAN.
 * @retval None
 */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan) {
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]

	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
	 user file
	 */
}
 80031d4:	bf00      	nop
 80031d6:	370c      	adds	r7, #12
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr

080031e0 <HAL_CAN_TxMailbox2AbortCallback>:
 * @brief  Transmission Mailbox 2 Cancellation callback.
 * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
 *         the configuration information for the specified CAN.
 * @retval None
 */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan) {
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]

	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
	 user file
	 */
}
 80031e8:	bf00      	nop
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <HAL_CAN_RxFifo0MsgPendingCallback>:
 * @brief  Rx FIFO 0 message pending callback.
 * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 *         the configuration information for the specified CAN.
 * @retval None
 */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]

	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
	 user file
	 */
}
 80031fc:	bf00      	nop
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <HAL_CAN_RxFifo0FullCallback>:
 * @brief  Rx FIFO 0 full callback.
 * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 *         the configuration information for the specified CAN.
 * @retval None
 */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan) {
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]

	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_CAN_RxFifo0FullCallback could be implemented in the user
	 file
	 */
}
 8003210:	bf00      	nop
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <HAL_CAN_RxFifo1MsgPendingCallback>:
 * @brief  Rx FIFO 1 message pending callback.
 * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 *         the configuration information for the specified CAN.
 * @retval None
 */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]

	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
	 user file
	 */
}
 8003224:	bf00      	nop
 8003226:	370c      	adds	r7, #12
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr

08003230 <HAL_CAN_RxFifo1FullCallback>:
 * @brief  Rx FIFO 1 full callback.
 * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 *         the configuration information for the specified CAN.
 * @retval None
 */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan) {
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]

	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_CAN_RxFifo1FullCallback could be implemented in the user
	 file
	 */
}
 8003238:	bf00      	nop
 800323a:	370c      	adds	r7, #12
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr

08003244 <HAL_CAN_SleepCallback>:
 * @brief  Sleep callback.
 * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 *         the configuration information for the specified CAN.
 * @retval None
 */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan) {
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
	UNUSED(hcan);

	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_CAN_SleepCallback could be implemented in the user file
	 */
}
 800324c:	bf00      	nop
 800324e:	370c      	adds	r7, #12
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr

08003258 <HAL_CAN_WakeUpFromRxMsgCallback>:
 * @brief  WakeUp from Rx message callback.
 * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 *         the configuration information for the specified CAN.
 * @retval None
 */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan) {
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]

	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
	 user file
	 */
}
 8003260:	bf00      	nop
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <HAL_CAN_ErrorCallback>:
 * @brief  Error CAN callback.
 * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 *         the configuration information for the specified CAN.
 * @retval None
 */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan) {
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
	UNUSED(hcan);

	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_CAN_ErrorCallback could be implemented in the user file
	 */
}
 8003274:	bf00      	nop
 8003276:	370c      	adds	r7, #12
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <__NVIC_SetPriorityGrouping>:
	 Only values from 0..7 are used.
	 In case of a conflict between priority grouping and available
	 priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
	 \param [in]      PriorityGroup  Priority grouping field.
	 */
	__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup) {
 8003280:	b480      	push	{r7}
 8003282:	b085      	sub	sp, #20
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
		uint32_t reg_value;
		uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t) 0x07UL); /* only values 0..7 are used          */
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f003 0307 	and.w	r3, r3, #7
 800328e:	60fb      	str	r3, [r7, #12]

		reg_value = SCB->AIRCR; /* read old register configuration    */
 8003290:	4b0c      	ldr	r3, [pc, #48]	; (80032c4 <__NVIC_SetPriorityGrouping+0x44>)
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	60bb      	str	r3, [r7, #8]
		reg_value &= ~((uint32_t) (SCB_AIRCR_VECTKEY_Msk
 8003296:	68ba      	ldr	r2, [r7, #8]
 8003298:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800329c:	4013      	ands	r3, r2
 800329e:	60bb      	str	r3, [r7, #8]
				| SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
		reg_value = (reg_value | ((uint32_t) 0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
				| (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)); /* Insert write key and priority group */
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	021a      	lsls	r2, r3, #8
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	4313      	orrs	r3, r2
		reg_value = (reg_value | ((uint32_t) 0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
 80032a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80032ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032b0:	60bb      	str	r3, [r7, #8]
		SCB->AIRCR = reg_value;
 80032b2:	4a04      	ldr	r2, [pc, #16]	; (80032c4 <__NVIC_SetPriorityGrouping+0x44>)
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	60d3      	str	r3, [r2, #12]
	}
 80032b8:	bf00      	nop
 80032ba:	3714      	adds	r7, #20
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr
 80032c4:	e000ed00 	.word	0xe000ed00

080032c8 <__NVIC_GetPriorityGrouping>:
	/**
	 \brief   Get Priority Grouping
	 \details Reads the priority grouping field from the NVIC Interrupt Controller.
	 \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
	 */
	__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void) {
 80032c8:	b480      	push	{r7}
 80032ca:	af00      	add	r7, sp, #0
		return ((uint32_t) ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk)
 80032cc:	4b04      	ldr	r3, [pc, #16]	; (80032e0 <__NVIC_GetPriorityGrouping+0x18>)
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	0a1b      	lsrs	r3, r3, #8
 80032d2:	f003 0307 	and.w	r3, r3, #7
				>> SCB_AIRCR_PRIGROUP_Pos));
	}
 80032d6:	4618      	mov	r0, r3
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr
 80032e0:	e000ed00 	.word	0xe000ed00

080032e4 <__NVIC_EnableIRQ>:
	 \brief   Enable Interrupt
	 \details Enables a device specific interrupt in the NVIC interrupt controller.
	 \param [in]      IRQn  Device specific interrupt number.
	 \note    IRQn must not be negative.
	 */
	__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn) {
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	4603      	mov	r3, r0
 80032ec:	71fb      	strb	r3, [r7, #7]
		if ((int32_t) (IRQn) >= 0) {
 80032ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	db0b      	blt.n	800330e <__NVIC_EnableIRQ+0x2a>
			__COMPILER_BARRIER();
			NVIC->ISER[(((uint32_t) IRQn) >> 5UL)] = (uint32_t) (1UL
					<< (((uint32_t) IRQn) & 0x1FUL));
 80032f6:	79fb      	ldrb	r3, [r7, #7]
 80032f8:	f003 021f 	and.w	r2, r3, #31
			NVIC->ISER[(((uint32_t) IRQn) >> 5UL)] = (uint32_t) (1UL
 80032fc:	4907      	ldr	r1, [pc, #28]	; (800331c <__NVIC_EnableIRQ+0x38>)
 80032fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003302:	095b      	lsrs	r3, r3, #5
 8003304:	2001      	movs	r0, #1
 8003306:	fa00 f202 	lsl.w	r2, r0, r2
 800330a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			__COMPILER_BARRIER();
		}
	}
 800330e:	bf00      	nop
 8003310:	370c      	adds	r7, #12
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	e000e100 	.word	0xe000e100

08003320 <__NVIC_SetPriority>:
	 or negative to specify a processor exception.
	 \param [in]      IRQn  Interrupt number.
	 \param [in]  priority  Priority to set.
	 \note    The priority cannot be set for every processor exception.
	 */
	__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority) {
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
 8003326:	4603      	mov	r3, r0
 8003328:	6039      	str	r1, [r7, #0]
 800332a:	71fb      	strb	r3, [r7, #7]
		if ((int32_t) (IRQn) >= 0) {
 800332c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003330:	2b00      	cmp	r3, #0
 8003332:	db0a      	blt.n	800334a <__NVIC_SetPriority+0x2a>
			NVIC->IP[((uint32_t) IRQn)] = (uint8_t) ((priority
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	b2da      	uxtb	r2, r3
 8003338:	490c      	ldr	r1, [pc, #48]	; (800336c <__NVIC_SetPriority+0x4c>)
 800333a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800333e:	0112      	lsls	r2, r2, #4
 8003340:	b2d2      	uxtb	r2, r2
 8003342:	440b      	add	r3, r1
 8003344:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
					<< (8U - __NVIC_PRIO_BITS)) & (uint32_t) 0xFFUL);
		} else {
			SCB->SHP[(((uint32_t) IRQn) & 0xFUL) - 4UL] = (uint8_t) ((priority
					<< (8U - __NVIC_PRIO_BITS)) & (uint32_t) 0xFFUL);
		}
	}
 8003348:	e00a      	b.n	8003360 <__NVIC_SetPriority+0x40>
			SCB->SHP[(((uint32_t) IRQn) & 0xFUL) - 4UL] = (uint8_t) ((priority
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	b2da      	uxtb	r2, r3
 800334e:	4908      	ldr	r1, [pc, #32]	; (8003370 <__NVIC_SetPriority+0x50>)
 8003350:	79fb      	ldrb	r3, [r7, #7]
 8003352:	f003 030f 	and.w	r3, r3, #15
 8003356:	3b04      	subs	r3, #4
 8003358:	0112      	lsls	r2, r2, #4
 800335a:	b2d2      	uxtb	r2, r2
 800335c:	440b      	add	r3, r1
 800335e:	761a      	strb	r2, [r3, #24]
	}
 8003360:	bf00      	nop
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr
 800336c:	e000e100 	.word	0xe000e100
 8003370:	e000ed00 	.word	0xe000ed00

08003374 <NVIC_EncodePriority>:
	 \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
	 \param [in]       SubPriority  Subpriority value (starting from 0).
	 \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
	 */
	__STATIC_INLINE uint32_t NVIC_EncodePriority(uint32_t PriorityGroup,
			uint32_t PreemptPriority, uint32_t SubPriority) {
 8003374:	b480      	push	{r7}
 8003376:	b089      	sub	sp, #36	; 0x24
 8003378:	af00      	add	r7, sp, #0
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	607a      	str	r2, [r7, #4]
		uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t) 0x07UL); /* only values 0..7 are used          */
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f003 0307 	and.w	r3, r3, #7
 8003386:	61fb      	str	r3, [r7, #28]
		uint32_t PreemptPriorityBits;
		uint32_t SubPriorityBits;

		PreemptPriorityBits =
				((7UL - PriorityGroupTmp) > (uint32_t) (__NVIC_PRIO_BITS)) ?
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	f1c3 0307 	rsb	r3, r3, #7
		PreemptPriorityBits =
 800338e:	2b04      	cmp	r3, #4
 8003390:	bf28      	it	cs
 8003392:	2304      	movcs	r3, #4
 8003394:	61bb      	str	r3, [r7, #24]
						(uint32_t) (__NVIC_PRIO_BITS) :
						(uint32_t) (7UL - PriorityGroupTmp);
		SubPriorityBits =
				((PriorityGroupTmp + (uint32_t) (__NVIC_PRIO_BITS))
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	3304      	adds	r3, #4
						< (uint32_t) 7UL) ?
						(uint32_t) 0UL :
 800339a:	2b06      	cmp	r3, #6
 800339c:	d902      	bls.n	80033a4 <NVIC_EncodePriority+0x30>
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	3b03      	subs	r3, #3
 80033a2:	e000      	b.n	80033a6 <NVIC_EncodePriority+0x32>
 80033a4:	2300      	movs	r3, #0
		SubPriorityBits =
 80033a6:	617b      	str	r3, [r7, #20]
						(uint32_t) ((PriorityGroupTmp - 7UL)
								+ (uint32_t) (__NVIC_PRIO_BITS));

		return (((PreemptPriority
				& (uint32_t) ((1UL << (PreemptPriorityBits)) - 1UL))
 80033a8:	f04f 32ff 	mov.w	r2, #4294967295
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	fa02 f303 	lsl.w	r3, r2, r3
 80033b2:	43da      	mvns	r2, r3
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	401a      	ands	r2, r3
				<< SubPriorityBits)
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	409a      	lsls	r2, r3
				| ((SubPriority & (uint32_t) ((1UL << (SubPriorityBits)) - 1UL))));
 80033bc:	f04f 31ff 	mov.w	r1, #4294967295
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	fa01 f303 	lsl.w	r3, r1, r3
 80033c6:	43d9      	mvns	r1, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	400b      	ands	r3, r1
 80033cc:	4313      	orrs	r3, r2
	}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3724      	adds	r7, #36	; 0x24
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr
	...

080033dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	3b01      	subs	r3, #1
 80033e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033ec:	d301      	bcc.n	80033f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033ee:	2301      	movs	r3, #1
 80033f0:	e00f      	b.n	8003412 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033f2:	4a0a      	ldr	r2, [pc, #40]	; (800341c <SysTick_Config+0x40>)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	3b01      	subs	r3, #1
 80033f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033fa:	210f      	movs	r1, #15
 80033fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003400:	f7ff ff8e 	bl	8003320 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003404:	4b05      	ldr	r3, [pc, #20]	; (800341c <SysTick_Config+0x40>)
 8003406:	2200      	movs	r2, #0
 8003408:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800340a:	4b04      	ldr	r3, [pc, #16]	; (800341c <SysTick_Config+0x40>)
 800340c:	2207      	movs	r2, #7
 800340e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003410:	2300      	movs	r3, #0
}
 8003412:	4618      	mov	r0, r3
 8003414:	3708      	adds	r7, #8
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	e000e010 	.word	0xe000e010

08003420 <HAL_NVIC_SetPriorityGrouping>:
 *                                    0 bit  for subpriority
 * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
 *         The pending IRQ priority will be managed only by the subpriority.
 * @retval None
 */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup) {
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
	/* Check the parameters */
	assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

	/* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
	NVIC_SetPriorityGrouping(PriorityGroup);
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f7ff ff29 	bl	8003280 <__NVIC_SetPriorityGrouping>
}
 800342e:	bf00      	nop
 8003430:	3708      	adds	r7, #8
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}

08003436 <HAL_NVIC_SetPriority>:
 *         This parameter can be a value between 0 and 15
 *         A lower priority value indicates a higher priority.
 * @retval None
 */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority,
		uint32_t SubPriority) {
 8003436:	b580      	push	{r7, lr}
 8003438:	b086      	sub	sp, #24
 800343a:	af00      	add	r7, sp, #0
 800343c:	4603      	mov	r3, r0
 800343e:	60b9      	str	r1, [r7, #8]
 8003440:	607a      	str	r2, [r7, #4]
 8003442:	73fb      	strb	r3, [r7, #15]
	uint32_t prioritygroup = 0x00;
 8003444:	2300      	movs	r3, #0
 8003446:	617b      	str	r3, [r7, #20]

	/* Check the parameters */
	assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
	assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

	prioritygroup = NVIC_GetPriorityGrouping();
 8003448:	f7ff ff3e 	bl	80032c8 <__NVIC_GetPriorityGrouping>
 800344c:	6178      	str	r0, [r7, #20]

	NVIC_SetPriority(IRQn,
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	68b9      	ldr	r1, [r7, #8]
 8003452:	6978      	ldr	r0, [r7, #20]
 8003454:	f7ff ff8e 	bl	8003374 <NVIC_EncodePriority>
 8003458:	4602      	mov	r2, r0
 800345a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800345e:	4611      	mov	r1, r2
 8003460:	4618      	mov	r0, r3
 8003462:	f7ff ff5d 	bl	8003320 <__NVIC_SetPriority>
			NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003466:	bf00      	nop
 8003468:	3718      	adds	r7, #24
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}

0800346e <HAL_NVIC_EnableIRQ>:
 * @param  IRQn External interrupt number.
 *         This parameter can be an enumerator of IRQn_Type enumeration
 *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
 * @retval None
 */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn) {
 800346e:	b580      	push	{r7, lr}
 8003470:	b082      	sub	sp, #8
 8003472:	af00      	add	r7, sp, #0
 8003474:	4603      	mov	r3, r0
 8003476:	71fb      	strb	r3, [r7, #7]
	/* Check the parameters */
	assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

	/* Enable interrupt */
	NVIC_EnableIRQ(IRQn);
 8003478:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800347c:	4618      	mov	r0, r3
 800347e:	f7ff ff31 	bl	80032e4 <__NVIC_EnableIRQ>
}
 8003482:	bf00      	nop
 8003484:	3708      	adds	r7, #8
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}

0800348a <HAL_SYSTICK_Config>:
 *         Counter is in free running mode to generate periodic interrupts.
 * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
 * @retval status:  - 0  Function succeeded.
 *                  - 1  Function failed.
 */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb) {
 800348a:	b580      	push	{r7, lr}
 800348c:	b082      	sub	sp, #8
 800348e:	af00      	add	r7, sp, #0
 8003490:	6078      	str	r0, [r7, #4]
	return SysTick_Config(TicksNumb);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f7ff ffa2 	bl	80033dc <SysTick_Config>
 8003498:	4603      	mov	r3, r0
}
 800349a:	4618      	mov	r0, r3
 800349c:	3708      	adds	r7, #8
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}

080034a2 <HAL_DAC_Init>:
 *         in the DAC_InitStruct and initialize the associated handle.
 * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
 *         the configuration information for the specified DAC.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac) {
 80034a2:	b580      	push	{r7, lr}
 80034a4:	b082      	sub	sp, #8
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	6078      	str	r0, [r7, #4]
	/* Check DAC handle */
	if (hdac == NULL) {
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d101      	bne.n	80034b4 <HAL_DAC_Init+0x12>
		return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e014      	b.n	80034de <HAL_DAC_Init+0x3c>
	}
	/* Check the parameters */
	assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

	if (hdac->State == HAL_DAC_STATE_RESET) {
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	791b      	ldrb	r3, [r3, #4]
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d105      	bne.n	80034ca <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

		/* Allocate lock resource and initialize it */
		hdac->Lock = HAL_UNLOCKED;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
		/* Init the low level hardware */
		HAL_DAC_MspInit(hdac);
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f7fd fd31 	bl	8000f2c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
	}

	/* Initialize the DAC state*/
	hdac->State = HAL_DAC_STATE_BUSY;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2202      	movs	r2, #2
 80034ce:	711a      	strb	r2, [r3, #4]

	/* Set DAC error code to none */
	hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	611a      	str	r2, [r3, #16]

	/* Initialize the DAC state*/
	hdac->State = HAL_DAC_STATE_READY;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2201      	movs	r2, #1
 80034da:	711a      	strb	r2, [r3, #4]

	/* Return function status */
	return HAL_OK;
 80034dc:	2300      	movs	r3, #0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3708      	adds	r7, #8
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
	...

080034e8 <HAL_DAC_Start_DMA>:
 *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
 *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel,
		uint32_t *pData, uint32_t Length, uint32_t Alignment) {
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b086      	sub	sp, #24
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	60b9      	str	r1, [r7, #8]
 80034f2:	607a      	str	r2, [r7, #4]
 80034f4:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status;
	uint32_t tmpreg = 0U;
 80034f6:	2300      	movs	r3, #0
 80034f8:	613b      	str	r3, [r7, #16]
	/* Check the parameters */
	assert_param(IS_DAC_CHANNEL(Channel));
	assert_param(IS_DAC_ALIGN(Alignment));

	/* Process locked */
	__HAL_LOCK(hdac);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	795b      	ldrb	r3, [r3, #5]
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d101      	bne.n	8003506 <HAL_DAC_Start_DMA+0x1e>
 8003502:	2302      	movs	r3, #2
 8003504:	e0ab      	b.n	800365e <HAL_DAC_Start_DMA+0x176>
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2201      	movs	r2, #1
 800350a:	715a      	strb	r2, [r3, #5]

	/* Change DAC state */
	hdac->State = HAL_DAC_STATE_BUSY;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2202      	movs	r2, #2
 8003510:	711a      	strb	r2, [r3, #4]

	if (Channel == DAC_CHANNEL_1) {
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d12f      	bne.n	8003578 <HAL_DAC_Start_DMA+0x90>
		/* Set the DMA transfer complete callback for channel1 */
		hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	4a52      	ldr	r2, [pc, #328]	; (8003668 <HAL_DAC_Start_DMA+0x180>)
 800351e:	62da      	str	r2, [r3, #44]	; 0x2c

		/* Set the DMA half transfer complete callback for channel1 */
		hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	4a51      	ldr	r2, [pc, #324]	; (800366c <HAL_DAC_Start_DMA+0x184>)
 8003526:	631a      	str	r2, [r3, #48]	; 0x30

		/* Set the DMA error callback for channel1 */
		hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	4a50      	ldr	r2, [pc, #320]	; (8003670 <HAL_DAC_Start_DMA+0x188>)
 800352e:	635a      	str	r2, [r3, #52]	; 0x34

		/* Enable the selected DAC channel1 DMA request */
		SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800353e:	601a      	str	r2, [r3, #0]

		/* Case of use of channel 1 */
		switch (Alignment) {
 8003540:	6a3b      	ldr	r3, [r7, #32]
 8003542:	2b08      	cmp	r3, #8
 8003544:	d013      	beq.n	800356e <HAL_DAC_Start_DMA+0x86>
 8003546:	6a3b      	ldr	r3, [r7, #32]
 8003548:	2b08      	cmp	r3, #8
 800354a:	d845      	bhi.n	80035d8 <HAL_DAC_Start_DMA+0xf0>
 800354c:	6a3b      	ldr	r3, [r7, #32]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d003      	beq.n	800355a <HAL_DAC_Start_DMA+0x72>
 8003552:	6a3b      	ldr	r3, [r7, #32]
 8003554:	2b04      	cmp	r3, #4
 8003556:	d005      	beq.n	8003564 <HAL_DAC_Start_DMA+0x7c>
		case DAC_ALIGN_8B_R:
			/* Get DHR8R1 address */
			tmpreg = (uint32_t) &hdac->Instance->DHR8R1;
			break;
		default:
			break;
 8003558:	e03e      	b.n	80035d8 <HAL_DAC_Start_DMA+0xf0>
			tmpreg = (uint32_t) &hdac->Instance->DHR12R1;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	3308      	adds	r3, #8
 8003560:	613b      	str	r3, [r7, #16]
			break;
 8003562:	e03c      	b.n	80035de <HAL_DAC_Start_DMA+0xf6>
			tmpreg = (uint32_t) &hdac->Instance->DHR12L1;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	330c      	adds	r3, #12
 800356a:	613b      	str	r3, [r7, #16]
			break;
 800356c:	e037      	b.n	80035de <HAL_DAC_Start_DMA+0xf6>
			tmpreg = (uint32_t) &hdac->Instance->DHR8R1;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	3310      	adds	r3, #16
 8003574:	613b      	str	r3, [r7, #16]
			break;
 8003576:	e032      	b.n	80035de <HAL_DAC_Start_DMA+0xf6>
		}
	} else {
		/* Set the DMA transfer complete callback for channel2 */
		hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	4a3d      	ldr	r2, [pc, #244]	; (8003674 <HAL_DAC_Start_DMA+0x18c>)
 800357e:	62da      	str	r2, [r3, #44]	; 0x2c

		/* Set the DMA half transfer complete callback for channel2 */
		hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	4a3c      	ldr	r2, [pc, #240]	; (8003678 <HAL_DAC_Start_DMA+0x190>)
 8003586:	631a      	str	r2, [r3, #48]	; 0x30

		/* Set the DMA error callback for channel2 */
		hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	4a3b      	ldr	r2, [pc, #236]	; (800367c <HAL_DAC_Start_DMA+0x194>)
 800358e:	635a      	str	r2, [r3, #52]	; 0x34

		/* Enable the selected DAC channel2 DMA request */
		SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800359e:	601a      	str	r2, [r3, #0]

		/* Case of use of channel 2 */
		switch (Alignment) {
 80035a0:	6a3b      	ldr	r3, [r7, #32]
 80035a2:	2b08      	cmp	r3, #8
 80035a4:	d013      	beq.n	80035ce <HAL_DAC_Start_DMA+0xe6>
 80035a6:	6a3b      	ldr	r3, [r7, #32]
 80035a8:	2b08      	cmp	r3, #8
 80035aa:	d817      	bhi.n	80035dc <HAL_DAC_Start_DMA+0xf4>
 80035ac:	6a3b      	ldr	r3, [r7, #32]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d003      	beq.n	80035ba <HAL_DAC_Start_DMA+0xd2>
 80035b2:	6a3b      	ldr	r3, [r7, #32]
 80035b4:	2b04      	cmp	r3, #4
 80035b6:	d005      	beq.n	80035c4 <HAL_DAC_Start_DMA+0xdc>
		case DAC_ALIGN_8B_R:
			/* Get DHR8R2 address */
			tmpreg = (uint32_t) &hdac->Instance->DHR8R2;
			break;
		default:
			break;
 80035b8:	e010      	b.n	80035dc <HAL_DAC_Start_DMA+0xf4>
			tmpreg = (uint32_t) &hdac->Instance->DHR12R2;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	3314      	adds	r3, #20
 80035c0:	613b      	str	r3, [r7, #16]
			break;
 80035c2:	e00c      	b.n	80035de <HAL_DAC_Start_DMA+0xf6>
			tmpreg = (uint32_t) &hdac->Instance->DHR12L2;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	3318      	adds	r3, #24
 80035ca:	613b      	str	r3, [r7, #16]
			break;
 80035cc:	e007      	b.n	80035de <HAL_DAC_Start_DMA+0xf6>
			tmpreg = (uint32_t) &hdac->Instance->DHR8R2;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	331c      	adds	r3, #28
 80035d4:	613b      	str	r3, [r7, #16]
			break;
 80035d6:	e002      	b.n	80035de <HAL_DAC_Start_DMA+0xf6>
			break;
 80035d8:	bf00      	nop
 80035da:	e000      	b.n	80035de <HAL_DAC_Start_DMA+0xf6>
			break;
 80035dc:	bf00      	nop
		}
	}

	/* Enable the DMA channel */
	if (Channel == DAC_CHANNEL_1) {
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d111      	bne.n	8003608 <HAL_DAC_Start_DMA+0x120>
		/* Enable the DAC DMA underrun interrupt */
		__HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035f2:	601a      	str	r2, [r3, #0]

		/* Enable the DMA channel */
		status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t) pData, tmpreg,
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6898      	ldr	r0, [r3, #8]
 80035f8:	6879      	ldr	r1, [r7, #4]
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	693a      	ldr	r2, [r7, #16]
 80035fe:	f000 fb49 	bl	8003c94 <HAL_DMA_Start_IT>
 8003602:	4603      	mov	r3, r0
 8003604:	75fb      	strb	r3, [r7, #23]
 8003606:	e010      	b.n	800362a <HAL_DAC_Start_DMA+0x142>
				Length);
	} else {
		/* Enable the DAC DMA underrun interrupt */
		__HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003616:	601a      	str	r2, [r3, #0]

		/* Enable the DMA channel */
		status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t) pData, tmpreg,
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	68d8      	ldr	r0, [r3, #12]
 800361c:	6879      	ldr	r1, [r7, #4]
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	693a      	ldr	r2, [r7, #16]
 8003622:	f000 fb37 	bl	8003c94 <HAL_DMA_Start_IT>
 8003626:	4603      	mov	r3, r0
 8003628:	75fb      	strb	r3, [r7, #23]
				Length);
	}

	/* Process Unlocked */
	__HAL_UNLOCK(hdac);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2200      	movs	r2, #0
 800362e:	715a      	strb	r2, [r3, #5]

	if (status == HAL_OK) {
 8003630:	7dfb      	ldrb	r3, [r7, #23]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d10c      	bne.n	8003650 <HAL_DAC_Start_DMA+0x168>
		/* Enable the Peripheral */
		__HAL_DAC_ENABLE(hdac, Channel);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	6819      	ldr	r1, [r3, #0]
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	f003 0310 	and.w	r3, r3, #16
 8003642:	2201      	movs	r2, #1
 8003644:	409a      	lsls	r2, r3
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	430a      	orrs	r2, r1
 800364c:	601a      	str	r2, [r3, #0]
 800364e:	e005      	b.n	800365c <HAL_DAC_Start_DMA+0x174>
	} else {
		hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	691b      	ldr	r3, [r3, #16]
 8003654:	f043 0204 	orr.w	r2, r3, #4
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	611a      	str	r2, [r3, #16]
	}

	/* Return function status */
	return status;
 800365c:	7dfb      	ldrb	r3, [r7, #23]
}
 800365e:	4618      	mov	r0, r3
 8003660:	3718      	adds	r7, #24
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	080039fd 	.word	0x080039fd
 800366c:	08003a1f 	.word	0x08003a1f
 8003670:	08003a3b 	.word	0x08003a3b
 8003674:	08003ab9 	.word	0x08003ab9
 8003678:	08003adb 	.word	0x08003adb
 800367c:	08003af7 	.word	0x08003af7

08003680 <HAL_DAC_IRQHandler>:
 *         underrun.
 * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
 *         the configuration information for the specified DAC.
 * @retval None
 */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac) {
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
	if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1)) {
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003692:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003696:	d120      	bne.n	80036da <HAL_DAC_IRQHandler+0x5a>
		/* Check underrun flag of DAC channel 1 */
		if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1)) {
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800369e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036a6:	d118      	bne.n	80036da <HAL_DAC_IRQHandler+0x5a>
			/* Change DAC state to error state */
			hdac->State = HAL_DAC_STATE_ERROR;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2204      	movs	r2, #4
 80036ac:	711a      	strb	r2, [r3, #4]

			/* Set DAC error code to chanel1 DMA underrun error */
			SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	691b      	ldr	r3, [r3, #16]
 80036b2:	f043 0201 	orr.w	r2, r3, #1
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	611a      	str	r2, [r3, #16]

			/* Clear the underrun flag */
			__HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80036c2:	635a      	str	r2, [r3, #52]	; 0x34

			/* Disable the selected DAC channel1 DMA request */
			CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80036d2:	601a      	str	r2, [r3, #0]

			/* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
			HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f000 f84b 	bl	8003770 <HAL_DAC_DMAUnderrunCallbackCh1>
	}
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
	if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2)) {
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036e8:	d120      	bne.n	800372c <HAL_DAC_IRQHandler+0xac>
		/* Check underrun flag of DAC channel 2 */
		if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2)) {
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036f8:	d118      	bne.n	800372c <HAL_DAC_IRQHandler+0xac>
			/* Change DAC state to error state */
			hdac->State = HAL_DAC_STATE_ERROR;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2204      	movs	r2, #4
 80036fe:	711a      	strb	r2, [r3, #4]

			/* Set DAC error code to channel2 DMA underrun error */
			SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	691b      	ldr	r3, [r3, #16]
 8003704:	f043 0202 	orr.w	r2, r3, #2
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	611a      	str	r2, [r3, #16]

			/* Clear the underrun flag */
			__HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003714:	635a      	str	r2, [r3, #52]	; 0x34

			/* Disable the selected DAC channel2 DMA request */
			CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8003724:	601a      	str	r2, [r3, #0]

			/* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
			HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 f9bc 	bl	8003aa4 <HAL_DACEx_DMAUnderrunCallbackCh2>
	}
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
	/* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
	/* STM32L4P5xx STM32L4Q5xx                                                             */
	/* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 800372c:	bf00      	nop
 800372e:	3708      	adds	r7, #8
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}

08003734 <HAL_DAC_ConvCpltCallbackCh1>:
 * @brief  Conversion complete callback in non-blocking mode for Channel1
 * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
 *         the configuration information for the specified DAC.
 * @retval None
 */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac) {
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
	UNUSED(hdac);

	/* NOTE : This function should not be modified, when the callback is needed,
	 the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
	 */
}
 800373c:	bf00      	nop
 800373e:	370c      	adds	r7, #12
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr

08003748 <HAL_DAC_ConvHalfCpltCallbackCh1>:
 * @brief  Conversion half DMA transfer callback in non-blocking mode for Channel1
 * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
 *         the configuration information for the specified DAC.
 * @retval None
 */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac) {
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
	UNUSED(hdac);

	/* NOTE : This function should not be modified, when the callback is needed,
	 the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
	 */
}
 8003750:	bf00      	nop
 8003752:	370c      	adds	r7, #12
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr

0800375c <HAL_DAC_ErrorCallbackCh1>:
 * @brief  Error DAC callback for Channel1.
 * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
 *         the configuration information for the specified DAC.
 * @retval None
 */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac) {
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
	UNUSED(hdac);

	/* NOTE : This function should not be modified, when the callback is needed,
	 the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
	 */
}
 8003764:	bf00      	nop
 8003766:	370c      	adds	r7, #12
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr

08003770 <HAL_DAC_DMAUnderrunCallbackCh1>:
 * @brief  DMA underrun DAC callback for channel1.
 * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
 *         the configuration information for the specified DAC.
 * @retval None
 */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac) {
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
	UNUSED(hdac);

	/* NOTE : This function should not be modified, when the callback is needed,
	 the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
	 */
}
 8003778:	bf00      	nop
 800377a:	370c      	adds	r7, #12
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <HAL_DAC_GetValue>:
 *          This parameter can be one of the following values:
 *            @arg DAC_CHANNEL_1: DAC Channel1 selected
 *            @arg DAC_CHANNEL_2: DAC Channel2 selected
 * @retval The selected DAC channel data output value.
 */
uint32_t HAL_DAC_GetValue(DAC_HandleTypeDef *hdac, uint32_t Channel) {
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	6039      	str	r1, [r7, #0]

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
	if (Channel == DAC_CHANNEL_1) {
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d103      	bne.n	800379c <HAL_DAC_GetValue+0x18>
		return hdac->Instance->DOR1;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800379a:	e002      	b.n	80037a2 <HAL_DAC_GetValue+0x1e>
	} else {
		return hdac->Instance->DOR2;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	}
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
	/* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
	/* STM32L4P5xx STM32L4Q5xx                                                             */
	/* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	370c      	adds	r7, #12
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr

080037ae <HAL_DAC_ConfigChannel>:
 *            @arg DAC_CHANNEL_1: DAC Channel1 selected
 *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
		DAC_ChannelConfTypeDef *sConfig, uint32_t Channel) {
 80037ae:	b580      	push	{r7, lr}
 80037b0:	b088      	sub	sp, #32
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	60f8      	str	r0, [r7, #12]
 80037b6:	60b9      	str	r1, [r7, #8]
 80037b8:	607a      	str	r2, [r7, #4]
	uint32_t tmpreg1;
	uint32_t tmpreg2;
	uint32_t tickstart = 0U;
 80037ba:	2300      	movs	r3, #0
 80037bc:	61fb      	str	r3, [r7, #28]
				IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
	}
	assert_param(IS_DAC_CHANNEL(Channel));

	/* Process locked */
	__HAL_LOCK(hdac);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	795b      	ldrb	r3, [r3, #5]
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d101      	bne.n	80037ca <HAL_DAC_ConfigChannel+0x1c>
 80037c6:	2302      	movs	r3, #2
 80037c8:	e114      	b.n	80039f4 <HAL_DAC_ConfigChannel+0x246>
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2201      	movs	r2, #1
 80037ce:	715a      	strb	r2, [r3, #5]

	/* Change DAC state */
	hdac->State = HAL_DAC_STATE_BUSY;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2202      	movs	r2, #2
 80037d4:	711a      	strb	r2, [r3, #4]

	if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	2b04      	cmp	r3, #4
 80037dc:	f040 8081 	bne.w	80038e2 <HAL_DAC_ConfigChannel+0x134>
	/* Sample on old configuration */
	{
		/* Get timeout */
		tickstart = HAL_GetTick();
 80037e0:	f7fd fe04 	bl	80013ec <HAL_GetTick>
 80037e4:	61f8      	str	r0, [r7, #28]

		if (Channel == DAC_CHANNEL_1) {
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d140      	bne.n	800386e <HAL_DAC_ConfigChannel+0xc0>

			/* SHSR1 can be written when BWST1 is cleared */
			while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL) {
 80037ec:	e018      	b.n	8003820 <HAL_DAC_ConfigChannel+0x72>
				/* Check for the Timeout */
				if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG) {
 80037ee:	f7fd fdfd 	bl	80013ec <HAL_GetTick>
 80037f2:	4602      	mov	r2, r0
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d911      	bls.n	8003820 <HAL_DAC_ConfigChannel+0x72>
					/* New check to avoid false timeout detection in case of preemption */
					if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL) {
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003802:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d00a      	beq.n	8003820 <HAL_DAC_ConfigChannel+0x72>
						/* Update error code */
						SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	f043 0208 	orr.w	r2, r3, #8
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	611a      	str	r2, [r3, #16]

						/* Change the DMA state */
						hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2203      	movs	r2, #3
 800381a:	711a      	strb	r2, [r3, #4]

						return HAL_TIMEOUT;
 800381c:	2303      	movs	r3, #3
 800381e:	e0e9      	b.n	80039f4 <HAL_DAC_ConfigChannel+0x246>
			while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL) {
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003826:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d1df      	bne.n	80037ee <HAL_DAC_ConfigChannel+0x40>
					}
				}
			}
			HAL_Delay(1);
 800382e:	2001      	movs	r0, #1
 8003830:	f7fd fde8 	bl	8001404 <HAL_Delay>
			hdac->Instance->SHSR1 =
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
					sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003838:	68ba      	ldr	r2, [r7, #8]
 800383a:	6992      	ldr	r2, [r2, #24]
			hdac->Instance->SHSR1 =
 800383c:	641a      	str	r2, [r3, #64]	; 0x40
 800383e:	e023      	b.n	8003888 <HAL_DAC_ConfigChannel+0xda>
		{
			/* SHSR2 can be written when BWST2 is cleared */

			while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL) {
				/* Check for the Timeout */
				if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG) {
 8003840:	f7fd fdd4 	bl	80013ec <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	2b01      	cmp	r3, #1
 800384c:	d90f      	bls.n	800386e <HAL_DAC_ConfigChannel+0xc0>
					/* New check to avoid false timeout detection in case of preemption */
					if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL) {
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003854:	2b00      	cmp	r3, #0
 8003856:	da0a      	bge.n	800386e <HAL_DAC_ConfigChannel+0xc0>
						/* Update error code */
						SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	691b      	ldr	r3, [r3, #16]
 800385c:	f043 0208 	orr.w	r2, r3, #8
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	611a      	str	r2, [r3, #16]

						/* Change the DMA state */
						hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2203      	movs	r2, #3
 8003868:	711a      	strb	r2, [r3, #4]

						return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e0c2      	b.n	80039f4 <HAL_DAC_ConfigChannel+0x246>
			while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL) {
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003874:	2b00      	cmp	r3, #0
 8003876:	dbe3      	blt.n	8003840 <HAL_DAC_ConfigChannel+0x92>
					}
				}
			}
			HAL_Delay(1U);
 8003878:	2001      	movs	r0, #1
 800387a:	f7fd fdc3 	bl	8001404 <HAL_Delay>
			hdac->Instance->SHSR2 =
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
					sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003882:	68ba      	ldr	r2, [r7, #8]
 8003884:	6992      	ldr	r2, [r2, #24]
			hdac->Instance->SHSR2 =
 8003886:	645a      	str	r2, [r3, #68]	; 0x44
		}
#endif /* STM32L451xx STM32L452xx STM32L462xx */

		/* HoldTime */
		MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f003 0310 	and.w	r3, r3, #16
 8003894:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003898:	fa01 f303 	lsl.w	r3, r1, r3
 800389c:	43db      	mvns	r3, r3
 800389e:	ea02 0103 	and.w	r1, r2, r3
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	69da      	ldr	r2, [r3, #28]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f003 0310 	and.w	r3, r3, #16
 80038ac:	409a      	lsls	r2, r3
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	430a      	orrs	r2, r1
 80038b4:	649a      	str	r2, [r3, #72]	; 0x48
				(sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime)
						<< (Channel & 0x10UL));
		/* RefreshTime */
		MODIFY_REG(hdac->Instance->SHRR,
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f003 0310 	and.w	r3, r3, #16
 80038c2:	21ff      	movs	r1, #255	; 0xff
 80038c4:	fa01 f303 	lsl.w	r3, r1, r3
 80038c8:	43db      	mvns	r3, r3
 80038ca:	ea02 0103 	and.w	r1, r2, r3
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	6a1a      	ldr	r2, [r3, #32]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f003 0310 	and.w	r3, r3, #16
 80038d8:	409a      	lsls	r2, r3
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	430a      	orrs	r2, r1
 80038e0:	64da      	str	r2, [r3, #76]	; 0x4c
				DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
				(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime)
						<< (Channel & 0x10UL));
	}

	if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d11d      	bne.n	8003926 <HAL_DAC_ConfigChannel+0x178>
	/* USER TRIMMING */
	{
		/* Get the DAC CCR value */
		tmpreg1 = hdac->Instance->CCR;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f0:	61bb      	str	r3, [r7, #24]
		/* Clear trimming value */
		tmpreg1 &= ~(((uint32_t) (DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f003 0310 	and.w	r3, r3, #16
 80038f8:	221f      	movs	r2, #31
 80038fa:	fa02 f303 	lsl.w	r3, r2, r3
 80038fe:	43db      	mvns	r3, r3
 8003900:	69ba      	ldr	r2, [r7, #24]
 8003902:	4013      	ands	r3, r2
 8003904:	61bb      	str	r3, [r7, #24]
		/* Configure for the selected trimming offset */
		tmpreg2 = sConfig->DAC_TrimmingValue;
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	695b      	ldr	r3, [r3, #20]
 800390a:	617b      	str	r3, [r7, #20]
		/* Calculate CCR register value depending on DAC_Channel */
		tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f003 0310 	and.w	r3, r3, #16
 8003912:	697a      	ldr	r2, [r7, #20]
 8003914:	fa02 f303 	lsl.w	r3, r2, r3
 8003918:	69ba      	ldr	r2, [r7, #24]
 800391a:	4313      	orrs	r3, r2
 800391c:	61bb      	str	r3, [r7, #24]
		/* Write to DAC CCR */
		hdac->Instance->CCR = tmpreg1;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	69ba      	ldr	r2, [r7, #24]
 8003924:	639a      	str	r2, [r3, #56]	; 0x38
	}
	/* else factory trimming is used (factory setting are available at reset)*/
	/* SW Nothing has nothing to do */

	/* Get the DAC MCR value */
	tmpreg1 = hdac->Instance->MCR;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800392c:	61bb      	str	r3, [r7, #24]
	/* Clear DAC_MCR_MODEx bits */
	tmpreg1 &= ~(((uint32_t) (DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f003 0310 	and.w	r3, r3, #16
 8003934:	2207      	movs	r2, #7
 8003936:	fa02 f303 	lsl.w	r3, r2, r3
 800393a:	43db      	mvns	r3, r3
 800393c:	69ba      	ldr	r2, [r7, #24]
 800393e:	4013      	ands	r3, r2
 8003940:	61bb      	str	r3, [r7, #24]
	/* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
	tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	431a      	orrs	r2, r3
			| sConfig->DAC_ConnectOnChipPeripheral);
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	68db      	ldr	r3, [r3, #12]
	tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer
 8003950:	4313      	orrs	r3, r2
 8003952:	617b      	str	r3, [r7, #20]
	/* Calculate MCR register value depending on DAC_Channel */
	tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f003 0310 	and.w	r3, r3, #16
 800395a:	697a      	ldr	r2, [r7, #20]
 800395c:	fa02 f303 	lsl.w	r3, r2, r3
 8003960:	69ba      	ldr	r2, [r7, #24]
 8003962:	4313      	orrs	r3, r2
 8003964:	61bb      	str	r3, [r7, #24]
	/* Write to DAC MCR */
	hdac->Instance->MCR = tmpreg1;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	69ba      	ldr	r2, [r7, #24]
 800396c:	63da      	str	r2, [r3, #60]	; 0x3c

	/* DAC in normal operating mode hence clear DAC_CR_CENx bit */
	CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	6819      	ldr	r1, [r3, #0]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f003 0310 	and.w	r3, r3, #16
 800397a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800397e:	fa02 f303 	lsl.w	r3, r2, r3
 8003982:	43da      	mvns	r2, r3
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	400a      	ands	r2, r1
 800398a:	601a      	str	r2, [r3, #0]

	/* Get the DAC CR value */
	tmpreg1 = hdac->Instance->CR;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	61bb      	str	r3, [r7, #24]
	/* Clear TENx, TSELx, WAVEx and MAMPx bits */
	tmpreg1 &= ~(((uint32_t) (DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1
			| DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f003 0310 	and.w	r3, r3, #16
 800399a:	f640 72fc 	movw	r2, #4092	; 0xffc
 800399e:	fa02 f303 	lsl.w	r3, r2, r3
	tmpreg1 &= ~(((uint32_t) (DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1
 80039a2:	43db      	mvns	r3, r3
 80039a4:	69ba      	ldr	r2, [r7, #24]
 80039a6:	4013      	ands	r3, r2
 80039a8:	61bb      	str	r3, [r7, #24]
	/* Configure for the selected DAC channel: trigger */
	/* Set TSELx and TENx bits according to DAC_Trigger value */
	tmpreg2 = sConfig->DAC_Trigger;
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	617b      	str	r3, [r7, #20]
	/* Calculate CR register value depending on DAC_Channel */
	tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f003 0310 	and.w	r3, r3, #16
 80039b6:	697a      	ldr	r2, [r7, #20]
 80039b8:	fa02 f303 	lsl.w	r3, r2, r3
 80039bc:	69ba      	ldr	r2, [r7, #24]
 80039be:	4313      	orrs	r3, r2
 80039c0:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

	/* Write to DAC CR */
	hdac->Instance->CR = tmpreg1;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	69ba      	ldr	r2, [r7, #24]
 80039c8:	601a      	str	r2, [r3, #0]
	/* Disable wave generation */
	hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	6819      	ldr	r1, [r3, #0]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f003 0310 	and.w	r3, r3, #16
 80039d6:	22c0      	movs	r2, #192	; 0xc0
 80039d8:	fa02 f303 	lsl.w	r3, r2, r3
 80039dc:	43da      	mvns	r2, r3
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	400a      	ands	r2, r1
 80039e4:	601a      	str	r2, [r3, #0]

	/* Change DAC state */
	hdac->State = HAL_DAC_STATE_READY;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2201      	movs	r2, #1
 80039ea:	711a      	strb	r2, [r3, #4]

	/* Process unlocked */
	__HAL_UNLOCK(hdac);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2200      	movs	r2, #0
 80039f0:	715a      	strb	r2, [r3, #5]

	/* Return function status */
	return HAL_OK;
 80039f2:	2300      	movs	r3, #0
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3720      	adds	r7, #32
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <DAC_DMAConvCpltCh1>:
 * @brief  DMA conversion complete callback.
 * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
 *                the configuration information for the specified DMA module.
 * @retval None
 */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma) {
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
	DAC_HandleTypeDef *hdac =
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a08:	60fb      	str	r3, [r7, #12]
			(DAC_HandleTypeDef*) ((DMA_HandleTypeDef*) hdma)->Parent;

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
	HAL_DAC_ConvCpltCallbackCh1(hdac);
 8003a0a:	68f8      	ldr	r0, [r7, #12]
 8003a0c:	f7ff fe92 	bl	8003734 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

	hdac->State = HAL_DAC_STATE_READY;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2201      	movs	r2, #1
 8003a14:	711a      	strb	r2, [r3, #4]
}
 8003a16:	bf00      	nop
 8003a18:	3710      	adds	r7, #16
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}

08003a1e <DAC_DMAHalfConvCpltCh1>:
 * @brief  DMA half transfer complete callback.
 * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
 *                the configuration information for the specified DMA module.
 * @retval None
 */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma) {
 8003a1e:	b580      	push	{r7, lr}
 8003a20:	b084      	sub	sp, #16
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
	DAC_HandleTypeDef *hdac =
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a2a:	60fb      	str	r3, [r7, #12]
			(DAC_HandleTypeDef*) ((DMA_HandleTypeDef*) hdma)->Parent;
	/* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
	HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8003a2c:	68f8      	ldr	r0, [r7, #12]
 8003a2e:	f7ff fe8b 	bl	8003748 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003a32:	bf00      	nop
 8003a34:	3710      	adds	r7, #16
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}

08003a3a <DAC_DMAErrorCh1>:
 * @brief  DMA error callback
 * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
 *                the configuration information for the specified DMA module.
 * @retval None
 */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma) {
 8003a3a:	b580      	push	{r7, lr}
 8003a3c:	b084      	sub	sp, #16
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
	DAC_HandleTypeDef *hdac =
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a46:	60fb      	str	r3, [r7, #12]
			(DAC_HandleTypeDef*) ((DMA_HandleTypeDef*) hdma)->Parent;

	/* Set DAC error code to DMA error */
	hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	691b      	ldr	r3, [r3, #16]
 8003a4c:	f043 0204 	orr.w	r2, r3, #4
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
	HAL_DAC_ErrorCallbackCh1(hdac);
 8003a54:	68f8      	ldr	r0, [r7, #12]
 8003a56:	f7ff fe81 	bl	800375c <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

	hdac->State = HAL_DAC_STATE_READY;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	711a      	strb	r2, [r3, #4]
}
 8003a60:	bf00      	nop
 8003a62:	3710      	adds	r7, #16
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <HAL_DACEx_ConvCpltCallbackCh2>:
 * @brief  Conversion complete callback in non-blocking mode for Channel2.
 * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
 *         the configuration information for the specified DAC.
 * @retval None
 */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac) {
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
	UNUSED(hdac);

	/* NOTE : This function should not be modified, when the callback is needed,
	 the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
	 */
}
 8003a70:	bf00      	nop
 8003a72:	370c      	adds	r7, #12
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr

08003a7c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
 * @brief  Conversion half DMA transfer callback in non-blocking mode for Channel2.
 * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
 *         the configuration information for the specified DAC.
 * @retval None
 */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac) {
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
	UNUSED(hdac);

	/* NOTE : This function should not be modified, when the callback is needed,
	 the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
	 */
}
 8003a84:	bf00      	nop
 8003a86:	370c      	adds	r7, #12
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <HAL_DACEx_ErrorCallbackCh2>:
 * @brief  Error DAC callback for Channel2.
 * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
 *         the configuration information for the specified DAC.
 * @retval None
 */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac) {
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
	UNUSED(hdac);

	/* NOTE : This function should not be modified, when the callback is needed,
	 the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
	 */
}
 8003a98:	bf00      	nop
 8003a9a:	370c      	adds	r7, #12
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <HAL_DACEx_DMAUnderrunCallbackCh2>:
 * @brief  DMA underrun DAC callback for Channel2.
 * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
 *         the configuration information for the specified DAC.
 * @retval None
 */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac) {
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
	UNUSED(hdac);

	/* NOTE : This function should not be modified, when the callback is needed,
	 the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
	 */
}
 8003aac:	bf00      	nop
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <DAC_DMAConvCpltCh2>:
 * @brief  DMA conversion complete callback.
 * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
 *                the configuration information for the specified DMA module.
 * @retval None
 */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma) {
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
	DAC_HandleTypeDef *hdac =
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac4:	60fb      	str	r3, [r7, #12]
			(DAC_HandleTypeDef*) ((DMA_HandleTypeDef*) hdma)->Parent;

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
	HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8003ac6:	68f8      	ldr	r0, [r7, #12]
 8003ac8:	f7ff ffce 	bl	8003a68 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

	hdac->State = HAL_DAC_STATE_READY;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	711a      	strb	r2, [r3, #4]
}
 8003ad2:	bf00      	nop
 8003ad4:	3710      	adds	r7, #16
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}

08003ada <DAC_DMAHalfConvCpltCh2>:
 * @brief  DMA half transfer complete callback.
 * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
 *                the configuration information for the specified DMA module.
 * @retval None
 */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma) {
 8003ada:	b580      	push	{r7, lr}
 8003adc:	b084      	sub	sp, #16
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
	DAC_HandleTypeDef *hdac =
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae6:	60fb      	str	r3, [r7, #12]
			(DAC_HandleTypeDef*) ((DMA_HandleTypeDef*) hdma)->Parent;
	/* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
	HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8003ae8:	68f8      	ldr	r0, [r7, #12]
 8003aea:	f7ff ffc7 	bl	8003a7c <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003aee:	bf00      	nop
 8003af0:	3710      	adds	r7, #16
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}

08003af6 <DAC_DMAErrorCh2>:
 * @brief  DMA error callback.
 * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
 *                the configuration information for the specified DMA module.
 * @retval None
 */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma) {
 8003af6:	b580      	push	{r7, lr}
 8003af8:	b084      	sub	sp, #16
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	6078      	str	r0, [r7, #4]
	DAC_HandleTypeDef *hdac =
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b02:	60fb      	str	r3, [r7, #12]
			(DAC_HandleTypeDef*) ((DMA_HandleTypeDef*) hdma)->Parent;

	/* Set DAC error code to DMA error */
	hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	691b      	ldr	r3, [r3, #16]
 8003b08:	f043 0204 	orr.w	r2, r3, #4
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
	HAL_DACEx_ErrorCallbackCh2(hdac);
 8003b10:	68f8      	ldr	r0, [r7, #12]
 8003b12:	f7ff ffbd 	bl	8003a90 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

	hdac->State = HAL_DAC_STATE_READY;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2201      	movs	r2, #1
 8003b1a:	711a      	strb	r2, [r3, #4]
}
 8003b1c:	bf00      	nop
 8003b1e:	3710      	adds	r7, #16
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <HAL_DMA_Init>:
 *         parameters in the DMA_InitTypeDef and initialize the associated handle.
 * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
 *              the configuration information for the specified DMA Channel.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma) {
 8003b24:	b480      	push	{r7}
 8003b26:	b085      	sub	sp, #20
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
	uint32_t tmp;

	/* Check the DMA handle allocation */
	if (hdma == NULL) {
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d101      	bne.n	8003b36 <HAL_DMA_Init+0x12>
		return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e098      	b.n	8003c68 <HAL_DMA_Init+0x144>
	assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

	assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

	/* Compute the channel index */
	if ((uint32_t) (hdma->Instance) < (uint32_t) (DMA2_Channel1)) {
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	4b4d      	ldr	r3, [pc, #308]	; (8003c74 <HAL_DMA_Init+0x150>)
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d80f      	bhi.n	8003b62 <HAL_DMA_Init+0x3e>
		/* DMA1 */
		hdma->ChannelIndex = (((uint32_t) hdma->Instance
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	461a      	mov	r2, r3
				- (uint32_t) DMA1_Channel1)
 8003b48:	4b4b      	ldr	r3, [pc, #300]	; (8003c78 <HAL_DMA_Init+0x154>)
 8003b4a:	4413      	add	r3, r2
				/ ((uint32_t) DMA1_Channel2 - (uint32_t) DMA1_Channel1)) << 2U;
 8003b4c:	4a4b      	ldr	r2, [pc, #300]	; (8003c7c <HAL_DMA_Init+0x158>)
 8003b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b52:	091b      	lsrs	r3, r3, #4
 8003b54:	009a      	lsls	r2, r3, #2
		hdma->ChannelIndex = (((uint32_t) hdma->Instance
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	645a      	str	r2, [r3, #68]	; 0x44
		hdma->DmaBaseAddress = DMA1;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a48      	ldr	r2, [pc, #288]	; (8003c80 <HAL_DMA_Init+0x15c>)
 8003b5e:	641a      	str	r2, [r3, #64]	; 0x40
 8003b60:	e00e      	b.n	8003b80 <HAL_DMA_Init+0x5c>
	} else {
		/* DMA2 */
		hdma->ChannelIndex = (((uint32_t) hdma->Instance
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	461a      	mov	r2, r3
				- (uint32_t) DMA2_Channel1)
 8003b68:	4b46      	ldr	r3, [pc, #280]	; (8003c84 <HAL_DMA_Init+0x160>)
 8003b6a:	4413      	add	r3, r2
				/ ((uint32_t) DMA2_Channel2 - (uint32_t) DMA2_Channel1)) << 2U;
 8003b6c:	4a43      	ldr	r2, [pc, #268]	; (8003c7c <HAL_DMA_Init+0x158>)
 8003b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b72:	091b      	lsrs	r3, r3, #4
 8003b74:	009a      	lsls	r2, r3, #2
		hdma->ChannelIndex = (((uint32_t) hdma->Instance
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	645a      	str	r2, [r3, #68]	; 0x44
		hdma->DmaBaseAddress = DMA2;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a42      	ldr	r2, [pc, #264]	; (8003c88 <HAL_DMA_Init+0x164>)
 8003b7e:	641a      	str	r2, [r3, #64]	; 0x40
	}

	/* Change DMA peripheral state */
	hdma->State = HAL_DMA_STATE_BUSY;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2202      	movs	r2, #2
 8003b84:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

	/* Get the CR register value */
	tmp = hdma->Instance->CCR;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	60fb      	str	r3, [r7, #12]

	/* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
	tmp &= ((uint32_t) ~(DMA_CCR_PL | DMA_CCR_MSIZE | DMA_CCR_PSIZE |
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003b96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b9a:	60fb      	str	r3, [r7, #12]
	DMA_CCR_MINC | DMA_CCR_PINC | DMA_CCR_CIRC |
	DMA_CCR_DIR | DMA_CCR_MEM2MEM));

	/* Prepare the DMA Channel configuration */
	tmp |= hdma->Init.Direction | hdma->Init.PeriphInc | hdma->Init.MemInc
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	689a      	ldr	r2, [r3, #8]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	431a      	orrs	r2, r3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	431a      	orrs	r2, r3
			| hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	695b      	ldr	r3, [r3, #20]
 8003bb0:	431a      	orrs	r2, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	699b      	ldr	r3, [r3, #24]
 8003bb6:	431a      	orrs	r2, r3
			| hdma->Init.Mode | hdma->Init.Priority;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	69db      	ldr	r3, [r3, #28]
 8003bbc:	431a      	orrs	r2, r3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a1b      	ldr	r3, [r3, #32]
 8003bc2:	4313      	orrs	r3, r2
	tmp |= hdma->Init.Direction | hdma->Init.PeriphInc | hdma->Init.MemInc
 8003bc4:	68fa      	ldr	r2, [r7, #12]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	60fb      	str	r3, [r7, #12]

	/* Write to DMA Channel CR register */
	hdma->Instance->CCR = tmp;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	68fa      	ldr	r2, [r7, #12]
 8003bd0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

	/* Set request selection */
	if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY) {
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003bda:	d039      	beq.n	8003c50 <HAL_DMA_Init+0x12c>
		/* Write to DMA channel selection register */
		if (DMA1 == hdma->DmaBaseAddress) {
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be0:	4a27      	ldr	r2, [pc, #156]	; (8003c80 <HAL_DMA_Init+0x15c>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d11a      	bne.n	8003c1c <HAL_DMA_Init+0xf8>
			/* Reset request selection for DMA1 Channelx */
			DMA1_CSELR->CSELR &=
 8003be6:	4b29      	ldr	r3, [pc, #164]	; (8003c8c <HAL_DMA_Init+0x168>)
 8003be8:	681a      	ldr	r2, [r3, #0]
					~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bee:	f003 031c 	and.w	r3, r3, #28
 8003bf2:	210f      	movs	r1, #15
 8003bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8003bf8:	43db      	mvns	r3, r3
			DMA1_CSELR->CSELR &=
 8003bfa:	4924      	ldr	r1, [pc, #144]	; (8003c8c <HAL_DMA_Init+0x168>)
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	600b      	str	r3, [r1, #0]

			/* Configure request selection for DMA1 Channelx */
			DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request
 8003c00:	4b22      	ldr	r3, [pc, #136]	; (8003c8c <HAL_DMA_Init+0x168>)
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6859      	ldr	r1, [r3, #4]
					<< (hdma->ChannelIndex & 0x1cU));
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c0c:	f003 031c 	and.w	r3, r3, #28
 8003c10:	fa01 f303 	lsl.w	r3, r1, r3
			DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request
 8003c14:	491d      	ldr	r1, [pc, #116]	; (8003c8c <HAL_DMA_Init+0x168>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	600b      	str	r3, [r1, #0]
 8003c1a:	e019      	b.n	8003c50 <HAL_DMA_Init+0x12c>
		} else /* DMA2 */
		{
			/* Reset request selection for DMA2 Channelx */
			DMA2_CSELR->CSELR &=
 8003c1c:	4b1c      	ldr	r3, [pc, #112]	; (8003c90 <HAL_DMA_Init+0x16c>)
 8003c1e:	681a      	ldr	r2, [r3, #0]
					~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c24:	f003 031c 	and.w	r3, r3, #28
 8003c28:	210f      	movs	r1, #15
 8003c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c2e:	43db      	mvns	r3, r3
			DMA2_CSELR->CSELR &=
 8003c30:	4917      	ldr	r1, [pc, #92]	; (8003c90 <HAL_DMA_Init+0x16c>)
 8003c32:	4013      	ands	r3, r2
 8003c34:	600b      	str	r3, [r1, #0]

			/* Configure request selection for DMA2 Channelx */
			DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request
 8003c36:	4b16      	ldr	r3, [pc, #88]	; (8003c90 <HAL_DMA_Init+0x16c>)
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6859      	ldr	r1, [r3, #4]
					<< (hdma->ChannelIndex & 0x1cU));
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c42:	f003 031c 	and.w	r3, r3, #28
 8003c46:	fa01 f303 	lsl.w	r3, r1, r3
			DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request
 8003c4a:	4911      	ldr	r1, [pc, #68]	; (8003c90 <HAL_DMA_Init+0x16c>)
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
	/* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
	/* STM32L496xx || STM32L4A6xx                                              */

	/* Initialise the error code */
	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	63da      	str	r2, [r3, #60]	; 0x3c

	/* Initialize the DMA state*/
	hdma->State = HAL_DMA_STATE_READY;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

	/* Allocate lock resource and initialize it */
	hdma->Lock = HAL_UNLOCKED;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	return HAL_OK;
 8003c66:	2300      	movs	r3, #0
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3714      	adds	r7, #20
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr
 8003c74:	40020407 	.word	0x40020407
 8003c78:	bffdfff8 	.word	0xbffdfff8
 8003c7c:	cccccccd 	.word	0xcccccccd
 8003c80:	40020000 	.word	0x40020000
 8003c84:	bffdfbf8 	.word	0xbffdfbf8
 8003c88:	40020400 	.word	0x40020400
 8003c8c:	400200a8 	.word	0x400200a8
 8003c90:	400204a8 	.word	0x400204a8

08003c94 <HAL_DMA_Start_IT>:
 * @param  DstAddress The destination memory Buffer address
 * @param  DataLength The length of data to be transferred from source to destination
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress,
		uint32_t DstAddress, uint32_t DataLength) {
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b086      	sub	sp, #24
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	60f8      	str	r0, [r7, #12]
 8003c9c:	60b9      	str	r1, [r7, #8]
 8003c9e:	607a      	str	r2, [r7, #4]
 8003ca0:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	75fb      	strb	r3, [r7, #23]

	/* Check the parameters */
	assert_param(IS_DMA_BUFFER_SIZE(DataLength));

	/* Process locked */
	__HAL_LOCK(hdma);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d101      	bne.n	8003cb4 <HAL_DMA_Start_IT+0x20>
 8003cb0:	2302      	movs	r3, #2
 8003cb2:	e04b      	b.n	8003d4c <HAL_DMA_Start_IT+0xb8>
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (HAL_DMA_STATE_READY == hdma->State) {
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d13a      	bne.n	8003d3e <HAL_DMA_Start_IT+0xaa>
		/* Change DMA peripheral state */
		hdma->State = HAL_DMA_STATE_BUSY;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2202      	movs	r2, #2
 8003ccc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	63da      	str	r2, [r3, #60]	; 0x3c

		/* Disable the peripheral */
		__HAL_DMA_DISABLE(hdma);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f022 0201 	bic.w	r2, r2, #1
 8003ce4:	601a      	str	r2, [r3, #0]

		/* Configure the source, destination address and the data length & clear flags*/
		DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	68b9      	ldr	r1, [r7, #8]
 8003cec:	68f8      	ldr	r0, [r7, #12]
 8003cee:	f000 f95f 	bl	8003fb0 <DMA_SetConfig>

		/* Enable the transfer complete interrupt */
		/* Enable the transfer Error interrupt */
		if (NULL != hdma->XferHalfCpltCallback) {
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d008      	beq.n	8003d0c <HAL_DMA_Start_IT+0x78>
			/* Enable the Half transfer complete interrupt as well */
			__HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f042 020e 	orr.w	r2, r2, #14
 8003d08:	601a      	str	r2, [r3, #0]
 8003d0a:	e00f      	b.n	8003d2c <HAL_DMA_Start_IT+0x98>
		} else {
			__HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f022 0204 	bic.w	r2, r2, #4
 8003d1a:	601a      	str	r2, [r3, #0]
			__HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f042 020a 	orr.w	r2, r2, #10
 8003d2a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

		/* Enable the Peripheral */
		__HAL_DMA_ENABLE(hdma);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f042 0201 	orr.w	r2, r2, #1
 8003d3a:	601a      	str	r2, [r3, #0]
 8003d3c:	e005      	b.n	8003d4a <HAL_DMA_Start_IT+0xb6>
	} else {
		/* Process Unlocked */
		__HAL_UNLOCK(hdma);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2200      	movs	r2, #0
 8003d42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

		/* Remain BUSY */
		status = HAL_BUSY;
 8003d46:	2302      	movs	r3, #2
 8003d48:	75fb      	strb	r3, [r7, #23]
	}
	return status;
 8003d4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3718      	adds	r7, #24
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <HAL_DMA_Abort>:
 * @brief  Abort the DMA Transfer.
 * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
 *               the configuration information for the specified DMA Channel.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma) {
 8003d54:	b480      	push	{r7}
 8003d56:	b085      	sub	sp, #20
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status = HAL_OK;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	73fb      	strb	r3, [r7, #15]

	/* Check the DMA peripheral state */
	if (hdma->State != HAL_DMA_STATE_BUSY) {
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	2b02      	cmp	r3, #2
 8003d6a:	d008      	beq.n	8003d7e <HAL_DMA_Abort+0x2a>
		hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2204      	movs	r2, #4
 8003d70:	63da      	str	r2, [r3, #60]	; 0x3c

		/* Process Unlocked */
		__HAL_UNLOCK(hdma);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

		return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e022      	b.n	8003dc4 <HAL_DMA_Abort+0x70>
	} else {
		/* Disable DMA IT */
		__HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f022 020e 	bic.w	r2, r2, #14
 8003d8c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

		/* Disable the channel */
		__HAL_DMA_DISABLE(hdma);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f022 0201 	bic.w	r2, r2, #1
 8003d9c:	601a      	str	r2, [r3, #0]

		/* Clear all flags */
		hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1
				<< (hdma->ChannelIndex & 0x1CU));
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da2:	f003 021c 	and.w	r2, r3, #28
		hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
				<< (hdma->ChannelIndex & 0x1CU));
 8003daa:	2101      	movs	r1, #1
 8003dac:	fa01 f202 	lsl.w	r2, r1, r2
		hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1
 8003db0:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

		/* Change the DMA state */
		hdma->State = HAL_DMA_STATE_READY;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2201      	movs	r2, #1
 8003db6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

		/* Process Unlocked */
		__HAL_UNLOCK(hdma);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

		return status;
 8003dc2:	7bfb      	ldrb	r3, [r7, #15]
	}
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3714      	adds	r7, #20
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr

08003dd0 <HAL_DMA_Abort_IT>:
 * @brief  Aborts the DMA Transfer in Interrupt mode.
 * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
 *                 the configuration information for the specified DMA Channel.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma) {
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status = HAL_OK;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	73fb      	strb	r3, [r7, #15]

	if (HAL_DMA_STATE_BUSY != hdma->State) {
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d005      	beq.n	8003df4 <HAL_DMA_Abort_IT+0x24>
		/* no transfer ongoing */
		hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2204      	movs	r2, #4
 8003dec:	63da      	str	r2, [r3, #60]	; 0x3c

		status = HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	73fb      	strb	r3, [r7, #15]
 8003df2:	e029      	b.n	8003e48 <HAL_DMA_Abort_IT+0x78>
	} else {
		/* Disable DMA IT */
		__HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f022 020e 	bic.w	r2, r2, #14
 8003e02:	601a      	str	r2, [r3, #0]

		/* Disable the channel */
		__HAL_DMA_DISABLE(hdma);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f022 0201 	bic.w	r2, r2, #1
 8003e12:	601a      	str	r2, [r3, #0]
    }

#else
		/* Clear all flags */
		hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1
				<< (hdma->ChannelIndex & 0x1CU));
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e18:	f003 021c 	and.w	r2, r3, #28
		hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
				<< (hdma->ChannelIndex & 0x1CU));
 8003e20:	2101      	movs	r1, #1
 8003e22:	fa01 f202 	lsl.w	r2, r1, r2
		hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1
 8003e26:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

		/* Change the DMA state */
		hdma->State = HAL_DMA_STATE_READY;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

		/* Process Unlocked */
		__HAL_UNLOCK(hdma);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

		/* Call User Abort callback */
		if (hdma->XferAbortCallback != NULL) {
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d003      	beq.n	8003e48 <HAL_DMA_Abort_IT+0x78>
			hdma->XferAbortCallback(hdma);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	4798      	blx	r3
		}
	}
	return status;
 8003e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3710      	adds	r7, #16
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}

08003e52 <HAL_DMA_IRQHandler>:
 * @brief  Handle DMA interrupt request.
 * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
 *               the configuration information for the specified DMA Channel.
 * @retval None
 */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma) {
 8003e52:	b580      	push	{r7, lr}
 8003e54:	b084      	sub	sp, #16
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	60fb      	str	r3, [r7, #12]
	uint32_t source_it = hdma->Instance->CCR;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	60bb      	str	r3, [r7, #8]

	/* Half Transfer Complete Interrupt management ******************************/
	if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e6e:	f003 031c 	and.w	r3, r3, #28
 8003e72:	2204      	movs	r2, #4
 8003e74:	409a      	lsls	r2, r3
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	4013      	ands	r3, r2
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d026      	beq.n	8003ecc <HAL_DMA_IRQHandler+0x7a>
			&& ((source_it & DMA_IT_HT) != 0U)) {
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	f003 0304 	and.w	r3, r3, #4
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d021      	beq.n	8003ecc <HAL_DMA_IRQHandler+0x7a>
		/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
		if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U) {
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0320 	and.w	r3, r3, #32
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d107      	bne.n	8003ea6 <HAL_DMA_IRQHandler+0x54>
			/* Disable the half transfer interrupt */
			__HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f022 0204 	bic.w	r2, r2, #4
 8003ea4:	601a      	str	r2, [r3, #0]
		}
		/* Clear the half transfer complete flag */
		hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1
				<< (hdma->ChannelIndex & 0x1CU);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eaa:	f003 021c 	and.w	r2, r3, #28
		hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
				<< (hdma->ChannelIndex & 0x1CU);
 8003eb2:	2104      	movs	r1, #4
 8003eb4:	fa01 f202 	lsl.w	r2, r1, r2
		hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1
 8003eb8:	605a      	str	r2, [r3, #4]

		/* DMA peripheral state is not updated in Half Transfer */
		/* but in Transfer Complete case */

		if (hdma->XferHalfCpltCallback != NULL) {
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d071      	beq.n	8003fa6 <HAL_DMA_IRQHandler+0x154>
			/* Half transfer callback */
			hdma->XferHalfCpltCallback(hdma);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	4798      	blx	r3
		if (hdma->XferHalfCpltCallback != NULL) {
 8003eca:	e06c      	b.n	8003fa6 <HAL_DMA_IRQHandler+0x154>
		}
	}

	/* Transfer Complete Interrupt management ***********************************/
	else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ed0:	f003 031c 	and.w	r3, r3, #28
 8003ed4:	2202      	movs	r2, #2
 8003ed6:	409a      	lsls	r2, r3
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	4013      	ands	r3, r2
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d02e      	beq.n	8003f3e <HAL_DMA_IRQHandler+0xec>
			&& ((source_it & DMA_IT_TC) != 0U)) {
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	f003 0302 	and.w	r3, r3, #2
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d029      	beq.n	8003f3e <HAL_DMA_IRQHandler+0xec>
		if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U) {
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0320 	and.w	r3, r3, #32
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d10b      	bne.n	8003f10 <HAL_DMA_IRQHandler+0xbe>
			/* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
			/* Disable the transfer complete and error interrupt */
			/* if the DMA mode is not CIRCULAR  */
			__HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f022 020a 	bic.w	r2, r2, #10
 8003f06:	601a      	str	r2, [r3, #0]

			/* Change the DMA state */
			hdma->State = HAL_DMA_STATE_READY;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		}
		/* Clear the transfer complete flag */
		hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1
				<< (hdma->ChannelIndex & 0x1CU));
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f14:	f003 021c 	and.w	r2, r3, #28
		hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
				<< (hdma->ChannelIndex & 0x1CU));
 8003f1c:	2102      	movs	r1, #2
 8003f1e:	fa01 f202 	lsl.w	r2, r1, r2
		hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1
 8003f22:	605a      	str	r2, [r3, #4]

		/* Process Unlocked */
		__HAL_UNLOCK(hdma);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

		if (hdma->XferCpltCallback != NULL) {
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d038      	beq.n	8003fa6 <HAL_DMA_IRQHandler+0x154>
			/* Transfer complete callback */
			hdma->XferCpltCallback(hdma);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	4798      	blx	r3
		if (hdma->XferCpltCallback != NULL) {
 8003f3c:	e033      	b.n	8003fa6 <HAL_DMA_IRQHandler+0x154>
		}
	}

	/* Transfer Error Interrupt management **************************************/
	else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f42:	f003 031c 	and.w	r3, r3, #28
 8003f46:	2208      	movs	r2, #8
 8003f48:	409a      	lsls	r2, r3
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d02a      	beq.n	8003fa8 <HAL_DMA_IRQHandler+0x156>
			&& ((source_it & DMA_IT_TE) != 0U)) {
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	f003 0308 	and.w	r3, r3, #8
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d025      	beq.n	8003fa8 <HAL_DMA_IRQHandler+0x156>
		/* When a DMA transfer error occurs */
		/* A hardware clear of its EN bits is performed */
		/* Disable ALL DMA IT */
		__HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f022 020e 	bic.w	r2, r2, #14
 8003f6a:	601a      	str	r2, [r3, #0]

		/* Clear all flags */
		hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1
				<< (hdma->ChannelIndex & 0x1CU));
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f70:	f003 021c 	and.w	r2, r3, #28
		hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
				<< (hdma->ChannelIndex & 0x1CU));
 8003f78:	2101      	movs	r1, #1
 8003f7a:	fa01 f202 	lsl.w	r2, r1, r2
		hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1
 8003f7e:	605a      	str	r2, [r3, #4]

		/* Update error code */
		hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	63da      	str	r2, [r3, #60]	; 0x3c

		/* Change the DMA state */
		hdma->State = HAL_DMA_STATE_READY;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2201      	movs	r2, #1
 8003f8a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

		/* Process Unlocked */
		__HAL_UNLOCK(hdma);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

		if (hdma->XferErrorCallback != NULL) {
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d004      	beq.n	8003fa8 <HAL_DMA_IRQHandler+0x156>
			/* Transfer error callback */
			hdma->XferErrorCallback(hdma);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	4798      	blx	r3
		}
	} else {
		/* Nothing To Do */
	}
	return;
 8003fa6:	bf00      	nop
 8003fa8:	bf00      	nop
}
 8003faa:	3710      	adds	r7, #16
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <DMA_SetConfig>:
 * @param  DstAddress The destination memory Buffer address
 * @param  DataLength The length of data to be transferred from source to destination
 * @retval HAL status
 */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress,
		uint32_t DstAddress, uint32_t DataLength) {
 8003fb0:	b480      	push	{r7}
 8003fb2:	b085      	sub	sp, #20
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	607a      	str	r2, [r7, #4]
 8003fbc:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

	/* Clear all flags */
	hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fc2:	f003 021c 	and.w	r2, r3, #28
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fca:	2101      	movs	r1, #1
 8003fcc:	fa01 f202 	lsl.w	r2, r1, r2
 8003fd0:	605a      	str	r2, [r3, #4]

	/* Configure DMA Channel data length */
	hdma->Instance->CNDTR = DataLength;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	683a      	ldr	r2, [r7, #0]
 8003fd8:	605a      	str	r2, [r3, #4]

	/* Memory to Peripheral */
	if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH) {
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	2b10      	cmp	r3, #16
 8003fe0:	d108      	bne.n	8003ff4 <DMA_SetConfig+0x44>
		/* Configure DMA Channel destination address */
		hdma->Instance->CPAR = DstAddress;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	609a      	str	r2, [r3, #8]

		/* Configure DMA Channel source address */
		hdma->Instance->CMAR = SrcAddress;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68ba      	ldr	r2, [r7, #8]
 8003ff0:	60da      	str	r2, [r3, #12]
		hdma->Instance->CPAR = SrcAddress;

		/* Configure DMA Channel destination address */
		hdma->Instance->CMAR = DstAddress;
	}
}
 8003ff2:	e007      	b.n	8004004 <DMA_SetConfig+0x54>
		hdma->Instance->CPAR = SrcAddress;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	68ba      	ldr	r2, [r7, #8]
 8003ffa:	609a      	str	r2, [r3, #8]
		hdma->Instance->CMAR = DstAddress;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	60da      	str	r2, [r3, #12]
}
 8004004:	bf00      	nop
 8004006:	3714      	adds	r7, #20
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr

08004010 <HAL_GPIO_Init>:
 * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
 * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
 *         the configuration information for the specified GPIO peripheral.
 * @retval None
 */
void HAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_InitTypeDef *GPIO_Init) {
 8004010:	b480      	push	{r7}
 8004012:	b087      	sub	sp, #28
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	6039      	str	r1, [r7, #0]
	uint32_t position = 0x00u;
 800401a:	2300      	movs	r3, #0
 800401c:	617b      	str	r3, [r7, #20]
	assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
	assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
	assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

	/* Configure the port pins */
	while (((GPIO_Init->Pin) >> position) != 0x00u) {
 800401e:	e17f      	b.n	8004320 <HAL_GPIO_Init+0x310>
		/* Get current io position */
		iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	2101      	movs	r1, #1
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	fa01 f303 	lsl.w	r3, r1, r3
 800402c:	4013      	ands	r3, r2
 800402e:	60fb      	str	r3, [r7, #12]

		if (iocurrent != 0x00u) {
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2b00      	cmp	r3, #0
 8004034:	f000 8171 	beq.w	800431a <HAL_GPIO_Init+0x30a>
			/*--------------------- GPIO Mode Configuration ------------------------*/
			/* In case of Output or Alternate function mode selection */
			if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT)
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	f003 0303 	and.w	r3, r3, #3
 8004040:	2b01      	cmp	r3, #1
 8004042:	d005      	beq.n	8004050 <HAL_GPIO_Init+0x40>
					|| ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)) {
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	f003 0303 	and.w	r3, r3, #3
 800404c:	2b02      	cmp	r3, #2
 800404e:	d130      	bne.n	80040b2 <HAL_GPIO_Init+0xa2>
				/* Check the Speed parameter */
				assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

				/* Configure the IO Speed */
				temp = GPIOx->OSPEEDR;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	613b      	str	r3, [r7, #16]
				temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	005b      	lsls	r3, r3, #1
 800405a:	2203      	movs	r2, #3
 800405c:	fa02 f303 	lsl.w	r3, r2, r3
 8004060:	43db      	mvns	r3, r3
 8004062:	693a      	ldr	r2, [r7, #16]
 8004064:	4013      	ands	r3, r2
 8004066:	613b      	str	r3, [r7, #16]
				temp |= (GPIO_Init->Speed << (position * 2u));
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	68da      	ldr	r2, [r3, #12]
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	005b      	lsls	r3, r3, #1
 8004070:	fa02 f303 	lsl.w	r3, r2, r3
 8004074:	693a      	ldr	r2, [r7, #16]
 8004076:	4313      	orrs	r3, r2
 8004078:	613b      	str	r3, [r7, #16]
				GPIOx->OSPEEDR = temp;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	693a      	ldr	r2, [r7, #16]
 800407e:	609a      	str	r2, [r3, #8]

				/* Configure the IO Output Type */
				temp = GPIOx->OTYPER;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	613b      	str	r3, [r7, #16]
				temp &= ~(GPIO_OTYPER_OT0 << position);
 8004086:	2201      	movs	r2, #1
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	fa02 f303 	lsl.w	r3, r2, r3
 800408e:	43db      	mvns	r3, r3
 8004090:	693a      	ldr	r2, [r7, #16]
 8004092:	4013      	ands	r3, r2
 8004094:	613b      	str	r3, [r7, #16]
				temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos)
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	091b      	lsrs	r3, r3, #4
 800409c:	f003 0201 	and.w	r2, r3, #1
						<< position);
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	fa02 f303 	lsl.w	r3, r2, r3
				temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos)
 80040a6:	693a      	ldr	r2, [r7, #16]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	613b      	str	r3, [r7, #16]
				GPIOx->OTYPER = temp;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	693a      	ldr	r2, [r7, #16]
 80040b0:	605a      	str	r2, [r3, #4]
			}

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

			/* In case of Analog mode, check if ADC control mode is selected */
			if ((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG) {
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	f003 0303 	and.w	r3, r3, #3
 80040ba:	2b03      	cmp	r3, #3
 80040bc:	d118      	bne.n	80040f0 <HAL_GPIO_Init+0xe0>
				/* Configure the IO Output Type */
				temp = GPIOx->ASCR;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c2:	613b      	str	r3, [r7, #16]
				temp &= ~(GPIO_ASCR_ASC0 << position);
 80040c4:	2201      	movs	r2, #1
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	fa02 f303 	lsl.w	r3, r2, r3
 80040cc:	43db      	mvns	r3, r3
 80040ce:	693a      	ldr	r2, [r7, #16]
 80040d0:	4013      	ands	r3, r2
 80040d2:	613b      	str	r3, [r7, #16]
				temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3)
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	08db      	lsrs	r3, r3, #3
 80040da:	f003 0201 	and.w	r2, r3, #1
						<< position);
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	fa02 f303 	lsl.w	r3, r2, r3
				temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3)
 80040e4:	693a      	ldr	r2, [r7, #16]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	613b      	str	r3, [r7, #16]
				GPIOx->ASCR = temp;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	693a      	ldr	r2, [r7, #16]
 80040ee:	62da      	str	r2, [r3, #44]	; 0x2c
			}

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

			/* Activate the Pull-up or Pull down resistor for the current IO */
			if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) {
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	f003 0303 	and.w	r3, r3, #3
 80040f8:	2b03      	cmp	r3, #3
 80040fa:	d017      	beq.n	800412c <HAL_GPIO_Init+0x11c>
				/* Check the Pull parameter */
				assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

				temp = GPIOx->PUPDR;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	613b      	str	r3, [r7, #16]
				temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	005b      	lsls	r3, r3, #1
 8004106:	2203      	movs	r2, #3
 8004108:	fa02 f303 	lsl.w	r3, r2, r3
 800410c:	43db      	mvns	r3, r3
 800410e:	693a      	ldr	r2, [r7, #16]
 8004110:	4013      	ands	r3, r2
 8004112:	613b      	str	r3, [r7, #16]
				temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	689a      	ldr	r2, [r3, #8]
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	005b      	lsls	r3, r3, #1
 800411c:	fa02 f303 	lsl.w	r3, r2, r3
 8004120:	693a      	ldr	r2, [r7, #16]
 8004122:	4313      	orrs	r3, r2
 8004124:	613b      	str	r3, [r7, #16]
				GPIOx->PUPDR = temp;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	693a      	ldr	r2, [r7, #16]
 800412a:	60da      	str	r2, [r3, #12]
			}

			/* In case of Alternate function mode selection */
			if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF) {
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	f003 0303 	and.w	r3, r3, #3
 8004134:	2b02      	cmp	r3, #2
 8004136:	d123      	bne.n	8004180 <HAL_GPIO_Init+0x170>
				/* Check the Alternate function parameters */
				assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
				assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

				/* Configure Alternate function mapped with the current IO */
				temp = GPIOx->AFR[position >> 3u];
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	08da      	lsrs	r2, r3, #3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	3208      	adds	r2, #8
 8004140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004144:	613b      	str	r3, [r7, #16]
				temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	f003 0307 	and.w	r3, r3, #7
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	220f      	movs	r2, #15
 8004150:	fa02 f303 	lsl.w	r3, r2, r3
 8004154:	43db      	mvns	r3, r3
 8004156:	693a      	ldr	r2, [r7, #16]
 8004158:	4013      	ands	r3, r2
 800415a:	613b      	str	r3, [r7, #16]
				temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	691a      	ldr	r2, [r3, #16]
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	f003 0307 	and.w	r3, r3, #7
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	fa02 f303 	lsl.w	r3, r2, r3
 800416c:	693a      	ldr	r2, [r7, #16]
 800416e:	4313      	orrs	r3, r2
 8004170:	613b      	str	r3, [r7, #16]
				GPIOx->AFR[position >> 3u] = temp;
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	08da      	lsrs	r2, r3, #3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	3208      	adds	r2, #8
 800417a:	6939      	ldr	r1, [r7, #16]
 800417c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			}

			/* Configure IO Direction mode (Input, Output, Alternate or Analog) */
			temp = GPIOx->MODER;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	613b      	str	r3, [r7, #16]
			temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	005b      	lsls	r3, r3, #1
 800418a:	2203      	movs	r2, #3
 800418c:	fa02 f303 	lsl.w	r3, r2, r3
 8004190:	43db      	mvns	r3, r3
 8004192:	693a      	ldr	r2, [r7, #16]
 8004194:	4013      	ands	r3, r2
 8004196:	613b      	str	r3, [r7, #16]
			temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	f003 0203 	and.w	r2, r3, #3
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	005b      	lsls	r3, r3, #1
 80041a4:	fa02 f303 	lsl.w	r3, r2, r3
 80041a8:	693a      	ldr	r2, [r7, #16]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	613b      	str	r3, [r7, #16]
			GPIOx->MODER = temp;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	693a      	ldr	r2, [r7, #16]
 80041b2:	601a      	str	r2, [r3, #0]

			/*--------------------- EXTI Mode Configuration ------------------------*/
			/* Configure the External Interrupt or event for the current IO */
			if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u) {
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	f000 80ac 	beq.w	800431a <HAL_GPIO_Init+0x30a>
				/* Enable SYSCFG Clock */
				__HAL_RCC_SYSCFG_CLK_ENABLE();
 80041c2:	4b5f      	ldr	r3, [pc, #380]	; (8004340 <HAL_GPIO_Init+0x330>)
 80041c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041c6:	4a5e      	ldr	r2, [pc, #376]	; (8004340 <HAL_GPIO_Init+0x330>)
 80041c8:	f043 0301 	orr.w	r3, r3, #1
 80041cc:	6613      	str	r3, [r2, #96]	; 0x60
 80041ce:	4b5c      	ldr	r3, [pc, #368]	; (8004340 <HAL_GPIO_Init+0x330>)
 80041d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041d2:	f003 0301 	and.w	r3, r3, #1
 80041d6:	60bb      	str	r3, [r7, #8]
 80041d8:	68bb      	ldr	r3, [r7, #8]

				temp = SYSCFG->EXTICR[position >> 2u];
 80041da:	4a5a      	ldr	r2, [pc, #360]	; (8004344 <HAL_GPIO_Init+0x334>)
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	089b      	lsrs	r3, r3, #2
 80041e0:	3302      	adds	r3, #2
 80041e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041e6:	613b      	str	r3, [r7, #16]
				temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	f003 0303 	and.w	r3, r3, #3
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	220f      	movs	r2, #15
 80041f2:	fa02 f303 	lsl.w	r3, r2, r3
 80041f6:	43db      	mvns	r3, r3
 80041f8:	693a      	ldr	r2, [r7, #16]
 80041fa:	4013      	ands	r3, r2
 80041fc:	613b      	str	r3, [r7, #16]
				temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004204:	d025      	beq.n	8004252 <HAL_GPIO_Init+0x242>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4a4f      	ldr	r2, [pc, #316]	; (8004348 <HAL_GPIO_Init+0x338>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d01f      	beq.n	800424e <HAL_GPIO_Init+0x23e>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4a4e      	ldr	r2, [pc, #312]	; (800434c <HAL_GPIO_Init+0x33c>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d019      	beq.n	800424a <HAL_GPIO_Init+0x23a>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a4d      	ldr	r2, [pc, #308]	; (8004350 <HAL_GPIO_Init+0x340>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d013      	beq.n	8004246 <HAL_GPIO_Init+0x236>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4a4c      	ldr	r2, [pc, #304]	; (8004354 <HAL_GPIO_Init+0x344>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d00d      	beq.n	8004242 <HAL_GPIO_Init+0x232>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a4b      	ldr	r2, [pc, #300]	; (8004358 <HAL_GPIO_Init+0x348>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d007      	beq.n	800423e <HAL_GPIO_Init+0x22e>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a4a      	ldr	r2, [pc, #296]	; (800435c <HAL_GPIO_Init+0x34c>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d101      	bne.n	800423a <HAL_GPIO_Init+0x22a>
 8004236:	2306      	movs	r3, #6
 8004238:	e00c      	b.n	8004254 <HAL_GPIO_Init+0x244>
 800423a:	2307      	movs	r3, #7
 800423c:	e00a      	b.n	8004254 <HAL_GPIO_Init+0x244>
 800423e:	2305      	movs	r3, #5
 8004240:	e008      	b.n	8004254 <HAL_GPIO_Init+0x244>
 8004242:	2304      	movs	r3, #4
 8004244:	e006      	b.n	8004254 <HAL_GPIO_Init+0x244>
 8004246:	2303      	movs	r3, #3
 8004248:	e004      	b.n	8004254 <HAL_GPIO_Init+0x244>
 800424a:	2302      	movs	r3, #2
 800424c:	e002      	b.n	8004254 <HAL_GPIO_Init+0x244>
 800424e:	2301      	movs	r3, #1
 8004250:	e000      	b.n	8004254 <HAL_GPIO_Init+0x244>
 8004252:	2300      	movs	r3, #0
 8004254:	697a      	ldr	r2, [r7, #20]
 8004256:	f002 0203 	and.w	r2, r2, #3
 800425a:	0092      	lsls	r2, r2, #2
 800425c:	4093      	lsls	r3, r2
 800425e:	693a      	ldr	r2, [r7, #16]
 8004260:	4313      	orrs	r3, r2
 8004262:	613b      	str	r3, [r7, #16]
				SYSCFG->EXTICR[position >> 2u] = temp;
 8004264:	4937      	ldr	r1, [pc, #220]	; (8004344 <HAL_GPIO_Init+0x334>)
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	089b      	lsrs	r3, r3, #2
 800426a:	3302      	adds	r3, #2
 800426c:	693a      	ldr	r2, [r7, #16]
 800426e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				/* Clear Rising Falling edge configuration */
				temp = EXTI->RTSR1;
 8004272:	4b3b      	ldr	r3, [pc, #236]	; (8004360 <HAL_GPIO_Init+0x350>)
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	613b      	str	r3, [r7, #16]
				temp &= ~(iocurrent);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	43db      	mvns	r3, r3
 800427c:	693a      	ldr	r2, [r7, #16]
 800427e:	4013      	ands	r3, r2
 8004280:	613b      	str	r3, [r7, #16]
				if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u) {
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d003      	beq.n	8004296 <HAL_GPIO_Init+0x286>
					temp |= iocurrent;
 800428e:	693a      	ldr	r2, [r7, #16]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	4313      	orrs	r3, r2
 8004294:	613b      	str	r3, [r7, #16]
				}
				EXTI->RTSR1 = temp;
 8004296:	4a32      	ldr	r2, [pc, #200]	; (8004360 <HAL_GPIO_Init+0x350>)
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	6093      	str	r3, [r2, #8]

				temp = EXTI->FTSR1;
 800429c:	4b30      	ldr	r3, [pc, #192]	; (8004360 <HAL_GPIO_Init+0x350>)
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	613b      	str	r3, [r7, #16]
				temp &= ~(iocurrent);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	43db      	mvns	r3, r3
 80042a6:	693a      	ldr	r2, [r7, #16]
 80042a8:	4013      	ands	r3, r2
 80042aa:	613b      	str	r3, [r7, #16]
				if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u) {
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d003      	beq.n	80042c0 <HAL_GPIO_Init+0x2b0>
					temp |= iocurrent;
 80042b8:	693a      	ldr	r2, [r7, #16]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	4313      	orrs	r3, r2
 80042be:	613b      	str	r3, [r7, #16]
				}
				EXTI->FTSR1 = temp;
 80042c0:	4a27      	ldr	r2, [pc, #156]	; (8004360 <HAL_GPIO_Init+0x350>)
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	60d3      	str	r3, [r2, #12]

				/* Clear EXTI line configuration */
				temp = EXTI->EMR1;
 80042c6:	4b26      	ldr	r3, [pc, #152]	; (8004360 <HAL_GPIO_Init+0x350>)
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	613b      	str	r3, [r7, #16]
				temp &= ~(iocurrent);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	43db      	mvns	r3, r3
 80042d0:	693a      	ldr	r2, [r7, #16]
 80042d2:	4013      	ands	r3, r2
 80042d4:	613b      	str	r3, [r7, #16]
				if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u) {
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d003      	beq.n	80042ea <HAL_GPIO_Init+0x2da>
					temp |= iocurrent;
 80042e2:	693a      	ldr	r2, [r7, #16]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	613b      	str	r3, [r7, #16]
				}
				EXTI->EMR1 = temp;
 80042ea:	4a1d      	ldr	r2, [pc, #116]	; (8004360 <HAL_GPIO_Init+0x350>)
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	6053      	str	r3, [r2, #4]

				temp = EXTI->IMR1;
 80042f0:	4b1b      	ldr	r3, [pc, #108]	; (8004360 <HAL_GPIO_Init+0x350>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	613b      	str	r3, [r7, #16]
				temp &= ~(iocurrent);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	43db      	mvns	r3, r3
 80042fa:	693a      	ldr	r2, [r7, #16]
 80042fc:	4013      	ands	r3, r2
 80042fe:	613b      	str	r3, [r7, #16]
				if ((GPIO_Init->Mode & EXTI_IT) != 0x00u) {
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004308:	2b00      	cmp	r3, #0
 800430a:	d003      	beq.n	8004314 <HAL_GPIO_Init+0x304>
					temp |= iocurrent;
 800430c:	693a      	ldr	r2, [r7, #16]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	4313      	orrs	r3, r2
 8004312:	613b      	str	r3, [r7, #16]
				}
				EXTI->IMR1 = temp;
 8004314:	4a12      	ldr	r2, [pc, #72]	; (8004360 <HAL_GPIO_Init+0x350>)
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	6013      	str	r3, [r2, #0]
			}
		}

		position++;
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	3301      	adds	r3, #1
 800431e:	617b      	str	r3, [r7, #20]
	while (((GPIO_Init->Pin) >> position) != 0x00u) {
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	fa22 f303 	lsr.w	r3, r2, r3
 800432a:	2b00      	cmp	r3, #0
 800432c:	f47f ae78 	bne.w	8004020 <HAL_GPIO_Init+0x10>
	}
}
 8004330:	bf00      	nop
 8004332:	bf00      	nop
 8004334:	371c      	adds	r7, #28
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr
 800433e:	bf00      	nop
 8004340:	40021000 	.word	0x40021000
 8004344:	40010000 	.word	0x40010000
 8004348:	48000400 	.word	0x48000400
 800434c:	48000800 	.word	0x48000800
 8004350:	48000c00 	.word	0x48000c00
 8004354:	48001000 	.word	0x48001000
 8004358:	48001400 	.word	0x48001400
 800435c:	48001800 	.word	0x48001800
 8004360:	40010400 	.word	0x40010400

08004364 <HAL_GPIO_WritePin>:
 *            @arg GPIO_PIN_RESET: to clear the port pin
 *            @arg GPIO_PIN_SET: to set the port pin
 * @retval None
 */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin,
		GPIO_PinState PinState) {
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	460b      	mov	r3, r1
 800436e:	807b      	strh	r3, [r7, #2]
 8004370:	4613      	mov	r3, r2
 8004372:	707b      	strb	r3, [r7, #1]
	/* Check the parameters */
	assert_param(IS_GPIO_PIN(GPIO_Pin));
	assert_param(IS_GPIO_PIN_ACTION(PinState));

	if (PinState != GPIO_PIN_RESET) {
 8004374:	787b      	ldrb	r3, [r7, #1]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d003      	beq.n	8004382 <HAL_GPIO_WritePin+0x1e>
		GPIOx->BSRR = (uint32_t) GPIO_Pin;
 800437a:	887a      	ldrh	r2, [r7, #2]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	619a      	str	r2, [r3, #24]
	} else {
		GPIOx->BRR = (uint32_t) GPIO_Pin;
	}
}
 8004380:	e002      	b.n	8004388 <HAL_GPIO_WritePin+0x24>
		GPIOx->BRR = (uint32_t) GPIO_Pin;
 8004382:	887a      	ldrh	r2, [r7, #2]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004388:	bf00      	nop
 800438a:	370c      	adds	r7, #12
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr

08004394 <HAL_PWREx_GetVoltageRange>:
/**
 * @brief Return Voltage Scaling Range.
 * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
 *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
 */
uint32_t HAL_PWREx_GetVoltageRange(void) {
 8004394:	b480      	push	{r7}
 8004396:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
	return (PWR->CR1 & PWR_CR1_VOS);
 8004398:	4b04      	ldr	r3, [pc, #16]	; (80043ac <HAL_PWREx_GetVoltageRange+0x18>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr
 80043aa:	bf00      	nop
 80043ac:	40007000 	.word	0x40007000

080043b0 <HAL_PWREx_ControlVoltageScaling>:
 * @note  When moving from Range 2 to Range 1, the API waits for VOSF flag to be
 *        cleared before returning the status. If the flag is not cleared within
 *        50 microseconds, HAL_TIMEOUT status is reported.
 * @retval HAL Status
 */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling) {
 80043b0:	b480      	push	{r7}
 80043b2:	b085      	sub	sp, #20
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  }

#else

	/* If Set Range 1 */
	if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1) {
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043be:	d130      	bne.n	8004422 <HAL_PWREx_ControlVoltageScaling+0x72>
		if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1) {
 80043c0:	4b23      	ldr	r3, [pc, #140]	; (8004450 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80043c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043cc:	d038      	beq.n	8004440 <HAL_PWREx_ControlVoltageScaling+0x90>
			/* Set Range 1 */
			MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80043ce:	4b20      	ldr	r3, [pc, #128]	; (8004450 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80043d6:	4a1e      	ldr	r2, [pc, #120]	; (8004450 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043dc:	6013      	str	r3, [r2, #0]

			/* Wait until VOSF is cleared */
			wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock)
 80043de:	4b1d      	ldr	r3, [pc, #116]	; (8004454 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	2232      	movs	r2, #50	; 0x32
 80043e4:	fb02 f303 	mul.w	r3, r2, r3
					/ 1000000U) + 1U;
 80043e8:	4a1b      	ldr	r2, [pc, #108]	; (8004458 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80043ea:	fba2 2303 	umull	r2, r3, r2, r3
 80043ee:	0c9b      	lsrs	r3, r3, #18
			wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock)
 80043f0:	3301      	adds	r3, #1
 80043f2:	60fb      	str	r3, [r7, #12]
			while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80043f4:	e002      	b.n	80043fc <HAL_PWREx_ControlVoltageScaling+0x4c>
					&& (wait_loop_index != 0U)) {
				wait_loop_index--;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	3b01      	subs	r3, #1
 80043fa:	60fb      	str	r3, [r7, #12]
			while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80043fc:	4b14      	ldr	r3, [pc, #80]	; (8004450 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043fe:	695b      	ldr	r3, [r3, #20]
 8004400:	f403 6380 	and.w	r3, r3, #1024	; 0x400
					&& (wait_loop_index != 0U)) {
 8004404:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004408:	d102      	bne.n	8004410 <HAL_PWREx_ControlVoltageScaling+0x60>
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d1f2      	bne.n	80043f6 <HAL_PWREx_ControlVoltageScaling+0x46>
			}
			if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) {
 8004410:	4b0f      	ldr	r3, [pc, #60]	; (8004450 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004412:	695b      	ldr	r3, [r3, #20]
 8004414:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004418:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800441c:	d110      	bne.n	8004440 <HAL_PWREx_ControlVoltageScaling+0x90>
				return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e00f      	b.n	8004442 <HAL_PWREx_ControlVoltageScaling+0x92>
			}
		}
	} else {
		if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2) {
 8004422:	4b0b      	ldr	r3, [pc, #44]	; (8004450 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800442a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800442e:	d007      	beq.n	8004440 <HAL_PWREx_ControlVoltageScaling+0x90>
			/* Set Range 2 */
			MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004430:	4b07      	ldr	r3, [pc, #28]	; (8004450 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004438:	4a05      	ldr	r2, [pc, #20]	; (8004450 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800443a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800443e:	6013      	str	r3, [r2, #0]
			/* No need to wait for VOSF to be cleared for this transition */
		}
	}
#endif

	return HAL_OK;
 8004440:	2300      	movs	r3, #0
}
 8004442:	4618      	mov	r0, r3
 8004444:	3714      	adds	r7, #20
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop
 8004450:	40007000 	.word	0x40007000
 8004454:	2000000c 	.word	0x2000000c
 8004458:	431bde83 	.word	0x431bde83

0800445c <HAL_RCC_OscConfig>:
 *         first and then HSE On or HSE Bypass.
 * @note   If HSE failed to start, HSE should be disabled before recalling
 HAL_RCC_OscConfig().
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef *RCC_OscInitStruct) {
 800445c:	b580      	push	{r7, lr}
 800445e:	b088      	sub	sp, #32
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
	uint32_t tickstart;
	HAL_StatusTypeDef status;
	uint32_t sysclk_source, pll_config;

	/* Check Null pointer */
	if (RCC_OscInitStruct == NULL) {
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d101      	bne.n	800446e <HAL_RCC_OscConfig+0x12>
		return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e3ca      	b.n	8004c04 <HAL_RCC_OscConfig+0x7a8>
	}

	/* Check the parameters */
	assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

	sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800446e:	4b97      	ldr	r3, [pc, #604]	; (80046cc <HAL_RCC_OscConfig+0x270>)
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	f003 030c 	and.w	r3, r3, #12
 8004476:	61bb      	str	r3, [r7, #24]
	pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004478:	4b94      	ldr	r3, [pc, #592]	; (80046cc <HAL_RCC_OscConfig+0x270>)
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	f003 0303 	and.w	r3, r3, #3
 8004480:	617b      	str	r3, [r7, #20]

	/*----------------------------- MSI Configuration --------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 0310 	and.w	r3, r3, #16
 800448a:	2b00      	cmp	r3, #0
 800448c:	f000 80e4 	beq.w	8004658 <HAL_RCC_OscConfig+0x1fc>
		assert_param(
				IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
		assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

		/* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
		if ((sysclk_source == RCC_CFGR_SWS_MSI)
 8004490:	69bb      	ldr	r3, [r7, #24]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d007      	beq.n	80044a6 <HAL_RCC_OscConfig+0x4a>
				|| ((sysclk_source == RCC_CFGR_SWS_PLL)
 8004496:	69bb      	ldr	r3, [r7, #24]
 8004498:	2b0c      	cmp	r3, #12
 800449a:	f040 808b 	bne.w	80045b4 <HAL_RCC_OscConfig+0x158>
						&& (pll_config == RCC_PLLSOURCE_MSI))) {
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	f040 8087 	bne.w	80045b4 <HAL_RCC_OscConfig+0x158>
			if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80044a6:	4b89      	ldr	r3, [pc, #548]	; (80046cc <HAL_RCC_OscConfig+0x270>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 0302 	and.w	r3, r3, #2
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d005      	beq.n	80044be <HAL_RCC_OscConfig+0x62>
					&& (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)) {
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	699b      	ldr	r3, [r3, #24]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d101      	bne.n	80044be <HAL_RCC_OscConfig+0x62>
				return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e3a2      	b.n	8004c04 <HAL_RCC_OscConfig+0x7a8>
			/* Otherwise, just the calibration and MSI range change are allowed */
			else {
				/* To correctly read data from FLASH memory, the number of wait states (LATENCY)
				 must be correctly programmed according to the frequency of the CPU clock
				 (HCLK) and the supply voltage of the device. */
				if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE()) {
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a1a      	ldr	r2, [r3, #32]
 80044c2:	4b82      	ldr	r3, [pc, #520]	; (80046cc <HAL_RCC_OscConfig+0x270>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0308 	and.w	r3, r3, #8
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d004      	beq.n	80044d8 <HAL_RCC_OscConfig+0x7c>
 80044ce:	4b7f      	ldr	r3, [pc, #508]	; (80046cc <HAL_RCC_OscConfig+0x270>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044d6:	e005      	b.n	80044e4 <HAL_RCC_OscConfig+0x88>
 80044d8:	4b7c      	ldr	r3, [pc, #496]	; (80046cc <HAL_RCC_OscConfig+0x270>)
 80044da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044de:	091b      	lsrs	r3, r3, #4
 80044e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d223      	bcs.n	8004530 <HAL_RCC_OscConfig+0xd4>
					/* First increase number of wait states update if necessary */
					if (RCC_SetFlashLatencyFromMSIRange(
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6a1b      	ldr	r3, [r3, #32]
 80044ec:	4618      	mov	r0, r3
 80044ee:	f000 fd55 	bl	8004f9c <RCC_SetFlashLatencyFromMSIRange>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d001      	beq.n	80044fc <HAL_RCC_OscConfig+0xa0>
							RCC_OscInitStruct->MSIClockRange) != HAL_OK) {
						return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e383      	b.n	8004c04 <HAL_RCC_OscConfig+0x7a8>
					}

					/* Selects the Multiple Speed oscillator (MSI) clock range .*/
					__HAL_RCC_MSI_RANGE_CONFIG(
 80044fc:	4b73      	ldr	r3, [pc, #460]	; (80046cc <HAL_RCC_OscConfig+0x270>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a72      	ldr	r2, [pc, #456]	; (80046cc <HAL_RCC_OscConfig+0x270>)
 8004502:	f043 0308 	orr.w	r3, r3, #8
 8004506:	6013      	str	r3, [r2, #0]
 8004508:	4b70      	ldr	r3, [pc, #448]	; (80046cc <HAL_RCC_OscConfig+0x270>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6a1b      	ldr	r3, [r3, #32]
 8004514:	496d      	ldr	r1, [pc, #436]	; (80046cc <HAL_RCC_OscConfig+0x270>)
 8004516:	4313      	orrs	r3, r2
 8004518:	600b      	str	r3, [r1, #0]
							RCC_OscInitStruct->MSIClockRange);
					/* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
					__HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(
 800451a:	4b6c      	ldr	r3, [pc, #432]	; (80046cc <HAL_RCC_OscConfig+0x270>)
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	69db      	ldr	r3, [r3, #28]
 8004526:	021b      	lsls	r3, r3, #8
 8004528:	4968      	ldr	r1, [pc, #416]	; (80046cc <HAL_RCC_OscConfig+0x270>)
 800452a:	4313      	orrs	r3, r2
 800452c:	604b      	str	r3, [r1, #4]
 800452e:	e025      	b.n	800457c <HAL_RCC_OscConfig+0x120>
							RCC_OscInitStruct->MSICalibrationValue);
				} else {
					/* Else, keep current flash latency while decreasing applies */
					/* Selects the Multiple Speed oscillator (MSI) clock range .*/
					__HAL_RCC_MSI_RANGE_CONFIG(
 8004530:	4b66      	ldr	r3, [pc, #408]	; (80046cc <HAL_RCC_OscConfig+0x270>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a65      	ldr	r2, [pc, #404]	; (80046cc <HAL_RCC_OscConfig+0x270>)
 8004536:	f043 0308 	orr.w	r3, r3, #8
 800453a:	6013      	str	r3, [r2, #0]
 800453c:	4b63      	ldr	r3, [pc, #396]	; (80046cc <HAL_RCC_OscConfig+0x270>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6a1b      	ldr	r3, [r3, #32]
 8004548:	4960      	ldr	r1, [pc, #384]	; (80046cc <HAL_RCC_OscConfig+0x270>)
 800454a:	4313      	orrs	r3, r2
 800454c:	600b      	str	r3, [r1, #0]
							RCC_OscInitStruct->MSIClockRange);
					/* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
					__HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(
 800454e:	4b5f      	ldr	r3, [pc, #380]	; (80046cc <HAL_RCC_OscConfig+0x270>)
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	69db      	ldr	r3, [r3, #28]
 800455a:	021b      	lsls	r3, r3, #8
 800455c:	495b      	ldr	r1, [pc, #364]	; (80046cc <HAL_RCC_OscConfig+0x270>)
 800455e:	4313      	orrs	r3, r2
 8004560:	604b      	str	r3, [r1, #4]
							RCC_OscInitStruct->MSICalibrationValue);

					/* Decrease number of wait states update if necessary */
					/* Only possible when MSI is the System clock source  */
					if (sysclk_source == RCC_CFGR_SWS_MSI) {
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d109      	bne.n	800457c <HAL_RCC_OscConfig+0x120>
						if (RCC_SetFlashLatencyFromMSIRange(
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6a1b      	ldr	r3, [r3, #32]
 800456c:	4618      	mov	r0, r3
 800456e:	f000 fd15 	bl	8004f9c <RCC_SetFlashLatencyFromMSIRange>
 8004572:	4603      	mov	r3, r0
 8004574:	2b00      	cmp	r3, #0
 8004576:	d001      	beq.n	800457c <HAL_RCC_OscConfig+0x120>
								RCC_OscInitStruct->MSIClockRange) != HAL_OK) {
							return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e343      	b.n	8004c04 <HAL_RCC_OscConfig+0x7a8>
						}
					}
				}

				/* Update the SystemCoreClock global variable */
				SystemCoreClock = HAL_RCC_GetSysClockFreq()
 800457c:	f000 fc4a 	bl	8004e14 <HAL_RCC_GetSysClockFreq>
 8004580:	4602      	mov	r2, r0
						>> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE)
 8004582:	4b52      	ldr	r3, [pc, #328]	; (80046cc <HAL_RCC_OscConfig+0x270>)
 8004584:	689b      	ldr	r3, [r3, #8]
								>> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004586:	091b      	lsrs	r3, r3, #4
 8004588:	f003 030f 	and.w	r3, r3, #15
						>> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE)
 800458c:	4950      	ldr	r1, [pc, #320]	; (80046d0 <HAL_RCC_OscConfig+0x274>)
 800458e:	5ccb      	ldrb	r3, [r1, r3]
								>> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004590:	f003 031f 	and.w	r3, r3, #31
						>> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE)
 8004594:	fa22 f303 	lsr.w	r3, r2, r3
				SystemCoreClock = HAL_RCC_GetSysClockFreq()
 8004598:	4a4e      	ldr	r2, [pc, #312]	; (80046d4 <HAL_RCC_OscConfig+0x278>)
 800459a:	6013      	str	r3, [r2, #0]

				/* Configure the source of time base considering new system clocks settings*/
				status = HAL_InitTick(uwTickPrio);
 800459c:	4b4e      	ldr	r3, [pc, #312]	; (80046d8 <HAL_RCC_OscConfig+0x27c>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4618      	mov	r0, r3
 80045a2:	f7fc fed3 	bl	800134c <HAL_InitTick>
 80045a6:	4603      	mov	r3, r0
 80045a8:	73fb      	strb	r3, [r7, #15]
				if (status != HAL_OK) {
 80045aa:	7bfb      	ldrb	r3, [r7, #15]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d052      	beq.n	8004656 <HAL_RCC_OscConfig+0x1fa>
					return status;
 80045b0:	7bfb      	ldrb	r3, [r7, #15]
 80045b2:	e327      	b.n	8004c04 <HAL_RCC_OscConfig+0x7a8>
				}
			}
		} else {
			/* Check the MSI State */
			if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF) {
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	699b      	ldr	r3, [r3, #24]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d032      	beq.n	8004622 <HAL_RCC_OscConfig+0x1c6>
				/* Enable the Internal High Speed oscillator (MSI). */
				__HAL_RCC_MSI_ENABLE();
 80045bc:	4b43      	ldr	r3, [pc, #268]	; (80046cc <HAL_RCC_OscConfig+0x270>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a42      	ldr	r2, [pc, #264]	; (80046cc <HAL_RCC_OscConfig+0x270>)
 80045c2:	f043 0301 	orr.w	r3, r3, #1
 80045c6:	6013      	str	r3, [r2, #0]

				/* Get timeout */
				tickstart = HAL_GetTick();
 80045c8:	f7fc ff10 	bl	80013ec <HAL_GetTick>
 80045cc:	6138      	str	r0, [r7, #16]

				/* Wait till MSI is ready */
				while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U) {
 80045ce:	e008      	b.n	80045e2 <HAL_RCC_OscConfig+0x186>
					if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE) {
 80045d0:	f7fc ff0c 	bl	80013ec <HAL_GetTick>
 80045d4:	4602      	mov	r2, r0
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	2b02      	cmp	r3, #2
 80045dc:	d901      	bls.n	80045e2 <HAL_RCC_OscConfig+0x186>
						return HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	e310      	b.n	8004c04 <HAL_RCC_OscConfig+0x7a8>
				while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U) {
 80045e2:	4b3a      	ldr	r3, [pc, #232]	; (80046cc <HAL_RCC_OscConfig+0x270>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0302 	and.w	r3, r3, #2
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d0f0      	beq.n	80045d0 <HAL_RCC_OscConfig+0x174>
					}
				}
				/* Selects the Multiple Speed oscillator (MSI) clock range .*/
				__HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045ee:	4b37      	ldr	r3, [pc, #220]	; (80046cc <HAL_RCC_OscConfig+0x270>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a36      	ldr	r2, [pc, #216]	; (80046cc <HAL_RCC_OscConfig+0x270>)
 80045f4:	f043 0308 	orr.w	r3, r3, #8
 80045f8:	6013      	str	r3, [r2, #0]
 80045fa:	4b34      	ldr	r3, [pc, #208]	; (80046cc <HAL_RCC_OscConfig+0x270>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a1b      	ldr	r3, [r3, #32]
 8004606:	4931      	ldr	r1, [pc, #196]	; (80046cc <HAL_RCC_OscConfig+0x270>)
 8004608:	4313      	orrs	r3, r2
 800460a:	600b      	str	r3, [r1, #0]
				/* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
				__HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(
 800460c:	4b2f      	ldr	r3, [pc, #188]	; (80046cc <HAL_RCC_OscConfig+0x270>)
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	69db      	ldr	r3, [r3, #28]
 8004618:	021b      	lsls	r3, r3, #8
 800461a:	492c      	ldr	r1, [pc, #176]	; (80046cc <HAL_RCC_OscConfig+0x270>)
 800461c:	4313      	orrs	r3, r2
 800461e:	604b      	str	r3, [r1, #4]
 8004620:	e01a      	b.n	8004658 <HAL_RCC_OscConfig+0x1fc>
						RCC_OscInitStruct->MSICalibrationValue);

			} else {
				/* Disable the Internal High Speed oscillator (MSI). */
				__HAL_RCC_MSI_DISABLE();
 8004622:	4b2a      	ldr	r3, [pc, #168]	; (80046cc <HAL_RCC_OscConfig+0x270>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a29      	ldr	r2, [pc, #164]	; (80046cc <HAL_RCC_OscConfig+0x270>)
 8004628:	f023 0301 	bic.w	r3, r3, #1
 800462c:	6013      	str	r3, [r2, #0]

				/* Get timeout */
				tickstart = HAL_GetTick();
 800462e:	f7fc fedd 	bl	80013ec <HAL_GetTick>
 8004632:	6138      	str	r0, [r7, #16]

				/* Wait till MSI is ready */
				while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) {
 8004634:	e008      	b.n	8004648 <HAL_RCC_OscConfig+0x1ec>
					if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE) {
 8004636:	f7fc fed9 	bl	80013ec <HAL_GetTick>
 800463a:	4602      	mov	r2, r0
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	1ad3      	subs	r3, r2, r3
 8004640:	2b02      	cmp	r3, #2
 8004642:	d901      	bls.n	8004648 <HAL_RCC_OscConfig+0x1ec>
						return HAL_TIMEOUT;
 8004644:	2303      	movs	r3, #3
 8004646:	e2dd      	b.n	8004c04 <HAL_RCC_OscConfig+0x7a8>
				while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) {
 8004648:	4b20      	ldr	r3, [pc, #128]	; (80046cc <HAL_RCC_OscConfig+0x270>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 0302 	and.w	r3, r3, #2
 8004650:	2b00      	cmp	r3, #0
 8004652:	d1f0      	bne.n	8004636 <HAL_RCC_OscConfig+0x1da>
 8004654:	e000      	b.n	8004658 <HAL_RCC_OscConfig+0x1fc>
			if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004656:	bf00      	nop
				}
			}
		}
	}
	/*------------------------------- HSE Configuration ------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0301 	and.w	r3, r3, #1
 8004660:	2b00      	cmp	r3, #0
 8004662:	d074      	beq.n	800474e <HAL_RCC_OscConfig+0x2f2>
			== RCC_OSCILLATORTYPE_HSE) {
		/* Check the parameters */
		assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

		/* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
		if ((sysclk_source == RCC_CFGR_SWS_HSE)
 8004664:	69bb      	ldr	r3, [r7, #24]
 8004666:	2b08      	cmp	r3, #8
 8004668:	d005      	beq.n	8004676 <HAL_RCC_OscConfig+0x21a>
				|| ((sysclk_source == RCC_CFGR_SWS_PLL)
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	2b0c      	cmp	r3, #12
 800466e:	d10e      	bne.n	800468e <HAL_RCC_OscConfig+0x232>
						&& (pll_config == RCC_PLLSOURCE_HSE))) {
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	2b03      	cmp	r3, #3
 8004674:	d10b      	bne.n	800468e <HAL_RCC_OscConfig+0x232>
			if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004676:	4b15      	ldr	r3, [pc, #84]	; (80046cc <HAL_RCC_OscConfig+0x270>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d064      	beq.n	800474c <HAL_RCC_OscConfig+0x2f0>
					&& (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)) {
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d160      	bne.n	800474c <HAL_RCC_OscConfig+0x2f0>
				return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e2ba      	b.n	8004c04 <HAL_RCC_OscConfig+0x7a8>
			}
		} else {
			/* Set the new HSE configuration ---------------------------------------*/
			__HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004696:	d106      	bne.n	80046a6 <HAL_RCC_OscConfig+0x24a>
 8004698:	4b0c      	ldr	r3, [pc, #48]	; (80046cc <HAL_RCC_OscConfig+0x270>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a0b      	ldr	r2, [pc, #44]	; (80046cc <HAL_RCC_OscConfig+0x270>)
 800469e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046a2:	6013      	str	r3, [r2, #0]
 80046a4:	e026      	b.n	80046f4 <HAL_RCC_OscConfig+0x298>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046ae:	d115      	bne.n	80046dc <HAL_RCC_OscConfig+0x280>
 80046b0:	4b06      	ldr	r3, [pc, #24]	; (80046cc <HAL_RCC_OscConfig+0x270>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a05      	ldr	r2, [pc, #20]	; (80046cc <HAL_RCC_OscConfig+0x270>)
 80046b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046ba:	6013      	str	r3, [r2, #0]
 80046bc:	4b03      	ldr	r3, [pc, #12]	; (80046cc <HAL_RCC_OscConfig+0x270>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a02      	ldr	r2, [pc, #8]	; (80046cc <HAL_RCC_OscConfig+0x270>)
 80046c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046c6:	6013      	str	r3, [r2, #0]
 80046c8:	e014      	b.n	80046f4 <HAL_RCC_OscConfig+0x298>
 80046ca:	bf00      	nop
 80046cc:	40021000 	.word	0x40021000
 80046d0:	08007c18 	.word	0x08007c18
 80046d4:	2000000c 	.word	0x2000000c
 80046d8:	20000010 	.word	0x20000010
 80046dc:	4ba0      	ldr	r3, [pc, #640]	; (8004960 <HAL_RCC_OscConfig+0x504>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a9f      	ldr	r2, [pc, #636]	; (8004960 <HAL_RCC_OscConfig+0x504>)
 80046e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046e6:	6013      	str	r3, [r2, #0]
 80046e8:	4b9d      	ldr	r3, [pc, #628]	; (8004960 <HAL_RCC_OscConfig+0x504>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a9c      	ldr	r2, [pc, #624]	; (8004960 <HAL_RCC_OscConfig+0x504>)
 80046ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046f2:	6013      	str	r3, [r2, #0]

			/* Check the HSE State */
			if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF) {
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d013      	beq.n	8004724 <HAL_RCC_OscConfig+0x2c8>
				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 80046fc:	f7fc fe76 	bl	80013ec <HAL_GetTick>
 8004700:	6138      	str	r0, [r7, #16]

				/* Wait till HSE is ready */
				while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U) {
 8004702:	e008      	b.n	8004716 <HAL_RCC_OscConfig+0x2ba>
					if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 8004704:	f7fc fe72 	bl	80013ec <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	2b64      	cmp	r3, #100	; 0x64
 8004710:	d901      	bls.n	8004716 <HAL_RCC_OscConfig+0x2ba>
						return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e276      	b.n	8004c04 <HAL_RCC_OscConfig+0x7a8>
				while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U) {
 8004716:	4b92      	ldr	r3, [pc, #584]	; (8004960 <HAL_RCC_OscConfig+0x504>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d0f0      	beq.n	8004704 <HAL_RCC_OscConfig+0x2a8>
 8004722:	e014      	b.n	800474e <HAL_RCC_OscConfig+0x2f2>
					}
				}
			} else {
				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8004724:	f7fc fe62 	bl	80013ec <HAL_GetTick>
 8004728:	6138      	str	r0, [r7, #16]

				/* Wait till HSE is disabled */
				while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) {
 800472a:	e008      	b.n	800473e <HAL_RCC_OscConfig+0x2e2>
					if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 800472c:	f7fc fe5e 	bl	80013ec <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	2b64      	cmp	r3, #100	; 0x64
 8004738:	d901      	bls.n	800473e <HAL_RCC_OscConfig+0x2e2>
						return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e262      	b.n	8004c04 <HAL_RCC_OscConfig+0x7a8>
				while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) {
 800473e:	4b88      	ldr	r3, [pc, #544]	; (8004960 <HAL_RCC_OscConfig+0x504>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d1f0      	bne.n	800472c <HAL_RCC_OscConfig+0x2d0>
 800474a:	e000      	b.n	800474e <HAL_RCC_OscConfig+0x2f2>
			if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800474c:	bf00      	nop
				}
			}
		}
	}
	/*----------------------------- HSI Configuration --------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 0302 	and.w	r3, r3, #2
 8004756:	2b00      	cmp	r3, #0
 8004758:	d060      	beq.n	800481c <HAL_RCC_OscConfig+0x3c0>
		assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
		assert_param(
				IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

		/* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
		if ((sysclk_source == RCC_CFGR_SWS_HSI)
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	2b04      	cmp	r3, #4
 800475e:	d005      	beq.n	800476c <HAL_RCC_OscConfig+0x310>
				|| ((sysclk_source == RCC_CFGR_SWS_PLL)
 8004760:	69bb      	ldr	r3, [r7, #24]
 8004762:	2b0c      	cmp	r3, #12
 8004764:	d119      	bne.n	800479a <HAL_RCC_OscConfig+0x33e>
						&& (pll_config == RCC_PLLSOURCE_HSI))) {
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	2b02      	cmp	r3, #2
 800476a:	d116      	bne.n	800479a <HAL_RCC_OscConfig+0x33e>
			/* When HSI is used as system clock it will not be disabled */
			if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800476c:	4b7c      	ldr	r3, [pc, #496]	; (8004960 <HAL_RCC_OscConfig+0x504>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004774:	2b00      	cmp	r3, #0
 8004776:	d005      	beq.n	8004784 <HAL_RCC_OscConfig+0x328>
					&& (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)) {
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d101      	bne.n	8004784 <HAL_RCC_OscConfig+0x328>
				return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e23f      	b.n	8004c04 <HAL_RCC_OscConfig+0x7a8>
			}
			/* Otherwise, just the calibration is allowed */
			else {
				/* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(
 8004784:	4b76      	ldr	r3, [pc, #472]	; (8004960 <HAL_RCC_OscConfig+0x504>)
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	691b      	ldr	r3, [r3, #16]
 8004790:	061b      	lsls	r3, r3, #24
 8004792:	4973      	ldr	r1, [pc, #460]	; (8004960 <HAL_RCC_OscConfig+0x504>)
 8004794:	4313      	orrs	r3, r2
 8004796:	604b      	str	r3, [r1, #4]
			if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004798:	e040      	b.n	800481c <HAL_RCC_OscConfig+0x3c0>
						RCC_OscInitStruct->HSICalibrationValue);
			}
		} else {
			/* Check the HSI State */
			if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF) {
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d023      	beq.n	80047ea <HAL_RCC_OscConfig+0x38e>
				/* Enable the Internal High Speed oscillator (HSI). */
				__HAL_RCC_HSI_ENABLE();
 80047a2:	4b6f      	ldr	r3, [pc, #444]	; (8004960 <HAL_RCC_OscConfig+0x504>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a6e      	ldr	r2, [pc, #440]	; (8004960 <HAL_RCC_OscConfig+0x504>)
 80047a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047ac:	6013      	str	r3, [r2, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 80047ae:	f7fc fe1d 	bl	80013ec <HAL_GetTick>
 80047b2:	6138      	str	r0, [r7, #16]

				/* Wait till HSI is ready */
				while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U) {
 80047b4:	e008      	b.n	80047c8 <HAL_RCC_OscConfig+0x36c>
					if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 80047b6:	f7fc fe19 	bl	80013ec <HAL_GetTick>
 80047ba:	4602      	mov	r2, r0
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	d901      	bls.n	80047c8 <HAL_RCC_OscConfig+0x36c>
						return HAL_TIMEOUT;
 80047c4:	2303      	movs	r3, #3
 80047c6:	e21d      	b.n	8004c04 <HAL_RCC_OscConfig+0x7a8>
				while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U) {
 80047c8:	4b65      	ldr	r3, [pc, #404]	; (8004960 <HAL_RCC_OscConfig+0x504>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d0f0      	beq.n	80047b6 <HAL_RCC_OscConfig+0x35a>
					}
				}

				/* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(
 80047d4:	4b62      	ldr	r3, [pc, #392]	; (8004960 <HAL_RCC_OscConfig+0x504>)
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	691b      	ldr	r3, [r3, #16]
 80047e0:	061b      	lsls	r3, r3, #24
 80047e2:	495f      	ldr	r1, [pc, #380]	; (8004960 <HAL_RCC_OscConfig+0x504>)
 80047e4:	4313      	orrs	r3, r2
 80047e6:	604b      	str	r3, [r1, #4]
 80047e8:	e018      	b.n	800481c <HAL_RCC_OscConfig+0x3c0>
						RCC_OscInitStruct->HSICalibrationValue);
			} else {
				/* Disable the Internal High Speed oscillator (HSI). */
				__HAL_RCC_HSI_DISABLE();
 80047ea:	4b5d      	ldr	r3, [pc, #372]	; (8004960 <HAL_RCC_OscConfig+0x504>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a5c      	ldr	r2, [pc, #368]	; (8004960 <HAL_RCC_OscConfig+0x504>)
 80047f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047f4:	6013      	str	r3, [r2, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 80047f6:	f7fc fdf9 	bl	80013ec <HAL_GetTick>
 80047fa:	6138      	str	r0, [r7, #16]

				/* Wait till HSI is disabled */
				while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) {
 80047fc:	e008      	b.n	8004810 <HAL_RCC_OscConfig+0x3b4>
					if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 80047fe:	f7fc fdf5 	bl	80013ec <HAL_GetTick>
 8004802:	4602      	mov	r2, r0
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	1ad3      	subs	r3, r2, r3
 8004808:	2b02      	cmp	r3, #2
 800480a:	d901      	bls.n	8004810 <HAL_RCC_OscConfig+0x3b4>
						return HAL_TIMEOUT;
 800480c:	2303      	movs	r3, #3
 800480e:	e1f9      	b.n	8004c04 <HAL_RCC_OscConfig+0x7a8>
				while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) {
 8004810:	4b53      	ldr	r3, [pc, #332]	; (8004960 <HAL_RCC_OscConfig+0x504>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004818:	2b00      	cmp	r3, #0
 800481a:	d1f0      	bne.n	80047fe <HAL_RCC_OscConfig+0x3a2>
				}
			}
		}
	}
	/*------------------------------ LSI Configuration -------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0308 	and.w	r3, r3, #8
 8004824:	2b00      	cmp	r3, #0
 8004826:	d03c      	beq.n	80048a2 <HAL_RCC_OscConfig+0x446>
			== RCC_OSCILLATORTYPE_LSI) {
		/* Check the parameters */
		assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

		/* Check the LSI State */
		if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF) {
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	695b      	ldr	r3, [r3, #20]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d01c      	beq.n	800486a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

			/* Enable the Internal Low Speed oscillator (LSI). */
			__HAL_RCC_LSI_ENABLE();
 8004830:	4b4b      	ldr	r3, [pc, #300]	; (8004960 <HAL_RCC_OscConfig+0x504>)
 8004832:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004836:	4a4a      	ldr	r2, [pc, #296]	; (8004960 <HAL_RCC_OscConfig+0x504>)
 8004838:	f043 0301 	orr.w	r3, r3, #1
 800483c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 8004840:	f7fc fdd4 	bl	80013ec <HAL_GetTick>
 8004844:	6138      	str	r0, [r7, #16]

			/* Wait till LSI is ready */
			while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U) {
 8004846:	e008      	b.n	800485a <HAL_RCC_OscConfig+0x3fe>
				if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 8004848:	f7fc fdd0 	bl	80013ec <HAL_GetTick>
 800484c:	4602      	mov	r2, r0
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	2b02      	cmp	r3, #2
 8004854:	d901      	bls.n	800485a <HAL_RCC_OscConfig+0x3fe>
					return HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	e1d4      	b.n	8004c04 <HAL_RCC_OscConfig+0x7a8>
			while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U) {
 800485a:	4b41      	ldr	r3, [pc, #260]	; (8004960 <HAL_RCC_OscConfig+0x504>)
 800485c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004860:	f003 0302 	and.w	r3, r3, #2
 8004864:	2b00      	cmp	r3, #0
 8004866:	d0ef      	beq.n	8004848 <HAL_RCC_OscConfig+0x3ec>
 8004868:	e01b      	b.n	80048a2 <HAL_RCC_OscConfig+0x446>
				}
			}
		} else {
			/* Disable the Internal Low Speed oscillator (LSI). */
			__HAL_RCC_LSI_DISABLE();
 800486a:	4b3d      	ldr	r3, [pc, #244]	; (8004960 <HAL_RCC_OscConfig+0x504>)
 800486c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004870:	4a3b      	ldr	r2, [pc, #236]	; (8004960 <HAL_RCC_OscConfig+0x504>)
 8004872:	f023 0301 	bic.w	r3, r3, #1
 8004876:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 800487a:	f7fc fdb7 	bl	80013ec <HAL_GetTick>
 800487e:	6138      	str	r0, [r7, #16]

			/* Wait till LSI is disabled */
			while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U) {
 8004880:	e008      	b.n	8004894 <HAL_RCC_OscConfig+0x438>
				if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 8004882:	f7fc fdb3 	bl	80013ec <HAL_GetTick>
 8004886:	4602      	mov	r2, r0
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	1ad3      	subs	r3, r2, r3
 800488c:	2b02      	cmp	r3, #2
 800488e:	d901      	bls.n	8004894 <HAL_RCC_OscConfig+0x438>
					return HAL_TIMEOUT;
 8004890:	2303      	movs	r3, #3
 8004892:	e1b7      	b.n	8004c04 <HAL_RCC_OscConfig+0x7a8>
			while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U) {
 8004894:	4b32      	ldr	r3, [pc, #200]	; (8004960 <HAL_RCC_OscConfig+0x504>)
 8004896:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800489a:	f003 0302 	and.w	r3, r3, #2
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d1ef      	bne.n	8004882 <HAL_RCC_OscConfig+0x426>
				}
			}
		}
	}
	/*------------------------------ LSE Configuration -------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 0304 	and.w	r3, r3, #4
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	f000 80a6 	beq.w	80049fc <HAL_RCC_OscConfig+0x5a0>
			== RCC_OSCILLATORTYPE_LSE) {
		FlagStatus pwrclkchanged = RESET;
 80048b0:	2300      	movs	r3, #0
 80048b2:	77fb      	strb	r3, [r7, #31]
		/* Check the parameters */
		assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

		/* Update LSE configuration in Backup Domain control register    */
		/* Requires to enable write access to Backup Domain of necessary */
		if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN)) {
 80048b4:	4b2a      	ldr	r3, [pc, #168]	; (8004960 <HAL_RCC_OscConfig+0x504>)
 80048b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d10d      	bne.n	80048dc <HAL_RCC_OscConfig+0x480>
			__HAL_RCC_PWR_CLK_ENABLE();
 80048c0:	4b27      	ldr	r3, [pc, #156]	; (8004960 <HAL_RCC_OscConfig+0x504>)
 80048c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048c4:	4a26      	ldr	r2, [pc, #152]	; (8004960 <HAL_RCC_OscConfig+0x504>)
 80048c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048ca:	6593      	str	r3, [r2, #88]	; 0x58
 80048cc:	4b24      	ldr	r3, [pc, #144]	; (8004960 <HAL_RCC_OscConfig+0x504>)
 80048ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048d4:	60bb      	str	r3, [r7, #8]
 80048d6:	68bb      	ldr	r3, [r7, #8]
			pwrclkchanged = SET;
 80048d8:	2301      	movs	r3, #1
 80048da:	77fb      	strb	r3, [r7, #31]
		}

		if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP)) {
 80048dc:	4b21      	ldr	r3, [pc, #132]	; (8004964 <HAL_RCC_OscConfig+0x508>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d118      	bne.n	800491a <HAL_RCC_OscConfig+0x4be>
			/* Enable write access to Backup domain */
			SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048e8:	4b1e      	ldr	r3, [pc, #120]	; (8004964 <HAL_RCC_OscConfig+0x508>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a1d      	ldr	r2, [pc, #116]	; (8004964 <HAL_RCC_OscConfig+0x508>)
 80048ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048f2:	6013      	str	r3, [r2, #0]

			/* Wait for Backup domain Write protection disable */
			tickstart = HAL_GetTick();
 80048f4:	f7fc fd7a 	bl	80013ec <HAL_GetTick>
 80048f8:	6138      	str	r0, [r7, #16]

			while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP)) {
 80048fa:	e008      	b.n	800490e <HAL_RCC_OscConfig+0x4b2>
				if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE) {
 80048fc:	f7fc fd76 	bl	80013ec <HAL_GetTick>
 8004900:	4602      	mov	r2, r0
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	2b02      	cmp	r3, #2
 8004908:	d901      	bls.n	800490e <HAL_RCC_OscConfig+0x4b2>
					return HAL_TIMEOUT;
 800490a:	2303      	movs	r3, #3
 800490c:	e17a      	b.n	8004c04 <HAL_RCC_OscConfig+0x7a8>
			while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP)) {
 800490e:	4b15      	ldr	r3, [pc, #84]	; (8004964 <HAL_RCC_OscConfig+0x508>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004916:	2b00      	cmp	r3, #0
 8004918:	d0f0      	beq.n	80048fc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
		__HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	2b01      	cmp	r3, #1
 8004920:	d108      	bne.n	8004934 <HAL_RCC_OscConfig+0x4d8>
 8004922:	4b0f      	ldr	r3, [pc, #60]	; (8004960 <HAL_RCC_OscConfig+0x504>)
 8004924:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004928:	4a0d      	ldr	r2, [pc, #52]	; (8004960 <HAL_RCC_OscConfig+0x504>)
 800492a:	f043 0301 	orr.w	r3, r3, #1
 800492e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004932:	e029      	b.n	8004988 <HAL_RCC_OscConfig+0x52c>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	2b05      	cmp	r3, #5
 800493a:	d115      	bne.n	8004968 <HAL_RCC_OscConfig+0x50c>
 800493c:	4b08      	ldr	r3, [pc, #32]	; (8004960 <HAL_RCC_OscConfig+0x504>)
 800493e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004942:	4a07      	ldr	r2, [pc, #28]	; (8004960 <HAL_RCC_OscConfig+0x504>)
 8004944:	f043 0304 	orr.w	r3, r3, #4
 8004948:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800494c:	4b04      	ldr	r3, [pc, #16]	; (8004960 <HAL_RCC_OscConfig+0x504>)
 800494e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004952:	4a03      	ldr	r2, [pc, #12]	; (8004960 <HAL_RCC_OscConfig+0x504>)
 8004954:	f043 0301 	orr.w	r3, r3, #1
 8004958:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800495c:	e014      	b.n	8004988 <HAL_RCC_OscConfig+0x52c>
 800495e:	bf00      	nop
 8004960:	40021000 	.word	0x40021000
 8004964:	40007000 	.word	0x40007000
 8004968:	4b9c      	ldr	r3, [pc, #624]	; (8004bdc <HAL_RCC_OscConfig+0x780>)
 800496a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800496e:	4a9b      	ldr	r2, [pc, #620]	; (8004bdc <HAL_RCC_OscConfig+0x780>)
 8004970:	f023 0301 	bic.w	r3, r3, #1
 8004974:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004978:	4b98      	ldr	r3, [pc, #608]	; (8004bdc <HAL_RCC_OscConfig+0x780>)
 800497a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800497e:	4a97      	ldr	r2, [pc, #604]	; (8004bdc <HAL_RCC_OscConfig+0x780>)
 8004980:	f023 0304 	bic.w	r3, r3, #4
 8004984:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

		/* Check the LSE State */
		if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF) {
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d016      	beq.n	80049be <HAL_RCC_OscConfig+0x562>
			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 8004990:	f7fc fd2c 	bl	80013ec <HAL_GetTick>
 8004994:	6138      	str	r0, [r7, #16]

			/* Wait till LSE is ready */
			while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U) {
 8004996:	e00a      	b.n	80049ae <HAL_RCC_OscConfig+0x552>
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 8004998:	f7fc fd28 	bl	80013ec <HAL_GetTick>
 800499c:	4602      	mov	r2, r0
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	1ad3      	subs	r3, r2, r3
 80049a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d901      	bls.n	80049ae <HAL_RCC_OscConfig+0x552>
					return HAL_TIMEOUT;
 80049aa:	2303      	movs	r3, #3
 80049ac:	e12a      	b.n	8004c04 <HAL_RCC_OscConfig+0x7a8>
			while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U) {
 80049ae:	4b8b      	ldr	r3, [pc, #556]	; (8004bdc <HAL_RCC_OscConfig+0x780>)
 80049b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049b4:	f003 0302 	and.w	r3, r3, #2
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d0ed      	beq.n	8004998 <HAL_RCC_OscConfig+0x53c>
 80049bc:	e015      	b.n	80049ea <HAL_RCC_OscConfig+0x58e>
				}
			}
		} else {
			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 80049be:	f7fc fd15 	bl	80013ec <HAL_GetTick>
 80049c2:	6138      	str	r0, [r7, #16]

			/* Wait till LSE is disabled */
			while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U) {
 80049c4:	e00a      	b.n	80049dc <HAL_RCC_OscConfig+0x580>
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 80049c6:	f7fc fd11 	bl	80013ec <HAL_GetTick>
 80049ca:	4602      	mov	r2, r0
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	1ad3      	subs	r3, r2, r3
 80049d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d901      	bls.n	80049dc <HAL_RCC_OscConfig+0x580>
					return HAL_TIMEOUT;
 80049d8:	2303      	movs	r3, #3
 80049da:	e113      	b.n	8004c04 <HAL_RCC_OscConfig+0x7a8>
			while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U) {
 80049dc:	4b7f      	ldr	r3, [pc, #508]	; (8004bdc <HAL_RCC_OscConfig+0x780>)
 80049de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049e2:	f003 0302 	and.w	r3, r3, #2
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d1ed      	bne.n	80049c6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
		}

		/* Restore clock configuration if changed */
		if (pwrclkchanged == SET) {
 80049ea:	7ffb      	ldrb	r3, [r7, #31]
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d105      	bne.n	80049fc <HAL_RCC_OscConfig+0x5a0>
			__HAL_RCC_PWR_CLK_DISABLE();
 80049f0:	4b7a      	ldr	r3, [pc, #488]	; (8004bdc <HAL_RCC_OscConfig+0x780>)
 80049f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049f4:	4a79      	ldr	r2, [pc, #484]	; (8004bdc <HAL_RCC_OscConfig+0x780>)
 80049f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049fa:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
	/*-------------------------------- PLL Configuration -----------------------*/
	/* Check the parameters */
	assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

	if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE) {
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	f000 80fe 	beq.w	8004c02 <HAL_RCC_OscConfig+0x7a6>
		/* PLL On ? */
		if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON) {
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a0a:	2b02      	cmp	r3, #2
 8004a0c:	f040 80d0 	bne.w	8004bb0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
			assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
			assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

			/* Do nothing if PLL configuration is the unchanged */
			pll_config = RCC->PLLCFGR;
 8004a10:	4b72      	ldr	r3, [pc, #456]	; (8004bdc <HAL_RCC_OscConfig+0x780>)
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	617b      	str	r3, [r7, #20]
			if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	f003 0203 	and.w	r2, r3, #3
					!= RCC_OscInitStruct->PLL.PLLSource)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
			if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d130      	bne.n	8004a86 <HAL_RCC_OscConfig+0x62a>
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	f003 0270 	and.w	r2, r3, #112	; 0x70
							!= ((RCC_OscInitStruct->PLL.PLLM - 1U)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a2e:	3b01      	subs	r3, #1
									<< RCC_PLLCFGR_PLLM_Pos))
 8004a30:	011b      	lsls	r3, r3, #4
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d127      	bne.n	8004a86 <HAL_RCC_OscConfig+0x62a>
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
							!= (RCC_OscInitStruct->PLL.PLLN
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
									<< RCC_PLLCFGR_PLLN_Pos))
 8004a40:	021b      	lsls	r3, r3, #8
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d11f      	bne.n	8004a86 <HAL_RCC_OscConfig+0x62a>
					||
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
					(READ_BIT(pll_config, RCC_PLLCFGR_PLLP)
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
							!= ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ?
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	6b92      	ldr	r2, [r2, #56]	; 0x38
									0U : 1U))
 8004a50:	2a07      	cmp	r2, #7
 8004a52:	bf14      	ite	ne
 8004a54:	2201      	movne	r2, #1
 8004a56:	2200      	moveq	r2, #0
 8004a58:	b2d2      	uxtb	r2, r2
					||
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d113      	bne.n	8004a86 <HAL_RCC_OscConfig+0x62a>
					||
#endif
#endif
					(READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
							!= ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a68:	085b      	lsrs	r3, r3, #1
 8004a6a:	3b01      	subs	r3, #1
									<< RCC_PLLCFGR_PLLQ_Pos))
 8004a6c:	055b      	lsls	r3, r3, #21
					||
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d109      	bne.n	8004a86 <HAL_RCC_OscConfig+0x62a>
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
							!= ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7c:	085b      	lsrs	r3, r3, #1
 8004a7e:	3b01      	subs	r3, #1
									<< RCC_PLLCFGR_PLLR_Pos))) {
 8004a80:	065b      	lsls	r3, r3, #25
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d06e      	beq.n	8004b64 <HAL_RCC_OscConfig+0x708>
				/* Check if the PLL is used as system clock or not */
				if (sysclk_source != RCC_CFGR_SWS_PLL) {
 8004a86:	69bb      	ldr	r3, [r7, #24]
 8004a88:	2b0c      	cmp	r3, #12
 8004a8a:	d069      	beq.n	8004b60 <HAL_RCC_OscConfig+0x704>
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
					/* Check if main PLL can be updated */
					/* Not possible if the source is shared by other enabled PLLSAIx */
					if ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004a8c:	4b53      	ldr	r3, [pc, #332]	; (8004bdc <HAL_RCC_OscConfig+0x780>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d105      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
							|| (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004a98:	4b50      	ldr	r3, [pc, #320]	; (8004bdc <HAL_RCC_OscConfig+0x780>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d001      	beq.n	8004aa8 <HAL_RCC_OscConfig+0x64c>
#endif
							) {
						return HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e0ad      	b.n	8004c04 <HAL_RCC_OscConfig+0x7a8>
					} else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
					{
						/* Disable the main PLL. */
						__HAL_RCC_PLL_DISABLE();
 8004aa8:	4b4c      	ldr	r3, [pc, #304]	; (8004bdc <HAL_RCC_OscConfig+0x780>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a4b      	ldr	r2, [pc, #300]	; (8004bdc <HAL_RCC_OscConfig+0x780>)
 8004aae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ab2:	6013      	str	r3, [r2, #0]

						/* Get Start Tick*/
						tickstart = HAL_GetTick();
 8004ab4:	f7fc fc9a 	bl	80013ec <HAL_GetTick>
 8004ab8:	6138      	str	r0, [r7, #16]

						/* Wait till PLL is ready */
						while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U) {
 8004aba:	e008      	b.n	8004ace <HAL_RCC_OscConfig+0x672>
							if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 8004abc:	f7fc fc96 	bl	80013ec <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	2b02      	cmp	r3, #2
 8004ac8:	d901      	bls.n	8004ace <HAL_RCC_OscConfig+0x672>
								return HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	e09a      	b.n	8004c04 <HAL_RCC_OscConfig+0x7a8>
						while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U) {
 8004ace:	4b43      	ldr	r3, [pc, #268]	; (8004bdc <HAL_RCC_OscConfig+0x780>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d1f0      	bne.n	8004abc <HAL_RCC_OscConfig+0x660>
							}
						}

						/* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
						__HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ada:	4b40      	ldr	r3, [pc, #256]	; (8004bdc <HAL_RCC_OscConfig+0x780>)
 8004adc:	68da      	ldr	r2, [r3, #12]
 8004ade:	4b40      	ldr	r3, [pc, #256]	; (8004be0 <HAL_RCC_OscConfig+0x784>)
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004aea:	3a01      	subs	r2, #1
 8004aec:	0112      	lsls	r2, r2, #4
 8004aee:	4311      	orrs	r1, r2
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004af4:	0212      	lsls	r2, r2, #8
 8004af6:	4311      	orrs	r1, r2
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004afc:	0852      	lsrs	r2, r2, #1
 8004afe:	3a01      	subs	r2, #1
 8004b00:	0552      	lsls	r2, r2, #21
 8004b02:	4311      	orrs	r1, r2
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004b08:	0852      	lsrs	r2, r2, #1
 8004b0a:	3a01      	subs	r2, #1
 8004b0c:	0652      	lsls	r2, r2, #25
 8004b0e:	4311      	orrs	r1, r2
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004b14:	0912      	lsrs	r2, r2, #4
 8004b16:	0452      	lsls	r2, r2, #17
 8004b18:	430a      	orrs	r2, r1
 8004b1a:	4930      	ldr	r1, [pc, #192]	; (8004bdc <HAL_RCC_OscConfig+0x780>)
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

						/* Enable the main PLL. */
						__HAL_RCC_PLL_ENABLE();
 8004b20:	4b2e      	ldr	r3, [pc, #184]	; (8004bdc <HAL_RCC_OscConfig+0x780>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a2d      	ldr	r2, [pc, #180]	; (8004bdc <HAL_RCC_OscConfig+0x780>)
 8004b26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b2a:	6013      	str	r3, [r2, #0]

						/* Enable PLL System Clock output. */
						__HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b2c:	4b2b      	ldr	r3, [pc, #172]	; (8004bdc <HAL_RCC_OscConfig+0x780>)
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	4a2a      	ldr	r2, [pc, #168]	; (8004bdc <HAL_RCC_OscConfig+0x780>)
 8004b32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b36:	60d3      	str	r3, [r2, #12]

						/* Get Start Tick*/
						tickstart = HAL_GetTick();
 8004b38:	f7fc fc58 	bl	80013ec <HAL_GetTick>
 8004b3c:	6138      	str	r0, [r7, #16]

						/* Wait till PLL is ready */
						while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U) {
 8004b3e:	e008      	b.n	8004b52 <HAL_RCC_OscConfig+0x6f6>
							if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 8004b40:	f7fc fc54 	bl	80013ec <HAL_GetTick>
 8004b44:	4602      	mov	r2, r0
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	2b02      	cmp	r3, #2
 8004b4c:	d901      	bls.n	8004b52 <HAL_RCC_OscConfig+0x6f6>
								return HAL_TIMEOUT;
 8004b4e:	2303      	movs	r3, #3
 8004b50:	e058      	b.n	8004c04 <HAL_RCC_OscConfig+0x7a8>
						while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U) {
 8004b52:	4b22      	ldr	r3, [pc, #136]	; (8004bdc <HAL_RCC_OscConfig+0x780>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d0f0      	beq.n	8004b40 <HAL_RCC_OscConfig+0x6e4>
				if (sysclk_source != RCC_CFGR_SWS_PLL) {
 8004b5e:	e050      	b.n	8004c02 <HAL_RCC_OscConfig+0x7a6>
							}
						}
					}
				} else {
					/* PLL is already used as System core clock */
					return HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e04f      	b.n	8004c04 <HAL_RCC_OscConfig+0x7a8>
				}
			} else {
				/* PLL configuration is unchanged */
				/* Re-enable PLL if it was disabled (ie. low power mode) */
				if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U) {
 8004b64:	4b1d      	ldr	r3, [pc, #116]	; (8004bdc <HAL_RCC_OscConfig+0x780>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d148      	bne.n	8004c02 <HAL_RCC_OscConfig+0x7a6>
					/* Enable the main PLL. */
					__HAL_RCC_PLL_ENABLE();
 8004b70:	4b1a      	ldr	r3, [pc, #104]	; (8004bdc <HAL_RCC_OscConfig+0x780>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a19      	ldr	r2, [pc, #100]	; (8004bdc <HAL_RCC_OscConfig+0x780>)
 8004b76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b7a:	6013      	str	r3, [r2, #0]

					/* Enable PLL System Clock output. */
					__HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b7c:	4b17      	ldr	r3, [pc, #92]	; (8004bdc <HAL_RCC_OscConfig+0x780>)
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	4a16      	ldr	r2, [pc, #88]	; (8004bdc <HAL_RCC_OscConfig+0x780>)
 8004b82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b86:	60d3      	str	r3, [r2, #12]

					/* Get Start Tick*/
					tickstart = HAL_GetTick();
 8004b88:	f7fc fc30 	bl	80013ec <HAL_GetTick>
 8004b8c:	6138      	str	r0, [r7, #16]

					/* Wait till PLL is ready */
					while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U) {
 8004b8e:	e008      	b.n	8004ba2 <HAL_RCC_OscConfig+0x746>
						if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 8004b90:	f7fc fc2c 	bl	80013ec <HAL_GetTick>
 8004b94:	4602      	mov	r2, r0
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	2b02      	cmp	r3, #2
 8004b9c:	d901      	bls.n	8004ba2 <HAL_RCC_OscConfig+0x746>
							return HAL_TIMEOUT;
 8004b9e:	2303      	movs	r3, #3
 8004ba0:	e030      	b.n	8004c04 <HAL_RCC_OscConfig+0x7a8>
					while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U) {
 8004ba2:	4b0e      	ldr	r3, [pc, #56]	; (8004bdc <HAL_RCC_OscConfig+0x780>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d0f0      	beq.n	8004b90 <HAL_RCC_OscConfig+0x734>
 8004bae:	e028      	b.n	8004c02 <HAL_RCC_OscConfig+0x7a6>
					}
				}
			}
		} else {
			/* Check that PLL is not used as system clock or not */
			if (sysclk_source != RCC_CFGR_SWS_PLL) {
 8004bb0:	69bb      	ldr	r3, [r7, #24]
 8004bb2:	2b0c      	cmp	r3, #12
 8004bb4:	d023      	beq.n	8004bfe <HAL_RCC_OscConfig+0x7a2>
				/* Disable the main PLL. */
				__HAL_RCC_PLL_DISABLE();
 8004bb6:	4b09      	ldr	r3, [pc, #36]	; (8004bdc <HAL_RCC_OscConfig+0x780>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a08      	ldr	r2, [pc, #32]	; (8004bdc <HAL_RCC_OscConfig+0x780>)
 8004bbc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bc0:	6013      	str	r3, [r2, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8004bc2:	f7fc fc13 	bl	80013ec <HAL_GetTick>
 8004bc6:	6138      	str	r0, [r7, #16]

				/* Wait till PLL is disabled */
				while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U) {
 8004bc8:	e00c      	b.n	8004be4 <HAL_RCC_OscConfig+0x788>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 8004bca:	f7fc fc0f 	bl	80013ec <HAL_GetTick>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	2b02      	cmp	r3, #2
 8004bd6:	d905      	bls.n	8004be4 <HAL_RCC_OscConfig+0x788>
						return HAL_TIMEOUT;
 8004bd8:	2303      	movs	r3, #3
 8004bda:	e013      	b.n	8004c04 <HAL_RCC_OscConfig+0x7a8>
 8004bdc:	40021000 	.word	0x40021000
 8004be0:	f99d808c 	.word	0xf99d808c
				while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U) {
 8004be4:	4b09      	ldr	r3, [pc, #36]	; (8004c0c <HAL_RCC_OscConfig+0x7b0>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d1ec      	bne.n	8004bca <HAL_RCC_OscConfig+0x76e>
					}
				}
				/* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
				RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK
 8004bf0:	4b06      	ldr	r3, [pc, #24]	; (8004c0c <HAL_RCC_OscConfig+0x7b0>)
 8004bf2:	68da      	ldr	r2, [r3, #12]
 8004bf4:	4905      	ldr	r1, [pc, #20]	; (8004c0c <HAL_RCC_OscConfig+0x7b0>)
 8004bf6:	4b06      	ldr	r3, [pc, #24]	; (8004c10 <HAL_RCC_OscConfig+0x7b4>)
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	60cb      	str	r3, [r1, #12]
 8004bfc:	e001      	b.n	8004c02 <HAL_RCC_OscConfig+0x7a6>
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
			} else {
				/* PLL is already used as System core clock */
				return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e000      	b.n	8004c04 <HAL_RCC_OscConfig+0x7a8>
			}
		}
	}
	return HAL_OK;
 8004c02:	2300      	movs	r3, #0
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3720      	adds	r7, #32
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}
 8004c0c:	40021000 	.word	0x40021000
 8004c10:	feeefffc 	.word	0xfeeefffc

08004c14 <HAL_RCC_ClockConfig>:
 *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
 *         (for more details refer to section above "Initialization/de-initialization functions")
 * @retval None
 */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef *RCC_ClkInitStruct,
		uint32_t FLatency) {
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b084      	sub	sp, #16
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
	HAL_StatusTypeDef status;

	/* Check Null pointer */
	if (RCC_ClkInitStruct == NULL) {
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d101      	bne.n	8004c28 <HAL_RCC_ClockConfig+0x14>
		return HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e0e7      	b.n	8004df8 <HAL_RCC_ClockConfig+0x1e4>
	/* To correctly read data from FLASH memory, the number of wait states (LATENCY)
	 must be correctly programmed according to the frequency of the CPU clock
	 (HCLK) and the supply voltage of the device. */

	/* Increasing the number of wait states because of higher CPU frequency */
	if (FLatency > __HAL_FLASH_GET_LATENCY()) {
 8004c28:	4b75      	ldr	r3, [pc, #468]	; (8004e00 <HAL_RCC_ClockConfig+0x1ec>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 0307 	and.w	r3, r3, #7
 8004c30:	683a      	ldr	r2, [r7, #0]
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d910      	bls.n	8004c58 <HAL_RCC_ClockConfig+0x44>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		__HAL_FLASH_SET_LATENCY(FLatency);
 8004c36:	4b72      	ldr	r3, [pc, #456]	; (8004e00 <HAL_RCC_ClockConfig+0x1ec>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f023 0207 	bic.w	r2, r3, #7
 8004c3e:	4970      	ldr	r1, [pc, #448]	; (8004e00 <HAL_RCC_ClockConfig+0x1ec>)
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	4313      	orrs	r3, r2
 8004c44:	600b      	str	r3, [r1, #0]

		/* Check that the new number of wait states is taken into account to access the Flash
		 memory by reading the FLASH_ACR register */
		if (__HAL_FLASH_GET_LATENCY() != FLatency) {
 8004c46:	4b6e      	ldr	r3, [pc, #440]	; (8004e00 <HAL_RCC_ClockConfig+0x1ec>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0307 	and.w	r3, r3, #7
 8004c4e:	683a      	ldr	r2, [r7, #0]
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d001      	beq.n	8004c58 <HAL_RCC_ClockConfig+0x44>
			return HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	e0cf      	b.n	8004df8 <HAL_RCC_ClockConfig+0x1e4>
		}
	}

	/*----------------- HCLK Configuration prior to SYSCLK----------------------*/
	/* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0302 	and.w	r3, r3, #2
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d010      	beq.n	8004c86 <HAL_RCC_ClockConfig+0x72>
			== RCC_CLOCKTYPE_HCLK) {
		assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

		if (RCC_ClkInitStruct->AHBCLKDivider
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	689a      	ldr	r2, [r3, #8]
				> READ_BIT(RCC->CFGR, RCC_CFGR_HPRE)) {
 8004c68:	4b66      	ldr	r3, [pc, #408]	; (8004e04 <HAL_RCC_ClockConfig+0x1f0>)
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
		if (RCC_ClkInitStruct->AHBCLKDivider
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d908      	bls.n	8004c86 <HAL_RCC_ClockConfig+0x72>
			MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE,
 8004c74:	4b63      	ldr	r3, [pc, #396]	; (8004e04 <HAL_RCC_ClockConfig+0x1f0>)
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	4960      	ldr	r1, [pc, #384]	; (8004e04 <HAL_RCC_ClockConfig+0x1f0>)
 8004c82:	4313      	orrs	r3, r2
 8004c84:	608b      	str	r3, [r1, #8]
					RCC_ClkInitStruct->AHBCLKDivider);
		}
	}

	/*------------------------- SYSCLK Configuration ---------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f003 0301 	and.w	r3, r3, #1
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d04c      	beq.n	8004d2c <HAL_RCC_ClockConfig+0x118>
			== RCC_CLOCKTYPE_SYSCLK) {
		assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

		/* PLL is selected as System Clock Source */
		if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK) {
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	2b03      	cmp	r3, #3
 8004c98:	d107      	bne.n	8004caa <HAL_RCC_ClockConfig+0x96>
			/* Check the PLL ready flag */
			if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U) {
 8004c9a:	4b5a      	ldr	r3, [pc, #360]	; (8004e04 <HAL_RCC_ClockConfig+0x1f0>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d121      	bne.n	8004cea <HAL_RCC_ClockConfig+0xd6>
				return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e0a6      	b.n	8004df8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
#endif
		} else {
			/* HSE is selected as System Clock Source */
			if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE) {
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	2b02      	cmp	r3, #2
 8004cb0:	d107      	bne.n	8004cc2 <HAL_RCC_ClockConfig+0xae>
				/* Check the HSE ready flag */
				if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U) {
 8004cb2:	4b54      	ldr	r3, [pc, #336]	; (8004e04 <HAL_RCC_ClockConfig+0x1f0>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d115      	bne.n	8004cea <HAL_RCC_ClockConfig+0xd6>
					return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e09a      	b.n	8004df8 <HAL_RCC_ClockConfig+0x1e4>
				}
			}
			/* MSI is selected as System Clock Source */
			else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI) {
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d107      	bne.n	8004cda <HAL_RCC_ClockConfig+0xc6>
				/* Check the MSI ready flag */
				if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U) {
 8004cca:	4b4e      	ldr	r3, [pc, #312]	; (8004e04 <HAL_RCC_ClockConfig+0x1f0>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 0302 	and.w	r3, r3, #2
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d109      	bne.n	8004cea <HAL_RCC_ClockConfig+0xd6>
					return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e08e      	b.n	8004df8 <HAL_RCC_ClockConfig+0x1e4>
				}
			}
			/* HSI is selected as System Clock Source */
			else {
				/* Check the HSI ready flag */
				if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U) {
 8004cda:	4b4a      	ldr	r3, [pc, #296]	; (8004e04 <HAL_RCC_ClockConfig+0x1f0>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d101      	bne.n	8004cea <HAL_RCC_ClockConfig+0xd6>
					return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e086      	b.n	8004df8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

		}

		MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004cea:	4b46      	ldr	r3, [pc, #280]	; (8004e04 <HAL_RCC_ClockConfig+0x1f0>)
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	f023 0203 	bic.w	r2, r3, #3
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	4943      	ldr	r1, [pc, #268]	; (8004e04 <HAL_RCC_ClockConfig+0x1f0>)
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	608b      	str	r3, [r1, #8]

		/* Get Start Tick*/
		tickstart = HAL_GetTick();
 8004cfc:	f7fc fb76 	bl	80013ec <HAL_GetTick>
 8004d00:	60f8      	str	r0, [r7, #12]

		while (__HAL_RCC_GET_SYSCLK_SOURCE()
 8004d02:	e00a      	b.n	8004d1a <HAL_RCC_ClockConfig+0x106>
				!= (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos)) {
			if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE) {
 8004d04:	f7fc fb72 	bl	80013ec <HAL_GetTick>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d901      	bls.n	8004d1a <HAL_RCC_ClockConfig+0x106>
				return HAL_TIMEOUT;
 8004d16:	2303      	movs	r3, #3
 8004d18:	e06e      	b.n	8004df8 <HAL_RCC_ClockConfig+0x1e4>
		while (__HAL_RCC_GET_SYSCLK_SOURCE()
 8004d1a:	4b3a      	ldr	r3, [pc, #232]	; (8004e04 <HAL_RCC_ClockConfig+0x1f0>)
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	f003 020c 	and.w	r2, r3, #12
				!= (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos)) {
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d1eb      	bne.n	8004d04 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

	/*----------------- HCLK Configuration after SYSCLK-------------------------*/
	/* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 0302 	and.w	r3, r3, #2
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d010      	beq.n	8004d5a <HAL_RCC_ClockConfig+0x146>
			== RCC_CLOCKTYPE_HCLK) {
		if (RCC_ClkInitStruct->AHBCLKDivider
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	689a      	ldr	r2, [r3, #8]
				< READ_BIT(RCC->CFGR, RCC_CFGR_HPRE)) {
 8004d3c:	4b31      	ldr	r3, [pc, #196]	; (8004e04 <HAL_RCC_ClockConfig+0x1f0>)
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
		if (RCC_ClkInitStruct->AHBCLKDivider
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d208      	bcs.n	8004d5a <HAL_RCC_ClockConfig+0x146>
			MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE,
 8004d48:	4b2e      	ldr	r3, [pc, #184]	; (8004e04 <HAL_RCC_ClockConfig+0x1f0>)
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	492b      	ldr	r1, [pc, #172]	; (8004e04 <HAL_RCC_ClockConfig+0x1f0>)
 8004d56:	4313      	orrs	r3, r2
 8004d58:	608b      	str	r3, [r1, #8]
					RCC_ClkInitStruct->AHBCLKDivider);
		}
	}

	/* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
	if (FLatency < __HAL_FLASH_GET_LATENCY()) {
 8004d5a:	4b29      	ldr	r3, [pc, #164]	; (8004e00 <HAL_RCC_ClockConfig+0x1ec>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 0307 	and.w	r3, r3, #7
 8004d62:	683a      	ldr	r2, [r7, #0]
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d210      	bcs.n	8004d8a <HAL_RCC_ClockConfig+0x176>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		__HAL_FLASH_SET_LATENCY(FLatency);
 8004d68:	4b25      	ldr	r3, [pc, #148]	; (8004e00 <HAL_RCC_ClockConfig+0x1ec>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f023 0207 	bic.w	r2, r3, #7
 8004d70:	4923      	ldr	r1, [pc, #140]	; (8004e00 <HAL_RCC_ClockConfig+0x1ec>)
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	4313      	orrs	r3, r2
 8004d76:	600b      	str	r3, [r1, #0]

		/* Check that the new number of wait states is taken into account to access the Flash
		 memory by reading the FLASH_ACR register */
		if (__HAL_FLASH_GET_LATENCY() != FLatency) {
 8004d78:	4b21      	ldr	r3, [pc, #132]	; (8004e00 <HAL_RCC_ClockConfig+0x1ec>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 0307 	and.w	r3, r3, #7
 8004d80:	683a      	ldr	r2, [r7, #0]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d001      	beq.n	8004d8a <HAL_RCC_ClockConfig+0x176>
			return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e036      	b.n	8004df8 <HAL_RCC_ClockConfig+0x1e4>
		}
	}

	/*-------------------------- PCLK1 Configuration ---------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 0304 	and.w	r3, r3, #4
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d008      	beq.n	8004da8 <HAL_RCC_ClockConfig+0x194>
			== RCC_CLOCKTYPE_PCLK1) {
		assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
		MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1,
 8004d96:	4b1b      	ldr	r3, [pc, #108]	; (8004e04 <HAL_RCC_ClockConfig+0x1f0>)
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	4918      	ldr	r1, [pc, #96]	; (8004e04 <HAL_RCC_ClockConfig+0x1f0>)
 8004da4:	4313      	orrs	r3, r2
 8004da6:	608b      	str	r3, [r1, #8]
				RCC_ClkInitStruct->APB1CLKDivider);
	}

	/*-------------------------- PCLK2 Configuration ---------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 0308 	and.w	r3, r3, #8
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d009      	beq.n	8004dc8 <HAL_RCC_ClockConfig+0x1b4>
			== RCC_CLOCKTYPE_PCLK2) {
		assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
		MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2,
 8004db4:	4b13      	ldr	r3, [pc, #76]	; (8004e04 <HAL_RCC_ClockConfig+0x1f0>)
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	691b      	ldr	r3, [r3, #16]
 8004dc0:	00db      	lsls	r3, r3, #3
 8004dc2:	4910      	ldr	r1, [pc, #64]	; (8004e04 <HAL_RCC_ClockConfig+0x1f0>)
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	608b      	str	r3, [r1, #8]
				((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
	}

	/* Update the SystemCoreClock global variable */
	SystemCoreClock = HAL_RCC_GetSysClockFreq()
 8004dc8:	f000 f824 	bl	8004e14 <HAL_RCC_GetSysClockFreq>
 8004dcc:	4602      	mov	r2, r0
			>> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE)
 8004dce:	4b0d      	ldr	r3, [pc, #52]	; (8004e04 <HAL_RCC_ClockConfig+0x1f0>)
 8004dd0:	689b      	ldr	r3, [r3, #8]
					>> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004dd2:	091b      	lsrs	r3, r3, #4
 8004dd4:	f003 030f 	and.w	r3, r3, #15
			>> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE)
 8004dd8:	490b      	ldr	r1, [pc, #44]	; (8004e08 <HAL_RCC_ClockConfig+0x1f4>)
 8004dda:	5ccb      	ldrb	r3, [r1, r3]
					>> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004ddc:	f003 031f 	and.w	r3, r3, #31
			>> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE)
 8004de0:	fa22 f303 	lsr.w	r3, r2, r3
	SystemCoreClock = HAL_RCC_GetSysClockFreq()
 8004de4:	4a09      	ldr	r2, [pc, #36]	; (8004e0c <HAL_RCC_ClockConfig+0x1f8>)
 8004de6:	6013      	str	r3, [r2, #0]

	/* Configure the source of time base considering new system clocks settings*/
	status = HAL_InitTick(uwTickPrio);
 8004de8:	4b09      	ldr	r3, [pc, #36]	; (8004e10 <HAL_RCC_ClockConfig+0x1fc>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4618      	mov	r0, r3
 8004dee:	f7fc faad 	bl	800134c <HAL_InitTick>
 8004df2:	4603      	mov	r3, r0
 8004df4:	72fb      	strb	r3, [r7, #11]

	return status;
 8004df6:	7afb      	ldrb	r3, [r7, #11]
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3710      	adds	r7, #16
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}
 8004e00:	40022000 	.word	0x40022000
 8004e04:	40021000 	.word	0x40021000
 8004e08:	08007c18 	.word	0x08007c18
 8004e0c:	2000000c 	.word	0x2000000c
 8004e10:	20000010 	.word	0x20000010

08004e14 <HAL_RCC_GetSysClockFreq>:
 *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
 *
 *
 * @retval SYSCLK frequency
 */
uint32_t HAL_RCC_GetSysClockFreq(void) {
 8004e14:	b480      	push	{r7}
 8004e16:	b089      	sub	sp, #36	; 0x24
 8004e18:	af00      	add	r7, sp, #0
	uint32_t msirange = 0U, sysclockfreq = 0U;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	61fb      	str	r3, [r7, #28]
 8004e1e:	2300      	movs	r3, #0
 8004e20:	61bb      	str	r3, [r7, #24]
	uint32_t pllvco, pllsource, pllr, pllm; /* no init needed */
	uint32_t sysclk_source, pll_oscsource;

	sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e22:	4b3e      	ldr	r3, [pc, #248]	; (8004f1c <HAL_RCC_GetSysClockFreq+0x108>)
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	f003 030c 	and.w	r3, r3, #12
 8004e2a:	613b      	str	r3, [r7, #16]
	pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e2c:	4b3b      	ldr	r3, [pc, #236]	; (8004f1c <HAL_RCC_GetSysClockFreq+0x108>)
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	f003 0303 	and.w	r3, r3, #3
 8004e34:	60fb      	str	r3, [r7, #12]

	if ((sysclk_source == RCC_CFGR_SWS_MSI)
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d005      	beq.n	8004e48 <HAL_RCC_GetSysClockFreq+0x34>
			|| ((sysclk_source == RCC_CFGR_SWS_PLL)
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	2b0c      	cmp	r3, #12
 8004e40:	d121      	bne.n	8004e86 <HAL_RCC_GetSysClockFreq+0x72>
					&& (pll_oscsource == RCC_PLLSOURCE_MSI))) {
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d11e      	bne.n	8004e86 <HAL_RCC_GetSysClockFreq+0x72>
		/* MSI or PLL with MSI source used as system clock source */

		/* Get SYSCLK source */
		if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U) { /* MSISRANGE from RCC_CSR applies */
 8004e48:	4b34      	ldr	r3, [pc, #208]	; (8004f1c <HAL_RCC_GetSysClockFreq+0x108>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 0308 	and.w	r3, r3, #8
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d107      	bne.n	8004e64 <HAL_RCC_GetSysClockFreq+0x50>
			msirange = READ_BIT(RCC->CSR,
 8004e54:	4b31      	ldr	r3, [pc, #196]	; (8004f1c <HAL_RCC_GetSysClockFreq+0x108>)
 8004e56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
					RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004e5a:	0a1b      	lsrs	r3, r3, #8
			msirange = READ_BIT(RCC->CSR,
 8004e5c:	f003 030f 	and.w	r3, r3, #15
 8004e60:	61fb      	str	r3, [r7, #28]
 8004e62:	e005      	b.n	8004e70 <HAL_RCC_GetSysClockFreq+0x5c>
		} else { /* MSIRANGE from RCC_CR applies */
			msirange =
					READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004e64:	4b2d      	ldr	r3, [pc, #180]	; (8004f1c <HAL_RCC_GetSysClockFreq+0x108>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	091b      	lsrs	r3, r3, #4
			msirange =
 8004e6a:	f003 030f 	and.w	r3, r3, #15
 8004e6e:	61fb      	str	r3, [r7, #28]
		}
		/*MSI frequency range in HZ*/
		msirange = MSIRangeTable[msirange];
 8004e70:	4a2b      	ldr	r2, [pc, #172]	; (8004f20 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e78:	61fb      	str	r3, [r7, #28]

		if (sysclk_source == RCC_CFGR_SWS_MSI) {
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d10d      	bne.n	8004e9c <HAL_RCC_GetSysClockFreq+0x88>
			/* MSI used as system clock source */
			sysclockfreq = msirange;
 8004e80:	69fb      	ldr	r3, [r7, #28]
 8004e82:	61bb      	str	r3, [r7, #24]
		if (sysclk_source == RCC_CFGR_SWS_MSI) {
 8004e84:	e00a      	b.n	8004e9c <HAL_RCC_GetSysClockFreq+0x88>
		}
	} else if (sysclk_source == RCC_CFGR_SWS_HSI) {
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	2b04      	cmp	r3, #4
 8004e8a:	d102      	bne.n	8004e92 <HAL_RCC_GetSysClockFreq+0x7e>
		/* HSI used as system clock source */
		sysclockfreq = HSI_VALUE;
 8004e8c:	4b25      	ldr	r3, [pc, #148]	; (8004f24 <HAL_RCC_GetSysClockFreq+0x110>)
 8004e8e:	61bb      	str	r3, [r7, #24]
 8004e90:	e004      	b.n	8004e9c <HAL_RCC_GetSysClockFreq+0x88>
	} else if (sysclk_source == RCC_CFGR_SWS_HSE) {
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	2b08      	cmp	r3, #8
 8004e96:	d101      	bne.n	8004e9c <HAL_RCC_GetSysClockFreq+0x88>
		/* HSE used as system clock source */
		sysclockfreq = HSE_VALUE;
 8004e98:	4b23      	ldr	r3, [pc, #140]	; (8004f28 <HAL_RCC_GetSysClockFreq+0x114>)
 8004e9a:	61bb      	str	r3, [r7, #24]
	} else {
		/* unexpected case: sysclockfreq at 0 */
	}

	if (sysclk_source == RCC_CFGR_SWS_PLL) {
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	2b0c      	cmp	r3, #12
 8004ea0:	d134      	bne.n	8004f0c <HAL_RCC_GetSysClockFreq+0xf8>
		/* PLL used as system clock  source */

		/* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
		 SYSCLK = PLL_VCO / PLLR
		 */
		pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004ea2:	4b1e      	ldr	r3, [pc, #120]	; (8004f1c <HAL_RCC_GetSysClockFreq+0x108>)
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	f003 0303 	and.w	r3, r3, #3
 8004eaa:	60bb      	str	r3, [r7, #8]

		switch (pllsource) {
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d003      	beq.n	8004eba <HAL_RCC_GetSysClockFreq+0xa6>
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	2b03      	cmp	r3, #3
 8004eb6:	d003      	beq.n	8004ec0 <HAL_RCC_GetSysClockFreq+0xac>
 8004eb8:	e005      	b.n	8004ec6 <HAL_RCC_GetSysClockFreq+0xb2>
		case RCC_PLLSOURCE_HSI: /* HSI used as PLL clock source */
			pllvco = HSI_VALUE;
 8004eba:	4b1a      	ldr	r3, [pc, #104]	; (8004f24 <HAL_RCC_GetSysClockFreq+0x110>)
 8004ebc:	617b      	str	r3, [r7, #20]
			break;
 8004ebe:	e005      	b.n	8004ecc <HAL_RCC_GetSysClockFreq+0xb8>

		case RCC_PLLSOURCE_HSE: /* HSE used as PLL clock source */
			pllvco = HSE_VALUE;
 8004ec0:	4b19      	ldr	r3, [pc, #100]	; (8004f28 <HAL_RCC_GetSysClockFreq+0x114>)
 8004ec2:	617b      	str	r3, [r7, #20]
			break;
 8004ec4:	e002      	b.n	8004ecc <HAL_RCC_GetSysClockFreq+0xb8>

		case RCC_PLLSOURCE_MSI: /* MSI used as PLL clock source */
		default:
			pllvco = msirange;
 8004ec6:	69fb      	ldr	r3, [r7, #28]
 8004ec8:	617b      	str	r3, [r7, #20]
			break;
 8004eca:	bf00      	nop
		}
		pllm =
				(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM)
 8004ecc:	4b13      	ldr	r3, [pc, #76]	; (8004f1c <HAL_RCC_GetSysClockFreq+0x108>)
 8004ece:	68db      	ldr	r3, [r3, #12]
						>> RCC_PLLCFGR_PLLM_Pos) + 1U;
 8004ed0:	091b      	lsrs	r3, r3, #4
 8004ed2:	f003 0307 	and.w	r3, r3, #7
		pllm =
 8004ed6:	3301      	adds	r3, #1
 8004ed8:	607b      	str	r3, [r7, #4]
		pllvco = (pllvco
				* (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN)
 8004eda:	4b10      	ldr	r3, [pc, #64]	; (8004f1c <HAL_RCC_GetSysClockFreq+0x108>)
 8004edc:	68db      	ldr	r3, [r3, #12]
						>> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004ede:	0a1b      	lsrs	r3, r3, #8
 8004ee0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
				* (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN)
 8004ee4:	697a      	ldr	r2, [r7, #20]
 8004ee6:	fb03 f202 	mul.w	r2, r3, r2
		pllvco = (pllvco
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ef0:	617b      	str	r3, [r7, #20]
		pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR)
 8004ef2:	4b0a      	ldr	r3, [pc, #40]	; (8004f1c <HAL_RCC_GetSysClockFreq+0x108>)
 8004ef4:	68db      	ldr	r3, [r3, #12]
				>> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8004ef6:	0e5b      	lsrs	r3, r3, #25
 8004ef8:	f003 0303 	and.w	r3, r3, #3
 8004efc:	3301      	adds	r3, #1
		pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR)
 8004efe:	005b      	lsls	r3, r3, #1
 8004f00:	603b      	str	r3, [r7, #0]
		sysclockfreq = pllvco / pllr;
 8004f02:	697a      	ldr	r2, [r7, #20]
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f0a:	61bb      	str	r3, [r7, #24]
	}

	return sysclockfreq;
 8004f0c:	69bb      	ldr	r3, [r7, #24]
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3724      	adds	r7, #36	; 0x24
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr
 8004f1a:	bf00      	nop
 8004f1c:	40021000 	.word	0x40021000
 8004f20:	08007c30 	.word	0x08007c30
 8004f24:	00f42400 	.word	0x00f42400
 8004f28:	007a1200 	.word	0x007a1200

08004f2c <HAL_RCC_GetHCLKFreq>:
 *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
 *
 * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
 * @retval HCLK frequency in Hz
 */
uint32_t HAL_RCC_GetHCLKFreq(void) {
 8004f2c:	b480      	push	{r7}
 8004f2e:	af00      	add	r7, sp, #0
	return SystemCoreClock;
 8004f30:	4b03      	ldr	r3, [pc, #12]	; (8004f40 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f32:	681b      	ldr	r3, [r3, #0]
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr
 8004f3e:	bf00      	nop
 8004f40:	2000000c 	.word	0x2000000c

08004f44 <HAL_RCC_GetPCLK1Freq>:
 * @brief  Return the PCLK1 frequency.
 * @note   Each time PCLK1 changes, this function must be called to update the
 *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
 * @retval PCLK1 frequency in Hz
 */
uint32_t HAL_RCC_GetPCLK1Freq(void) {
 8004f44:	b580      	push	{r7, lr}
 8004f46:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
	return (HAL_RCC_GetHCLKFreq()
 8004f48:	f7ff fff0 	bl	8004f2c <HAL_RCC_GetHCLKFreq>
 8004f4c:	4602      	mov	r2, r0
			>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1)
 8004f4e:	4b06      	ldr	r3, [pc, #24]	; (8004f68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f50:	689b      	ldr	r3, [r3, #8]
					>> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004f52:	0a1b      	lsrs	r3, r3, #8
 8004f54:	f003 0307 	and.w	r3, r3, #7
			>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1)
 8004f58:	4904      	ldr	r1, [pc, #16]	; (8004f6c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004f5a:	5ccb      	ldrb	r3, [r1, r3]
					>> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004f5c:	f003 031f 	and.w	r3, r3, #31
			>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1)
 8004f60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	bd80      	pop	{r7, pc}
 8004f68:	40021000 	.word	0x40021000
 8004f6c:	08007c28 	.word	0x08007c28

08004f70 <HAL_RCC_GetPCLK2Freq>:
 * @brief  Return the PCLK2 frequency.
 * @note   Each time PCLK2 changes, this function must be called to update the
 *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
 * @retval PCLK2 frequency in Hz
 */
uint32_t HAL_RCC_GetPCLK2Freq(void) {
 8004f70:	b580      	push	{r7, lr}
 8004f72:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
	return (HAL_RCC_GetHCLKFreq()
 8004f74:	f7ff ffda 	bl	8004f2c <HAL_RCC_GetHCLKFreq>
 8004f78:	4602      	mov	r2, r0
			>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2)
 8004f7a:	4b06      	ldr	r3, [pc, #24]	; (8004f94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f7c:	689b      	ldr	r3, [r3, #8]
					>> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004f7e:	0adb      	lsrs	r3, r3, #11
 8004f80:	f003 0307 	and.w	r3, r3, #7
			>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2)
 8004f84:	4904      	ldr	r1, [pc, #16]	; (8004f98 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004f86:	5ccb      	ldrb	r3, [r1, r3]
					>> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004f88:	f003 031f 	and.w	r3, r3, #31
			>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2)
 8004f8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	40021000 	.word	0x40021000
 8004f98:	08007c28 	.word	0x08007c28

08004f9c <RCC_SetFlashLatencyFromMSIRange>:
 * @brief  Update number of Flash wait states in line with MSI range and current
 voltage range.
 * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
 * @retval HAL status
 */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange) {
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b086      	sub	sp, #24
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
	uint32_t vos;
	uint32_t latency = FLASH_LATENCY_0; /* default value 0WS */
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	613b      	str	r3, [r7, #16]

	if (__HAL_RCC_PWR_IS_CLK_ENABLED()) {
 8004fa8:	4b2a      	ldr	r3, [pc, #168]	; (8005054 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004faa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d003      	beq.n	8004fbc <RCC_SetFlashLatencyFromMSIRange+0x20>
		vos = HAL_PWREx_GetVoltageRange();
 8004fb4:	f7ff f9ee 	bl	8004394 <HAL_PWREx_GetVoltageRange>
 8004fb8:	6178      	str	r0, [r7, #20]
 8004fba:	e014      	b.n	8004fe6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
	} else {
		__HAL_RCC_PWR_CLK_ENABLE();
 8004fbc:	4b25      	ldr	r3, [pc, #148]	; (8005054 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fc0:	4a24      	ldr	r2, [pc, #144]	; (8005054 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004fc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fc6:	6593      	str	r3, [r2, #88]	; 0x58
 8004fc8:	4b22      	ldr	r3, [pc, #136]	; (8005054 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fd0:	60fb      	str	r3, [r7, #12]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
		vos = HAL_PWREx_GetVoltageRange();
 8004fd4:	f7ff f9de 	bl	8004394 <HAL_PWREx_GetVoltageRange>
 8004fd8:	6178      	str	r0, [r7, #20]
		__HAL_RCC_PWR_CLK_DISABLE();
 8004fda:	4b1e      	ldr	r3, [pc, #120]	; (8005054 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fde:	4a1d      	ldr	r2, [pc, #116]	; (8005054 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004fe0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fe4:	6593      	str	r3, [r2, #88]	; 0x58
	}

	if (vos == PWR_REGULATOR_VOLTAGE_SCALE1) {
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fec:	d10b      	bne.n	8005006 <RCC_SetFlashLatencyFromMSIRange+0x6a>
		if (msirange > RCC_MSIRANGE_8) {
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2b80      	cmp	r3, #128	; 0x80
 8004ff2:	d919      	bls.n	8005028 <RCC_SetFlashLatencyFromMSIRange+0x8c>
			/* MSI > 16Mhz */
			if (msirange > RCC_MSIRANGE_10) {
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2ba0      	cmp	r3, #160	; 0xa0
 8004ff8:	d902      	bls.n	8005000 <RCC_SetFlashLatencyFromMSIRange+0x64>
				/* MSI 48Mhz */
				latency = FLASH_LATENCY_2; /* 2WS */
 8004ffa:	2302      	movs	r3, #2
 8004ffc:	613b      	str	r3, [r7, #16]
 8004ffe:	e013      	b.n	8005028 <RCC_SetFlashLatencyFromMSIRange+0x8c>
			} else {
				/* MSI 24Mhz or 32Mhz */
				latency = FLASH_LATENCY_1; /* 1WS */
 8005000:	2301      	movs	r3, #1
 8005002:	613b      	str	r3, [r7, #16]
 8005004:	e010      	b.n	8005028 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
		if (msirange > RCC_MSIRANGE_8) {
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2b80      	cmp	r3, #128	; 0x80
 800500a:	d902      	bls.n	8005012 <RCC_SetFlashLatencyFromMSIRange+0x76>
			/* MSI > 16Mhz */
			latency = FLASH_LATENCY_3; /* 3WS */
 800500c:	2303      	movs	r3, #3
 800500e:	613b      	str	r3, [r7, #16]
 8005010:	e00a      	b.n	8005028 <RCC_SetFlashLatencyFromMSIRange+0x8c>
		} else {
			if (msirange == RCC_MSIRANGE_8) {
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2b80      	cmp	r3, #128	; 0x80
 8005016:	d102      	bne.n	800501e <RCC_SetFlashLatencyFromMSIRange+0x82>
				/* MSI 16Mhz */
				latency = FLASH_LATENCY_2; /* 2WS */
 8005018:	2302      	movs	r3, #2
 800501a:	613b      	str	r3, [r7, #16]
 800501c:	e004      	b.n	8005028 <RCC_SetFlashLatencyFromMSIRange+0x8c>
			} else if (msirange == RCC_MSIRANGE_7) {
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2b70      	cmp	r3, #112	; 0x70
 8005022:	d101      	bne.n	8005028 <RCC_SetFlashLatencyFromMSIRange+0x8c>
				/* MSI 8Mhz */
				latency = FLASH_LATENCY_1; /* 1WS */
 8005024:	2301      	movs	r3, #1
 8005026:	613b      	str	r3, [r7, #16]
			/* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
		}
#endif
	}

	__HAL_FLASH_SET_LATENCY(latency);
 8005028:	4b0b      	ldr	r3, [pc, #44]	; (8005058 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f023 0207 	bic.w	r2, r3, #7
 8005030:	4909      	ldr	r1, [pc, #36]	; (8005058 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	4313      	orrs	r3, r2
 8005036:	600b      	str	r3, [r1, #0]

	/* Check that the new number of wait states is taken into account to access the Flash
	 memory by reading the FLASH_ACR register */
	if (__HAL_FLASH_GET_LATENCY() != latency) {
 8005038:	4b07      	ldr	r3, [pc, #28]	; (8005058 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 0307 	and.w	r3, r3, #7
 8005040:	693a      	ldr	r2, [r7, #16]
 8005042:	429a      	cmp	r2, r3
 8005044:	d001      	beq.n	800504a <RCC_SetFlashLatencyFromMSIRange+0xae>
		return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e000      	b.n	800504c <RCC_SetFlashLatencyFromMSIRange+0xb0>
	}

	return HAL_OK;
 800504a:	2300      	movs	r3, #0
}
 800504c:	4618      	mov	r0, r3
 800504e:	3718      	adds	r7, #24
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}
 8005054:	40021000 	.word	0x40021000
 8005058:	40022000 	.word	0x40022000

0800505c <HAL_RCCEx_PeriphCLKConfig>:
 *         the RTC clock source: in this case the access to Backup domain is enabled.
 *
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(
		RCC_PeriphCLKInitTypeDef *PeriphClkInit) {
 800505c:	b580      	push	{r7, lr}
 800505e:	b086      	sub	sp, #24
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
	uint32_t tmpregister, tickstart; /* no init needed */
	HAL_StatusTypeDef ret = HAL_OK; /* Intermediate status */
 8005064:	2300      	movs	r3, #0
 8005066:	74fb      	strb	r3, [r7, #19]
	HAL_StatusTypeDef status = HAL_OK; /* Final status */
 8005068:	2300      	movs	r3, #0
 800506a:	74bb      	strb	r3, [r7, #18]
	assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

	/*-------------------------- SAI1 clock source configuration ---------------------*/
	if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005074:	2b00      	cmp	r3, #0
 8005076:	d041      	beq.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0xa0>
			== RCC_PERIPHCLK_SAI1)) {
		/* Check the parameters */
		assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

		switch (PeriphClkInit->Sai1ClockSelection) {
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800507c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005080:	d02a      	beq.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005082:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005086:	d824      	bhi.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005088:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800508c:	d008      	beq.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800508e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005092:	d81e      	bhi.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005094:	2b00      	cmp	r3, #0
 8005096:	d00a      	beq.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005098:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800509c:	d010      	beq.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800509e:	e018      	b.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
		case RCC_SAI1CLKSOURCE_PLL: /* PLL is used as clock source for SAI1*/
			/* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
			__HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80050a0:	4b86      	ldr	r3, [pc, #536]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	4a85      	ldr	r2, [pc, #532]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050aa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
			/* SAI1 clock source config set later after clock selection check */
			break;
 80050ac:	e015      	b.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x7e>

		case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1*/
			/* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
			ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1),
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	3304      	adds	r3, #4
 80050b2:	2100      	movs	r1, #0
 80050b4:	4618      	mov	r0, r3
 80050b6:	f000 fabb 	bl	8005630 <RCCEx_PLLSAI1_Config>
 80050ba:	4603      	mov	r3, r0
 80050bc:	74fb      	strb	r3, [r7, #19]
					DIVIDER_P_UPDATE);
			/* SAI1 clock source config set later after clock selection check */
			break;
 80050be:	e00c      	b.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

		case RCC_SAI1CLKSOURCE_PLLSAI2: /* PLLSAI2 is used as clock source for SAI1*/
			/* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
			ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2),
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	3320      	adds	r3, #32
 80050c4:	2100      	movs	r1, #0
 80050c6:	4618      	mov	r0, r3
 80050c8:	f000 fba6 	bl	8005818 <RCCEx_PLLSAI2_Config>
 80050cc:	4603      	mov	r3, r0
 80050ce:	74fb      	strb	r3, [r7, #19]
					DIVIDER_P_UPDATE);
			/* SAI1 clock source config set later after clock selection check */
			break;
 80050d0:	e003      	b.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
			/* SAI1 clock source config set later after clock selection check */
			break;

		default:
			ret = HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	74fb      	strb	r3, [r7, #19]
			break;
 80050d6:	e000      	b.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x7e>
			break;
 80050d8:	bf00      	nop
		}

		if (ret == HAL_OK) {
 80050da:	7cfb      	ldrb	r3, [r7, #19]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d10b      	bne.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
			/* Set the source of SAI1 clock*/
			__HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80050e0:	4b76      	ldr	r3, [pc, #472]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050e6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050ee:	4973      	ldr	r1, [pc, #460]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050f0:	4313      	orrs	r3, r2
 80050f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80050f6:	e001      	b.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0xa0>
		} else {
			/* set overall return value */
			status = ret;
 80050f8:	7cfb      	ldrb	r3, [r7, #19]
 80050fa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

	/*-------------------------- SAI2 clock source configuration ---------------------*/
	if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005104:	2b00      	cmp	r3, #0
 8005106:	d041      	beq.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x130>
			== RCC_PERIPHCLK_SAI2)) {
		/* Check the parameters */
		assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

		switch (PeriphClkInit->Sai2ClockSelection) {
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800510c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005110:	d02a      	beq.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005112:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005116:	d824      	bhi.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005118:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800511c:	d008      	beq.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800511e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005122:	d81e      	bhi.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005124:	2b00      	cmp	r3, #0
 8005126:	d00a      	beq.n	800513e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005128:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800512c:	d010      	beq.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800512e:	e018      	b.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x106>
		case RCC_SAI2CLKSOURCE_PLL: /* PLL is used as clock source for SAI2*/
			/* Enable SAI Clock output generated from System PLL . */
			__HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005130:	4b62      	ldr	r3, [pc, #392]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	4a61      	ldr	r2, [pc, #388]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005136:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800513a:	60d3      	str	r3, [r2, #12]
			/* SAI2 clock source config set later after clock selection check */
			break;
 800513c:	e015      	b.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x10e>

		case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
			/* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
			ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1),
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	3304      	adds	r3, #4
 8005142:	2100      	movs	r1, #0
 8005144:	4618      	mov	r0, r3
 8005146:	f000 fa73 	bl	8005630 <RCCEx_PLLSAI1_Config>
 800514a:	4603      	mov	r3, r0
 800514c:	74fb      	strb	r3, [r7, #19]
					DIVIDER_P_UPDATE);
			/* SAI2 clock source config set later after clock selection check */
			break;
 800514e:	e00c      	b.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x10e>

		case RCC_SAI2CLKSOURCE_PLLSAI2: /* PLLSAI2 is used as clock source for SAI2*/
			/* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
			ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2),
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	3320      	adds	r3, #32
 8005154:	2100      	movs	r1, #0
 8005156:	4618      	mov	r0, r3
 8005158:	f000 fb5e 	bl	8005818 <RCCEx_PLLSAI2_Config>
 800515c:	4603      	mov	r3, r0
 800515e:	74fb      	strb	r3, [r7, #19]
					DIVIDER_P_UPDATE);
			/* SAI2 clock source config set later after clock selection check */
			break;
 8005160:	e003      	b.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
			/* SAI2 clock source config set later after clock selection check */
			break;

		default:
			ret = HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	74fb      	strb	r3, [r7, #19]
			break;
 8005166:	e000      	b.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x10e>
			break;
 8005168:	bf00      	nop
		}

		if (ret == HAL_OK) {
 800516a:	7cfb      	ldrb	r3, [r7, #19]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d10b      	bne.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x12c>
			/* Set the source of SAI2 clock*/
			__HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005170:	4b52      	ldr	r3, [pc, #328]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005176:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800517e:	494f      	ldr	r1, [pc, #316]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005180:	4313      	orrs	r3, r2
 8005182:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005186:	e001      	b.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x130>
		} else {
			/* set overall return value */
			status = ret;
 8005188:	7cfb      	ldrb	r3, [r7, #19]
 800518a:	74bb      	strb	r3, [r7, #18]
		}
	}
#endif /* SAI2 */

	/*-------------------------- RTC clock source configuration ----------------------*/
	if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005194:	2b00      	cmp	r3, #0
 8005196:	f000 80a0 	beq.w	80052da <HAL_RCCEx_PeriphCLKConfig+0x27e>
			== RCC_PERIPHCLK_RTC) {
		FlagStatus pwrclkchanged = RESET;
 800519a:	2300      	movs	r3, #0
 800519c:	747b      	strb	r3, [r7, #17]

		/* Check for RTC Parameters used to output RTCCLK */
		assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

		/* Enable Power Clock */
		if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U) {
 800519e:	4b47      	ldr	r3, [pc, #284]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d101      	bne.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x152>
 80051aa:	2301      	movs	r3, #1
 80051ac:	e000      	b.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80051ae:	2300      	movs	r3, #0
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d00d      	beq.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x174>
			__HAL_RCC_PWR_CLK_ENABLE();
 80051b4:	4b41      	ldr	r3, [pc, #260]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051b8:	4a40      	ldr	r2, [pc, #256]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051be:	6593      	str	r3, [r2, #88]	; 0x58
 80051c0:	4b3e      	ldr	r3, [pc, #248]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051c8:	60bb      	str	r3, [r7, #8]
 80051ca:	68bb      	ldr	r3, [r7, #8]
			pwrclkchanged = SET;
 80051cc:	2301      	movs	r3, #1
 80051ce:	747b      	strb	r3, [r7, #17]
		}

		/* Enable write access to Backup domain */
		SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80051d0:	4b3b      	ldr	r3, [pc, #236]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a3a      	ldr	r2, [pc, #232]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80051d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051da:	6013      	str	r3, [r2, #0]

		/* Wait for Backup domain Write protection disable */
		tickstart = HAL_GetTick();
 80051dc:	f7fc f906 	bl	80013ec <HAL_GetTick>
 80051e0:	60f8      	str	r0, [r7, #12]

		while (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U) {
 80051e2:	e009      	b.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
			if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE) {
 80051e4:	f7fc f902 	bl	80013ec <HAL_GetTick>
 80051e8:	4602      	mov	r2, r0
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	2b02      	cmp	r3, #2
 80051f0:	d902      	bls.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
				ret = HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	74fb      	strb	r3, [r7, #19]
				break;
 80051f6:	e005      	b.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
		while (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U) {
 80051f8:	4b31      	ldr	r3, [pc, #196]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005200:	2b00      	cmp	r3, #0
 8005202:	d0ef      	beq.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x188>
			}
		}

		if (ret == HAL_OK) {
 8005204:	7cfb      	ldrb	r3, [r7, #19]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d15c      	bne.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x268>
			/* Reset the Backup domain only if the RTC Clock source selection is modified from default */
			tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800520a:	4b2c      	ldr	r3, [pc, #176]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800520c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005210:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005214:	617b      	str	r3, [r7, #20]

			if ((tmpregister != RCC_RTCCLKSOURCE_NONE)
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d01f      	beq.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x200>
					&& (tmpregister != PeriphClkInit->RTCClockSelection)) {
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005222:	697a      	ldr	r2, [r7, #20]
 8005224:	429a      	cmp	r2, r3
 8005226:	d019      	beq.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x200>
				/* Store the content of BDCR register before the reset of Backup Domain */
				tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005228:	4b24      	ldr	r3, [pc, #144]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800522a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800522e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005232:	617b      	str	r3, [r7, #20]
				/* RTC Clock selection can be changed only if the Backup Domain is reset */
				__HAL_RCC_BACKUPRESET_FORCE();
 8005234:	4b21      	ldr	r3, [pc, #132]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800523a:	4a20      	ldr	r2, [pc, #128]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800523c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005240:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
				__HAL_RCC_BACKUPRESET_RELEASE();
 8005244:	4b1d      	ldr	r3, [pc, #116]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800524a:	4a1c      	ldr	r2, [pc, #112]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800524c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005250:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
				/* Restore the Content of BDCR register */
				RCC->BDCR = tmpregister;
 8005254:	4a19      	ldr	r2, [pc, #100]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
			}

			/* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
			if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON)) {
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	f003 0301 	and.w	r3, r3, #1
 8005262:	2b00      	cmp	r3, #0
 8005264:	d016      	beq.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x238>
				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8005266:	f7fc f8c1 	bl	80013ec <HAL_GetTick>
 800526a:	60f8      	str	r0, [r7, #12]

				/* Wait till LSE is ready */
				while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U) {
 800526c:	e00b      	b.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x22a>
					if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 800526e:	f7fc f8bd 	bl	80013ec <HAL_GetTick>
 8005272:	4602      	mov	r2, r0
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	1ad3      	subs	r3, r2, r3
 8005278:	f241 3288 	movw	r2, #5000	; 0x1388
 800527c:	4293      	cmp	r3, r2
 800527e:	d902      	bls.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x22a>
						ret = HAL_TIMEOUT;
 8005280:	2303      	movs	r3, #3
 8005282:	74fb      	strb	r3, [r7, #19]
						break;
 8005284:	e006      	b.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x238>
				while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U) {
 8005286:	4b0d      	ldr	r3, [pc, #52]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005288:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800528c:	f003 0302 	and.w	r3, r3, #2
 8005290:	2b00      	cmp	r3, #0
 8005292:	d0ec      	beq.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x212>
					}
				}
			}

			if (ret == HAL_OK) {
 8005294:	7cfb      	ldrb	r3, [r7, #19]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d10c      	bne.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x258>
				/* Apply new RTC clock source selection */
				__HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800529a:	4b08      	ldr	r3, [pc, #32]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800529c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052aa:	4904      	ldr	r1, [pc, #16]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052ac:	4313      	orrs	r3, r2
 80052ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80052b2:	e009      	b.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
			} else {
				/* set overall return value */
				status = ret;
 80052b4:	7cfb      	ldrb	r3, [r7, #19]
 80052b6:	74bb      	strb	r3, [r7, #18]
 80052b8:	e006      	b.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80052ba:	bf00      	nop
 80052bc:	40021000 	.word	0x40021000
 80052c0:	40007000 	.word	0x40007000
			}
		} else {
			/* set overall return value */
			status = ret;
 80052c4:	7cfb      	ldrb	r3, [r7, #19]
 80052c6:	74bb      	strb	r3, [r7, #18]
		}

		/* Restore clock configuration if changed */
		if (pwrclkchanged == SET) {
 80052c8:	7c7b      	ldrb	r3, [r7, #17]
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d105      	bne.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x27e>
			__HAL_RCC_PWR_CLK_DISABLE();
 80052ce:	4b9e      	ldr	r3, [pc, #632]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052d2:	4a9d      	ldr	r2, [pc, #628]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052d8:	6593      	str	r3, [r2, #88]	; 0x58
		}
	}

	/*-------------------------- USART1 clock source configuration -------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f003 0301 	and.w	r3, r3, #1
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d00a      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
		/* Check the parameters */
		assert_param(
				IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

		/* Configure the USART1 clock source */
		__HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80052e6:	4b98      	ldr	r3, [pc, #608]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ec:	f023 0203 	bic.w	r2, r3, #3
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052f4:	4994      	ldr	r1, [pc, #592]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052f6:	4313      	orrs	r3, r2
 80052f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
	}

	/*-------------------------- USART2 clock source configuration -------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 0302 	and.w	r3, r3, #2
 8005304:	2b00      	cmp	r3, #0
 8005306:	d00a      	beq.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
		/* Check the parameters */
		assert_param(
				IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

		/* Configure the USART2 clock source */
		__HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005308:	4b8f      	ldr	r3, [pc, #572]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800530a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800530e:	f023 020c 	bic.w	r2, r3, #12
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005316:	498c      	ldr	r1, [pc, #560]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005318:	4313      	orrs	r3, r2
 800531a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
	}

#if defined(USART3)

	/*-------------------------- USART3 clock source configuration -------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f003 0304 	and.w	r3, r3, #4
 8005326:	2b00      	cmp	r3, #0
 8005328:	d00a      	beq.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
		/* Check the parameters */
		assert_param(
				IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

		/* Configure the USART3 clock source */
		__HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800532a:	4b87      	ldr	r3, [pc, #540]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800532c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005330:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005338:	4983      	ldr	r1, [pc, #524]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800533a:	4313      	orrs	r3, r2
 800533c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

	/*-------------------------- UART4 clock source configuration --------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 0308 	and.w	r3, r3, #8
 8005348:	2b00      	cmp	r3, #0
 800534a:	d00a      	beq.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x306>
			== RCC_PERIPHCLK_UART4) {
		/* Check the parameters */
		assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

		/* Configure the UART4 clock source */
		__HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800534c:	4b7e      	ldr	r3, [pc, #504]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800534e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005352:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800535a:	497b      	ldr	r1, [pc, #492]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800535c:	4313      	orrs	r3, r2
 800535e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

	/*-------------------------- UART5 clock source configuration --------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 0310 	and.w	r3, r3, #16
 800536a:	2b00      	cmp	r3, #0
 800536c:	d00a      	beq.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x328>
			== RCC_PERIPHCLK_UART5) {
		/* Check the parameters */
		assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

		/* Configure the UART5 clock source */
		__HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800536e:	4b76      	ldr	r3, [pc, #472]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005370:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005374:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800537c:	4972      	ldr	r1, [pc, #456]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800537e:	4313      	orrs	r3, r2
 8005380:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
	}

#endif /* UART5 */

	/*-------------------------- LPUART1 clock source configuration ------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 0320 	and.w	r3, r3, #32
 800538c:	2b00      	cmp	r3, #0
 800538e:	d00a      	beq.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
		/* Check the parameters */
		assert_param(
				IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

		/* Configure the LPUART1 clock source */
		__HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005390:	4b6d      	ldr	r3, [pc, #436]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005396:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800539e:	496a      	ldr	r1, [pc, #424]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053a0:	4313      	orrs	r3, r2
 80053a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
	}

	/*-------------------------- LPTIM1 clock source configuration -------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d00a      	beq.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
			== (RCC_PERIPHCLK_LPTIM1)) {
		assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
		__HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80053b2:	4b65      	ldr	r3, [pc, #404]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053b8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053c0:	4961      	ldr	r1, [pc, #388]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053c2:	4313      	orrs	r3, r2
 80053c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
	}

	/*-------------------------- LPTIM2 clock source configuration -------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d00a      	beq.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x38e>
			== (RCC_PERIPHCLK_LPTIM2)) {
		assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
		__HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80053d4:	4b5c      	ldr	r3, [pc, #368]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053e2:	4959      	ldr	r1, [pc, #356]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053e4:	4313      	orrs	r3, r2
 80053e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
	}

	/*-------------------------- I2C1 clock source configuration ---------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d00a      	beq.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
			== RCC_PERIPHCLK_I2C1) {
		/* Check the parameters */
		assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

		/* Configure the I2C1 clock source */
		__HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80053f6:	4b54      	ldr	r3, [pc, #336]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053fc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005404:	4950      	ldr	r1, [pc, #320]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005406:	4313      	orrs	r3, r2
 8005408:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
	}

#if defined(I2C2)

	/*-------------------------- I2C2 clock source configuration ---------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005414:	2b00      	cmp	r3, #0
 8005416:	d00a      	beq.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
			== RCC_PERIPHCLK_I2C2) {
		/* Check the parameters */
		assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

		/* Configure the I2C2 clock source */
		__HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005418:	4b4b      	ldr	r3, [pc, #300]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800541a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800541e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005426:	4948      	ldr	r1, [pc, #288]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005428:	4313      	orrs	r3, r2
 800542a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
	}

#endif /* I2C2 */

	/*-------------------------- I2C3 clock source configuration ---------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005436:	2b00      	cmp	r3, #0
 8005438:	d00a      	beq.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
			== RCC_PERIPHCLK_I2C3) {
		/* Check the parameters */
		assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

		/* Configure the I2C3 clock source */
		__HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800543a:	4b43      	ldr	r3, [pc, #268]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800543c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005440:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005448:	493f      	ldr	r1, [pc, #252]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800544a:	4313      	orrs	r3, r2
 800544c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

	/*-------------------------- USB clock source configuration ----------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005458:	2b00      	cmp	r3, #0
 800545a:	d028      	beq.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x452>
			== (RCC_PERIPHCLK_USB)) {
		assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
		__HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800545c:	4b3a      	ldr	r3, [pc, #232]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800545e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005462:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800546a:	4937      	ldr	r1, [pc, #220]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800546c:	4313      	orrs	r3, r2
 800546e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

		if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL) {
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005476:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800547a:	d106      	bne.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x42e>
			/* Enable PLL48M1CLK output clock */
			__HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800547c:	4b32      	ldr	r3, [pc, #200]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	4a31      	ldr	r2, [pc, #196]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005482:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005486:	60d3      	str	r3, [r2, #12]
 8005488:	e011      	b.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x452>
		} else {
#if defined(RCC_PLLSAI1_SUPPORT)
			if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1) {
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800548e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005492:	d10c      	bne.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x452>
				/* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
				ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1),
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	3304      	adds	r3, #4
 8005498:	2101      	movs	r1, #1
 800549a:	4618      	mov	r0, r3
 800549c:	f000 f8c8 	bl	8005630 <RCCEx_PLLSAI1_Config>
 80054a0:	4603      	mov	r3, r0
 80054a2:	74fb      	strb	r3, [r7, #19]
						DIVIDER_Q_UPDATE);

				if (ret != HAL_OK) {
 80054a4:	7cfb      	ldrb	r3, [r7, #19]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d001      	beq.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x452>
					/* set overall return value */
					status = ret;
 80054aa:	7cfb      	ldrb	r3, [r7, #19]
 80054ac:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

	/*-------------------------- SDMMC1 clock source configuration -------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d028      	beq.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
			== (RCC_PERIPHCLK_SDMMC1)) {
		assert_param(
				IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
		__HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80054ba:	4b23      	ldr	r3, [pc, #140]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054c0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054c8:	491f      	ldr	r1, [pc, #124]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054ca:	4313      	orrs	r3, r2
 80054cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

		if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL) /* PLL "Q" ? */
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054d8:	d106      	bne.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
		{
			/* Enable PLL48M1CLK output clock */
			__HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054da:	4b1b      	ldr	r3, [pc, #108]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	4a1a      	ldr	r2, [pc, #104]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054e4:	60d3      	str	r3, [r2, #12]
 80054e6:	e011      	b.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
		else if (PeriphClkInit->Sdmmc1ClockSelection
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80054f0:	d10c      	bne.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
				== RCC_SDMMC1CLKSOURCE_PLLSAI1) {
			/* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
			ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1),
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	3304      	adds	r3, #4
 80054f6:	2101      	movs	r1, #1
 80054f8:	4618      	mov	r0, r3
 80054fa:	f000 f899 	bl	8005630 <RCCEx_PLLSAI1_Config>
 80054fe:	4603      	mov	r3, r0
 8005500:	74fb      	strb	r3, [r7, #19]
					DIVIDER_Q_UPDATE);

			if (ret != HAL_OK) {
 8005502:	7cfb      	ldrb	r3, [r7, #19]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d001      	beq.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
				/* set overall return value */
				status = ret;
 8005508:	7cfb      	ldrb	r3, [r7, #19]
 800550a:	74bb      	strb	r3, [r7, #18]
	}

#endif /* SDMMC1 */

	/*-------------------------- RNG clock source configuration ----------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005514:	2b00      	cmp	r3, #0
 8005516:	d02b      	beq.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x514>
			== (RCC_PERIPHCLK_RNG)) {
		assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
		__HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005518:	4b0b      	ldr	r3, [pc, #44]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800551a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800551e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005526:	4908      	ldr	r1, [pc, #32]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005528:	4313      	orrs	r3, r2
 800552a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

		if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL) {
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005532:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005536:	d109      	bne.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
			/* Enable PLL48M1CLK output clock */
			__HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005538:	4b03      	ldr	r3, [pc, #12]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800553a:	68db      	ldr	r3, [r3, #12]
 800553c:	4a02      	ldr	r2, [pc, #8]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800553e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005542:	60d3      	str	r3, [r2, #12]
 8005544:	e014      	b.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005546:	bf00      	nop
 8005548:	40021000 	.word	0x40021000
		}
#if defined(RCC_PLLSAI1_SUPPORT)
		else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1) {
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005550:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005554:	d10c      	bne.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x514>
			/* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
			ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1),
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	3304      	adds	r3, #4
 800555a:	2101      	movs	r1, #1
 800555c:	4618      	mov	r0, r3
 800555e:	f000 f867 	bl	8005630 <RCCEx_PLLSAI1_Config>
 8005562:	4603      	mov	r3, r0
 8005564:	74fb      	strb	r3, [r7, #19]
					DIVIDER_Q_UPDATE);

			if (ret != HAL_OK) {
 8005566:	7cfb      	ldrb	r3, [r7, #19]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d001      	beq.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x514>
				/* set overall return value */
				status = ret;
 800556c:	7cfb      	ldrb	r3, [r7, #19]
 800556e:	74bb      	strb	r3, [r7, #18]
		}
	}

	/*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005578:	2b00      	cmp	r3, #0
 800557a:	d02f      	beq.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x580>
			== RCC_PERIPHCLK_ADC) {
		/* Check the parameters */
		assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

		/* Configure the ADC interface clock source */
		__HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800557c:	4b2b      	ldr	r3, [pc, #172]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800557e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005582:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800558a:	4928      	ldr	r1, [pc, #160]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800558c:	4313      	orrs	r3, r2
 800558e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
		if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1) {
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005596:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800559a:	d10d      	bne.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
			/* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
			ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1),
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	3304      	adds	r3, #4
 80055a0:	2102      	movs	r1, #2
 80055a2:	4618      	mov	r0, r3
 80055a4:	f000 f844 	bl	8005630 <RCCEx_PLLSAI1_Config>
 80055a8:	4603      	mov	r3, r0
 80055aa:	74fb      	strb	r3, [r7, #19]
					DIVIDER_R_UPDATE);

			if (ret != HAL_OK) {
 80055ac:	7cfb      	ldrb	r3, [r7, #19]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d014      	beq.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x580>
				/* set overall return value */
				status = ret;
 80055b2:	7cfb      	ldrb	r3, [r7, #19]
 80055b4:	74bb      	strb	r3, [r7, #18]
 80055b6:	e011      	b.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x580>
		}
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

		else if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2) {
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055c0:	d10c      	bne.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x580>
			/* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
			ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2),
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	3320      	adds	r3, #32
 80055c6:	2102      	movs	r1, #2
 80055c8:	4618      	mov	r0, r3
 80055ca:	f000 f925 	bl	8005818 <RCCEx_PLLSAI2_Config>
 80055ce:	4603      	mov	r3, r0
 80055d0:	74fb      	strb	r3, [r7, #19]
					DIVIDER_R_UPDATE);

			if (ret != HAL_OK) {
 80055d2:	7cfb      	ldrb	r3, [r7, #19]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d001      	beq.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x580>
				/* set overall return value */
				status = ret;
 80055d8:	7cfb      	ldrb	r3, [r7, #19]
 80055da:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

	/*-------------------------- SWPMI1 clock source configuration -------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d00a      	beq.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x5a2>
		/* Check the parameters */
		assert_param(
				IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

		/* Configure the SWPMI1 clock source */
		__HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80055e8:	4b10      	ldr	r3, [pc, #64]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80055ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ee:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055f6:	490d      	ldr	r1, [pc, #52]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80055f8:	4313      	orrs	r3, r2
 80055fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

	/*-------------------------- DFSDM1 clock source configuration -------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005606:	2b00      	cmp	r3, #0
 8005608:	d00b      	beq.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
		/* Check the parameters */
		assert_param(
				IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

		/* Configure the DFSDM1 interface clock source */
		__HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800560a:	4b08      	ldr	r3, [pc, #32]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800560c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005610:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800561a:	4904      	ldr	r1, [pc, #16]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800561c:	4313      	orrs	r3, r2
 800561e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

	return status;
 8005622:	7cbb      	ldrb	r3, [r7, #18]
}
 8005624:	4618      	mov	r0, r3
 8005626:	3718      	adds	r7, #24
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}
 800562c:	40021000 	.word	0x40021000

08005630 <RCCEx_PLLSAI1_Config>:
 * @note   PLLSAI1 is temporary disable to apply new parameters
 *
 * @retval HAL status
 */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1,
		uint32_t Divider) {
 8005630:	b580      	push	{r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	6039      	str	r1, [r7, #0]
	uint32_t tickstart;
	HAL_StatusTypeDef status = HAL_OK;
 800563a:	2300      	movs	r3, #0
 800563c:	73fb      	strb	r3, [r7, #15]
	assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
	assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
	assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

	/* Check that PLLSAI1 clock source and divider M can be applied */
	if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE) {
 800563e:	4b75      	ldr	r3, [pc, #468]	; (8005814 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005640:	68db      	ldr	r3, [r3, #12]
 8005642:	f003 0303 	and.w	r3, r3, #3
 8005646:	2b00      	cmp	r3, #0
 8005648:	d018      	beq.n	800567c <RCCEx_PLLSAI1_Config+0x4c>
		/* PLL clock source and divider M already set, check that no request for change  */
		if ((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800564a:	4b72      	ldr	r3, [pc, #456]	; (8005814 <RCCEx_PLLSAI1_Config+0x1e4>)
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	f003 0203 	and.w	r2, r3, #3
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	429a      	cmp	r2, r3
 8005658:	d10d      	bne.n	8005676 <RCCEx_PLLSAI1_Config+0x46>
				|| (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d009      	beq.n	8005676 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
				|| (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM)
 8005662:	4b6c      	ldr	r3, [pc, #432]	; (8005814 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005664:	68db      	ldr	r3, [r3, #12]
						>> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005666:	091b      	lsrs	r3, r3, #4
 8005668:	f003 0307 	and.w	r3, r3, #7
 800566c:	1c5a      	adds	r2, r3, #1
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	685b      	ldr	r3, [r3, #4]
				|| (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM)
 8005672:	429a      	cmp	r2, r3
 8005674:	d047      	beq.n	8005706 <RCCEx_PLLSAI1_Config+0xd6>
#endif
				) {
			status = HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	73fb      	strb	r3, [r7, #15]
 800567a:	e044      	b.n	8005706 <RCCEx_PLLSAI1_Config+0xd6>
		}
	} else {
		/* Check PLLSAI1 clock source availability */
		switch (PllSai1->PLLSAI1Source) {
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	2b03      	cmp	r3, #3
 8005682:	d018      	beq.n	80056b6 <RCCEx_PLLSAI1_Config+0x86>
 8005684:	2b03      	cmp	r3, #3
 8005686:	d825      	bhi.n	80056d4 <RCCEx_PLLSAI1_Config+0xa4>
 8005688:	2b01      	cmp	r3, #1
 800568a:	d002      	beq.n	8005692 <RCCEx_PLLSAI1_Config+0x62>
 800568c:	2b02      	cmp	r3, #2
 800568e:	d009      	beq.n	80056a4 <RCCEx_PLLSAI1_Config+0x74>
 8005690:	e020      	b.n	80056d4 <RCCEx_PLLSAI1_Config+0xa4>
		case RCC_PLLSOURCE_MSI:
			if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY)) {
 8005692:	4b60      	ldr	r3, [pc, #384]	; (8005814 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 0302 	and.w	r3, r3, #2
 800569a:	2b00      	cmp	r3, #0
 800569c:	d11d      	bne.n	80056da <RCCEx_PLLSAI1_Config+0xaa>
				status = HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	73fb      	strb	r3, [r7, #15]
			}
			break;
 80056a2:	e01a      	b.n	80056da <RCCEx_PLLSAI1_Config+0xaa>
		case RCC_PLLSOURCE_HSI:
			if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY)) {
 80056a4:	4b5b      	ldr	r3, [pc, #364]	; (8005814 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d116      	bne.n	80056de <RCCEx_PLLSAI1_Config+0xae>
				status = HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	73fb      	strb	r3, [r7, #15]
			}
			break;
 80056b4:	e013      	b.n	80056de <RCCEx_PLLSAI1_Config+0xae>
		case RCC_PLLSOURCE_HSE:
			if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY)) {
 80056b6:	4b57      	ldr	r3, [pc, #348]	; (8005814 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d10f      	bne.n	80056e2 <RCCEx_PLLSAI1_Config+0xb2>
				if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP)) {
 80056c2:	4b54      	ldr	r3, [pc, #336]	; (8005814 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d109      	bne.n	80056e2 <RCCEx_PLLSAI1_Config+0xb2>
					status = HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	73fb      	strb	r3, [r7, #15]
				}
			}
			break;
 80056d2:	e006      	b.n	80056e2 <RCCEx_PLLSAI1_Config+0xb2>
		default:
			status = HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	73fb      	strb	r3, [r7, #15]
			break;
 80056d8:	e004      	b.n	80056e4 <RCCEx_PLLSAI1_Config+0xb4>
			break;
 80056da:	bf00      	nop
 80056dc:	e002      	b.n	80056e4 <RCCEx_PLLSAI1_Config+0xb4>
			break;
 80056de:	bf00      	nop
 80056e0:	e000      	b.n	80056e4 <RCCEx_PLLSAI1_Config+0xb4>
			break;
 80056e2:	bf00      	nop
		}

		if (status == HAL_OK) {
 80056e4:	7bfb      	ldrb	r3, [r7, #15]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d10d      	bne.n	8005706 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
			/* Set PLLSAI1 clock source and divider M */
			MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM,
 80056ea:	4b4a      	ldr	r3, [pc, #296]	; (8005814 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056ec:	68db      	ldr	r3, [r3, #12]
 80056ee:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6819      	ldr	r1, [r3, #0]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	3b01      	subs	r3, #1
 80056fc:	011b      	lsls	r3, r3, #4
 80056fe:	430b      	orrs	r3, r1
 8005700:	4944      	ldr	r1, [pc, #272]	; (8005814 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005702:	4313      	orrs	r3, r2
 8005704:	60cb      	str	r3, [r1, #12]
					PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
		}
	}

	if (status == HAL_OK) {
 8005706:	7bfb      	ldrb	r3, [r7, #15]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d17d      	bne.n	8005808 <RCCEx_PLLSAI1_Config+0x1d8>
		/* Disable the PLLSAI1 */
		__HAL_RCC_PLLSAI1_DISABLE();
 800570c:	4b41      	ldr	r3, [pc, #260]	; (8005814 <RCCEx_PLLSAI1_Config+0x1e4>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a40      	ldr	r2, [pc, #256]	; (8005814 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005712:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005716:	6013      	str	r3, [r2, #0]

		/* Get Start Tick*/
		tickstart = HAL_GetTick();
 8005718:	f7fb fe68 	bl	80013ec <HAL_GetTick>
 800571c:	60b8      	str	r0, [r7, #8]

		/* Wait till PLLSAI1 is ready to be updated */
		while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U) {
 800571e:	e009      	b.n	8005734 <RCCEx_PLLSAI1_Config+0x104>
			if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE) {
 8005720:	f7fb fe64 	bl	80013ec <HAL_GetTick>
 8005724:	4602      	mov	r2, r0
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	1ad3      	subs	r3, r2, r3
 800572a:	2b02      	cmp	r3, #2
 800572c:	d902      	bls.n	8005734 <RCCEx_PLLSAI1_Config+0x104>
				status = HAL_TIMEOUT;
 800572e:	2303      	movs	r3, #3
 8005730:	73fb      	strb	r3, [r7, #15]
				break;
 8005732:	e005      	b.n	8005740 <RCCEx_PLLSAI1_Config+0x110>
		while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U) {
 8005734:	4b37      	ldr	r3, [pc, #220]	; (8005814 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800573c:	2b00      	cmp	r3, #0
 800573e:	d1ef      	bne.n	8005720 <RCCEx_PLLSAI1_Config+0xf0>
			}
		}

		if (status == HAL_OK) {
 8005740:	7bfb      	ldrb	r3, [r7, #15]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d160      	bne.n	8005808 <RCCEx_PLLSAI1_Config+0x1d8>
			if (Divider == DIVIDER_P_UPDATE) {
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d111      	bne.n	8005770 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
				MODIFY_REG(RCC->PLLSAI1CFGR,
 800574c:	4b31      	ldr	r3, [pc, #196]	; (8005814 <RCCEx_PLLSAI1_Config+0x1e4>)
 800574e:	691b      	ldr	r3, [r3, #16]
 8005750:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005754:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	6892      	ldr	r2, [r2, #8]
 800575c:	0211      	lsls	r1, r2, #8
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	68d2      	ldr	r2, [r2, #12]
 8005762:	0912      	lsrs	r2, r2, #4
 8005764:	0452      	lsls	r2, r2, #17
 8005766:	430a      	orrs	r2, r1
 8005768:	492a      	ldr	r1, [pc, #168]	; (8005814 <RCCEx_PLLSAI1_Config+0x1e4>)
 800576a:	4313      	orrs	r3, r2
 800576c:	610b      	str	r3, [r1, #16]
 800576e:	e027      	b.n	80057c0 <RCCEx_PLLSAI1_Config+0x190>
						RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1P,
						(PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) | ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
			} else if (Divider == DIVIDER_Q_UPDATE) {
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	2b01      	cmp	r3, #1
 8005774:	d112      	bne.n	800579c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
				/* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
				MODIFY_REG(RCC->PLLSAI1CFGR,
 8005776:	4b27      	ldr	r3, [pc, #156]	; (8005814 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005778:	691b      	ldr	r3, [r3, #16]
 800577a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800577e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	6892      	ldr	r2, [r2, #8]
 8005786:	0211      	lsls	r1, r2, #8
 8005788:	687a      	ldr	r2, [r7, #4]
 800578a:	6912      	ldr	r2, [r2, #16]
 800578c:	0852      	lsrs	r2, r2, #1
 800578e:	3a01      	subs	r2, #1
 8005790:	0552      	lsls	r2, r2, #21
 8005792:	430a      	orrs	r2, r1
 8005794:	491f      	ldr	r1, [pc, #124]	; (8005814 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005796:	4313      	orrs	r3, r2
 8005798:	610b      	str	r3, [r1, #16]
 800579a:	e011      	b.n	80057c0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
				/* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
				MODIFY_REG(RCC->PLLSAI1CFGR,
 800579c:	4b1d      	ldr	r3, [pc, #116]	; (8005814 <RCCEx_PLLSAI1_Config+0x1e4>)
 800579e:	691b      	ldr	r3, [r3, #16]
 80057a0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80057a4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	6892      	ldr	r2, [r2, #8]
 80057ac:	0211      	lsls	r1, r2, #8
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	6952      	ldr	r2, [r2, #20]
 80057b2:	0852      	lsrs	r2, r2, #1
 80057b4:	3a01      	subs	r2, #1
 80057b6:	0652      	lsls	r2, r2, #25
 80057b8:	430a      	orrs	r2, r1
 80057ba:	4916      	ldr	r1, [pc, #88]	; (8005814 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057bc:	4313      	orrs	r3, r2
 80057be:	610b      	str	r3, [r1, #16]
						(PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) | (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
			}

			/* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
			__HAL_RCC_PLLSAI1_ENABLE();
 80057c0:	4b14      	ldr	r3, [pc, #80]	; (8005814 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a13      	ldr	r2, [pc, #76]	; (8005814 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80057ca:	6013      	str	r3, [r2, #0]

			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 80057cc:	f7fb fe0e 	bl	80013ec <HAL_GetTick>
 80057d0:	60b8      	str	r0, [r7, #8]

			/* Wait till PLLSAI1 is ready */
			while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U) {
 80057d2:	e009      	b.n	80057e8 <RCCEx_PLLSAI1_Config+0x1b8>
				if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE) {
 80057d4:	f7fb fe0a 	bl	80013ec <HAL_GetTick>
 80057d8:	4602      	mov	r2, r0
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	1ad3      	subs	r3, r2, r3
 80057de:	2b02      	cmp	r3, #2
 80057e0:	d902      	bls.n	80057e8 <RCCEx_PLLSAI1_Config+0x1b8>
					status = HAL_TIMEOUT;
 80057e2:	2303      	movs	r3, #3
 80057e4:	73fb      	strb	r3, [r7, #15]
					break;
 80057e6:	e005      	b.n	80057f4 <RCCEx_PLLSAI1_Config+0x1c4>
			while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U) {
 80057e8:	4b0a      	ldr	r3, [pc, #40]	; (8005814 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d0ef      	beq.n	80057d4 <RCCEx_PLLSAI1_Config+0x1a4>
				}
			}

			if (status == HAL_OK) {
 80057f4:	7bfb      	ldrb	r3, [r7, #15]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d106      	bne.n	8005808 <RCCEx_PLLSAI1_Config+0x1d8>
				/* Configure the PLLSAI1 Clock output(s) */
				__HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80057fa:	4b06      	ldr	r3, [pc, #24]	; (8005814 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057fc:	691a      	ldr	r2, [r3, #16]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	699b      	ldr	r3, [r3, #24]
 8005802:	4904      	ldr	r1, [pc, #16]	; (8005814 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005804:	4313      	orrs	r3, r2
 8005806:	610b      	str	r3, [r1, #16]
			}
		}
	}

	return status;
 8005808:	7bfb      	ldrb	r3, [r7, #15]
}
 800580a:	4618      	mov	r0, r3
 800580c:	3710      	adds	r7, #16
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}
 8005812:	bf00      	nop
 8005814:	40021000 	.word	0x40021000

08005818 <RCCEx_PLLSAI2_Config>:
 * @note   PLLSAI2 is temporary disable to apply new parameters
 *
 * @retval HAL status
 */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2,
		uint32_t Divider) {
 8005818:	b580      	push	{r7, lr}
 800581a:	b084      	sub	sp, #16
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
 8005820:	6039      	str	r1, [r7, #0]
	uint32_t tickstart;
	HAL_StatusTypeDef status = HAL_OK;
 8005822:	2300      	movs	r3, #0
 8005824:	73fb      	strb	r3, [r7, #15]
	assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
	assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
	assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

	/* Check that PLLSAI2 clock source and divider M can be applied */
	if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE) {
 8005826:	4b6a      	ldr	r3, [pc, #424]	; (80059d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	f003 0303 	and.w	r3, r3, #3
 800582e:	2b00      	cmp	r3, #0
 8005830:	d018      	beq.n	8005864 <RCCEx_PLLSAI2_Config+0x4c>
		/* PLL clock source and divider M already set, check that no request for change  */
		if ((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005832:	4b67      	ldr	r3, [pc, #412]	; (80059d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	f003 0203 	and.w	r2, r3, #3
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	429a      	cmp	r2, r3
 8005840:	d10d      	bne.n	800585e <RCCEx_PLLSAI2_Config+0x46>
				|| (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d009      	beq.n	800585e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
				|| (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM)
 800584a:	4b61      	ldr	r3, [pc, #388]	; (80059d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800584c:	68db      	ldr	r3, [r3, #12]
						>> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800584e:	091b      	lsrs	r3, r3, #4
 8005850:	f003 0307 	and.w	r3, r3, #7
 8005854:	1c5a      	adds	r2, r3, #1
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	685b      	ldr	r3, [r3, #4]
				|| (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM)
 800585a:	429a      	cmp	r2, r3
 800585c:	d047      	beq.n	80058ee <RCCEx_PLLSAI2_Config+0xd6>
#endif
				) {
			status = HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	73fb      	strb	r3, [r7, #15]
 8005862:	e044      	b.n	80058ee <RCCEx_PLLSAI2_Config+0xd6>
		}
	} else {
		/* Check PLLSAI2 clock source availability */
		switch (PllSai2->PLLSAI2Source) {
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	2b03      	cmp	r3, #3
 800586a:	d018      	beq.n	800589e <RCCEx_PLLSAI2_Config+0x86>
 800586c:	2b03      	cmp	r3, #3
 800586e:	d825      	bhi.n	80058bc <RCCEx_PLLSAI2_Config+0xa4>
 8005870:	2b01      	cmp	r3, #1
 8005872:	d002      	beq.n	800587a <RCCEx_PLLSAI2_Config+0x62>
 8005874:	2b02      	cmp	r3, #2
 8005876:	d009      	beq.n	800588c <RCCEx_PLLSAI2_Config+0x74>
 8005878:	e020      	b.n	80058bc <RCCEx_PLLSAI2_Config+0xa4>
		case RCC_PLLSOURCE_MSI:
			if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY)) {
 800587a:	4b55      	ldr	r3, [pc, #340]	; (80059d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f003 0302 	and.w	r3, r3, #2
 8005882:	2b00      	cmp	r3, #0
 8005884:	d11d      	bne.n	80058c2 <RCCEx_PLLSAI2_Config+0xaa>
				status = HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	73fb      	strb	r3, [r7, #15]
			}
			break;
 800588a:	e01a      	b.n	80058c2 <RCCEx_PLLSAI2_Config+0xaa>
		case RCC_PLLSOURCE_HSI:
			if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY)) {
 800588c:	4b50      	ldr	r3, [pc, #320]	; (80059d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005894:	2b00      	cmp	r3, #0
 8005896:	d116      	bne.n	80058c6 <RCCEx_PLLSAI2_Config+0xae>
				status = HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	73fb      	strb	r3, [r7, #15]
			}
			break;
 800589c:	e013      	b.n	80058c6 <RCCEx_PLLSAI2_Config+0xae>
		case RCC_PLLSOURCE_HSE:
			if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY)) {
 800589e:	4b4c      	ldr	r3, [pc, #304]	; (80059d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d10f      	bne.n	80058ca <RCCEx_PLLSAI2_Config+0xb2>
				if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP)) {
 80058aa:	4b49      	ldr	r3, [pc, #292]	; (80059d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d109      	bne.n	80058ca <RCCEx_PLLSAI2_Config+0xb2>
					status = HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	73fb      	strb	r3, [r7, #15]
				}
			}
			break;
 80058ba:	e006      	b.n	80058ca <RCCEx_PLLSAI2_Config+0xb2>
		default:
			status = HAL_ERROR;
 80058bc:	2301      	movs	r3, #1
 80058be:	73fb      	strb	r3, [r7, #15]
			break;
 80058c0:	e004      	b.n	80058cc <RCCEx_PLLSAI2_Config+0xb4>
			break;
 80058c2:	bf00      	nop
 80058c4:	e002      	b.n	80058cc <RCCEx_PLLSAI2_Config+0xb4>
			break;
 80058c6:	bf00      	nop
 80058c8:	e000      	b.n	80058cc <RCCEx_PLLSAI2_Config+0xb4>
			break;
 80058ca:	bf00      	nop
		}

		if (status == HAL_OK) {
 80058cc:	7bfb      	ldrb	r3, [r7, #15]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d10d      	bne.n	80058ee <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
			/* Set PLLSAI2 clock source and divider M */
			MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM,
 80058d2:	4b3f      	ldr	r3, [pc, #252]	; (80059d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058d4:	68db      	ldr	r3, [r3, #12]
 80058d6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6819      	ldr	r1, [r3, #0]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	3b01      	subs	r3, #1
 80058e4:	011b      	lsls	r3, r3, #4
 80058e6:	430b      	orrs	r3, r1
 80058e8:	4939      	ldr	r1, [pc, #228]	; (80059d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058ea:	4313      	orrs	r3, r2
 80058ec:	60cb      	str	r3, [r1, #12]
					PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
		}
	}

	if (status == HAL_OK) {
 80058ee:	7bfb      	ldrb	r3, [r7, #15]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d167      	bne.n	80059c4 <RCCEx_PLLSAI2_Config+0x1ac>
		/* Disable the PLLSAI2 */
		__HAL_RCC_PLLSAI2_DISABLE();
 80058f4:	4b36      	ldr	r3, [pc, #216]	; (80059d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a35      	ldr	r2, [pc, #212]	; (80059d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058fe:	6013      	str	r3, [r2, #0]

		/* Get Start Tick*/
		tickstart = HAL_GetTick();
 8005900:	f7fb fd74 	bl	80013ec <HAL_GetTick>
 8005904:	60b8      	str	r0, [r7, #8]

		/* Wait till PLLSAI2 is ready to be updated */
		while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U) {
 8005906:	e009      	b.n	800591c <RCCEx_PLLSAI2_Config+0x104>
			if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE) {
 8005908:	f7fb fd70 	bl	80013ec <HAL_GetTick>
 800590c:	4602      	mov	r2, r0
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	1ad3      	subs	r3, r2, r3
 8005912:	2b02      	cmp	r3, #2
 8005914:	d902      	bls.n	800591c <RCCEx_PLLSAI2_Config+0x104>
				status = HAL_TIMEOUT;
 8005916:	2303      	movs	r3, #3
 8005918:	73fb      	strb	r3, [r7, #15]
				break;
 800591a:	e005      	b.n	8005928 <RCCEx_PLLSAI2_Config+0x110>
		while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U) {
 800591c:	4b2c      	ldr	r3, [pc, #176]	; (80059d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005924:	2b00      	cmp	r3, #0
 8005926:	d1ef      	bne.n	8005908 <RCCEx_PLLSAI2_Config+0xf0>
			}
		}

		if (status == HAL_OK) {
 8005928:	7bfb      	ldrb	r3, [r7, #15]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d14a      	bne.n	80059c4 <RCCEx_PLLSAI2_Config+0x1ac>
			if (Divider == DIVIDER_P_UPDATE) {
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d111      	bne.n	8005958 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
				MODIFY_REG(RCC->PLLSAI2CFGR,
 8005934:	4b26      	ldr	r3, [pc, #152]	; (80059d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005936:	695b      	ldr	r3, [r3, #20]
 8005938:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800593c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005940:	687a      	ldr	r2, [r7, #4]
 8005942:	6892      	ldr	r2, [r2, #8]
 8005944:	0211      	lsls	r1, r2, #8
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	68d2      	ldr	r2, [r2, #12]
 800594a:	0912      	lsrs	r2, r2, #4
 800594c:	0452      	lsls	r2, r2, #17
 800594e:	430a      	orrs	r2, r1
 8005950:	491f      	ldr	r1, [pc, #124]	; (80059d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005952:	4313      	orrs	r3, r2
 8005954:	614b      	str	r3, [r1, #20]
 8005956:	e011      	b.n	800597c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
				/* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
				MODIFY_REG(RCC->PLLSAI2CFGR,
 8005958:	4b1d      	ldr	r3, [pc, #116]	; (80059d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800595a:	695b      	ldr	r3, [r3, #20]
 800595c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005960:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005964:	687a      	ldr	r2, [r7, #4]
 8005966:	6892      	ldr	r2, [r2, #8]
 8005968:	0211      	lsls	r1, r2, #8
 800596a:	687a      	ldr	r2, [r7, #4]
 800596c:	6912      	ldr	r2, [r2, #16]
 800596e:	0852      	lsrs	r2, r2, #1
 8005970:	3a01      	subs	r2, #1
 8005972:	0652      	lsls	r2, r2, #25
 8005974:	430a      	orrs	r2, r1
 8005976:	4916      	ldr	r1, [pc, #88]	; (80059d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005978:	4313      	orrs	r3, r2
 800597a:	614b      	str	r3, [r1, #20]
						(PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) | (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
			}

			/* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
			__HAL_RCC_PLLSAI2_ENABLE();
 800597c:	4b14      	ldr	r3, [pc, #80]	; (80059d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a13      	ldr	r2, [pc, #76]	; (80059d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005982:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005986:	6013      	str	r3, [r2, #0]

			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 8005988:	f7fb fd30 	bl	80013ec <HAL_GetTick>
 800598c:	60b8      	str	r0, [r7, #8]

			/* Wait till PLLSAI2 is ready */
			while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U) {
 800598e:	e009      	b.n	80059a4 <RCCEx_PLLSAI2_Config+0x18c>
				if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE) {
 8005990:	f7fb fd2c 	bl	80013ec <HAL_GetTick>
 8005994:	4602      	mov	r2, r0
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	1ad3      	subs	r3, r2, r3
 800599a:	2b02      	cmp	r3, #2
 800599c:	d902      	bls.n	80059a4 <RCCEx_PLLSAI2_Config+0x18c>
					status = HAL_TIMEOUT;
 800599e:	2303      	movs	r3, #3
 80059a0:	73fb      	strb	r3, [r7, #15]
					break;
 80059a2:	e005      	b.n	80059b0 <RCCEx_PLLSAI2_Config+0x198>
			while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U) {
 80059a4:	4b0a      	ldr	r3, [pc, #40]	; (80059d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d0ef      	beq.n	8005990 <RCCEx_PLLSAI2_Config+0x178>
				}
			}

			if (status == HAL_OK) {
 80059b0:	7bfb      	ldrb	r3, [r7, #15]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d106      	bne.n	80059c4 <RCCEx_PLLSAI2_Config+0x1ac>
				/* Configure the PLLSAI2 Clock output(s) */
				__HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80059b6:	4b06      	ldr	r3, [pc, #24]	; (80059d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059b8:	695a      	ldr	r2, [r3, #20]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	695b      	ldr	r3, [r3, #20]
 80059be:	4904      	ldr	r1, [pc, #16]	; (80059d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059c0:	4313      	orrs	r3, r2
 80059c2:	614b      	str	r3, [r1, #20]
			}
		}
	}

	return status;
 80059c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3710      	adds	r7, #16
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	bf00      	nop
 80059d0:	40021000 	.word	0x40021000

080059d4 <HAL_TIM_Base_Init>:
 *         due to DIR bit readonly in center aligned mode.
 *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
 * @param  htim TIM Base handle
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim) {
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b082      	sub	sp, #8
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
	/* Check the TIM handle allocation */
	if (htim == NULL) {
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d101      	bne.n	80059e6 <HAL_TIM_Base_Init+0x12>
		return HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	e049      	b.n	8005a7a <HAL_TIM_Base_Init+0xa6>
	assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
	assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
	assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
	assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

	if (htim->State == HAL_TIM_STATE_RESET) {
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d106      	bne.n	8005a00 <HAL_TIM_Base_Init+0x2c>
		/* Allocate lock resource and initialize it */
		htim->Lock = HAL_UNLOCKED;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
		/* Init the low level hardware : GPIO, CLOCK, NVIC */
		HAL_TIM_Base_MspInit(htim);
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f7fb fb0c 	bl	8001018 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
	}

	/* Set the TIM state */
	htim->State = HAL_TIM_STATE_BUSY;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2202      	movs	r2, #2
 8005a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* Set the Time Base configuration */
	TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	3304      	adds	r3, #4
 8005a10:	4619      	mov	r1, r3
 8005a12:	4610      	mov	r0, r2
 8005a14:	f000 f9d0 	bl	8005db8 <TIM_Base_SetConfig>

	/* Initialize the DMA burst operation state */
	htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

	/* Initialize the TIM channels state */
	TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2201      	movs	r2, #1
 8005a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2201      	movs	r2, #1
 8005a34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2201      	movs	r2, #1
 8005a44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2201      	movs	r2, #1
 8005a54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2201      	movs	r2, #1
 8005a64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

	/* Initialize the TIM state*/
	htim->State = HAL_TIM_STATE_READY;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	return HAL_OK;
 8005a78:	2300      	movs	r3, #0
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3708      	adds	r7, #8
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}
	...

08005a84 <HAL_TIM_Base_Start_IT>:
/**
 * @brief  Starts the TIM Base generation in interrupt mode.
 * @param  htim TIM Base handle
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim) {
 8005a84:	b480      	push	{r7}
 8005a86:	b085      	sub	sp, #20
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]

	/* Check the parameters */
	assert_param(IS_TIM_INSTANCE(htim->Instance));

	/* Check the TIM state */
	if (htim->State != HAL_TIM_STATE_READY) {
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d001      	beq.n	8005a9c <HAL_TIM_Base_Start_IT+0x18>
		return HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e04f      	b.n	8005b3c <HAL_TIM_Base_Start_IT+0xb8>
	}

	/* Set the TIM state */
	htim->State = HAL_TIM_STATE_BUSY;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2202      	movs	r2, #2
 8005aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* Enable the TIM Update interrupt */
	__HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	68da      	ldr	r2, [r3, #12]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f042 0201 	orr.w	r2, r2, #1
 8005ab2:	60da      	str	r2, [r3, #12]

	/* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
	if (IS_TIM_SLAVE_INSTANCE(htim->Instance)) {
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a23      	ldr	r2, [pc, #140]	; (8005b48 <HAL_TIM_Base_Start_IT+0xc4>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d01d      	beq.n	8005afa <HAL_TIM_Base_Start_IT+0x76>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ac6:	d018      	beq.n	8005afa <HAL_TIM_Base_Start_IT+0x76>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a1f      	ldr	r2, [pc, #124]	; (8005b4c <HAL_TIM_Base_Start_IT+0xc8>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d013      	beq.n	8005afa <HAL_TIM_Base_Start_IT+0x76>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a1e      	ldr	r2, [pc, #120]	; (8005b50 <HAL_TIM_Base_Start_IT+0xcc>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d00e      	beq.n	8005afa <HAL_TIM_Base_Start_IT+0x76>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a1c      	ldr	r2, [pc, #112]	; (8005b54 <HAL_TIM_Base_Start_IT+0xd0>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d009      	beq.n	8005afa <HAL_TIM_Base_Start_IT+0x76>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a1b      	ldr	r2, [pc, #108]	; (8005b58 <HAL_TIM_Base_Start_IT+0xd4>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d004      	beq.n	8005afa <HAL_TIM_Base_Start_IT+0x76>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a19      	ldr	r2, [pc, #100]	; (8005b5c <HAL_TIM_Base_Start_IT+0xd8>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d115      	bne.n	8005b26 <HAL_TIM_Base_Start_IT+0xa2>
		tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	689a      	ldr	r2, [r3, #8]
 8005b00:	4b17      	ldr	r3, [pc, #92]	; (8005b60 <HAL_TIM_Base_Start_IT+0xdc>)
 8005b02:	4013      	ands	r3, r2
 8005b04:	60fb      	str	r3, [r7, #12]
		if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr)) {
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2b06      	cmp	r3, #6
 8005b0a:	d015      	beq.n	8005b38 <HAL_TIM_Base_Start_IT+0xb4>
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b12:	d011      	beq.n	8005b38 <HAL_TIM_Base_Start_IT+0xb4>
			__HAL_TIM_ENABLE(htim);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f042 0201 	orr.w	r2, r2, #1
 8005b22:	601a      	str	r2, [r3, #0]
		if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr)) {
 8005b24:	e008      	b.n	8005b38 <HAL_TIM_Base_Start_IT+0xb4>
		}
	} else {
		__HAL_TIM_ENABLE(htim);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f042 0201 	orr.w	r2, r2, #1
 8005b34:	601a      	str	r2, [r3, #0]
 8005b36:	e000      	b.n	8005b3a <HAL_TIM_Base_Start_IT+0xb6>
		if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr)) {
 8005b38:	bf00      	nop
	}

	/* Return function status */
	return HAL_OK;
 8005b3a:	2300      	movs	r3, #0
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3714      	adds	r7, #20
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr
 8005b48:	40012c00 	.word	0x40012c00
 8005b4c:	40000400 	.word	0x40000400
 8005b50:	40000800 	.word	0x40000800
 8005b54:	40000c00 	.word	0x40000c00
 8005b58:	40013400 	.word	0x40013400
 8005b5c:	40014000 	.word	0x40014000
 8005b60:	00010007 	.word	0x00010007

08005b64 <HAL_TIM_IRQHandler>:
/**
 * @brief  This function handles TIM interrupts requests.
 * @param  htim TIM  handle
 * @retval None
 */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim) {
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b084      	sub	sp, #16
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
	uint32_t itsource = htim->Instance->DIER;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	68db      	ldr	r3, [r3, #12]
 8005b72:	60fb      	str	r3, [r7, #12]
	uint32_t itflag = htim->Instance->SR;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	691b      	ldr	r3, [r3, #16]
 8005b7a:	60bb      	str	r3, [r7, #8]

	/* Capture compare 1 event */
	if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1)) {
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	f003 0302 	and.w	r3, r3, #2
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d020      	beq.n	8005bc8 <HAL_TIM_IRQHandler+0x64>
		if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1)) {
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f003 0302 	and.w	r3, r3, #2
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d01b      	beq.n	8005bc8 <HAL_TIM_IRQHandler+0x64>
			{
				__HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f06f 0202 	mvn.w	r2, #2
 8005b98:	611a      	str	r2, [r3, #16]
				htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	771a      	strb	r2, [r3, #28]

				/* Input capture event */
				if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U) {
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	699b      	ldr	r3, [r3, #24]
 8005ba6:	f003 0303 	and.w	r3, r3, #3
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d003      	beq.n	8005bb6 <HAL_TIM_IRQHandler+0x52>
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
					HAL_TIM_IC_CaptureCallback(htim);
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f000 f8e4 	bl	8005d7c <HAL_TIM_IC_CaptureCallback>
 8005bb4:	e005      	b.n	8005bc2 <HAL_TIM_IRQHandler+0x5e>
				else {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
					HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f000 f8d6 	bl	8005d68 <HAL_TIM_OC_DelayElapsedCallback>
					HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f000 f8e7 	bl	8005d90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
				}
				htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	771a      	strb	r2, [r3, #28]
			}
		}
	}
	/* Capture compare 2 event */
	if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2)) {
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	f003 0304 	and.w	r3, r3, #4
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d020      	beq.n	8005c14 <HAL_TIM_IRQHandler+0xb0>
		if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2)) {
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f003 0304 	and.w	r3, r3, #4
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d01b      	beq.n	8005c14 <HAL_TIM_IRQHandler+0xb0>
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f06f 0204 	mvn.w	r2, #4
 8005be4:	611a      	str	r2, [r3, #16]
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2202      	movs	r2, #2
 8005bea:	771a      	strb	r2, [r3, #28]
			/* Input capture event */
			if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U) {
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	699b      	ldr	r3, [r3, #24]
 8005bf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d003      	beq.n	8005c02 <HAL_TIM_IRQHandler+0x9e>
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
				HAL_TIM_IC_CaptureCallback(htim);
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f000 f8be 	bl	8005d7c <HAL_TIM_IC_CaptureCallback>
 8005c00:	e005      	b.n	8005c0e <HAL_TIM_IRQHandler+0xaa>
			else {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
				HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f000 f8b0 	bl	8005d68 <HAL_TIM_OC_DelayElapsedCallback>
				HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f000 f8c1 	bl	8005d90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
			}
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2200      	movs	r2, #0
 8005c12:	771a      	strb	r2, [r3, #28]
		}
	}
	/* Capture compare 3 event */
	if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3)) {
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	f003 0308 	and.w	r3, r3, #8
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d020      	beq.n	8005c60 <HAL_TIM_IRQHandler+0xfc>
		if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3)) {
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f003 0308 	and.w	r3, r3, #8
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d01b      	beq.n	8005c60 <HAL_TIM_IRQHandler+0xfc>
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f06f 0208 	mvn.w	r2, #8
 8005c30:	611a      	str	r2, [r3, #16]
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2204      	movs	r2, #4
 8005c36:	771a      	strb	r2, [r3, #28]
			/* Input capture event */
			if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U) {
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	69db      	ldr	r3, [r3, #28]
 8005c3e:	f003 0303 	and.w	r3, r3, #3
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d003      	beq.n	8005c4e <HAL_TIM_IRQHandler+0xea>
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
				HAL_TIM_IC_CaptureCallback(htim);
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f000 f898 	bl	8005d7c <HAL_TIM_IC_CaptureCallback>
 8005c4c:	e005      	b.n	8005c5a <HAL_TIM_IRQHandler+0xf6>
			else {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
				HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f000 f88a 	bl	8005d68 <HAL_TIM_OC_DelayElapsedCallback>
				HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f000 f89b 	bl	8005d90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
			}
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	771a      	strb	r2, [r3, #28]
		}
	}
	/* Capture compare 4 event */
	if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4)) {
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	f003 0310 	and.w	r3, r3, #16
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d020      	beq.n	8005cac <HAL_TIM_IRQHandler+0x148>
		if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4)) {
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f003 0310 	and.w	r3, r3, #16
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d01b      	beq.n	8005cac <HAL_TIM_IRQHandler+0x148>
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f06f 0210 	mvn.w	r2, #16
 8005c7c:	611a      	str	r2, [r3, #16]
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2208      	movs	r2, #8
 8005c82:	771a      	strb	r2, [r3, #28]
			/* Input capture event */
			if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U) {
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	69db      	ldr	r3, [r3, #28]
 8005c8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d003      	beq.n	8005c9a <HAL_TIM_IRQHandler+0x136>
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
				HAL_TIM_IC_CaptureCallback(htim);
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f000 f872 	bl	8005d7c <HAL_TIM_IC_CaptureCallback>
 8005c98:	e005      	b.n	8005ca6 <HAL_TIM_IRQHandler+0x142>
			else {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
				HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 f864 	bl	8005d68 <HAL_TIM_OC_DelayElapsedCallback>
				HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f000 f875 	bl	8005d90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
			}
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	771a      	strb	r2, [r3, #28]
		}
	}
	/* TIM Update event */
	if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE)) {
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	f003 0301 	and.w	r3, r3, #1
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d00c      	beq.n	8005cd0 <HAL_TIM_IRQHandler+0x16c>
		if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE)) {
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	f003 0301 	and.w	r3, r3, #1
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d007      	beq.n	8005cd0 <HAL_TIM_IRQHandler+0x16c>
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f06f 0201 	mvn.w	r2, #1
 8005cc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
			HAL_TIM_PeriodElapsedCallback(htim);
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f7fa fc56 	bl	800057c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
		}
	}
	/* TIM Break input event */
	if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) {
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d00c      	beq.n	8005cf4 <HAL_TIM_IRQHandler+0x190>
		if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK)) {
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d007      	beq.n	8005cf4 <HAL_TIM_IRQHandler+0x190>
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005cec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
			HAL_TIMEx_BreakCallback(htim);
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f000 f98e 	bl	8006010 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
		}
	}
	/* TIM Break2 input event */
	if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2)) {
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d00c      	beq.n	8005d18 <HAL_TIM_IRQHandler+0x1b4>
		if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK)) {
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d007      	beq.n	8005d18 <HAL_TIM_IRQHandler+0x1b4>
			__HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005d10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
			HAL_TIMEx_Break2Callback(htim);
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f000 f986 	bl	8006024 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
		}
	}
	/* TIM Trigger detection event */
	if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER)) {
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d00c      	beq.n	8005d3c <HAL_TIM_IRQHandler+0x1d8>
		if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER)) {
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d007      	beq.n	8005d3c <HAL_TIM_IRQHandler+0x1d8>
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005d34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
			HAL_TIM_TriggerCallback(htim);
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f000 f834 	bl	8005da4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
		}
	}
	/* TIM commutation event */
	if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM)) {
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	f003 0320 	and.w	r3, r3, #32
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d00c      	beq.n	8005d60 <HAL_TIM_IRQHandler+0x1fc>
		if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM)) {
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	f003 0320 	and.w	r3, r3, #32
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d007      	beq.n	8005d60 <HAL_TIM_IRQHandler+0x1fc>
			__HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f06f 0220 	mvn.w	r2, #32
 8005d58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
			HAL_TIMEx_CommutCallback(htim);
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 f94e 	bl	8005ffc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
		}
	}
}
 8005d60:	bf00      	nop
 8005d62:	3710      	adds	r7, #16
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}

08005d68 <HAL_TIM_OC_DelayElapsedCallback>:
/**
 * @brief  Output Compare callback in non-blocking mode
 * @param  htim TIM OC handle
 * @retval None
 */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8005d68:	b480      	push	{r7}
 8005d6a:	b083      	sub	sp, #12
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
	UNUSED(htim);

	/* NOTE : This function should not be modified, when the callback is needed,
	 the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
	 */
}
 8005d70:	bf00      	nop
 8005d72:	370c      	adds	r7, #12
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr

08005d7c <HAL_TIM_IC_CaptureCallback>:
/**
 * @brief  Input Capture callback in non-blocking mode
 * @param  htim TIM IC handle
 * @retval None
 */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8005d7c:	b480      	push	{r7}
 8005d7e:	b083      	sub	sp, #12
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
	UNUSED(htim);

	/* NOTE : This function should not be modified, when the callback is needed,
	 the HAL_TIM_IC_CaptureCallback could be implemented in the user file
	 */
}
 8005d84:	bf00      	nop
 8005d86:	370c      	adds	r7, #12
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr

08005d90 <HAL_TIM_PWM_PulseFinishedCallback>:
/**
 * @brief  PWM Pulse finished callback in non-blocking mode
 * @param  htim TIM handle
 * @retval None
 */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8005d90:	b480      	push	{r7}
 8005d92:	b083      	sub	sp, #12
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
	UNUSED(htim);

	/* NOTE : This function should not be modified, when the callback is needed,
	 the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
	 */
}
 8005d98:	bf00      	nop
 8005d9a:	370c      	adds	r7, #12
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr

08005da4 <HAL_TIM_TriggerCallback>:
/**
 * @brief  Hall Trigger detection callback in non-blocking mode
 * @param  htim TIM handle
 * @retval None
 */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim) {
 8005da4:	b480      	push	{r7}
 8005da6:	b083      	sub	sp, #12
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
	UNUSED(htim);

	/* NOTE : This function should not be modified, when the callback is needed,
	 the HAL_TIM_TriggerCallback could be implemented in the user file
	 */
}
 8005dac:	bf00      	nop
 8005dae:	370c      	adds	r7, #12
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr

08005db8 <TIM_Base_SetConfig>:
 * @param  TIMx TIM peripheral
 * @param  Structure TIM Base configuration structure
 * @retval None
 */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx,
		const TIM_Base_InitTypeDef *Structure) {
 8005db8:	b480      	push	{r7}
 8005dba:	b085      	sub	sp, #20
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	6039      	str	r1, [r7, #0]
	uint32_t tmpcr1;
	tmpcr1 = TIMx->CR1;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	60fb      	str	r3, [r7, #12]

	/* Set TIM Time Base Unit parameters ---------------------------------------*/
	if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx)) {
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	4a40      	ldr	r2, [pc, #256]	; (8005ecc <TIM_Base_SetConfig+0x114>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d013      	beq.n	8005df8 <TIM_Base_SetConfig+0x40>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dd6:	d00f      	beq.n	8005df8 <TIM_Base_SetConfig+0x40>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	4a3d      	ldr	r2, [pc, #244]	; (8005ed0 <TIM_Base_SetConfig+0x118>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d00b      	beq.n	8005df8 <TIM_Base_SetConfig+0x40>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	4a3c      	ldr	r2, [pc, #240]	; (8005ed4 <TIM_Base_SetConfig+0x11c>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d007      	beq.n	8005df8 <TIM_Base_SetConfig+0x40>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	4a3b      	ldr	r2, [pc, #236]	; (8005ed8 <TIM_Base_SetConfig+0x120>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d003      	beq.n	8005df8 <TIM_Base_SetConfig+0x40>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	4a3a      	ldr	r2, [pc, #232]	; (8005edc <TIM_Base_SetConfig+0x124>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d108      	bne.n	8005e0a <TIM_Base_SetConfig+0x52>
		/* Select the Counter Mode */
		tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dfe:	60fb      	str	r3, [r7, #12]
		tmpcr1 |= Structure->CounterMode;
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	68fa      	ldr	r2, [r7, #12]
 8005e06:	4313      	orrs	r3, r2
 8005e08:	60fb      	str	r3, [r7, #12]
	}

	if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx)) {
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4a2f      	ldr	r2, [pc, #188]	; (8005ecc <TIM_Base_SetConfig+0x114>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d01f      	beq.n	8005e52 <TIM_Base_SetConfig+0x9a>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e18:	d01b      	beq.n	8005e52 <TIM_Base_SetConfig+0x9a>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4a2c      	ldr	r2, [pc, #176]	; (8005ed0 <TIM_Base_SetConfig+0x118>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d017      	beq.n	8005e52 <TIM_Base_SetConfig+0x9a>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	4a2b      	ldr	r2, [pc, #172]	; (8005ed4 <TIM_Base_SetConfig+0x11c>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d013      	beq.n	8005e52 <TIM_Base_SetConfig+0x9a>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	4a2a      	ldr	r2, [pc, #168]	; (8005ed8 <TIM_Base_SetConfig+0x120>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d00f      	beq.n	8005e52 <TIM_Base_SetConfig+0x9a>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	4a29      	ldr	r2, [pc, #164]	; (8005edc <TIM_Base_SetConfig+0x124>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d00b      	beq.n	8005e52 <TIM_Base_SetConfig+0x9a>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	4a28      	ldr	r2, [pc, #160]	; (8005ee0 <TIM_Base_SetConfig+0x128>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d007      	beq.n	8005e52 <TIM_Base_SetConfig+0x9a>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	4a27      	ldr	r2, [pc, #156]	; (8005ee4 <TIM_Base_SetConfig+0x12c>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d003      	beq.n	8005e52 <TIM_Base_SetConfig+0x9a>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	4a26      	ldr	r2, [pc, #152]	; (8005ee8 <TIM_Base_SetConfig+0x130>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d108      	bne.n	8005e64 <TIM_Base_SetConfig+0xac>
		/* Set the clock division */
		tmpcr1 &= ~TIM_CR1_CKD;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e58:	60fb      	str	r3, [r7, #12]
		tmpcr1 |= (uint32_t) Structure->ClockDivision;
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	68db      	ldr	r3, [r3, #12]
 8005e5e:	68fa      	ldr	r2, [r7, #12]
 8005e60:	4313      	orrs	r3, r2
 8005e62:	60fb      	str	r3, [r7, #12]
	}

	/* Set the auto-reload preload */
	MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	695b      	ldr	r3, [r3, #20]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	60fb      	str	r3, [r7, #12]

	TIMx->CR1 = tmpcr1;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	68fa      	ldr	r2, [r7, #12]
 8005e76:	601a      	str	r2, [r3, #0]

	/* Set the Autoreload value */
	TIMx->ARR = (uint32_t) Structure->Period;
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	689a      	ldr	r2, [r3, #8]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	62da      	str	r2, [r3, #44]	; 0x2c

	/* Set the Prescaler value */
	TIMx->PSC = Structure->Prescaler;
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	629a      	str	r2, [r3, #40]	; 0x28

	if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx)) {
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	4a10      	ldr	r2, [pc, #64]	; (8005ecc <TIM_Base_SetConfig+0x114>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d00f      	beq.n	8005eb0 <TIM_Base_SetConfig+0xf8>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	4a12      	ldr	r2, [pc, #72]	; (8005edc <TIM_Base_SetConfig+0x124>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d00b      	beq.n	8005eb0 <TIM_Base_SetConfig+0xf8>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	4a11      	ldr	r2, [pc, #68]	; (8005ee0 <TIM_Base_SetConfig+0x128>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d007      	beq.n	8005eb0 <TIM_Base_SetConfig+0xf8>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	4a10      	ldr	r2, [pc, #64]	; (8005ee4 <TIM_Base_SetConfig+0x12c>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d003      	beq.n	8005eb0 <TIM_Base_SetConfig+0xf8>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	4a0f      	ldr	r2, [pc, #60]	; (8005ee8 <TIM_Base_SetConfig+0x130>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d103      	bne.n	8005eb8 <TIM_Base_SetConfig+0x100>
		/* Set the Repetition Counter value */
		TIMx->RCR = Structure->RepetitionCounter;
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	691a      	ldr	r2, [r3, #16]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	631a      	str	r2, [r3, #48]	; 0x30
	}

	/* Generate an update event to reload the Prescaler
	 and the repetition counter (only for advanced timer) value immediately */
	TIMx->EGR = TIM_EGR_UG;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	615a      	str	r2, [r3, #20]
}
 8005ebe:	bf00      	nop
 8005ec0:	3714      	adds	r7, #20
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr
 8005eca:	bf00      	nop
 8005ecc:	40012c00 	.word	0x40012c00
 8005ed0:	40000400 	.word	0x40000400
 8005ed4:	40000800 	.word	0x40000800
 8005ed8:	40000c00 	.word	0x40000c00
 8005edc:	40013400 	.word	0x40013400
 8005ee0:	40014000 	.word	0x40014000
 8005ee4:	40014400 	.word	0x40014400
 8005ee8:	40014800 	.word	0x40014800

08005eec <HAL_TIMEx_MasterConfigSynchronization>:
 *         contains the selected trigger output (TRGO) and the Master/Slave
 *         mode.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
		const TIM_MasterConfigTypeDef *sMasterConfig) {
 8005eec:	b480      	push	{r7}
 8005eee:	b085      	sub	sp, #20
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
 8005ef4:	6039      	str	r1, [r7, #0]
	assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
	assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
	assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

	/* Check input state */
	__HAL_LOCK(htim);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d101      	bne.n	8005f04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f00:	2302      	movs	r3, #2
 8005f02:	e068      	b.n	8005fd6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

	/* Change the handler state */
	htim->State = HAL_TIM_STATE_BUSY;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2202      	movs	r2, #2
 8005f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* Get the TIMx CR2 register value */
	tmpcr2 = htim->Instance->CR2;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	60fb      	str	r3, [r7, #12]

	/* Get the TIMx SMCR register value */
	tmpsmcr = htim->Instance->SMCR;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	60bb      	str	r3, [r7, #8]

	/* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
	if (IS_TIM_TRGO2_INSTANCE(htim->Instance)) {
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a2e      	ldr	r2, [pc, #184]	; (8005fe4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d004      	beq.n	8005f38 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a2d      	ldr	r2, [pc, #180]	; (8005fe8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d108      	bne.n	8005f4a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
		/* Check the parameters */
		assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

		/* Clear the MMS2 bits */
		tmpcr2 &= ~TIM_CR2_MMS2;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005f3e:	60fb      	str	r3, [r7, #12]
		/* Select the TRGO2 source*/
		tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	68fa      	ldr	r2, [r7, #12]
 8005f46:	4313      	orrs	r3, r2
 8005f48:	60fb      	str	r3, [r7, #12]
	}

	/* Reset the MMS Bits */
	tmpcr2 &= ~TIM_CR2_MMS;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f50:	60fb      	str	r3, [r7, #12]
	/* Select the TRGO source */
	tmpcr2 |= sMasterConfig->MasterOutputTrigger;
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	68fa      	ldr	r2, [r7, #12]
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	60fb      	str	r3, [r7, #12]

	/* Update TIMx CR2 */
	htim->Instance->CR2 = tmpcr2;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	68fa      	ldr	r2, [r7, #12]
 8005f62:	605a      	str	r2, [r3, #4]

	if (IS_TIM_SLAVE_INSTANCE(htim->Instance)) {
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a1e      	ldr	r2, [pc, #120]	; (8005fe4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d01d      	beq.n	8005faa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f76:	d018      	beq.n	8005faa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a1b      	ldr	r2, [pc, #108]	; (8005fec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d013      	beq.n	8005faa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a1a      	ldr	r2, [pc, #104]	; (8005ff0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d00e      	beq.n	8005faa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a18      	ldr	r2, [pc, #96]	; (8005ff4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d009      	beq.n	8005faa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a13      	ldr	r2, [pc, #76]	; (8005fe8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d004      	beq.n	8005faa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a14      	ldr	r2, [pc, #80]	; (8005ff8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d10c      	bne.n	8005fc4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
		/* Reset the MSM Bit */
		tmpsmcr &= ~TIM_SMCR_MSM;
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fb0:	60bb      	str	r3, [r7, #8]
		/* Set master mode */
		tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	68ba      	ldr	r2, [r7, #8]
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	60bb      	str	r3, [r7, #8]

		/* Update TIMx SMCR */
		htim->Instance->SMCR = tmpsmcr;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	68ba      	ldr	r2, [r7, #8]
 8005fc2:	609a      	str	r2, [r3, #8]
	}

	/* Change the htim state */
	htim->State = HAL_TIM_STATE_READY;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	__HAL_UNLOCK(htim);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

	return HAL_OK;
 8005fd4:	2300      	movs	r3, #0
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3714      	adds	r7, #20
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr
 8005fe2:	bf00      	nop
 8005fe4:	40012c00 	.word	0x40012c00
 8005fe8:	40013400 	.word	0x40013400
 8005fec:	40000400 	.word	0x40000400
 8005ff0:	40000800 	.word	0x40000800
 8005ff4:	40000c00 	.word	0x40000c00
 8005ff8:	40014000 	.word	0x40014000

08005ffc <HAL_TIMEx_CommutCallback>:
/**
 * @brief  Hall commutation changed callback in non-blocking mode
 * @param  htim TIM handle
 * @retval None
 */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim) {
 8005ffc:	b480      	push	{r7}
 8005ffe:	b083      	sub	sp, #12
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
	UNUSED(htim);

	/* NOTE : This function should not be modified, when the callback is needed,
	 the HAL_TIMEx_CommutCallback could be implemented in the user file
	 */
}
 8006004:	bf00      	nop
 8006006:	370c      	adds	r7, #12
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr

08006010 <HAL_TIMEx_BreakCallback>:
/**
 * @brief  Hall Break detection callback in non-blocking mode
 * @param  htim TIM handle
 * @retval None
 */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim) {
 8006010:	b480      	push	{r7}
 8006012:	b083      	sub	sp, #12
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
	UNUSED(htim);

	/* NOTE : This function should not be modified, when the callback is needed,
	 the HAL_TIMEx_BreakCallback could be implemented in the user file
	 */
}
 8006018:	bf00      	nop
 800601a:	370c      	adds	r7, #12
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr

08006024 <HAL_TIMEx_Break2Callback>:
/**
 * @brief  Hall Break2 detection callback in non blocking mode
 * @param  htim: TIM handle
 * @retval None
 */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim) {
 8006024:	b480      	push	{r7}
 8006026:	b083      	sub	sp, #12
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
	UNUSED(htim);

	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_TIMEx_Break2Callback could be implemented in the user file
	 */
}
 800602c:	bf00      	nop
 800602e:	370c      	adds	r7, #12
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr

08006038 <HAL_UART_Init>:
 * @brief Initialize the UART mode according to the specified
 *        parameters in the UART_InitTypeDef and initialize the associated handle.
 * @param huart UART handle.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart) {
 8006038:	b580      	push	{r7, lr}
 800603a:	b082      	sub	sp, #8
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
	/* Check the UART handle allocation */
	if (huart == NULL) {
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d101      	bne.n	800604a <HAL_UART_Init+0x12>
		return HAL_ERROR;
 8006046:	2301      	movs	r3, #1
 8006048:	e040      	b.n	80060cc <HAL_UART_Init+0x94>
		/* Check the parameters */
		assert_param(
				(IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
	}

	if (huart->gState == HAL_UART_STATE_RESET) {
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800604e:	2b00      	cmp	r3, #0
 8006050:	d106      	bne.n	8006060 <HAL_UART_Init+0x28>
		/* Allocate lock resource and initialize it */
		huart->Lock = HAL_UNLOCKED;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2200      	movs	r2, #0
 8006056:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
		/* Init the low level hardware : GPIO, CLOCK */
		HAL_UART_MspInit(huart);
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f7fb f802 	bl	8001064 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
	}

	huart->gState = HAL_UART_STATE_BUSY;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2224      	movs	r2, #36	; 0x24
 8006064:	67da      	str	r2, [r3, #124]	; 0x7c

	__HAL_UART_DISABLE(huart);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f022 0201 	bic.w	r2, r2, #1
 8006074:	601a      	str	r2, [r3, #0]

	/* Perform advanced settings configuration */
	/* For some items, configuration requires to be done prior TE and RE bits are set */
	if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT) {
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800607a:	2b00      	cmp	r3, #0
 800607c:	d002      	beq.n	8006084 <HAL_UART_Init+0x4c>
		UART_AdvFeatureConfig(huart);
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 fe74 	bl	8006d6c <UART_AdvFeatureConfig>
	}

	/* Set the UART Communication parameters */
	if (UART_SetConfig(huart) == HAL_ERROR) {
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f000 fbb9 	bl	80067fc <UART_SetConfig>
 800608a:	4603      	mov	r3, r0
 800608c:	2b01      	cmp	r3, #1
 800608e:	d101      	bne.n	8006094 <HAL_UART_Init+0x5c>
		return HAL_ERROR;
 8006090:	2301      	movs	r3, #1
 8006092:	e01b      	b.n	80060cc <HAL_UART_Init+0x94>
	}

	/* In asynchronous mode, the following bits must be kept cleared:
	 - LINEN and CLKEN bits in the USART_CR2 register,
	 - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
	CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	685a      	ldr	r2, [r3, #4]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80060a2:	605a      	str	r2, [r3, #4]
	CLEAR_BIT(huart->Instance->CR3,
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	689a      	ldr	r2, [r3, #8]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80060b2:	609a      	str	r2, [r3, #8]
			(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));

	__HAL_UART_ENABLE(huart);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	681a      	ldr	r2, [r3, #0]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f042 0201 	orr.w	r2, r2, #1
 80060c2:	601a      	str	r2, [r3, #0]

	/* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
	return (UART_CheckIdleState(huart));
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f000 fef3 	bl	8006eb0 <UART_CheckIdleState>
 80060ca:	4603      	mov	r3, r0
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	3708      	adds	r7, #8
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}

080060d4 <HAL_UART_Transmit>:
 * @param Size    Amount of data elements (u8 or u16) to be sent.
 * @param Timeout Timeout duration.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart,
		const uint8_t *pData, uint16_t Size, uint32_t Timeout) {
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b08a      	sub	sp, #40	; 0x28
 80060d8:	af02      	add	r7, sp, #8
 80060da:	60f8      	str	r0, [r7, #12]
 80060dc:	60b9      	str	r1, [r7, #8]
 80060de:	603b      	str	r3, [r7, #0]
 80060e0:	4613      	mov	r3, r2
 80060e2:	80fb      	strh	r3, [r7, #6]
	const uint8_t *pdata8bits;
	const uint16_t *pdata16bits;
	uint32_t tickstart;

	/* Check that a Tx process is not already ongoing */
	if (huart->gState == HAL_UART_STATE_READY) {
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060e8:	2b20      	cmp	r3, #32
 80060ea:	d178      	bne.n	80061de <HAL_UART_Transmit+0x10a>
		if ((pData == NULL) || (Size == 0U)) {
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d002      	beq.n	80060f8 <HAL_UART_Transmit+0x24>
 80060f2:	88fb      	ldrh	r3, [r7, #6]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d101      	bne.n	80060fc <HAL_UART_Transmit+0x28>
			return HAL_ERROR;
 80060f8:	2301      	movs	r3, #1
 80060fa:	e071      	b.n	80061e0 <HAL_UART_Transmit+0x10c>
		}

		huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2200      	movs	r2, #0
 8006100:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		huart->gState = HAL_UART_STATE_BUSY_TX;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2221      	movs	r2, #33	; 0x21
 8006108:	67da      	str	r2, [r3, #124]	; 0x7c

		/* Init tickstart for timeout management */
		tickstart = HAL_GetTick();
 800610a:	f7fb f96f 	bl	80013ec <HAL_GetTick>
 800610e:	6178      	str	r0, [r7, #20]

		huart->TxXferSize = Size;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	88fa      	ldrh	r2, [r7, #6]
 8006114:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
		huart->TxXferCount = Size;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	88fa      	ldrh	r2, [r7, #6]
 800611c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

		/* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
		if ((huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006128:	d108      	bne.n	800613c <HAL_UART_Transmit+0x68>
				&& (huart->Init.Parity == UART_PARITY_NONE)) {
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	691b      	ldr	r3, [r3, #16]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d104      	bne.n	800613c <HAL_UART_Transmit+0x68>
			pdata8bits = NULL;
 8006132:	2300      	movs	r3, #0
 8006134:	61fb      	str	r3, [r7, #28]
			pdata16bits = (const uint16_t*) pData;
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	61bb      	str	r3, [r7, #24]
 800613a:	e003      	b.n	8006144 <HAL_UART_Transmit+0x70>
		} else {
			pdata8bits = pData;
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	61fb      	str	r3, [r7, #28]
			pdata16bits = NULL;
 8006140:	2300      	movs	r3, #0
 8006142:	61bb      	str	r3, [r7, #24]
		}

		while (huart->TxXferCount > 0U) {
 8006144:	e030      	b.n	80061a8 <HAL_UART_Transmit+0xd4>
			if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET,
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	9300      	str	r3, [sp, #0]
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	2200      	movs	r2, #0
 800614e:	2180      	movs	r1, #128	; 0x80
 8006150:	68f8      	ldr	r0, [r7, #12]
 8006152:	f000 ff55 	bl	8007000 <UART_WaitOnFlagUntilTimeout>
 8006156:	4603      	mov	r3, r0
 8006158:	2b00      	cmp	r3, #0
 800615a:	d004      	beq.n	8006166 <HAL_UART_Transmit+0x92>
					tickstart, Timeout) != HAL_OK) {

				huart->gState = HAL_UART_STATE_READY;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2220      	movs	r2, #32
 8006160:	67da      	str	r2, [r3, #124]	; 0x7c

				return HAL_TIMEOUT;
 8006162:	2303      	movs	r3, #3
 8006164:	e03c      	b.n	80061e0 <HAL_UART_Transmit+0x10c>
			}
			if (pdata8bits == NULL) {
 8006166:	69fb      	ldr	r3, [r7, #28]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d10b      	bne.n	8006184 <HAL_UART_Transmit+0xb0>
				huart->Instance->TDR = (uint16_t) (*pdata16bits & 0x01FFU);
 800616c:	69bb      	ldr	r3, [r7, #24]
 800616e:	881a      	ldrh	r2, [r3, #0]
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006178:	b292      	uxth	r2, r2
 800617a:	851a      	strh	r2, [r3, #40]	; 0x28
				pdata16bits++;
 800617c:	69bb      	ldr	r3, [r7, #24]
 800617e:	3302      	adds	r3, #2
 8006180:	61bb      	str	r3, [r7, #24]
 8006182:	e008      	b.n	8006196 <HAL_UART_Transmit+0xc2>
			} else {
				huart->Instance->TDR = (uint8_t) (*pdata8bits & 0xFFU);
 8006184:	69fb      	ldr	r3, [r7, #28]
 8006186:	781a      	ldrb	r2, [r3, #0]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	b292      	uxth	r2, r2
 800618e:	851a      	strh	r2, [r3, #40]	; 0x28
				pdata8bits++;
 8006190:	69fb      	ldr	r3, [r7, #28]
 8006192:	3301      	adds	r3, #1
 8006194:	61fb      	str	r3, [r7, #28]
			}
			huart->TxXferCount--;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800619c:	b29b      	uxth	r3, r3
 800619e:	3b01      	subs	r3, #1
 80061a0:	b29a      	uxth	r2, r3
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
		while (huart->TxXferCount > 0U) {
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d1c8      	bne.n	8006146 <HAL_UART_Transmit+0x72>
		}

		if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart,
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	9300      	str	r3, [sp, #0]
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	2200      	movs	r2, #0
 80061bc:	2140      	movs	r1, #64	; 0x40
 80061be:	68f8      	ldr	r0, [r7, #12]
 80061c0:	f000 ff1e 	bl	8007000 <UART_WaitOnFlagUntilTimeout>
 80061c4:	4603      	mov	r3, r0
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d004      	beq.n	80061d4 <HAL_UART_Transmit+0x100>
				Timeout) != HAL_OK) {
			huart->gState = HAL_UART_STATE_READY;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2220      	movs	r2, #32
 80061ce:	67da      	str	r2, [r3, #124]	; 0x7c

			return HAL_TIMEOUT;
 80061d0:	2303      	movs	r3, #3
 80061d2:	e005      	b.n	80061e0 <HAL_UART_Transmit+0x10c>
		}

		/* At end of Tx process, restore huart->gState to Ready */
		huart->gState = HAL_UART_STATE_READY;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2220      	movs	r2, #32
 80061d8:	67da      	str	r2, [r3, #124]	; 0x7c

		return HAL_OK;
 80061da:	2300      	movs	r3, #0
 80061dc:	e000      	b.n	80061e0 <HAL_UART_Transmit+0x10c>
	} else {
		return HAL_BUSY;
 80061de:	2302      	movs	r3, #2
	}
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3720      	adds	r7, #32
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}

080061e8 <HAL_UART_IRQHandler>:
/**
 * @brief Handle UART interrupt request.
 * @param huart UART handle.
 * @retval None
 */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart) {
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b0ba      	sub	sp, #232	; 0xe8
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
	uint32_t isrflags = READ_REG(huart->Instance->ISR);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	69db      	ldr	r3, [r3, #28]
 80061f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	uint32_t cr1its = READ_REG(huart->Instance->CR1);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	uint32_t cr3its = READ_REG(huart->Instance->CR3);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

	uint32_t errorflags;
	uint32_t errorcode;

	/* If no error occurs */
	errorflags = (isrflags
 800620e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006212:	f640 030f 	movw	r3, #2063	; 0x80f
 8006216:	4013      	ands	r3, r2
 8006218:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
			& (uint32_t) (USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE
					| USART_ISR_NE | USART_ISR_RTOF));
	if (errorflags == 0U) {
 800621c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006220:	2b00      	cmp	r3, #0
 8006222:	d115      	bne.n	8006250 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
		if (((isrflags & USART_ISR_RXNE) != 0U)
 8006224:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006228:	f003 0320 	and.w	r3, r3, #32
 800622c:	2b00      	cmp	r3, #0
 800622e:	d00f      	beq.n	8006250 <HAL_UART_IRQHandler+0x68>
				&& ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006230:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006234:	f003 0320 	and.w	r3, r3, #32
 8006238:	2b00      	cmp	r3, #0
 800623a:	d009      	beq.n	8006250 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
				{
			if (huart->RxISR != NULL) {
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006240:	2b00      	cmp	r3, #0
 8006242:	f000 82ae 	beq.w	80067a2 <HAL_UART_IRQHandler+0x5ba>
				huart->RxISR(huart);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	4798      	blx	r3
			}
			return;
 800624e:	e2a8      	b.n	80067a2 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
	if ((errorflags != 0U)
 8006250:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006254:	2b00      	cmp	r3, #0
 8006256:	f000 8117 	beq.w	8006488 <HAL_UART_IRQHandler+0x2a0>
			&& (((cr3its & USART_CR3_EIE) != 0U)
 800625a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800625e:	f003 0301 	and.w	r3, r3, #1
 8006262:	2b00      	cmp	r3, #0
 8006264:	d106      	bne.n	8006274 <HAL_UART_IRQHandler+0x8c>
					|| ((cr1its
							& (USART_CR1_RXNEIE | USART_CR1_PEIE
 8006266:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800626a:	4b85      	ldr	r3, [pc, #532]	; (8006480 <HAL_UART_IRQHandler+0x298>)
 800626c:	4013      	ands	r3, r2
					|| ((cr1its
 800626e:	2b00      	cmp	r3, #0
 8006270:	f000 810a 	beq.w	8006488 <HAL_UART_IRQHandler+0x2a0>
									| USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
			{
		/* UART parity error interrupt occurred -------------------------------------*/
		if (((isrflags & USART_ISR_PE) != 0U)
 8006274:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006278:	f003 0301 	and.w	r3, r3, #1
 800627c:	2b00      	cmp	r3, #0
 800627e:	d011      	beq.n	80062a4 <HAL_UART_IRQHandler+0xbc>
				&& ((cr1its & USART_CR1_PEIE) != 0U)) {
 8006280:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006288:	2b00      	cmp	r3, #0
 800628a:	d00b      	beq.n	80062a4 <HAL_UART_IRQHandler+0xbc>
			__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	2201      	movs	r2, #1
 8006292:	621a      	str	r2, [r3, #32]

			huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800629a:	f043 0201 	orr.w	r2, r3, #1
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		}

		/* UART frame error interrupt occurred --------------------------------------*/
		if (((isrflags & USART_ISR_FE) != 0U)
 80062a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062a8:	f003 0302 	and.w	r3, r3, #2
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d011      	beq.n	80062d4 <HAL_UART_IRQHandler+0xec>
				&& ((cr3its & USART_CR3_EIE) != 0U)) {
 80062b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062b4:	f003 0301 	and.w	r3, r3, #1
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d00b      	beq.n	80062d4 <HAL_UART_IRQHandler+0xec>
			__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	2202      	movs	r2, #2
 80062c2:	621a      	str	r2, [r3, #32]

			huart->ErrorCode |= HAL_UART_ERROR_FE;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062ca:	f043 0204 	orr.w	r2, r3, #4
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		}

		/* UART noise error interrupt occurred --------------------------------------*/
		if (((isrflags & USART_ISR_NE) != 0U)
 80062d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062d8:	f003 0304 	and.w	r3, r3, #4
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d011      	beq.n	8006304 <HAL_UART_IRQHandler+0x11c>
				&& ((cr3its & USART_CR3_EIE) != 0U)) {
 80062e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062e4:	f003 0301 	and.w	r3, r3, #1
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d00b      	beq.n	8006304 <HAL_UART_IRQHandler+0x11c>
			__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	2204      	movs	r2, #4
 80062f2:	621a      	str	r2, [r3, #32]

			huart->ErrorCode |= HAL_UART_ERROR_NE;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062fa:	f043 0202 	orr.w	r2, r3, #2
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
		if (((isrflags & USART_ISR_ORE) != 0U)
 8006304:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006308:	f003 0308 	and.w	r3, r3, #8
 800630c:	2b00      	cmp	r3, #0
 800630e:	d017      	beq.n	8006340 <HAL_UART_IRQHandler+0x158>
				&& (((cr1its & USART_CR1_RXNEIE) != 0U)
 8006310:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006314:	f003 0320 	and.w	r3, r3, #32
 8006318:	2b00      	cmp	r3, #0
 800631a:	d105      	bne.n	8006328 <HAL_UART_IRQHandler+0x140>
						|| ((cr3its & USART_CR3_EIE) != 0U)))
 800631c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006320:	f003 0301 	and.w	r3, r3, #1
 8006324:	2b00      	cmp	r3, #0
 8006326:	d00b      	beq.n	8006340 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
				{
			__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	2208      	movs	r2, #8
 800632e:	621a      	str	r2, [r3, #32]

			huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006336:	f043 0208 	orr.w	r2, r3, #8
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		}

		/* UART Receiver Timeout interrupt occurred ---------------------------------*/
		if (((isrflags & USART_ISR_RTOF) != 0U)
 8006340:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006344:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006348:	2b00      	cmp	r3, #0
 800634a:	d012      	beq.n	8006372 <HAL_UART_IRQHandler+0x18a>
				&& ((cr1its & USART_CR1_RTOIE) != 0U)) {
 800634c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006350:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006354:	2b00      	cmp	r3, #0
 8006356:	d00c      	beq.n	8006372 <HAL_UART_IRQHandler+0x18a>
			__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006360:	621a      	str	r2, [r3, #32]

			huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006368:	f043 0220 	orr.w	r2, r3, #32
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		}

		/* Call UART Error Call back function if need be ----------------------------*/
		if (huart->ErrorCode != HAL_UART_ERROR_NONE) {
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006378:	2b00      	cmp	r3, #0
 800637a:	f000 8214 	beq.w	80067a6 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
			if (((isrflags & USART_ISR_RXNE) != 0U)
 800637e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006382:	f003 0320 	and.w	r3, r3, #32
 8006386:	2b00      	cmp	r3, #0
 8006388:	d00d      	beq.n	80063a6 <HAL_UART_IRQHandler+0x1be>
					&& ((cr1its & USART_CR1_RXNEIE) != 0U))
 800638a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800638e:	f003 0320 	and.w	r3, r3, #32
 8006392:	2b00      	cmp	r3, #0
 8006394:	d007      	beq.n	80063a6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
					{
				if (huart->RxISR != NULL) {
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800639a:	2b00      	cmp	r3, #0
 800639c:	d003      	beq.n	80063a6 <HAL_UART_IRQHandler+0x1be>
					huart->RxISR(huart);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	4798      	blx	r3
			/* If Error is to be considered as blocking :
			 - Receiver Timeout error in Reception
			 - Overrun error in Reception
			 - any error occurs in DMA mode reception
			 */
			errorcode = huart->ErrorCode;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
			if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	689b      	ldr	r3, [r3, #8]
 80063b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ba:	2b40      	cmp	r3, #64	; 0x40
 80063bc:	d005      	beq.n	80063ca <HAL_UART_IRQHandler+0x1e2>
					|| ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE))
 80063be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80063c2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d04f      	beq.n	800646a <HAL_UART_IRQHandler+0x282>
							!= 0U)) {
				/* Blocking error : transfer is aborted
				 Set the UART state ready to be able to start again the process,
				 Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
				UART_EndRxTransfer(huart);
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f000 fe7f 	bl	80070ce <UART_EndRxTransfer>

				/* Abort the UART DMA Rx channel if enabled */
				if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) {
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063da:	2b40      	cmp	r3, #64	; 0x40
 80063dc:	d141      	bne.n	8006462 <HAL_UART_IRQHandler+0x27a>
					/* Disable the UART DMA Rx request if enabled */
					ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	3308      	adds	r3, #8
 80063e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 \return        value of type uint32_t at (*ptr)
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr) {
	uint32_t result;

	__ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80063ec:	e853 3f00 	ldrex	r3, [r3]
 80063f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	return (result);
 80063f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80063f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	3308      	adds	r3, #8
 8006406:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800640a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800640e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 \return          1  Function failed
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr) {
	uint32_t result;

	__ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006412:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006416:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800641a:	e841 2300 	strex	r3, r2, [r1]
 800641e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	return (result);
 8006422:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006426:	2b00      	cmp	r3, #0
 8006428:	d1d9      	bne.n	80063de <HAL_UART_IRQHandler+0x1f6>

					/* Abort the UART DMA Rx channel */
					if (huart->hdmarx != NULL) {
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800642e:	2b00      	cmp	r3, #0
 8006430:	d013      	beq.n	800645a <HAL_UART_IRQHandler+0x272>
						/* Set the UART DMA Abort callback :
						 will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
						huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006436:	4a13      	ldr	r2, [pc, #76]	; (8006484 <HAL_UART_IRQHandler+0x29c>)
 8006438:	639a      	str	r2, [r3, #56]	; 0x38

						/* Abort DMA RX */
						if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK) {
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800643e:	4618      	mov	r0, r3
 8006440:	f7fd fcc6 	bl	8003dd0 <HAL_DMA_Abort_IT>
 8006444:	4603      	mov	r3, r0
 8006446:	2b00      	cmp	r3, #0
 8006448:	d017      	beq.n	800647a <HAL_UART_IRQHandler+0x292>
							/* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
							huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800644e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006450:	687a      	ldr	r2, [r7, #4]
 8006452:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006454:	4610      	mov	r0, r2
 8006456:	4798      	blx	r3
				if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) {
 8006458:	e00f      	b.n	800647a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
						/*Call legacy weak error callback*/
						HAL_UART_ErrorCallback(huart);
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f000 f9b8 	bl	80067d0 <HAL_UART_ErrorCallback>
				if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) {
 8006460:	e00b      	b.n	800647a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
					/*Call legacy weak error callback*/
					HAL_UART_ErrorCallback(huart);
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f000 f9b4 	bl	80067d0 <HAL_UART_ErrorCallback>
				if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) {
 8006468:	e007      	b.n	800647a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
				/*Call legacy weak error callback*/
				HAL_UART_ErrorCallback(huart);
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f000 f9b0 	bl	80067d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
				huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2200      	movs	r2, #0
 8006474:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
			}
		}
		return;
 8006478:	e195      	b.n	80067a6 <HAL_UART_IRQHandler+0x5be>
				if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) {
 800647a:	bf00      	nop
		return;
 800647c:	e193      	b.n	80067a6 <HAL_UART_IRQHandler+0x5be>
 800647e:	bf00      	nop
 8006480:	04000120 	.word	0x04000120
 8006484:	08007197 	.word	0x08007197

	} /* End if some error occurs */

	/* Check current reception Mode :
	 If Reception till IDLE event has been selected : */
	if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800648c:	2b01      	cmp	r3, #1
 800648e:	f040 814e 	bne.w	800672e <HAL_UART_IRQHandler+0x546>
			&& ((isrflags & USART_ISR_IDLE) != 0U)
 8006492:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006496:	f003 0310 	and.w	r3, r3, #16
 800649a:	2b00      	cmp	r3, #0
 800649c:	f000 8147 	beq.w	800672e <HAL_UART_IRQHandler+0x546>
			&& ((cr1its & USART_ISR_IDLE) != 0U)) {
 80064a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064a4:	f003 0310 	and.w	r3, r3, #16
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	f000 8140 	beq.w	800672e <HAL_UART_IRQHandler+0x546>
		__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	2210      	movs	r2, #16
 80064b4:	621a      	str	r2, [r3, #32]

		/* Check if DMA mode is enabled in UART */
		if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) {
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064c0:	2b40      	cmp	r3, #64	; 0x40
 80064c2:	f040 80b8 	bne.w	8006636 <HAL_UART_IRQHandler+0x44e>
			/* DMA mode enabled */
			/* Check received length : If all expected data are received, do nothing,
			 (DMA cplt callback will be called).
			 Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
			uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
					huart->hdmarx);
			if ((nb_remaining_rx_data > 0U)
 80064d2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	f000 8167 	beq.w	80067aa <HAL_UART_IRQHandler+0x5c2>
					&& (nb_remaining_rx_data < huart->RxXferSize)) {
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80064e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80064e6:	429a      	cmp	r2, r3
 80064e8:	f080 815f 	bcs.w	80067aa <HAL_UART_IRQHandler+0x5c2>
				/* Reception is not complete */
				huart->RxXferCount = nb_remaining_rx_data;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80064f2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

				/* In Normal mode, end DMA xfer and HAL UART Rx process*/
				if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR,
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f003 0320 	and.w	r3, r3, #32
 8006502:	2b00      	cmp	r3, #0
 8006504:	f040 8086 	bne.w	8006614 <HAL_UART_IRQHandler+0x42c>
						DMA_CCR_CIRC)) {
					/* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
					ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	__ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006510:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006514:	e853 3f00 	ldrex	r3, [r3]
 8006518:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	return (result);
 800651c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006520:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006524:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	461a      	mov	r2, r3
 800652e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006532:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006536:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
	__ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800653a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800653e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006542:	e841 2300 	strex	r3, r2, [r1]
 8006546:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	return (result);
 800654a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800654e:	2b00      	cmp	r3, #0
 8006550:	d1da      	bne.n	8006508 <HAL_UART_IRQHandler+0x320>
					ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	3308      	adds	r3, #8
 8006558:	677b      	str	r3, [r7, #116]	; 0x74
	__ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800655a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800655c:	e853 3f00 	ldrex	r3, [r3]
 8006560:	673b      	str	r3, [r7, #112]	; 0x70
	return (result);
 8006562:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006564:	f023 0301 	bic.w	r3, r3, #1
 8006568:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	3308      	adds	r3, #8
 8006572:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006576:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800657a:	67fb      	str	r3, [r7, #124]	; 0x7c
	__ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800657c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800657e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006582:	e841 2300 	strex	r3, r2, [r1]
 8006586:	67bb      	str	r3, [r7, #120]	; 0x78
	return (result);
 8006588:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800658a:	2b00      	cmp	r3, #0
 800658c:	d1e1      	bne.n	8006552 <HAL_UART_IRQHandler+0x36a>

					/* Disable the DMA transfer for the receiver request by resetting the DMAR bit
					 in the UART CR3 register */
					ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	3308      	adds	r3, #8
 8006594:	663b      	str	r3, [r7, #96]	; 0x60
	__ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006596:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006598:	e853 3f00 	ldrex	r3, [r3]
 800659c:	65fb      	str	r3, [r7, #92]	; 0x5c
	return (result);
 800659e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	3308      	adds	r3, #8
 80065ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80065b2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80065b4:	66bb      	str	r3, [r7, #104]	; 0x68
	__ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065b6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80065b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80065ba:	e841 2300 	strex	r3, r2, [r1]
 80065be:	667b      	str	r3, [r7, #100]	; 0x64
	return (result);
 80065c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d1e3      	bne.n	800658e <HAL_UART_IRQHandler+0x3a6>

					/* At end of Rx process, restore huart->RxState to Ready */
					huart->RxState = HAL_UART_STATE_READY;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2220      	movs	r2, #32
 80065ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
					huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2200      	movs	r2, #0
 80065d2:	661a      	str	r2, [r3, #96]	; 0x60

					ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	64fb      	str	r3, [r7, #76]	; 0x4c
	__ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065dc:	e853 3f00 	ldrex	r3, [r3]
 80065e0:	64bb      	str	r3, [r7, #72]	; 0x48
	return (result);
 80065e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065e4:	f023 0310 	bic.w	r3, r3, #16
 80065e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	461a      	mov	r2, r3
 80065f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80065f6:	65bb      	str	r3, [r7, #88]	; 0x58
 80065f8:	657a      	str	r2, [r7, #84]	; 0x54
	__ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065fa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80065fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80065fe:	e841 2300 	strex	r3, r2, [r1]
 8006602:	653b      	str	r3, [r7, #80]	; 0x50
	return (result);
 8006604:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006606:	2b00      	cmp	r3, #0
 8006608:	d1e4      	bne.n	80065d4 <HAL_UART_IRQHandler+0x3ec>

					/* Last bytes received, so no need as the abort is immediate */
					(void) HAL_DMA_Abort(huart->hdmarx);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800660e:	4618      	mov	r0, r3
 8006610:	f7fd fba0 	bl	8003d54 <HAL_DMA_Abort>
				}

				/* Initialize type of RxEvent that correspond to RxEvent callback execution;
				 In this case, Rx Event type is Idle Event */
				huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2202      	movs	r2, #2
 8006618:	665a      	str	r2, [r3, #100]	; 0x64
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
				/*Call legacy weak Rx Event callback*/
				HAL_UARTEx_RxEventCallback(huart,
						(huart->RxXferSize - huart->RxXferCount));
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006626:	b29b      	uxth	r3, r3
				HAL_UARTEx_RxEventCallback(huart,
 8006628:	1ad3      	subs	r3, r2, r3
 800662a:	b29b      	uxth	r3, r3
 800662c:	4619      	mov	r1, r3
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f000 f8d8 	bl	80067e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
			}
			return;
 8006634:	e0b9      	b.n	80067aa <HAL_UART_IRQHandler+0x5c2>
		} else {
			/* DMA mode not enabled */
			/* Check received length : If all expected data are received, do nothing.
			 Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
			uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006642:	b29b      	uxth	r3, r3
 8006644:	1ad3      	subs	r3, r2, r3
 8006646:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
			if ((huart->RxXferCount > 0U) && (nb_rx_data > 0U)) {
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006650:	b29b      	uxth	r3, r3
 8006652:	2b00      	cmp	r3, #0
 8006654:	f000 80ab 	beq.w	80067ae <HAL_UART_IRQHandler+0x5c6>
 8006658:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800665c:	2b00      	cmp	r3, #0
 800665e:	f000 80a6 	beq.w	80067ae <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
				/* Disable the UART Parity Error Interrupt and RXNE interrupts */
				ATOMIC_CLEAR_BIT(huart->Instance->CR1,
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	63bb      	str	r3, [r7, #56]	; 0x38
	__ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800666a:	e853 3f00 	ldrex	r3, [r3]
 800666e:	637b      	str	r3, [r7, #52]	; 0x34
	return (result);
 8006670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006672:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006676:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	461a      	mov	r2, r3
 8006680:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006684:	647b      	str	r3, [r7, #68]	; 0x44
 8006686:	643a      	str	r2, [r7, #64]	; 0x40
	__ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006688:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800668a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800668c:	e841 2300 	strex	r3, r2, [r1]
 8006690:	63fb      	str	r3, [r7, #60]	; 0x3c
	return (result);
 8006692:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006694:	2b00      	cmp	r3, #0
 8006696:	d1e4      	bne.n	8006662 <HAL_UART_IRQHandler+0x47a>
						(USART_CR1_RXNEIE | USART_CR1_PEIE));

				/* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
				ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	3308      	adds	r3, #8
 800669e:	627b      	str	r3, [r7, #36]	; 0x24
	__ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a2:	e853 3f00 	ldrex	r3, [r3]
 80066a6:	623b      	str	r3, [r7, #32]
	return (result);
 80066a8:	6a3b      	ldr	r3, [r7, #32]
 80066aa:	f023 0301 	bic.w	r3, r3, #1
 80066ae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	3308      	adds	r3, #8
 80066b8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80066bc:	633a      	str	r2, [r7, #48]	; 0x30
 80066be:	62fb      	str	r3, [r7, #44]	; 0x2c
	__ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80066c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066c4:	e841 2300 	strex	r3, r2, [r1]
 80066c8:	62bb      	str	r3, [r7, #40]	; 0x28
	return (result);
 80066ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d1e3      	bne.n	8006698 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

				/* Rx process is completed, restore huart->RxState to Ready */
				huart->RxState = HAL_UART_STATE_READY;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2220      	movs	r2, #32
 80066d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
				huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2200      	movs	r2, #0
 80066dc:	661a      	str	r2, [r3, #96]	; 0x60

				/* Clear RxISR function pointer */
				huart->RxISR = NULL;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2200      	movs	r2, #0
 80066e2:	669a      	str	r2, [r3, #104]	; 0x68

				ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	613b      	str	r3, [r7, #16]
	__ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	e853 3f00 	ldrex	r3, [r3]
 80066f0:	60fb      	str	r3, [r7, #12]
	return (result);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	f023 0310 	bic.w	r3, r3, #16
 80066f8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	461a      	mov	r2, r3
 8006702:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006706:	61fb      	str	r3, [r7, #28]
 8006708:	61ba      	str	r2, [r7, #24]
	__ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800670a:	69b9      	ldr	r1, [r7, #24]
 800670c:	69fa      	ldr	r2, [r7, #28]
 800670e:	e841 2300 	strex	r3, r2, [r1]
 8006712:	617b      	str	r3, [r7, #20]
	return (result);
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d1e4      	bne.n	80066e4 <HAL_UART_IRQHandler+0x4fc>

				/* Initialize type of RxEvent that correspond to RxEvent callback execution;
				 In this case, Rx Event type is Idle Event */
				huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2202      	movs	r2, #2
 800671e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
				/*Call legacy weak Rx Event callback*/
				HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006720:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006724:	4619      	mov	r1, r3
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f000 f85c 	bl	80067e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
			}
			return;
 800672c:	e03f      	b.n	80067ae <HAL_UART_IRQHandler+0x5c6>
		}
	}

	/* UART wakeup from Stop mode interrupt occurred ---------------------------*/
	if (((isrflags & USART_ISR_WUF) != 0U)
 800672e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006732:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006736:	2b00      	cmp	r3, #0
 8006738:	d00e      	beq.n	8006758 <HAL_UART_IRQHandler+0x570>
			&& ((cr3its & USART_CR3_WUFIE) != 0U)) {
 800673a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800673e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006742:	2b00      	cmp	r3, #0
 8006744:	d008      	beq.n	8006758 <HAL_UART_IRQHandler+0x570>
		__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800674e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
		/* Call legacy weak Wakeup Callback */
		HAL_UARTEx_WakeupCallback(huart);
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f000 fd60 	bl	8007216 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
		return;
 8006756:	e02d      	b.n	80067b4 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
	if (((isrflags & USART_ISR_TXE) != 0U)
 8006758:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800675c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006760:	2b00      	cmp	r3, #0
 8006762:	d00e      	beq.n	8006782 <HAL_UART_IRQHandler+0x59a>
			&& ((cr1its & USART_CR1_TXEIE) != 0U))
 8006764:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006768:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800676c:	2b00      	cmp	r3, #0
 800676e:	d008      	beq.n	8006782 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
			{
		if (huart->TxISR != NULL) {
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006774:	2b00      	cmp	r3, #0
 8006776:	d01c      	beq.n	80067b2 <HAL_UART_IRQHandler+0x5ca>
			huart->TxISR(huart);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	4798      	blx	r3
		}
		return;
 8006780:	e017      	b.n	80067b2 <HAL_UART_IRQHandler+0x5ca>
	}

	/* UART in mode Transmitter (transmission end) -----------------------------*/
	if (((isrflags & USART_ISR_TC) != 0U)
 8006782:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800678a:	2b00      	cmp	r3, #0
 800678c:	d012      	beq.n	80067b4 <HAL_UART_IRQHandler+0x5cc>
			&& ((cr1its & USART_CR1_TCIE) != 0U)) {
 800678e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006796:	2b00      	cmp	r3, #0
 8006798:	d00c      	beq.n	80067b4 <HAL_UART_IRQHandler+0x5cc>
		UART_EndTransmit_IT(huart);
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f000 fd11 	bl	80071c2 <UART_EndTransmit_IT>
		return;
 80067a0:	e008      	b.n	80067b4 <HAL_UART_IRQHandler+0x5cc>
			return;
 80067a2:	bf00      	nop
 80067a4:	e006      	b.n	80067b4 <HAL_UART_IRQHandler+0x5cc>
		return;
 80067a6:	bf00      	nop
 80067a8:	e004      	b.n	80067b4 <HAL_UART_IRQHandler+0x5cc>
			return;
 80067aa:	bf00      	nop
 80067ac:	e002      	b.n	80067b4 <HAL_UART_IRQHandler+0x5cc>
			return;
 80067ae:	bf00      	nop
 80067b0:	e000      	b.n	80067b4 <HAL_UART_IRQHandler+0x5cc>
		return;
 80067b2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80067b4:	37e8      	adds	r7, #232	; 0xe8
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}
 80067ba:	bf00      	nop

080067bc <HAL_UART_TxCpltCallback>:
/**
 * @brief Tx Transfer completed callback.
 * @param huart UART handle.
 * @retval None
 */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80067bc:	b480      	push	{r7}
 80067be:	b083      	sub	sp, #12
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
	UNUSED(huart);

	/* NOTE : This function should not be modified, when the callback is needed,
	 the HAL_UART_TxCpltCallback can be implemented in the user file.
	 */
}
 80067c4:	bf00      	nop
 80067c6:	370c      	adds	r7, #12
 80067c8:	46bd      	mov	sp, r7
 80067ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ce:	4770      	bx	lr

080067d0 <HAL_UART_ErrorCallback>:
/**
 * @brief  UART error callback.
 * @param  huart UART handle.
 * @retval None
 */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 80067d0:	b480      	push	{r7}
 80067d2:	b083      	sub	sp, #12
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
	UNUSED(huart);

	/* NOTE : This function should not be modified, when the callback is needed,
	 the HAL_UART_ErrorCallback can be implemented in the user file.
	 */
}
 80067d8:	bf00      	nop
 80067da:	370c      	adds	r7, #12
 80067dc:	46bd      	mov	sp, r7
 80067de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e2:	4770      	bx	lr

080067e4 <HAL_UARTEx_RxEventCallback>:
 * @param  huart UART handle
 * @param  Size  Number of data available in application reception buffer (indicates a position in
 *               reception buffer until which, data are available)
 * @retval None
 */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 80067e4:	b480      	push	{r7}
 80067e6:	b083      	sub	sp, #12
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
 80067ec:	460b      	mov	r3, r1
 80067ee:	807b      	strh	r3, [r7, #2]
	UNUSED(Size);

	/* NOTE : This function should not be modified, when the callback is needed,
	 the HAL_UARTEx_RxEventCallback can be implemented in the user file.
	 */
}
 80067f0:	bf00      	nop
 80067f2:	370c      	adds	r7, #12
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr

080067fc <UART_SetConfig>:
/**
 * @brief Configure the UART peripheral.
 * @param huart UART handle.
 * @retval HAL status
 */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart) {
 80067fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006800:	b08a      	sub	sp, #40	; 0x28
 8006802:	af00      	add	r7, sp, #0
 8006804:	60f8      	str	r0, [r7, #12]
	uint32_t tmpreg;
	uint16_t brrtemp;
	UART_ClockSourceTypeDef clocksource;
	uint32_t usartdiv;
	HAL_StatusTypeDef ret = HAL_OK;
 8006806:	2300      	movs	r3, #0
 8006808:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	 *  the UART Word Length, Parity, Mode and oversampling:
	 *  set the M bits according to huart->Init.WordLength value
	 *  set PCE and PS bits according to huart->Init.Parity value
	 *  set TE and RE bits according to huart->Init.Mode value
	 *  set OVER8 bit according to huart->Init.OverSampling value */
	tmpreg = (uint32_t) huart->Init.WordLength | huart->Init.Parity
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	689a      	ldr	r2, [r3, #8]
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	691b      	ldr	r3, [r3, #16]
 8006814:	431a      	orrs	r2, r3
			| huart->Init.Mode | huart->Init.OverSampling;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	695b      	ldr	r3, [r3, #20]
 800681a:	431a      	orrs	r2, r3
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	69db      	ldr	r3, [r3, #28]
	tmpreg = (uint32_t) huart->Init.WordLength | huart->Init.Parity
 8006820:	4313      	orrs	r3, r2
 8006822:	627b      	str	r3, [r7, #36]	; 0x24
	MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	681a      	ldr	r2, [r3, #0]
 800682a:	4ba4      	ldr	r3, [pc, #656]	; (8006abc <UART_SetConfig+0x2c0>)
 800682c:	4013      	ands	r3, r2
 800682e:	68fa      	ldr	r2, [r7, #12]
 8006830:	6812      	ldr	r2, [r2, #0]
 8006832:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006834:	430b      	orrs	r3, r1
 8006836:	6013      	str	r3, [r2, #0]

	/*-------------------------- USART CR2 Configuration -----------------------*/
	/* Configure the UART Stop Bits: Set STOP[13:12] bits according
	 * to huart->Init.StopBits value */
	MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	68da      	ldr	r2, [r3, #12]
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	430a      	orrs	r2, r1
 800684c:	605a      	str	r2, [r3, #4]
	/* Configure
	 * - UART HardWare Flow Control: set CTSE and RTSE bits according
	 *   to huart->Init.HwFlowCtl value
	 * - one-bit sampling method versus three samples' majority rule according
	 *   to huart->Init.OneBitSampling (not applicable to LPUART) */
	tmpreg = (uint32_t) huart->Init.HwFlowCtl;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	699b      	ldr	r3, [r3, #24]
 8006852:	627b      	str	r3, [r7, #36]	; 0x24

	if (!(UART_INSTANCE_LOWPOWER(huart))) {
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a99      	ldr	r2, [pc, #612]	; (8006ac0 <UART_SetConfig+0x2c4>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d004      	beq.n	8006868 <UART_SetConfig+0x6c>
		tmpreg |= huart->Init.OneBitSampling;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	6a1b      	ldr	r3, [r3, #32]
 8006862:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006864:	4313      	orrs	r3, r2
 8006866:	627b      	str	r3, [r7, #36]	; 0x24
	}
	MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006878:	430a      	orrs	r2, r1
 800687a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

	/*-------------------------- USART BRR Configuration -----------------------*/
	UART_GETCLOCKSOURCE(huart, clocksource);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a90      	ldr	r2, [pc, #576]	; (8006ac4 <UART_SetConfig+0x2c8>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d126      	bne.n	80068d4 <UART_SetConfig+0xd8>
 8006886:	4b90      	ldr	r3, [pc, #576]	; (8006ac8 <UART_SetConfig+0x2cc>)
 8006888:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800688c:	f003 0303 	and.w	r3, r3, #3
 8006890:	2b03      	cmp	r3, #3
 8006892:	d81b      	bhi.n	80068cc <UART_SetConfig+0xd0>
 8006894:	a201      	add	r2, pc, #4	; (adr r2, 800689c <UART_SetConfig+0xa0>)
 8006896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800689a:	bf00      	nop
 800689c:	080068ad 	.word	0x080068ad
 80068a0:	080068bd 	.word	0x080068bd
 80068a4:	080068b5 	.word	0x080068b5
 80068a8:	080068c5 	.word	0x080068c5
 80068ac:	2301      	movs	r3, #1
 80068ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068b2:	e116      	b.n	8006ae2 <UART_SetConfig+0x2e6>
 80068b4:	2302      	movs	r3, #2
 80068b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068ba:	e112      	b.n	8006ae2 <UART_SetConfig+0x2e6>
 80068bc:	2304      	movs	r3, #4
 80068be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068c2:	e10e      	b.n	8006ae2 <UART_SetConfig+0x2e6>
 80068c4:	2308      	movs	r3, #8
 80068c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068ca:	e10a      	b.n	8006ae2 <UART_SetConfig+0x2e6>
 80068cc:	2310      	movs	r3, #16
 80068ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068d2:	e106      	b.n	8006ae2 <UART_SetConfig+0x2e6>
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a7c      	ldr	r2, [pc, #496]	; (8006acc <UART_SetConfig+0x2d0>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d138      	bne.n	8006950 <UART_SetConfig+0x154>
 80068de:	4b7a      	ldr	r3, [pc, #488]	; (8006ac8 <UART_SetConfig+0x2cc>)
 80068e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068e4:	f003 030c 	and.w	r3, r3, #12
 80068e8:	2b0c      	cmp	r3, #12
 80068ea:	d82d      	bhi.n	8006948 <UART_SetConfig+0x14c>
 80068ec:	a201      	add	r2, pc, #4	; (adr r2, 80068f4 <UART_SetConfig+0xf8>)
 80068ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068f2:	bf00      	nop
 80068f4:	08006929 	.word	0x08006929
 80068f8:	08006949 	.word	0x08006949
 80068fc:	08006949 	.word	0x08006949
 8006900:	08006949 	.word	0x08006949
 8006904:	08006939 	.word	0x08006939
 8006908:	08006949 	.word	0x08006949
 800690c:	08006949 	.word	0x08006949
 8006910:	08006949 	.word	0x08006949
 8006914:	08006931 	.word	0x08006931
 8006918:	08006949 	.word	0x08006949
 800691c:	08006949 	.word	0x08006949
 8006920:	08006949 	.word	0x08006949
 8006924:	08006941 	.word	0x08006941
 8006928:	2300      	movs	r3, #0
 800692a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800692e:	e0d8      	b.n	8006ae2 <UART_SetConfig+0x2e6>
 8006930:	2302      	movs	r3, #2
 8006932:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006936:	e0d4      	b.n	8006ae2 <UART_SetConfig+0x2e6>
 8006938:	2304      	movs	r3, #4
 800693a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800693e:	e0d0      	b.n	8006ae2 <UART_SetConfig+0x2e6>
 8006940:	2308      	movs	r3, #8
 8006942:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006946:	e0cc      	b.n	8006ae2 <UART_SetConfig+0x2e6>
 8006948:	2310      	movs	r3, #16
 800694a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800694e:	e0c8      	b.n	8006ae2 <UART_SetConfig+0x2e6>
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a5e      	ldr	r2, [pc, #376]	; (8006ad0 <UART_SetConfig+0x2d4>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d125      	bne.n	80069a6 <UART_SetConfig+0x1aa>
 800695a:	4b5b      	ldr	r3, [pc, #364]	; (8006ac8 <UART_SetConfig+0x2cc>)
 800695c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006960:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006964:	2b30      	cmp	r3, #48	; 0x30
 8006966:	d016      	beq.n	8006996 <UART_SetConfig+0x19a>
 8006968:	2b30      	cmp	r3, #48	; 0x30
 800696a:	d818      	bhi.n	800699e <UART_SetConfig+0x1a2>
 800696c:	2b20      	cmp	r3, #32
 800696e:	d00a      	beq.n	8006986 <UART_SetConfig+0x18a>
 8006970:	2b20      	cmp	r3, #32
 8006972:	d814      	bhi.n	800699e <UART_SetConfig+0x1a2>
 8006974:	2b00      	cmp	r3, #0
 8006976:	d002      	beq.n	800697e <UART_SetConfig+0x182>
 8006978:	2b10      	cmp	r3, #16
 800697a:	d008      	beq.n	800698e <UART_SetConfig+0x192>
 800697c:	e00f      	b.n	800699e <UART_SetConfig+0x1a2>
 800697e:	2300      	movs	r3, #0
 8006980:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006984:	e0ad      	b.n	8006ae2 <UART_SetConfig+0x2e6>
 8006986:	2302      	movs	r3, #2
 8006988:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800698c:	e0a9      	b.n	8006ae2 <UART_SetConfig+0x2e6>
 800698e:	2304      	movs	r3, #4
 8006990:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006994:	e0a5      	b.n	8006ae2 <UART_SetConfig+0x2e6>
 8006996:	2308      	movs	r3, #8
 8006998:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800699c:	e0a1      	b.n	8006ae2 <UART_SetConfig+0x2e6>
 800699e:	2310      	movs	r3, #16
 80069a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069a4:	e09d      	b.n	8006ae2 <UART_SetConfig+0x2e6>
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a4a      	ldr	r2, [pc, #296]	; (8006ad4 <UART_SetConfig+0x2d8>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d125      	bne.n	80069fc <UART_SetConfig+0x200>
 80069b0:	4b45      	ldr	r3, [pc, #276]	; (8006ac8 <UART_SetConfig+0x2cc>)
 80069b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069b6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80069ba:	2bc0      	cmp	r3, #192	; 0xc0
 80069bc:	d016      	beq.n	80069ec <UART_SetConfig+0x1f0>
 80069be:	2bc0      	cmp	r3, #192	; 0xc0
 80069c0:	d818      	bhi.n	80069f4 <UART_SetConfig+0x1f8>
 80069c2:	2b80      	cmp	r3, #128	; 0x80
 80069c4:	d00a      	beq.n	80069dc <UART_SetConfig+0x1e0>
 80069c6:	2b80      	cmp	r3, #128	; 0x80
 80069c8:	d814      	bhi.n	80069f4 <UART_SetConfig+0x1f8>
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d002      	beq.n	80069d4 <UART_SetConfig+0x1d8>
 80069ce:	2b40      	cmp	r3, #64	; 0x40
 80069d0:	d008      	beq.n	80069e4 <UART_SetConfig+0x1e8>
 80069d2:	e00f      	b.n	80069f4 <UART_SetConfig+0x1f8>
 80069d4:	2300      	movs	r3, #0
 80069d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069da:	e082      	b.n	8006ae2 <UART_SetConfig+0x2e6>
 80069dc:	2302      	movs	r3, #2
 80069de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069e2:	e07e      	b.n	8006ae2 <UART_SetConfig+0x2e6>
 80069e4:	2304      	movs	r3, #4
 80069e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069ea:	e07a      	b.n	8006ae2 <UART_SetConfig+0x2e6>
 80069ec:	2308      	movs	r3, #8
 80069ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069f2:	e076      	b.n	8006ae2 <UART_SetConfig+0x2e6>
 80069f4:	2310      	movs	r3, #16
 80069f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069fa:	e072      	b.n	8006ae2 <UART_SetConfig+0x2e6>
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a35      	ldr	r2, [pc, #212]	; (8006ad8 <UART_SetConfig+0x2dc>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d12a      	bne.n	8006a5c <UART_SetConfig+0x260>
 8006a06:	4b30      	ldr	r3, [pc, #192]	; (8006ac8 <UART_SetConfig+0x2cc>)
 8006a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a14:	d01a      	beq.n	8006a4c <UART_SetConfig+0x250>
 8006a16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a1a:	d81b      	bhi.n	8006a54 <UART_SetConfig+0x258>
 8006a1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a20:	d00c      	beq.n	8006a3c <UART_SetConfig+0x240>
 8006a22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a26:	d815      	bhi.n	8006a54 <UART_SetConfig+0x258>
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d003      	beq.n	8006a34 <UART_SetConfig+0x238>
 8006a2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a30:	d008      	beq.n	8006a44 <UART_SetConfig+0x248>
 8006a32:	e00f      	b.n	8006a54 <UART_SetConfig+0x258>
 8006a34:	2300      	movs	r3, #0
 8006a36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a3a:	e052      	b.n	8006ae2 <UART_SetConfig+0x2e6>
 8006a3c:	2302      	movs	r3, #2
 8006a3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a42:	e04e      	b.n	8006ae2 <UART_SetConfig+0x2e6>
 8006a44:	2304      	movs	r3, #4
 8006a46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a4a:	e04a      	b.n	8006ae2 <UART_SetConfig+0x2e6>
 8006a4c:	2308      	movs	r3, #8
 8006a4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a52:	e046      	b.n	8006ae2 <UART_SetConfig+0x2e6>
 8006a54:	2310      	movs	r3, #16
 8006a56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a5a:	e042      	b.n	8006ae2 <UART_SetConfig+0x2e6>
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a17      	ldr	r2, [pc, #92]	; (8006ac0 <UART_SetConfig+0x2c4>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d13a      	bne.n	8006adc <UART_SetConfig+0x2e0>
 8006a66:	4b18      	ldr	r3, [pc, #96]	; (8006ac8 <UART_SetConfig+0x2cc>)
 8006a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a6c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006a70:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006a74:	d01a      	beq.n	8006aac <UART_SetConfig+0x2b0>
 8006a76:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006a7a:	d81b      	bhi.n	8006ab4 <UART_SetConfig+0x2b8>
 8006a7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a80:	d00c      	beq.n	8006a9c <UART_SetConfig+0x2a0>
 8006a82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a86:	d815      	bhi.n	8006ab4 <UART_SetConfig+0x2b8>
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d003      	beq.n	8006a94 <UART_SetConfig+0x298>
 8006a8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a90:	d008      	beq.n	8006aa4 <UART_SetConfig+0x2a8>
 8006a92:	e00f      	b.n	8006ab4 <UART_SetConfig+0x2b8>
 8006a94:	2300      	movs	r3, #0
 8006a96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a9a:	e022      	b.n	8006ae2 <UART_SetConfig+0x2e6>
 8006a9c:	2302      	movs	r3, #2
 8006a9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006aa2:	e01e      	b.n	8006ae2 <UART_SetConfig+0x2e6>
 8006aa4:	2304      	movs	r3, #4
 8006aa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006aaa:	e01a      	b.n	8006ae2 <UART_SetConfig+0x2e6>
 8006aac:	2308      	movs	r3, #8
 8006aae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ab2:	e016      	b.n	8006ae2 <UART_SetConfig+0x2e6>
 8006ab4:	2310      	movs	r3, #16
 8006ab6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006aba:	e012      	b.n	8006ae2 <UART_SetConfig+0x2e6>
 8006abc:	efff69f3 	.word	0xefff69f3
 8006ac0:	40008000 	.word	0x40008000
 8006ac4:	40013800 	.word	0x40013800
 8006ac8:	40021000 	.word	0x40021000
 8006acc:	40004400 	.word	0x40004400
 8006ad0:	40004800 	.word	0x40004800
 8006ad4:	40004c00 	.word	0x40004c00
 8006ad8:	40005000 	.word	0x40005000
 8006adc:	2310      	movs	r3, #16
 8006ade:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	/* Check LPUART instance */
	if (UART_INSTANCE_LOWPOWER(huart)) {
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a9f      	ldr	r2, [pc, #636]	; (8006d64 <UART_SetConfig+0x568>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d17a      	bne.n	8006be2 <UART_SetConfig+0x3e6>
		/* Retrieve frequency clock */
		switch (clocksource) {
 8006aec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006af0:	2b08      	cmp	r3, #8
 8006af2:	d824      	bhi.n	8006b3e <UART_SetConfig+0x342>
 8006af4:	a201      	add	r2, pc, #4	; (adr r2, 8006afc <UART_SetConfig+0x300>)
 8006af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006afa:	bf00      	nop
 8006afc:	08006b21 	.word	0x08006b21
 8006b00:	08006b3f 	.word	0x08006b3f
 8006b04:	08006b29 	.word	0x08006b29
 8006b08:	08006b3f 	.word	0x08006b3f
 8006b0c:	08006b2f 	.word	0x08006b2f
 8006b10:	08006b3f 	.word	0x08006b3f
 8006b14:	08006b3f 	.word	0x08006b3f
 8006b18:	08006b3f 	.word	0x08006b3f
 8006b1c:	08006b37 	.word	0x08006b37
		case UART_CLOCKSOURCE_PCLK1:
			pclk = HAL_RCC_GetPCLK1Freq();
 8006b20:	f7fe fa10 	bl	8004f44 <HAL_RCC_GetPCLK1Freq>
 8006b24:	61f8      	str	r0, [r7, #28]
			break;
 8006b26:	e010      	b.n	8006b4a <UART_SetConfig+0x34e>
		case UART_CLOCKSOURCE_HSI:
			pclk = (uint32_t) HSI_VALUE;
 8006b28:	4b8f      	ldr	r3, [pc, #572]	; (8006d68 <UART_SetConfig+0x56c>)
 8006b2a:	61fb      	str	r3, [r7, #28]
			break;
 8006b2c:	e00d      	b.n	8006b4a <UART_SetConfig+0x34e>
		case UART_CLOCKSOURCE_SYSCLK:
			pclk = HAL_RCC_GetSysClockFreq();
 8006b2e:	f7fe f971 	bl	8004e14 <HAL_RCC_GetSysClockFreq>
 8006b32:	61f8      	str	r0, [r7, #28]
			break;
 8006b34:	e009      	b.n	8006b4a <UART_SetConfig+0x34e>
		case UART_CLOCKSOURCE_LSE:
			pclk = (uint32_t) LSE_VALUE;
 8006b36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b3a:	61fb      	str	r3, [r7, #28]
			break;
 8006b3c:	e005      	b.n	8006b4a <UART_SetConfig+0x34e>
		default:
			pclk = 0U;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	61fb      	str	r3, [r7, #28]
			ret = HAL_ERROR;
 8006b42:	2301      	movs	r3, #1
 8006b44:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			break;
 8006b48:	bf00      	nop
		}

		/* If proper clock source reported */
		if (pclk != 0U) {
 8006b4a:	69fb      	ldr	r3, [r7, #28]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	f000 80fb 	beq.w	8006d48 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
			/* No Prescaler applicable */
			/* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
			if ((pclk < (3U * huart->Init.BaudRate))
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	685a      	ldr	r2, [r3, #4]
 8006b56:	4613      	mov	r3, r2
 8006b58:	005b      	lsls	r3, r3, #1
 8006b5a:	4413      	add	r3, r2
 8006b5c:	69fa      	ldr	r2, [r7, #28]
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	d305      	bcc.n	8006b6e <UART_SetConfig+0x372>
					|| (pclk > (4096U * huart->Init.BaudRate))) {
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	031b      	lsls	r3, r3, #12
 8006b68:	69fa      	ldr	r2, [r7, #28]
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d903      	bls.n	8006b76 <UART_SetConfig+0x37a>
				ret = HAL_ERROR;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006b74:	e0e8      	b.n	8006d48 <UART_SetConfig+0x54c>
			} else {
				usartdiv = (uint32_t) (UART_DIV_LPUART(pclk,
 8006b76:	69fb      	ldr	r3, [r7, #28]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	461c      	mov	r4, r3
 8006b7c:	4615      	mov	r5, r2
 8006b7e:	f04f 0200 	mov.w	r2, #0
 8006b82:	f04f 0300 	mov.w	r3, #0
 8006b86:	022b      	lsls	r3, r5, #8
 8006b88:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006b8c:	0222      	lsls	r2, r4, #8
 8006b8e:	68f9      	ldr	r1, [r7, #12]
 8006b90:	6849      	ldr	r1, [r1, #4]
 8006b92:	0849      	lsrs	r1, r1, #1
 8006b94:	2000      	movs	r0, #0
 8006b96:	4688      	mov	r8, r1
 8006b98:	4681      	mov	r9, r0
 8006b9a:	eb12 0a08 	adds.w	sl, r2, r8
 8006b9e:	eb43 0b09 	adc.w	fp, r3, r9
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	603b      	str	r3, [r7, #0]
 8006baa:	607a      	str	r2, [r7, #4]
 8006bac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bb0:	4650      	mov	r0, sl
 8006bb2:	4659      	mov	r1, fp
 8006bb4:	f7f9 fb64 	bl	8000280 <__aeabi_uldivmod>
 8006bb8:	4602      	mov	r2, r0
 8006bba:	460b      	mov	r3, r1
 8006bbc:	4613      	mov	r3, r2
 8006bbe:	61bb      	str	r3, [r7, #24]
						huart->Init.BaudRate));
				if ((usartdiv >= LPUART_BRR_MIN)
 8006bc0:	69bb      	ldr	r3, [r7, #24]
 8006bc2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006bc6:	d308      	bcc.n	8006bda <UART_SetConfig+0x3de>
						&& (usartdiv <= LPUART_BRR_MAX)) {
 8006bc8:	69bb      	ldr	r3, [r7, #24]
 8006bca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bce:	d204      	bcs.n	8006bda <UART_SetConfig+0x3de>
					huart->Instance->BRR = usartdiv;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	69ba      	ldr	r2, [r7, #24]
 8006bd6:	60da      	str	r2, [r3, #12]
 8006bd8:	e0b6      	b.n	8006d48 <UART_SetConfig+0x54c>
				} else {
					ret = HAL_ERROR;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006be0:	e0b2      	b.n	8006d48 <UART_SetConfig+0x54c>
			} /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
		} /* if (pclk != 0) */
	}
	/* Check UART Over Sampling to set Baud Rate Register */
	else if (huart->Init.OverSampling == UART_OVERSAMPLING_8) {
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	69db      	ldr	r3, [r3, #28]
 8006be6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bea:	d15e      	bne.n	8006caa <UART_SetConfig+0x4ae>
		switch (clocksource) {
 8006bec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006bf0:	2b08      	cmp	r3, #8
 8006bf2:	d828      	bhi.n	8006c46 <UART_SetConfig+0x44a>
 8006bf4:	a201      	add	r2, pc, #4	; (adr r2, 8006bfc <UART_SetConfig+0x400>)
 8006bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bfa:	bf00      	nop
 8006bfc:	08006c21 	.word	0x08006c21
 8006c00:	08006c29 	.word	0x08006c29
 8006c04:	08006c31 	.word	0x08006c31
 8006c08:	08006c47 	.word	0x08006c47
 8006c0c:	08006c37 	.word	0x08006c37
 8006c10:	08006c47 	.word	0x08006c47
 8006c14:	08006c47 	.word	0x08006c47
 8006c18:	08006c47 	.word	0x08006c47
 8006c1c:	08006c3f 	.word	0x08006c3f
		case UART_CLOCKSOURCE_PCLK1:
			pclk = HAL_RCC_GetPCLK1Freq();
 8006c20:	f7fe f990 	bl	8004f44 <HAL_RCC_GetPCLK1Freq>
 8006c24:	61f8      	str	r0, [r7, #28]
			break;
 8006c26:	e014      	b.n	8006c52 <UART_SetConfig+0x456>
		case UART_CLOCKSOURCE_PCLK2:
			pclk = HAL_RCC_GetPCLK2Freq();
 8006c28:	f7fe f9a2 	bl	8004f70 <HAL_RCC_GetPCLK2Freq>
 8006c2c:	61f8      	str	r0, [r7, #28]
			break;
 8006c2e:	e010      	b.n	8006c52 <UART_SetConfig+0x456>
		case UART_CLOCKSOURCE_HSI:
			pclk = (uint32_t) HSI_VALUE;
 8006c30:	4b4d      	ldr	r3, [pc, #308]	; (8006d68 <UART_SetConfig+0x56c>)
 8006c32:	61fb      	str	r3, [r7, #28]
			break;
 8006c34:	e00d      	b.n	8006c52 <UART_SetConfig+0x456>
		case UART_CLOCKSOURCE_SYSCLK:
			pclk = HAL_RCC_GetSysClockFreq();
 8006c36:	f7fe f8ed 	bl	8004e14 <HAL_RCC_GetSysClockFreq>
 8006c3a:	61f8      	str	r0, [r7, #28]
			break;
 8006c3c:	e009      	b.n	8006c52 <UART_SetConfig+0x456>
		case UART_CLOCKSOURCE_LSE:
			pclk = (uint32_t) LSE_VALUE;
 8006c3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c42:	61fb      	str	r3, [r7, #28]
			break;
 8006c44:	e005      	b.n	8006c52 <UART_SetConfig+0x456>
		default:
			pclk = 0U;
 8006c46:	2300      	movs	r3, #0
 8006c48:	61fb      	str	r3, [r7, #28]
			ret = HAL_ERROR;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			break;
 8006c50:	bf00      	nop
		}

		/* USARTDIV must be greater than or equal to 0d16 */
		if (pclk != 0U) {
 8006c52:	69fb      	ldr	r3, [r7, #28]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d077      	beq.n	8006d48 <UART_SetConfig+0x54c>
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
			usartdiv = (uint32_t) (UART_DIV_SAMPLING8(pclk,
 8006c58:	69fb      	ldr	r3, [r7, #28]
 8006c5a:	005a      	lsls	r2, r3, #1
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	085b      	lsrs	r3, r3, #1
 8006c62:	441a      	add	r2, r3
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c6c:	61bb      	str	r3, [r7, #24]
					huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
			if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX)) {
 8006c6e:	69bb      	ldr	r3, [r7, #24]
 8006c70:	2b0f      	cmp	r3, #15
 8006c72:	d916      	bls.n	8006ca2 <UART_SetConfig+0x4a6>
 8006c74:	69bb      	ldr	r3, [r7, #24]
 8006c76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c7a:	d212      	bcs.n	8006ca2 <UART_SetConfig+0x4a6>
				brrtemp = (uint16_t) (usartdiv & 0xFFF0U);
 8006c7c:	69bb      	ldr	r3, [r7, #24]
 8006c7e:	b29b      	uxth	r3, r3
 8006c80:	f023 030f 	bic.w	r3, r3, #15
 8006c84:	82fb      	strh	r3, [r7, #22]
				brrtemp |= (uint16_t) ((usartdiv & (uint16_t) 0x000FU) >> 1U);
 8006c86:	69bb      	ldr	r3, [r7, #24]
 8006c88:	085b      	lsrs	r3, r3, #1
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	f003 0307 	and.w	r3, r3, #7
 8006c90:	b29a      	uxth	r2, r3
 8006c92:	8afb      	ldrh	r3, [r7, #22]
 8006c94:	4313      	orrs	r3, r2
 8006c96:	82fb      	strh	r3, [r7, #22]
				huart->Instance->BRR = brrtemp;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	8afa      	ldrh	r2, [r7, #22]
 8006c9e:	60da      	str	r2, [r3, #12]
 8006ca0:	e052      	b.n	8006d48 <UART_SetConfig+0x54c>
			} else {
				ret = HAL_ERROR;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006ca8:	e04e      	b.n	8006d48 <UART_SetConfig+0x54c>
			}
		}
	} else {
		switch (clocksource) {
 8006caa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006cae:	2b08      	cmp	r3, #8
 8006cb0:	d827      	bhi.n	8006d02 <UART_SetConfig+0x506>
 8006cb2:	a201      	add	r2, pc, #4	; (adr r2, 8006cb8 <UART_SetConfig+0x4bc>)
 8006cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cb8:	08006cdd 	.word	0x08006cdd
 8006cbc:	08006ce5 	.word	0x08006ce5
 8006cc0:	08006ced 	.word	0x08006ced
 8006cc4:	08006d03 	.word	0x08006d03
 8006cc8:	08006cf3 	.word	0x08006cf3
 8006ccc:	08006d03 	.word	0x08006d03
 8006cd0:	08006d03 	.word	0x08006d03
 8006cd4:	08006d03 	.word	0x08006d03
 8006cd8:	08006cfb 	.word	0x08006cfb
		case UART_CLOCKSOURCE_PCLK1:
			pclk = HAL_RCC_GetPCLK1Freq();
 8006cdc:	f7fe f932 	bl	8004f44 <HAL_RCC_GetPCLK1Freq>
 8006ce0:	61f8      	str	r0, [r7, #28]
			break;
 8006ce2:	e014      	b.n	8006d0e <UART_SetConfig+0x512>
		case UART_CLOCKSOURCE_PCLK2:
			pclk = HAL_RCC_GetPCLK2Freq();
 8006ce4:	f7fe f944 	bl	8004f70 <HAL_RCC_GetPCLK2Freq>
 8006ce8:	61f8      	str	r0, [r7, #28]
			break;
 8006cea:	e010      	b.n	8006d0e <UART_SetConfig+0x512>
		case UART_CLOCKSOURCE_HSI:
			pclk = (uint32_t) HSI_VALUE;
 8006cec:	4b1e      	ldr	r3, [pc, #120]	; (8006d68 <UART_SetConfig+0x56c>)
 8006cee:	61fb      	str	r3, [r7, #28]
			break;
 8006cf0:	e00d      	b.n	8006d0e <UART_SetConfig+0x512>
		case UART_CLOCKSOURCE_SYSCLK:
			pclk = HAL_RCC_GetSysClockFreq();
 8006cf2:	f7fe f88f 	bl	8004e14 <HAL_RCC_GetSysClockFreq>
 8006cf6:	61f8      	str	r0, [r7, #28]
			break;
 8006cf8:	e009      	b.n	8006d0e <UART_SetConfig+0x512>
		case UART_CLOCKSOURCE_LSE:
			pclk = (uint32_t) LSE_VALUE;
 8006cfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cfe:	61fb      	str	r3, [r7, #28]
			break;
 8006d00:	e005      	b.n	8006d0e <UART_SetConfig+0x512>
		default:
			pclk = 0U;
 8006d02:	2300      	movs	r3, #0
 8006d04:	61fb      	str	r3, [r7, #28]
			ret = HAL_ERROR;
 8006d06:	2301      	movs	r3, #1
 8006d08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			break;
 8006d0c:	bf00      	nop
		}

		if (pclk != 0U) {
 8006d0e:	69fb      	ldr	r3, [r7, #28]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d019      	beq.n	8006d48 <UART_SetConfig+0x54c>
			/* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
			usartdiv = (uint32_t) (UART_DIV_SAMPLING16(pclk,
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	085a      	lsrs	r2, r3, #1
 8006d1a:	69fb      	ldr	r3, [r7, #28]
 8006d1c:	441a      	add	r2, r3
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d26:	61bb      	str	r3, [r7, #24]
					huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
			if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX)) {
 8006d28:	69bb      	ldr	r3, [r7, #24]
 8006d2a:	2b0f      	cmp	r3, #15
 8006d2c:	d909      	bls.n	8006d42 <UART_SetConfig+0x546>
 8006d2e:	69bb      	ldr	r3, [r7, #24]
 8006d30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d34:	d205      	bcs.n	8006d42 <UART_SetConfig+0x546>
				huart->Instance->BRR = (uint16_t) usartdiv;
 8006d36:	69bb      	ldr	r3, [r7, #24]
 8006d38:	b29a      	uxth	r2, r3
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	60da      	str	r2, [r3, #12]
 8006d40:	e002      	b.n	8006d48 <UART_SetConfig+0x54c>
			} else {
				ret = HAL_ERROR;
 8006d42:	2301      	movs	r3, #1
 8006d44:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

	/* Clear ISR function pointers */
	huart->RxISR = NULL;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	669a      	str	r2, [r3, #104]	; 0x68
	huart->TxISR = NULL;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2200      	movs	r2, #0
 8006d52:	66da      	str	r2, [r3, #108]	; 0x6c

	return ret;
 8006d54:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3728      	adds	r7, #40	; 0x28
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d62:	bf00      	nop
 8006d64:	40008000 	.word	0x40008000
 8006d68:	00f42400 	.word	0x00f42400

08006d6c <UART_AdvFeatureConfig>:
/**
 * @brief Configure the UART peripheral advanced features.
 * @param huart UART handle.
 * @retval None
 */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart) {
 8006d6c:	b480      	push	{r7}
 8006d6e:	b083      	sub	sp, #12
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
	/* Check whether the set of advanced features to configure is properly set */
	assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

	/* if required, configure RX/TX pins swap */
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d78:	f003 0308 	and.w	r3, r3, #8
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d00a      	beq.n	8006d96 <UART_AdvFeatureConfig+0x2a>
			UART_ADVFEATURE_SWAP_INIT)) {
		assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
		MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP,
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	430a      	orrs	r2, r1
 8006d94:	605a      	str	r2, [r3, #4]
				huart->AdvancedInit.Swap);
	}

	/* if required, configure TX pin active level inversion */
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d9a:	f003 0301 	and.w	r3, r3, #1
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d00a      	beq.n	8006db8 <UART_AdvFeatureConfig+0x4c>
			UART_ADVFEATURE_TXINVERT_INIT)) {
		assert_param(
				IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
		MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV,
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	430a      	orrs	r2, r1
 8006db6:	605a      	str	r2, [r3, #4]
				huart->AdvancedInit.TxPinLevelInvert);
	}

	/* if required, configure RX pin active level inversion */
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dbc:	f003 0302 	and.w	r3, r3, #2
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d00a      	beq.n	8006dda <UART_AdvFeatureConfig+0x6e>
			UART_ADVFEATURE_RXINVERT_INIT)) {
		assert_param(
				IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
		MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV,
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	430a      	orrs	r2, r1
 8006dd8:	605a      	str	r2, [r3, #4]
				huart->AdvancedInit.RxPinLevelInvert);
	}

	/* if required, configure data inversion */
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dde:	f003 0304 	and.w	r3, r3, #4
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d00a      	beq.n	8006dfc <UART_AdvFeatureConfig+0x90>
			UART_ADVFEATURE_DATAINVERT_INIT)) {
		assert_param(
				IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
		MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV,
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	430a      	orrs	r2, r1
 8006dfa:	605a      	str	r2, [r3, #4]
				huart->AdvancedInit.DataInvert);
	}

	/* if required, configure RX overrun detection disabling */
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e00:	f003 0310 	and.w	r3, r3, #16
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d00a      	beq.n	8006e1e <UART_AdvFeatureConfig+0xb2>
			UART_ADVFEATURE_RXOVERRUNDISABLE_INIT)) {
		assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
		MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS,
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	689b      	ldr	r3, [r3, #8]
 8006e0e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	430a      	orrs	r2, r1
 8006e1c:	609a      	str	r2, [r3, #8]
				huart->AdvancedInit.OverrunDisable);
	}

	/* if required, configure DMA disabling on reception error */
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e22:	f003 0320 	and.w	r3, r3, #32
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d00a      	beq.n	8006e40 <UART_AdvFeatureConfig+0xd4>
			UART_ADVFEATURE_DMADISABLEONERROR_INIT)) {
		assert_param(
				IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
		MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE,
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	689b      	ldr	r3, [r3, #8]
 8006e30:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	430a      	orrs	r2, r1
 8006e3e:	609a      	str	r2, [r3, #8]
				huart->AdvancedInit.DMADisableonRxError);
	}

	/* if required, configure auto Baud rate detection scheme */
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d01a      	beq.n	8006e82 <UART_AdvFeatureConfig+0x116>
			UART_ADVFEATURE_AUTOBAUDRATE_INIT)) {
		assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
		assert_param(
				IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
		MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN,
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	430a      	orrs	r2, r1
 8006e60:	605a      	str	r2, [r3, #4]
				huart->AdvancedInit.AutoBaudRateEnable);
		/* set auto Baudrate detection parameters if detection is enabled */
		if (huart->AdvancedInit.AutoBaudRateEnable
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e6a:	d10a      	bne.n	8006e82 <UART_AdvFeatureConfig+0x116>
				== UART_ADVFEATURE_AUTOBAUDRATE_ENABLE) {
			assert_param(
					IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
			MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE,
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	430a      	orrs	r2, r1
 8006e80:	605a      	str	r2, [r3, #4]
					huart->AdvancedInit.AutoBaudRateMode);
		}
	}

	/* if required, configure MSB first on communication line */
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d00a      	beq.n	8006ea4 <UART_AdvFeatureConfig+0x138>
			UART_ADVFEATURE_MSBFIRST_INIT)) {
		assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
		MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST,
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	430a      	orrs	r2, r1
 8006ea2:	605a      	str	r2, [r3, #4]
				huart->AdvancedInit.MSBFirst);
	}
}
 8006ea4:	bf00      	nop
 8006ea6:	370c      	adds	r7, #12
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr

08006eb0 <UART_CheckIdleState>:
/**
 * @brief Check the UART Idle State.
 * @param huart UART handle.
 * @retval HAL status
 */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart) {
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b098      	sub	sp, #96	; 0x60
 8006eb4:	af02      	add	r7, sp, #8
 8006eb6:	6078      	str	r0, [r7, #4]
	uint32_t tickstart;

	/* Initialize the UART ErrorCode */
	huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

	/* Init tickstart for timeout management */
	tickstart = HAL_GetTick();
 8006ec0:	f7fa fa94 	bl	80013ec <HAL_GetTick>
 8006ec4:	6578      	str	r0, [r7, #84]	; 0x54

	/* Check if the Transmitter is enabled */
	if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE) {
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f003 0308 	and.w	r3, r3, #8
 8006ed0:	2b08      	cmp	r3, #8
 8006ed2:	d12e      	bne.n	8006f32 <UART_CheckIdleState+0x82>
		/* Wait until TEACK flag is set */
		if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET,
 8006ed4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ed8:	9300      	str	r3, [sp, #0]
 8006eda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006edc:	2200      	movs	r2, #0
 8006ede:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f000 f88c 	bl	8007000 <UART_WaitOnFlagUntilTimeout>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d021      	beq.n	8006f32 <UART_CheckIdleState+0x82>
				tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK) {
			/* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
			ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	63bb      	str	r3, [r7, #56]	; 0x38
	__ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef6:	e853 3f00 	ldrex	r3, [r3]
 8006efa:	637b      	str	r3, [r7, #52]	; 0x34
	return (result);
 8006efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006efe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f02:	653b      	str	r3, [r7, #80]	; 0x50
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	461a      	mov	r2, r3
 8006f0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f0c:	647b      	str	r3, [r7, #68]	; 0x44
 8006f0e:	643a      	str	r2, [r7, #64]	; 0x40
	__ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f10:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006f12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f14:	e841 2300 	strex	r3, r2, [r1]
 8006f18:	63fb      	str	r3, [r7, #60]	; 0x3c
	return (result);
 8006f1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d1e6      	bne.n	8006eee <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

			huart->gState = HAL_UART_STATE_READY;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2220      	movs	r2, #32
 8006f24:	67da      	str	r2, [r3, #124]	; 0x7c

			__HAL_UNLOCK(huart);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

			/* Timeout occurred */
			return HAL_TIMEOUT;
 8006f2e:	2303      	movs	r3, #3
 8006f30:	e062      	b.n	8006ff8 <UART_CheckIdleState+0x148>
		}
	}

	/* Check if the Receiver is enabled */
	if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE) {
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f003 0304 	and.w	r3, r3, #4
 8006f3c:	2b04      	cmp	r3, #4
 8006f3e:	d149      	bne.n	8006fd4 <UART_CheckIdleState+0x124>
		/* Wait until REACK flag is set */
		if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET,
 8006f40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f44:	9300      	str	r3, [sp, #0]
 8006f46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f48:	2200      	movs	r2, #0
 8006f4a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f000 f856 	bl	8007000 <UART_WaitOnFlagUntilTimeout>
 8006f54:	4603      	mov	r3, r0
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d03c      	beq.n	8006fd4 <UART_CheckIdleState+0x124>
			/* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
			 interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
			ATOMIC_CLEAR_BIT(huart->Instance->CR1,
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	627b      	str	r3, [r7, #36]	; 0x24
	__ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f62:	e853 3f00 	ldrex	r3, [r3]
 8006f66:	623b      	str	r3, [r7, #32]
	return (result);
 8006f68:	6a3b      	ldr	r3, [r7, #32]
 8006f6a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	461a      	mov	r2, r3
 8006f76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f78:	633b      	str	r3, [r7, #48]	; 0x30
 8006f7a:	62fa      	str	r2, [r7, #44]	; 0x2c
	__ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f7c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f80:	e841 2300 	strex	r3, r2, [r1]
 8006f84:	62bb      	str	r3, [r7, #40]	; 0x28
	return (result);
 8006f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d1e6      	bne.n	8006f5a <UART_CheckIdleState+0xaa>
					(USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
			ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	3308      	adds	r3, #8
 8006f92:	613b      	str	r3, [r7, #16]
	__ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	e853 3f00 	ldrex	r3, [r3]
 8006f9a:	60fb      	str	r3, [r7, #12]
	return (result);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f023 0301 	bic.w	r3, r3, #1
 8006fa2:	64bb      	str	r3, [r7, #72]	; 0x48
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	3308      	adds	r3, #8
 8006faa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006fac:	61fa      	str	r2, [r7, #28]
 8006fae:	61bb      	str	r3, [r7, #24]
	__ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fb0:	69b9      	ldr	r1, [r7, #24]
 8006fb2:	69fa      	ldr	r2, [r7, #28]
 8006fb4:	e841 2300 	strex	r3, r2, [r1]
 8006fb8:	617b      	str	r3, [r7, #20]
	return (result);
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d1e5      	bne.n	8006f8c <UART_CheckIdleState+0xdc>

			huart->RxState = HAL_UART_STATE_READY;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2220      	movs	r2, #32
 8006fc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

			__HAL_UNLOCK(huart);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

			/* Timeout occurred */
			return HAL_TIMEOUT;
 8006fd0:	2303      	movs	r3, #3
 8006fd2:	e011      	b.n	8006ff8 <UART_CheckIdleState+0x148>
		}
	}

	/* Initialize the UART State */
	huart->gState = HAL_UART_STATE_READY;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2220      	movs	r2, #32
 8006fd8:	67da      	str	r2, [r3, #124]	; 0x7c
	huart->RxState = HAL_UART_STATE_READY;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2220      	movs	r2, #32
 8006fde:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	661a      	str	r2, [r3, #96]	; 0x60
	huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2200      	movs	r2, #0
 8006fec:	665a      	str	r2, [r3, #100]	; 0x64

	__HAL_UNLOCK(huart);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

	return HAL_OK;
 8006ff6:	2300      	movs	r3, #0
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3758      	adds	r7, #88	; 0x58
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}

08007000 <UART_WaitOnFlagUntilTimeout>:
 * @param Tickstart Tick start value
 * @param Timeout   Timeout duration
 * @retval HAL status
 */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart,
		uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout) {
 8007000:	b580      	push	{r7, lr}
 8007002:	b084      	sub	sp, #16
 8007004:	af00      	add	r7, sp, #0
 8007006:	60f8      	str	r0, [r7, #12]
 8007008:	60b9      	str	r1, [r7, #8]
 800700a:	603b      	str	r3, [r7, #0]
 800700c:	4613      	mov	r3, r2
 800700e:	71fb      	strb	r3, [r7, #7]
	/* Wait until flag is set */
	while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) {
 8007010:	e049      	b.n	80070a6 <UART_WaitOnFlagUntilTimeout+0xa6>
		/* Check for the Timeout */
		if (Timeout != HAL_MAX_DELAY) {
 8007012:	69bb      	ldr	r3, [r7, #24]
 8007014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007018:	d045      	beq.n	80070a6 <UART_WaitOnFlagUntilTimeout+0xa6>
			if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 800701a:	f7fa f9e7 	bl	80013ec <HAL_GetTick>
 800701e:	4602      	mov	r2, r0
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	1ad3      	subs	r3, r2, r3
 8007024:	69ba      	ldr	r2, [r7, #24]
 8007026:	429a      	cmp	r2, r3
 8007028:	d302      	bcc.n	8007030 <UART_WaitOnFlagUntilTimeout+0x30>
 800702a:	69bb      	ldr	r3, [r7, #24]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d101      	bne.n	8007034 <UART_WaitOnFlagUntilTimeout+0x34>

				return HAL_TIMEOUT;
 8007030:	2303      	movs	r3, #3
 8007032:	e048      	b.n	80070c6 <UART_WaitOnFlagUntilTimeout+0xc6>
			}

			if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) {
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f003 0304 	and.w	r3, r3, #4
 800703e:	2b00      	cmp	r3, #0
 8007040:	d031      	beq.n	80070a6 <UART_WaitOnFlagUntilTimeout+0xa6>
				if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET) {
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	69db      	ldr	r3, [r3, #28]
 8007048:	f003 0308 	and.w	r3, r3, #8
 800704c:	2b08      	cmp	r3, #8
 800704e:	d110      	bne.n	8007072 <UART_WaitOnFlagUntilTimeout+0x72>
					/* Clear Overrun Error flag*/
					__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	2208      	movs	r2, #8
 8007056:	621a      	str	r2, [r3, #32]

					/* Blocking error : transfer is aborted
					 Set the UART state ready to be able to start again the process,
					 Disable Rx Interrupts if ongoing */
					UART_EndRxTransfer(huart);
 8007058:	68f8      	ldr	r0, [r7, #12]
 800705a:	f000 f838 	bl	80070ce <UART_EndRxTransfer>

					huart->ErrorCode = HAL_UART_ERROR_ORE;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2208      	movs	r2, #8
 8007062:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

					/* Process Unlocked */
					__HAL_UNLOCK(huart);
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2200      	movs	r2, #0
 800706a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

					return HAL_ERROR;
 800706e:	2301      	movs	r3, #1
 8007070:	e029      	b.n	80070c6 <UART_WaitOnFlagUntilTimeout+0xc6>
				}
				if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET) {
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	69db      	ldr	r3, [r3, #28]
 8007078:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800707c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007080:	d111      	bne.n	80070a6 <UART_WaitOnFlagUntilTimeout+0xa6>
					/* Clear Receiver Timeout flag*/
					__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800708a:	621a      	str	r2, [r3, #32]

					/* Blocking error : transfer is aborted
					 Set the UART state ready to be able to start again the process,
					 Disable Rx Interrupts if ongoing */
					UART_EndRxTransfer(huart);
 800708c:	68f8      	ldr	r0, [r7, #12]
 800708e:	f000 f81e 	bl	80070ce <UART_EndRxTransfer>

					huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	2220      	movs	r2, #32
 8007096:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

					/* Process Unlocked */
					__HAL_UNLOCK(huart);
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2200      	movs	r2, #0
 800709e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

					return HAL_TIMEOUT;
 80070a2:	2303      	movs	r3, #3
 80070a4:	e00f      	b.n	80070c6 <UART_WaitOnFlagUntilTimeout+0xc6>
	while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) {
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	69da      	ldr	r2, [r3, #28]
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	4013      	ands	r3, r2
 80070b0:	68ba      	ldr	r2, [r7, #8]
 80070b2:	429a      	cmp	r2, r3
 80070b4:	bf0c      	ite	eq
 80070b6:	2301      	moveq	r3, #1
 80070b8:	2300      	movne	r3, #0
 80070ba:	b2db      	uxtb	r3, r3
 80070bc:	461a      	mov	r2, r3
 80070be:	79fb      	ldrb	r3, [r7, #7]
 80070c0:	429a      	cmp	r2, r3
 80070c2:	d0a6      	beq.n	8007012 <UART_WaitOnFlagUntilTimeout+0x12>
				}
			}
		}
	}
	return HAL_OK;
 80070c4:	2300      	movs	r3, #0
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	3710      	adds	r7, #16
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}

080070ce <UART_EndRxTransfer>:
/**
 * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
 * @param  huart UART handle.
 * @retval None
 */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart) {
 80070ce:	b480      	push	{r7}
 80070d0:	b095      	sub	sp, #84	; 0x54
 80070d2:	af00      	add	r7, sp, #0
 80070d4:	6078      	str	r0, [r7, #4]
	/* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
	ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	637b      	str	r3, [r7, #52]	; 0x34
	__ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070de:	e853 3f00 	ldrex	r3, [r3]
 80070e2:	633b      	str	r3, [r7, #48]	; 0x30
	return (result);
 80070e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80070ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	461a      	mov	r2, r3
 80070f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070f4:	643b      	str	r3, [r7, #64]	; 0x40
 80070f6:	63fa      	str	r2, [r7, #60]	; 0x3c
	__ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80070fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80070fc:	e841 2300 	strex	r3, r2, [r1]
 8007100:	63bb      	str	r3, [r7, #56]	; 0x38
	return (result);
 8007102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007104:	2b00      	cmp	r3, #0
 8007106:	d1e6      	bne.n	80070d6 <UART_EndRxTransfer+0x8>
	ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	3308      	adds	r3, #8
 800710e:	623b      	str	r3, [r7, #32]
	__ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007110:	6a3b      	ldr	r3, [r7, #32]
 8007112:	e853 3f00 	ldrex	r3, [r3]
 8007116:	61fb      	str	r3, [r7, #28]
	return (result);
 8007118:	69fb      	ldr	r3, [r7, #28]
 800711a:	f023 0301 	bic.w	r3, r3, #1
 800711e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	3308      	adds	r3, #8
 8007126:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007128:	62fa      	str	r2, [r7, #44]	; 0x2c
 800712a:	62bb      	str	r3, [r7, #40]	; 0x28
	__ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800712c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800712e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007130:	e841 2300 	strex	r3, r2, [r1]
 8007134:	627b      	str	r3, [r7, #36]	; 0x24
	return (result);
 8007136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007138:	2b00      	cmp	r3, #0
 800713a:	d1e5      	bne.n	8007108 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

	/* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
	if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE) {
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007140:	2b01      	cmp	r3, #1
 8007142:	d118      	bne.n	8007176 <UART_EndRxTransfer+0xa8>
		ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	60fb      	str	r3, [r7, #12]
	__ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	e853 3f00 	ldrex	r3, [r3]
 8007150:	60bb      	str	r3, [r7, #8]
	return (result);
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	f023 0310 	bic.w	r3, r3, #16
 8007158:	647b      	str	r3, [r7, #68]	; 0x44
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	461a      	mov	r2, r3
 8007160:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007162:	61bb      	str	r3, [r7, #24]
 8007164:	617a      	str	r2, [r7, #20]
	__ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007166:	6979      	ldr	r1, [r7, #20]
 8007168:	69ba      	ldr	r2, [r7, #24]
 800716a:	e841 2300 	strex	r3, r2, [r1]
 800716e:	613b      	str	r3, [r7, #16]
	return (result);
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d1e6      	bne.n	8007144 <UART_EndRxTransfer+0x76>
	}

	/* At end of Rx process, restore huart->RxState to Ready */
	huart->RxState = HAL_UART_STATE_READY;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2220      	movs	r2, #32
 800717a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2200      	movs	r2, #0
 8007182:	661a      	str	r2, [r3, #96]	; 0x60

	/* Reset RxIsr function pointer */
	huart->RxISR = NULL;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2200      	movs	r2, #0
 8007188:	669a      	str	r2, [r3, #104]	; 0x68
}
 800718a:	bf00      	nop
 800718c:	3754      	adds	r7, #84	; 0x54
 800718e:	46bd      	mov	sp, r7
 8007190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007194:	4770      	bx	lr

08007196 <UART_DMAAbortOnError>:
 * @brief  DMA UART communication abort callback, when initiated by HAL services on Error
 *         (To be called at end of DMA Abort procedure following error occurrence).
 * @param  hdma DMA handle.
 * @retval None
 */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma) {
 8007196:	b580      	push	{r7, lr}
 8007198:	b084      	sub	sp, #16
 800719a:	af00      	add	r7, sp, #0
 800719c:	6078      	str	r0, [r7, #4]
	UART_HandleTypeDef *huart = (UART_HandleTypeDef*) (hdma->Parent);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071a2:	60fb      	str	r3, [r7, #12]
	huart->RxXferCount = 0U;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	2200      	movs	r2, #0
 80071a8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
	huart->TxXferCount = 0U;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	2200      	movs	r2, #0
 80071b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
	/*Call legacy weak error callback*/
	HAL_UART_ErrorCallback(huart);
 80071b4:	68f8      	ldr	r0, [r7, #12]
 80071b6:	f7ff fb0b 	bl	80067d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071ba:	bf00      	nop
 80071bc:	3710      	adds	r7, #16
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}

080071c2 <UART_EndTransmit_IT>:
 * @brief  Wrap up transmission in non-blocking mode.
 * @param  huart pointer to a UART_HandleTypeDef structure that contains
 *                the configuration information for the specified UART module.
 * @retval None
 */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart) {
 80071c2:	b580      	push	{r7, lr}
 80071c4:	b088      	sub	sp, #32
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	6078      	str	r0, [r7, #4]
	/* Disable the UART Transmit Complete Interrupt */
	ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	60fb      	str	r3, [r7, #12]
	__ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	e853 3f00 	ldrex	r3, [r3]
 80071d6:	60bb      	str	r3, [r7, #8]
	return (result);
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071de:	61fb      	str	r3, [r7, #28]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	461a      	mov	r2, r3
 80071e6:	69fb      	ldr	r3, [r7, #28]
 80071e8:	61bb      	str	r3, [r7, #24]
 80071ea:	617a      	str	r2, [r7, #20]
	__ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ec:	6979      	ldr	r1, [r7, #20]
 80071ee:	69ba      	ldr	r2, [r7, #24]
 80071f0:	e841 2300 	strex	r3, r2, [r1]
 80071f4:	613b      	str	r3, [r7, #16]
	return (result);
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d1e6      	bne.n	80071ca <UART_EndTransmit_IT+0x8>

	/* Tx process is ended, restore huart->gState to Ready */
	huart->gState = HAL_UART_STATE_READY;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2220      	movs	r2, #32
 8007200:	67da      	str	r2, [r3, #124]	; 0x7c

	/* Cleat TxISR function pointer */
	huart->TxISR = NULL;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2200      	movs	r2, #0
 8007206:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
	/*Call legacy weak Tx complete callback*/
	HAL_UART_TxCpltCallback(huart);
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f7ff fad7 	bl	80067bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800720e:	bf00      	nop
 8007210:	3720      	adds	r7, #32
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}

08007216 <HAL_UARTEx_WakeupCallback>:
/**
 * @brief UART wakeup from Stop mode callback.
 * @param huart UART handle.
 * @retval None
 */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart) {
 8007216:	b480      	push	{r7}
 8007218:	b083      	sub	sp, #12
 800721a:	af00      	add	r7, sp, #0
 800721c:	6078      	str	r0, [r7, #4]
	UNUSED(huart);

	/* NOTE : This function should not be modified, when the callback is needed,
	 the HAL_UARTEx_WakeupCallback can be implemented in the user file.
	 */
}
 800721e:	bf00      	nop
 8007220:	370c      	adds	r7, #12
 8007222:	46bd      	mov	sp, r7
 8007224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007228:	4770      	bx	lr
	...

0800722c <siprintf>:
 800722c:	b40e      	push	{r1, r2, r3}
 800722e:	b500      	push	{lr}
 8007230:	b09c      	sub	sp, #112	; 0x70
 8007232:	ab1d      	add	r3, sp, #116	; 0x74
 8007234:	9002      	str	r0, [sp, #8]
 8007236:	9006      	str	r0, [sp, #24]
 8007238:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800723c:	4809      	ldr	r0, [pc, #36]	; (8007264 <siprintf+0x38>)
 800723e:	9107      	str	r1, [sp, #28]
 8007240:	9104      	str	r1, [sp, #16]
 8007242:	4909      	ldr	r1, [pc, #36]	; (8007268 <siprintf+0x3c>)
 8007244:	f853 2b04 	ldr.w	r2, [r3], #4
 8007248:	9105      	str	r1, [sp, #20]
 800724a:	6800      	ldr	r0, [r0, #0]
 800724c:	9301      	str	r3, [sp, #4]
 800724e:	a902      	add	r1, sp, #8
 8007250:	f000 f992 	bl	8007578 <_svfiprintf_r>
 8007254:	9b02      	ldr	r3, [sp, #8]
 8007256:	2200      	movs	r2, #0
 8007258:	701a      	strb	r2, [r3, #0]
 800725a:	b01c      	add	sp, #112	; 0x70
 800725c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007260:	b003      	add	sp, #12
 8007262:	4770      	bx	lr
 8007264:	20000064 	.word	0x20000064
 8007268:	ffff0208 	.word	0xffff0208

0800726c <memset>:
 800726c:	4402      	add	r2, r0
 800726e:	4603      	mov	r3, r0
 8007270:	4293      	cmp	r3, r2
 8007272:	d100      	bne.n	8007276 <memset+0xa>
 8007274:	4770      	bx	lr
 8007276:	f803 1b01 	strb.w	r1, [r3], #1
 800727a:	e7f9      	b.n	8007270 <memset+0x4>

0800727c <__errno>:
 800727c:	4b01      	ldr	r3, [pc, #4]	; (8007284 <__errno+0x8>)
 800727e:	6818      	ldr	r0, [r3, #0]
 8007280:	4770      	bx	lr
 8007282:	bf00      	nop
 8007284:	20000064 	.word	0x20000064

08007288 <__libc_init_array>:
 8007288:	b570      	push	{r4, r5, r6, lr}
 800728a:	4d0d      	ldr	r5, [pc, #52]	; (80072c0 <__libc_init_array+0x38>)
 800728c:	4c0d      	ldr	r4, [pc, #52]	; (80072c4 <__libc_init_array+0x3c>)
 800728e:	1b64      	subs	r4, r4, r5
 8007290:	10a4      	asrs	r4, r4, #2
 8007292:	2600      	movs	r6, #0
 8007294:	42a6      	cmp	r6, r4
 8007296:	d109      	bne.n	80072ac <__libc_init_array+0x24>
 8007298:	4d0b      	ldr	r5, [pc, #44]	; (80072c8 <__libc_init_array+0x40>)
 800729a:	4c0c      	ldr	r4, [pc, #48]	; (80072cc <__libc_init_array+0x44>)
 800729c:	f000 fc6a 	bl	8007b74 <_init>
 80072a0:	1b64      	subs	r4, r4, r5
 80072a2:	10a4      	asrs	r4, r4, #2
 80072a4:	2600      	movs	r6, #0
 80072a6:	42a6      	cmp	r6, r4
 80072a8:	d105      	bne.n	80072b6 <__libc_init_array+0x2e>
 80072aa:	bd70      	pop	{r4, r5, r6, pc}
 80072ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80072b0:	4798      	blx	r3
 80072b2:	3601      	adds	r6, #1
 80072b4:	e7ee      	b.n	8007294 <__libc_init_array+0xc>
 80072b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80072ba:	4798      	blx	r3
 80072bc:	3601      	adds	r6, #1
 80072be:	e7f2      	b.n	80072a6 <__libc_init_array+0x1e>
 80072c0:	08007c9c 	.word	0x08007c9c
 80072c4:	08007c9c 	.word	0x08007c9c
 80072c8:	08007c9c 	.word	0x08007c9c
 80072cc:	08007ca0 	.word	0x08007ca0

080072d0 <__retarget_lock_acquire_recursive>:
 80072d0:	4770      	bx	lr

080072d2 <__retarget_lock_release_recursive>:
 80072d2:	4770      	bx	lr

080072d4 <_free_r>:
 80072d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80072d6:	2900      	cmp	r1, #0
 80072d8:	d044      	beq.n	8007364 <_free_r+0x90>
 80072da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072de:	9001      	str	r0, [sp, #4]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	f1a1 0404 	sub.w	r4, r1, #4
 80072e6:	bfb8      	it	lt
 80072e8:	18e4      	addlt	r4, r4, r3
 80072ea:	f000 f8df 	bl	80074ac <__malloc_lock>
 80072ee:	4a1e      	ldr	r2, [pc, #120]	; (8007368 <_free_r+0x94>)
 80072f0:	9801      	ldr	r0, [sp, #4]
 80072f2:	6813      	ldr	r3, [r2, #0]
 80072f4:	b933      	cbnz	r3, 8007304 <_free_r+0x30>
 80072f6:	6063      	str	r3, [r4, #4]
 80072f8:	6014      	str	r4, [r2, #0]
 80072fa:	b003      	add	sp, #12
 80072fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007300:	f000 b8da 	b.w	80074b8 <__malloc_unlock>
 8007304:	42a3      	cmp	r3, r4
 8007306:	d908      	bls.n	800731a <_free_r+0x46>
 8007308:	6825      	ldr	r5, [r4, #0]
 800730a:	1961      	adds	r1, r4, r5
 800730c:	428b      	cmp	r3, r1
 800730e:	bf01      	itttt	eq
 8007310:	6819      	ldreq	r1, [r3, #0]
 8007312:	685b      	ldreq	r3, [r3, #4]
 8007314:	1949      	addeq	r1, r1, r5
 8007316:	6021      	streq	r1, [r4, #0]
 8007318:	e7ed      	b.n	80072f6 <_free_r+0x22>
 800731a:	461a      	mov	r2, r3
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	b10b      	cbz	r3, 8007324 <_free_r+0x50>
 8007320:	42a3      	cmp	r3, r4
 8007322:	d9fa      	bls.n	800731a <_free_r+0x46>
 8007324:	6811      	ldr	r1, [r2, #0]
 8007326:	1855      	adds	r5, r2, r1
 8007328:	42a5      	cmp	r5, r4
 800732a:	d10b      	bne.n	8007344 <_free_r+0x70>
 800732c:	6824      	ldr	r4, [r4, #0]
 800732e:	4421      	add	r1, r4
 8007330:	1854      	adds	r4, r2, r1
 8007332:	42a3      	cmp	r3, r4
 8007334:	6011      	str	r1, [r2, #0]
 8007336:	d1e0      	bne.n	80072fa <_free_r+0x26>
 8007338:	681c      	ldr	r4, [r3, #0]
 800733a:	685b      	ldr	r3, [r3, #4]
 800733c:	6053      	str	r3, [r2, #4]
 800733e:	440c      	add	r4, r1
 8007340:	6014      	str	r4, [r2, #0]
 8007342:	e7da      	b.n	80072fa <_free_r+0x26>
 8007344:	d902      	bls.n	800734c <_free_r+0x78>
 8007346:	230c      	movs	r3, #12
 8007348:	6003      	str	r3, [r0, #0]
 800734a:	e7d6      	b.n	80072fa <_free_r+0x26>
 800734c:	6825      	ldr	r5, [r4, #0]
 800734e:	1961      	adds	r1, r4, r5
 8007350:	428b      	cmp	r3, r1
 8007352:	bf04      	itt	eq
 8007354:	6819      	ldreq	r1, [r3, #0]
 8007356:	685b      	ldreq	r3, [r3, #4]
 8007358:	6063      	str	r3, [r4, #4]
 800735a:	bf04      	itt	eq
 800735c:	1949      	addeq	r1, r1, r5
 800735e:	6021      	streq	r1, [r4, #0]
 8007360:	6054      	str	r4, [r2, #4]
 8007362:	e7ca      	b.n	80072fa <_free_r+0x26>
 8007364:	b003      	add	sp, #12
 8007366:	bd30      	pop	{r4, r5, pc}
 8007368:	20000408 	.word	0x20000408

0800736c <sbrk_aligned>:
 800736c:	b570      	push	{r4, r5, r6, lr}
 800736e:	4e0e      	ldr	r6, [pc, #56]	; (80073a8 <sbrk_aligned+0x3c>)
 8007370:	460c      	mov	r4, r1
 8007372:	6831      	ldr	r1, [r6, #0]
 8007374:	4605      	mov	r5, r0
 8007376:	b911      	cbnz	r1, 800737e <sbrk_aligned+0x12>
 8007378:	f000 fba6 	bl	8007ac8 <_sbrk_r>
 800737c:	6030      	str	r0, [r6, #0]
 800737e:	4621      	mov	r1, r4
 8007380:	4628      	mov	r0, r5
 8007382:	f000 fba1 	bl	8007ac8 <_sbrk_r>
 8007386:	1c43      	adds	r3, r0, #1
 8007388:	d00a      	beq.n	80073a0 <sbrk_aligned+0x34>
 800738a:	1cc4      	adds	r4, r0, #3
 800738c:	f024 0403 	bic.w	r4, r4, #3
 8007390:	42a0      	cmp	r0, r4
 8007392:	d007      	beq.n	80073a4 <sbrk_aligned+0x38>
 8007394:	1a21      	subs	r1, r4, r0
 8007396:	4628      	mov	r0, r5
 8007398:	f000 fb96 	bl	8007ac8 <_sbrk_r>
 800739c:	3001      	adds	r0, #1
 800739e:	d101      	bne.n	80073a4 <sbrk_aligned+0x38>
 80073a0:	f04f 34ff 	mov.w	r4, #4294967295
 80073a4:	4620      	mov	r0, r4
 80073a6:	bd70      	pop	{r4, r5, r6, pc}
 80073a8:	2000040c 	.word	0x2000040c

080073ac <_malloc_r>:
 80073ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073b0:	1ccd      	adds	r5, r1, #3
 80073b2:	f025 0503 	bic.w	r5, r5, #3
 80073b6:	3508      	adds	r5, #8
 80073b8:	2d0c      	cmp	r5, #12
 80073ba:	bf38      	it	cc
 80073bc:	250c      	movcc	r5, #12
 80073be:	2d00      	cmp	r5, #0
 80073c0:	4607      	mov	r7, r0
 80073c2:	db01      	blt.n	80073c8 <_malloc_r+0x1c>
 80073c4:	42a9      	cmp	r1, r5
 80073c6:	d905      	bls.n	80073d4 <_malloc_r+0x28>
 80073c8:	230c      	movs	r3, #12
 80073ca:	603b      	str	r3, [r7, #0]
 80073cc:	2600      	movs	r6, #0
 80073ce:	4630      	mov	r0, r6
 80073d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073d4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80074a8 <_malloc_r+0xfc>
 80073d8:	f000 f868 	bl	80074ac <__malloc_lock>
 80073dc:	f8d8 3000 	ldr.w	r3, [r8]
 80073e0:	461c      	mov	r4, r3
 80073e2:	bb5c      	cbnz	r4, 800743c <_malloc_r+0x90>
 80073e4:	4629      	mov	r1, r5
 80073e6:	4638      	mov	r0, r7
 80073e8:	f7ff ffc0 	bl	800736c <sbrk_aligned>
 80073ec:	1c43      	adds	r3, r0, #1
 80073ee:	4604      	mov	r4, r0
 80073f0:	d155      	bne.n	800749e <_malloc_r+0xf2>
 80073f2:	f8d8 4000 	ldr.w	r4, [r8]
 80073f6:	4626      	mov	r6, r4
 80073f8:	2e00      	cmp	r6, #0
 80073fa:	d145      	bne.n	8007488 <_malloc_r+0xdc>
 80073fc:	2c00      	cmp	r4, #0
 80073fe:	d048      	beq.n	8007492 <_malloc_r+0xe6>
 8007400:	6823      	ldr	r3, [r4, #0]
 8007402:	4631      	mov	r1, r6
 8007404:	4638      	mov	r0, r7
 8007406:	eb04 0903 	add.w	r9, r4, r3
 800740a:	f000 fb5d 	bl	8007ac8 <_sbrk_r>
 800740e:	4581      	cmp	r9, r0
 8007410:	d13f      	bne.n	8007492 <_malloc_r+0xe6>
 8007412:	6821      	ldr	r1, [r4, #0]
 8007414:	1a6d      	subs	r5, r5, r1
 8007416:	4629      	mov	r1, r5
 8007418:	4638      	mov	r0, r7
 800741a:	f7ff ffa7 	bl	800736c <sbrk_aligned>
 800741e:	3001      	adds	r0, #1
 8007420:	d037      	beq.n	8007492 <_malloc_r+0xe6>
 8007422:	6823      	ldr	r3, [r4, #0]
 8007424:	442b      	add	r3, r5
 8007426:	6023      	str	r3, [r4, #0]
 8007428:	f8d8 3000 	ldr.w	r3, [r8]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d038      	beq.n	80074a2 <_malloc_r+0xf6>
 8007430:	685a      	ldr	r2, [r3, #4]
 8007432:	42a2      	cmp	r2, r4
 8007434:	d12b      	bne.n	800748e <_malloc_r+0xe2>
 8007436:	2200      	movs	r2, #0
 8007438:	605a      	str	r2, [r3, #4]
 800743a:	e00f      	b.n	800745c <_malloc_r+0xb0>
 800743c:	6822      	ldr	r2, [r4, #0]
 800743e:	1b52      	subs	r2, r2, r5
 8007440:	d41f      	bmi.n	8007482 <_malloc_r+0xd6>
 8007442:	2a0b      	cmp	r2, #11
 8007444:	d917      	bls.n	8007476 <_malloc_r+0xca>
 8007446:	1961      	adds	r1, r4, r5
 8007448:	42a3      	cmp	r3, r4
 800744a:	6025      	str	r5, [r4, #0]
 800744c:	bf18      	it	ne
 800744e:	6059      	strne	r1, [r3, #4]
 8007450:	6863      	ldr	r3, [r4, #4]
 8007452:	bf08      	it	eq
 8007454:	f8c8 1000 	streq.w	r1, [r8]
 8007458:	5162      	str	r2, [r4, r5]
 800745a:	604b      	str	r3, [r1, #4]
 800745c:	4638      	mov	r0, r7
 800745e:	f104 060b 	add.w	r6, r4, #11
 8007462:	f000 f829 	bl	80074b8 <__malloc_unlock>
 8007466:	f026 0607 	bic.w	r6, r6, #7
 800746a:	1d23      	adds	r3, r4, #4
 800746c:	1af2      	subs	r2, r6, r3
 800746e:	d0ae      	beq.n	80073ce <_malloc_r+0x22>
 8007470:	1b9b      	subs	r3, r3, r6
 8007472:	50a3      	str	r3, [r4, r2]
 8007474:	e7ab      	b.n	80073ce <_malloc_r+0x22>
 8007476:	42a3      	cmp	r3, r4
 8007478:	6862      	ldr	r2, [r4, #4]
 800747a:	d1dd      	bne.n	8007438 <_malloc_r+0x8c>
 800747c:	f8c8 2000 	str.w	r2, [r8]
 8007480:	e7ec      	b.n	800745c <_malloc_r+0xb0>
 8007482:	4623      	mov	r3, r4
 8007484:	6864      	ldr	r4, [r4, #4]
 8007486:	e7ac      	b.n	80073e2 <_malloc_r+0x36>
 8007488:	4634      	mov	r4, r6
 800748a:	6876      	ldr	r6, [r6, #4]
 800748c:	e7b4      	b.n	80073f8 <_malloc_r+0x4c>
 800748e:	4613      	mov	r3, r2
 8007490:	e7cc      	b.n	800742c <_malloc_r+0x80>
 8007492:	230c      	movs	r3, #12
 8007494:	603b      	str	r3, [r7, #0]
 8007496:	4638      	mov	r0, r7
 8007498:	f000 f80e 	bl	80074b8 <__malloc_unlock>
 800749c:	e797      	b.n	80073ce <_malloc_r+0x22>
 800749e:	6025      	str	r5, [r4, #0]
 80074a0:	e7dc      	b.n	800745c <_malloc_r+0xb0>
 80074a2:	605b      	str	r3, [r3, #4]
 80074a4:	deff      	udf	#255	; 0xff
 80074a6:	bf00      	nop
 80074a8:	20000408 	.word	0x20000408

080074ac <__malloc_lock>:
 80074ac:	4801      	ldr	r0, [pc, #4]	; (80074b4 <__malloc_lock+0x8>)
 80074ae:	f7ff bf0f 	b.w	80072d0 <__retarget_lock_acquire_recursive>
 80074b2:	bf00      	nop
 80074b4:	20000404 	.word	0x20000404

080074b8 <__malloc_unlock>:
 80074b8:	4801      	ldr	r0, [pc, #4]	; (80074c0 <__malloc_unlock+0x8>)
 80074ba:	f7ff bf0a 	b.w	80072d2 <__retarget_lock_release_recursive>
 80074be:	bf00      	nop
 80074c0:	20000404 	.word	0x20000404

080074c4 <__ssputs_r>:
 80074c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074c8:	688e      	ldr	r6, [r1, #8]
 80074ca:	461f      	mov	r7, r3
 80074cc:	42be      	cmp	r6, r7
 80074ce:	680b      	ldr	r3, [r1, #0]
 80074d0:	4682      	mov	sl, r0
 80074d2:	460c      	mov	r4, r1
 80074d4:	4690      	mov	r8, r2
 80074d6:	d82c      	bhi.n	8007532 <__ssputs_r+0x6e>
 80074d8:	898a      	ldrh	r2, [r1, #12]
 80074da:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80074de:	d026      	beq.n	800752e <__ssputs_r+0x6a>
 80074e0:	6965      	ldr	r5, [r4, #20]
 80074e2:	6909      	ldr	r1, [r1, #16]
 80074e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80074e8:	eba3 0901 	sub.w	r9, r3, r1
 80074ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80074f0:	1c7b      	adds	r3, r7, #1
 80074f2:	444b      	add	r3, r9
 80074f4:	106d      	asrs	r5, r5, #1
 80074f6:	429d      	cmp	r5, r3
 80074f8:	bf38      	it	cc
 80074fa:	461d      	movcc	r5, r3
 80074fc:	0553      	lsls	r3, r2, #21
 80074fe:	d527      	bpl.n	8007550 <__ssputs_r+0x8c>
 8007500:	4629      	mov	r1, r5
 8007502:	f7ff ff53 	bl	80073ac <_malloc_r>
 8007506:	4606      	mov	r6, r0
 8007508:	b360      	cbz	r0, 8007564 <__ssputs_r+0xa0>
 800750a:	6921      	ldr	r1, [r4, #16]
 800750c:	464a      	mov	r2, r9
 800750e:	f000 faeb 	bl	8007ae8 <memcpy>
 8007512:	89a3      	ldrh	r3, [r4, #12]
 8007514:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007518:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800751c:	81a3      	strh	r3, [r4, #12]
 800751e:	6126      	str	r6, [r4, #16]
 8007520:	6165      	str	r5, [r4, #20]
 8007522:	444e      	add	r6, r9
 8007524:	eba5 0509 	sub.w	r5, r5, r9
 8007528:	6026      	str	r6, [r4, #0]
 800752a:	60a5      	str	r5, [r4, #8]
 800752c:	463e      	mov	r6, r7
 800752e:	42be      	cmp	r6, r7
 8007530:	d900      	bls.n	8007534 <__ssputs_r+0x70>
 8007532:	463e      	mov	r6, r7
 8007534:	6820      	ldr	r0, [r4, #0]
 8007536:	4632      	mov	r2, r6
 8007538:	4641      	mov	r1, r8
 800753a:	f000 faab 	bl	8007a94 <memmove>
 800753e:	68a3      	ldr	r3, [r4, #8]
 8007540:	1b9b      	subs	r3, r3, r6
 8007542:	60a3      	str	r3, [r4, #8]
 8007544:	6823      	ldr	r3, [r4, #0]
 8007546:	4433      	add	r3, r6
 8007548:	6023      	str	r3, [r4, #0]
 800754a:	2000      	movs	r0, #0
 800754c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007550:	462a      	mov	r2, r5
 8007552:	f000 fad7 	bl	8007b04 <_realloc_r>
 8007556:	4606      	mov	r6, r0
 8007558:	2800      	cmp	r0, #0
 800755a:	d1e0      	bne.n	800751e <__ssputs_r+0x5a>
 800755c:	6921      	ldr	r1, [r4, #16]
 800755e:	4650      	mov	r0, sl
 8007560:	f7ff feb8 	bl	80072d4 <_free_r>
 8007564:	230c      	movs	r3, #12
 8007566:	f8ca 3000 	str.w	r3, [sl]
 800756a:	89a3      	ldrh	r3, [r4, #12]
 800756c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007570:	81a3      	strh	r3, [r4, #12]
 8007572:	f04f 30ff 	mov.w	r0, #4294967295
 8007576:	e7e9      	b.n	800754c <__ssputs_r+0x88>

08007578 <_svfiprintf_r>:
 8007578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800757c:	4698      	mov	r8, r3
 800757e:	898b      	ldrh	r3, [r1, #12]
 8007580:	061b      	lsls	r3, r3, #24
 8007582:	b09d      	sub	sp, #116	; 0x74
 8007584:	4607      	mov	r7, r0
 8007586:	460d      	mov	r5, r1
 8007588:	4614      	mov	r4, r2
 800758a:	d50e      	bpl.n	80075aa <_svfiprintf_r+0x32>
 800758c:	690b      	ldr	r3, [r1, #16]
 800758e:	b963      	cbnz	r3, 80075aa <_svfiprintf_r+0x32>
 8007590:	2140      	movs	r1, #64	; 0x40
 8007592:	f7ff ff0b 	bl	80073ac <_malloc_r>
 8007596:	6028      	str	r0, [r5, #0]
 8007598:	6128      	str	r0, [r5, #16]
 800759a:	b920      	cbnz	r0, 80075a6 <_svfiprintf_r+0x2e>
 800759c:	230c      	movs	r3, #12
 800759e:	603b      	str	r3, [r7, #0]
 80075a0:	f04f 30ff 	mov.w	r0, #4294967295
 80075a4:	e0d0      	b.n	8007748 <_svfiprintf_r+0x1d0>
 80075a6:	2340      	movs	r3, #64	; 0x40
 80075a8:	616b      	str	r3, [r5, #20]
 80075aa:	2300      	movs	r3, #0
 80075ac:	9309      	str	r3, [sp, #36]	; 0x24
 80075ae:	2320      	movs	r3, #32
 80075b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80075b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80075b8:	2330      	movs	r3, #48	; 0x30
 80075ba:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007760 <_svfiprintf_r+0x1e8>
 80075be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80075c2:	f04f 0901 	mov.w	r9, #1
 80075c6:	4623      	mov	r3, r4
 80075c8:	469a      	mov	sl, r3
 80075ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80075ce:	b10a      	cbz	r2, 80075d4 <_svfiprintf_r+0x5c>
 80075d0:	2a25      	cmp	r2, #37	; 0x25
 80075d2:	d1f9      	bne.n	80075c8 <_svfiprintf_r+0x50>
 80075d4:	ebba 0b04 	subs.w	fp, sl, r4
 80075d8:	d00b      	beq.n	80075f2 <_svfiprintf_r+0x7a>
 80075da:	465b      	mov	r3, fp
 80075dc:	4622      	mov	r2, r4
 80075de:	4629      	mov	r1, r5
 80075e0:	4638      	mov	r0, r7
 80075e2:	f7ff ff6f 	bl	80074c4 <__ssputs_r>
 80075e6:	3001      	adds	r0, #1
 80075e8:	f000 80a9 	beq.w	800773e <_svfiprintf_r+0x1c6>
 80075ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80075ee:	445a      	add	r2, fp
 80075f0:	9209      	str	r2, [sp, #36]	; 0x24
 80075f2:	f89a 3000 	ldrb.w	r3, [sl]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	f000 80a1 	beq.w	800773e <_svfiprintf_r+0x1c6>
 80075fc:	2300      	movs	r3, #0
 80075fe:	f04f 32ff 	mov.w	r2, #4294967295
 8007602:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007606:	f10a 0a01 	add.w	sl, sl, #1
 800760a:	9304      	str	r3, [sp, #16]
 800760c:	9307      	str	r3, [sp, #28]
 800760e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007612:	931a      	str	r3, [sp, #104]	; 0x68
 8007614:	4654      	mov	r4, sl
 8007616:	2205      	movs	r2, #5
 8007618:	f814 1b01 	ldrb.w	r1, [r4], #1
 800761c:	4850      	ldr	r0, [pc, #320]	; (8007760 <_svfiprintf_r+0x1e8>)
 800761e:	f7f8 fddf 	bl	80001e0 <memchr>
 8007622:	9a04      	ldr	r2, [sp, #16]
 8007624:	b9d8      	cbnz	r0, 800765e <_svfiprintf_r+0xe6>
 8007626:	06d0      	lsls	r0, r2, #27
 8007628:	bf44      	itt	mi
 800762a:	2320      	movmi	r3, #32
 800762c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007630:	0711      	lsls	r1, r2, #28
 8007632:	bf44      	itt	mi
 8007634:	232b      	movmi	r3, #43	; 0x2b
 8007636:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800763a:	f89a 3000 	ldrb.w	r3, [sl]
 800763e:	2b2a      	cmp	r3, #42	; 0x2a
 8007640:	d015      	beq.n	800766e <_svfiprintf_r+0xf6>
 8007642:	9a07      	ldr	r2, [sp, #28]
 8007644:	4654      	mov	r4, sl
 8007646:	2000      	movs	r0, #0
 8007648:	f04f 0c0a 	mov.w	ip, #10
 800764c:	4621      	mov	r1, r4
 800764e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007652:	3b30      	subs	r3, #48	; 0x30
 8007654:	2b09      	cmp	r3, #9
 8007656:	d94d      	bls.n	80076f4 <_svfiprintf_r+0x17c>
 8007658:	b1b0      	cbz	r0, 8007688 <_svfiprintf_r+0x110>
 800765a:	9207      	str	r2, [sp, #28]
 800765c:	e014      	b.n	8007688 <_svfiprintf_r+0x110>
 800765e:	eba0 0308 	sub.w	r3, r0, r8
 8007662:	fa09 f303 	lsl.w	r3, r9, r3
 8007666:	4313      	orrs	r3, r2
 8007668:	9304      	str	r3, [sp, #16]
 800766a:	46a2      	mov	sl, r4
 800766c:	e7d2      	b.n	8007614 <_svfiprintf_r+0x9c>
 800766e:	9b03      	ldr	r3, [sp, #12]
 8007670:	1d19      	adds	r1, r3, #4
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	9103      	str	r1, [sp, #12]
 8007676:	2b00      	cmp	r3, #0
 8007678:	bfbb      	ittet	lt
 800767a:	425b      	neglt	r3, r3
 800767c:	f042 0202 	orrlt.w	r2, r2, #2
 8007680:	9307      	strge	r3, [sp, #28]
 8007682:	9307      	strlt	r3, [sp, #28]
 8007684:	bfb8      	it	lt
 8007686:	9204      	strlt	r2, [sp, #16]
 8007688:	7823      	ldrb	r3, [r4, #0]
 800768a:	2b2e      	cmp	r3, #46	; 0x2e
 800768c:	d10c      	bne.n	80076a8 <_svfiprintf_r+0x130>
 800768e:	7863      	ldrb	r3, [r4, #1]
 8007690:	2b2a      	cmp	r3, #42	; 0x2a
 8007692:	d134      	bne.n	80076fe <_svfiprintf_r+0x186>
 8007694:	9b03      	ldr	r3, [sp, #12]
 8007696:	1d1a      	adds	r2, r3, #4
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	9203      	str	r2, [sp, #12]
 800769c:	2b00      	cmp	r3, #0
 800769e:	bfb8      	it	lt
 80076a0:	f04f 33ff 	movlt.w	r3, #4294967295
 80076a4:	3402      	adds	r4, #2
 80076a6:	9305      	str	r3, [sp, #20]
 80076a8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007770 <_svfiprintf_r+0x1f8>
 80076ac:	7821      	ldrb	r1, [r4, #0]
 80076ae:	2203      	movs	r2, #3
 80076b0:	4650      	mov	r0, sl
 80076b2:	f7f8 fd95 	bl	80001e0 <memchr>
 80076b6:	b138      	cbz	r0, 80076c8 <_svfiprintf_r+0x150>
 80076b8:	9b04      	ldr	r3, [sp, #16]
 80076ba:	eba0 000a 	sub.w	r0, r0, sl
 80076be:	2240      	movs	r2, #64	; 0x40
 80076c0:	4082      	lsls	r2, r0
 80076c2:	4313      	orrs	r3, r2
 80076c4:	3401      	adds	r4, #1
 80076c6:	9304      	str	r3, [sp, #16]
 80076c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076cc:	4825      	ldr	r0, [pc, #148]	; (8007764 <_svfiprintf_r+0x1ec>)
 80076ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80076d2:	2206      	movs	r2, #6
 80076d4:	f7f8 fd84 	bl	80001e0 <memchr>
 80076d8:	2800      	cmp	r0, #0
 80076da:	d038      	beq.n	800774e <_svfiprintf_r+0x1d6>
 80076dc:	4b22      	ldr	r3, [pc, #136]	; (8007768 <_svfiprintf_r+0x1f0>)
 80076de:	bb1b      	cbnz	r3, 8007728 <_svfiprintf_r+0x1b0>
 80076e0:	9b03      	ldr	r3, [sp, #12]
 80076e2:	3307      	adds	r3, #7
 80076e4:	f023 0307 	bic.w	r3, r3, #7
 80076e8:	3308      	adds	r3, #8
 80076ea:	9303      	str	r3, [sp, #12]
 80076ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076ee:	4433      	add	r3, r6
 80076f0:	9309      	str	r3, [sp, #36]	; 0x24
 80076f2:	e768      	b.n	80075c6 <_svfiprintf_r+0x4e>
 80076f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80076f8:	460c      	mov	r4, r1
 80076fa:	2001      	movs	r0, #1
 80076fc:	e7a6      	b.n	800764c <_svfiprintf_r+0xd4>
 80076fe:	2300      	movs	r3, #0
 8007700:	3401      	adds	r4, #1
 8007702:	9305      	str	r3, [sp, #20]
 8007704:	4619      	mov	r1, r3
 8007706:	f04f 0c0a 	mov.w	ip, #10
 800770a:	4620      	mov	r0, r4
 800770c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007710:	3a30      	subs	r2, #48	; 0x30
 8007712:	2a09      	cmp	r2, #9
 8007714:	d903      	bls.n	800771e <_svfiprintf_r+0x1a6>
 8007716:	2b00      	cmp	r3, #0
 8007718:	d0c6      	beq.n	80076a8 <_svfiprintf_r+0x130>
 800771a:	9105      	str	r1, [sp, #20]
 800771c:	e7c4      	b.n	80076a8 <_svfiprintf_r+0x130>
 800771e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007722:	4604      	mov	r4, r0
 8007724:	2301      	movs	r3, #1
 8007726:	e7f0      	b.n	800770a <_svfiprintf_r+0x192>
 8007728:	ab03      	add	r3, sp, #12
 800772a:	9300      	str	r3, [sp, #0]
 800772c:	462a      	mov	r2, r5
 800772e:	4b0f      	ldr	r3, [pc, #60]	; (800776c <_svfiprintf_r+0x1f4>)
 8007730:	a904      	add	r1, sp, #16
 8007732:	4638      	mov	r0, r7
 8007734:	f3af 8000 	nop.w
 8007738:	1c42      	adds	r2, r0, #1
 800773a:	4606      	mov	r6, r0
 800773c:	d1d6      	bne.n	80076ec <_svfiprintf_r+0x174>
 800773e:	89ab      	ldrh	r3, [r5, #12]
 8007740:	065b      	lsls	r3, r3, #25
 8007742:	f53f af2d 	bmi.w	80075a0 <_svfiprintf_r+0x28>
 8007746:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007748:	b01d      	add	sp, #116	; 0x74
 800774a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800774e:	ab03      	add	r3, sp, #12
 8007750:	9300      	str	r3, [sp, #0]
 8007752:	462a      	mov	r2, r5
 8007754:	4b05      	ldr	r3, [pc, #20]	; (800776c <_svfiprintf_r+0x1f4>)
 8007756:	a904      	add	r1, sp, #16
 8007758:	4638      	mov	r0, r7
 800775a:	f000 f879 	bl	8007850 <_printf_i>
 800775e:	e7eb      	b.n	8007738 <_svfiprintf_r+0x1c0>
 8007760:	08007c60 	.word	0x08007c60
 8007764:	08007c6a 	.word	0x08007c6a
 8007768:	00000000 	.word	0x00000000
 800776c:	080074c5 	.word	0x080074c5
 8007770:	08007c66 	.word	0x08007c66

08007774 <_printf_common>:
 8007774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007778:	4616      	mov	r6, r2
 800777a:	4699      	mov	r9, r3
 800777c:	688a      	ldr	r2, [r1, #8]
 800777e:	690b      	ldr	r3, [r1, #16]
 8007780:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007784:	4293      	cmp	r3, r2
 8007786:	bfb8      	it	lt
 8007788:	4613      	movlt	r3, r2
 800778a:	6033      	str	r3, [r6, #0]
 800778c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007790:	4607      	mov	r7, r0
 8007792:	460c      	mov	r4, r1
 8007794:	b10a      	cbz	r2, 800779a <_printf_common+0x26>
 8007796:	3301      	adds	r3, #1
 8007798:	6033      	str	r3, [r6, #0]
 800779a:	6823      	ldr	r3, [r4, #0]
 800779c:	0699      	lsls	r1, r3, #26
 800779e:	bf42      	ittt	mi
 80077a0:	6833      	ldrmi	r3, [r6, #0]
 80077a2:	3302      	addmi	r3, #2
 80077a4:	6033      	strmi	r3, [r6, #0]
 80077a6:	6825      	ldr	r5, [r4, #0]
 80077a8:	f015 0506 	ands.w	r5, r5, #6
 80077ac:	d106      	bne.n	80077bc <_printf_common+0x48>
 80077ae:	f104 0a19 	add.w	sl, r4, #25
 80077b2:	68e3      	ldr	r3, [r4, #12]
 80077b4:	6832      	ldr	r2, [r6, #0]
 80077b6:	1a9b      	subs	r3, r3, r2
 80077b8:	42ab      	cmp	r3, r5
 80077ba:	dc26      	bgt.n	800780a <_printf_common+0x96>
 80077bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80077c0:	1e13      	subs	r3, r2, #0
 80077c2:	6822      	ldr	r2, [r4, #0]
 80077c4:	bf18      	it	ne
 80077c6:	2301      	movne	r3, #1
 80077c8:	0692      	lsls	r2, r2, #26
 80077ca:	d42b      	bmi.n	8007824 <_printf_common+0xb0>
 80077cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80077d0:	4649      	mov	r1, r9
 80077d2:	4638      	mov	r0, r7
 80077d4:	47c0      	blx	r8
 80077d6:	3001      	adds	r0, #1
 80077d8:	d01e      	beq.n	8007818 <_printf_common+0xa4>
 80077da:	6823      	ldr	r3, [r4, #0]
 80077dc:	6922      	ldr	r2, [r4, #16]
 80077de:	f003 0306 	and.w	r3, r3, #6
 80077e2:	2b04      	cmp	r3, #4
 80077e4:	bf02      	ittt	eq
 80077e6:	68e5      	ldreq	r5, [r4, #12]
 80077e8:	6833      	ldreq	r3, [r6, #0]
 80077ea:	1aed      	subeq	r5, r5, r3
 80077ec:	68a3      	ldr	r3, [r4, #8]
 80077ee:	bf0c      	ite	eq
 80077f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80077f4:	2500      	movne	r5, #0
 80077f6:	4293      	cmp	r3, r2
 80077f8:	bfc4      	itt	gt
 80077fa:	1a9b      	subgt	r3, r3, r2
 80077fc:	18ed      	addgt	r5, r5, r3
 80077fe:	2600      	movs	r6, #0
 8007800:	341a      	adds	r4, #26
 8007802:	42b5      	cmp	r5, r6
 8007804:	d11a      	bne.n	800783c <_printf_common+0xc8>
 8007806:	2000      	movs	r0, #0
 8007808:	e008      	b.n	800781c <_printf_common+0xa8>
 800780a:	2301      	movs	r3, #1
 800780c:	4652      	mov	r2, sl
 800780e:	4649      	mov	r1, r9
 8007810:	4638      	mov	r0, r7
 8007812:	47c0      	blx	r8
 8007814:	3001      	adds	r0, #1
 8007816:	d103      	bne.n	8007820 <_printf_common+0xac>
 8007818:	f04f 30ff 	mov.w	r0, #4294967295
 800781c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007820:	3501      	adds	r5, #1
 8007822:	e7c6      	b.n	80077b2 <_printf_common+0x3e>
 8007824:	18e1      	adds	r1, r4, r3
 8007826:	1c5a      	adds	r2, r3, #1
 8007828:	2030      	movs	r0, #48	; 0x30
 800782a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800782e:	4422      	add	r2, r4
 8007830:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007834:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007838:	3302      	adds	r3, #2
 800783a:	e7c7      	b.n	80077cc <_printf_common+0x58>
 800783c:	2301      	movs	r3, #1
 800783e:	4622      	mov	r2, r4
 8007840:	4649      	mov	r1, r9
 8007842:	4638      	mov	r0, r7
 8007844:	47c0      	blx	r8
 8007846:	3001      	adds	r0, #1
 8007848:	d0e6      	beq.n	8007818 <_printf_common+0xa4>
 800784a:	3601      	adds	r6, #1
 800784c:	e7d9      	b.n	8007802 <_printf_common+0x8e>
	...

08007850 <_printf_i>:
 8007850:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007854:	7e0f      	ldrb	r7, [r1, #24]
 8007856:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007858:	2f78      	cmp	r7, #120	; 0x78
 800785a:	4691      	mov	r9, r2
 800785c:	4680      	mov	r8, r0
 800785e:	460c      	mov	r4, r1
 8007860:	469a      	mov	sl, r3
 8007862:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007866:	d807      	bhi.n	8007878 <_printf_i+0x28>
 8007868:	2f62      	cmp	r7, #98	; 0x62
 800786a:	d80a      	bhi.n	8007882 <_printf_i+0x32>
 800786c:	2f00      	cmp	r7, #0
 800786e:	f000 80d4 	beq.w	8007a1a <_printf_i+0x1ca>
 8007872:	2f58      	cmp	r7, #88	; 0x58
 8007874:	f000 80c0 	beq.w	80079f8 <_printf_i+0x1a8>
 8007878:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800787c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007880:	e03a      	b.n	80078f8 <_printf_i+0xa8>
 8007882:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007886:	2b15      	cmp	r3, #21
 8007888:	d8f6      	bhi.n	8007878 <_printf_i+0x28>
 800788a:	a101      	add	r1, pc, #4	; (adr r1, 8007890 <_printf_i+0x40>)
 800788c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007890:	080078e9 	.word	0x080078e9
 8007894:	080078fd 	.word	0x080078fd
 8007898:	08007879 	.word	0x08007879
 800789c:	08007879 	.word	0x08007879
 80078a0:	08007879 	.word	0x08007879
 80078a4:	08007879 	.word	0x08007879
 80078a8:	080078fd 	.word	0x080078fd
 80078ac:	08007879 	.word	0x08007879
 80078b0:	08007879 	.word	0x08007879
 80078b4:	08007879 	.word	0x08007879
 80078b8:	08007879 	.word	0x08007879
 80078bc:	08007a01 	.word	0x08007a01
 80078c0:	08007929 	.word	0x08007929
 80078c4:	080079bb 	.word	0x080079bb
 80078c8:	08007879 	.word	0x08007879
 80078cc:	08007879 	.word	0x08007879
 80078d0:	08007a23 	.word	0x08007a23
 80078d4:	08007879 	.word	0x08007879
 80078d8:	08007929 	.word	0x08007929
 80078dc:	08007879 	.word	0x08007879
 80078e0:	08007879 	.word	0x08007879
 80078e4:	080079c3 	.word	0x080079c3
 80078e8:	682b      	ldr	r3, [r5, #0]
 80078ea:	1d1a      	adds	r2, r3, #4
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	602a      	str	r2, [r5, #0]
 80078f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80078f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80078f8:	2301      	movs	r3, #1
 80078fa:	e09f      	b.n	8007a3c <_printf_i+0x1ec>
 80078fc:	6820      	ldr	r0, [r4, #0]
 80078fe:	682b      	ldr	r3, [r5, #0]
 8007900:	0607      	lsls	r7, r0, #24
 8007902:	f103 0104 	add.w	r1, r3, #4
 8007906:	6029      	str	r1, [r5, #0]
 8007908:	d501      	bpl.n	800790e <_printf_i+0xbe>
 800790a:	681e      	ldr	r6, [r3, #0]
 800790c:	e003      	b.n	8007916 <_printf_i+0xc6>
 800790e:	0646      	lsls	r6, r0, #25
 8007910:	d5fb      	bpl.n	800790a <_printf_i+0xba>
 8007912:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007916:	2e00      	cmp	r6, #0
 8007918:	da03      	bge.n	8007922 <_printf_i+0xd2>
 800791a:	232d      	movs	r3, #45	; 0x2d
 800791c:	4276      	negs	r6, r6
 800791e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007922:	485a      	ldr	r0, [pc, #360]	; (8007a8c <_printf_i+0x23c>)
 8007924:	230a      	movs	r3, #10
 8007926:	e012      	b.n	800794e <_printf_i+0xfe>
 8007928:	682b      	ldr	r3, [r5, #0]
 800792a:	6820      	ldr	r0, [r4, #0]
 800792c:	1d19      	adds	r1, r3, #4
 800792e:	6029      	str	r1, [r5, #0]
 8007930:	0605      	lsls	r5, r0, #24
 8007932:	d501      	bpl.n	8007938 <_printf_i+0xe8>
 8007934:	681e      	ldr	r6, [r3, #0]
 8007936:	e002      	b.n	800793e <_printf_i+0xee>
 8007938:	0641      	lsls	r1, r0, #25
 800793a:	d5fb      	bpl.n	8007934 <_printf_i+0xe4>
 800793c:	881e      	ldrh	r6, [r3, #0]
 800793e:	4853      	ldr	r0, [pc, #332]	; (8007a8c <_printf_i+0x23c>)
 8007940:	2f6f      	cmp	r7, #111	; 0x6f
 8007942:	bf0c      	ite	eq
 8007944:	2308      	moveq	r3, #8
 8007946:	230a      	movne	r3, #10
 8007948:	2100      	movs	r1, #0
 800794a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800794e:	6865      	ldr	r5, [r4, #4]
 8007950:	60a5      	str	r5, [r4, #8]
 8007952:	2d00      	cmp	r5, #0
 8007954:	bfa2      	ittt	ge
 8007956:	6821      	ldrge	r1, [r4, #0]
 8007958:	f021 0104 	bicge.w	r1, r1, #4
 800795c:	6021      	strge	r1, [r4, #0]
 800795e:	b90e      	cbnz	r6, 8007964 <_printf_i+0x114>
 8007960:	2d00      	cmp	r5, #0
 8007962:	d04b      	beq.n	80079fc <_printf_i+0x1ac>
 8007964:	4615      	mov	r5, r2
 8007966:	fbb6 f1f3 	udiv	r1, r6, r3
 800796a:	fb03 6711 	mls	r7, r3, r1, r6
 800796e:	5dc7      	ldrb	r7, [r0, r7]
 8007970:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007974:	4637      	mov	r7, r6
 8007976:	42bb      	cmp	r3, r7
 8007978:	460e      	mov	r6, r1
 800797a:	d9f4      	bls.n	8007966 <_printf_i+0x116>
 800797c:	2b08      	cmp	r3, #8
 800797e:	d10b      	bne.n	8007998 <_printf_i+0x148>
 8007980:	6823      	ldr	r3, [r4, #0]
 8007982:	07de      	lsls	r6, r3, #31
 8007984:	d508      	bpl.n	8007998 <_printf_i+0x148>
 8007986:	6923      	ldr	r3, [r4, #16]
 8007988:	6861      	ldr	r1, [r4, #4]
 800798a:	4299      	cmp	r1, r3
 800798c:	bfde      	ittt	le
 800798e:	2330      	movle	r3, #48	; 0x30
 8007990:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007994:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007998:	1b52      	subs	r2, r2, r5
 800799a:	6122      	str	r2, [r4, #16]
 800799c:	f8cd a000 	str.w	sl, [sp]
 80079a0:	464b      	mov	r3, r9
 80079a2:	aa03      	add	r2, sp, #12
 80079a4:	4621      	mov	r1, r4
 80079a6:	4640      	mov	r0, r8
 80079a8:	f7ff fee4 	bl	8007774 <_printf_common>
 80079ac:	3001      	adds	r0, #1
 80079ae:	d14a      	bne.n	8007a46 <_printf_i+0x1f6>
 80079b0:	f04f 30ff 	mov.w	r0, #4294967295
 80079b4:	b004      	add	sp, #16
 80079b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079ba:	6823      	ldr	r3, [r4, #0]
 80079bc:	f043 0320 	orr.w	r3, r3, #32
 80079c0:	6023      	str	r3, [r4, #0]
 80079c2:	4833      	ldr	r0, [pc, #204]	; (8007a90 <_printf_i+0x240>)
 80079c4:	2778      	movs	r7, #120	; 0x78
 80079c6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80079ca:	6823      	ldr	r3, [r4, #0]
 80079cc:	6829      	ldr	r1, [r5, #0]
 80079ce:	061f      	lsls	r7, r3, #24
 80079d0:	f851 6b04 	ldr.w	r6, [r1], #4
 80079d4:	d402      	bmi.n	80079dc <_printf_i+0x18c>
 80079d6:	065f      	lsls	r7, r3, #25
 80079d8:	bf48      	it	mi
 80079da:	b2b6      	uxthmi	r6, r6
 80079dc:	07df      	lsls	r7, r3, #31
 80079de:	bf48      	it	mi
 80079e0:	f043 0320 	orrmi.w	r3, r3, #32
 80079e4:	6029      	str	r1, [r5, #0]
 80079e6:	bf48      	it	mi
 80079e8:	6023      	strmi	r3, [r4, #0]
 80079ea:	b91e      	cbnz	r6, 80079f4 <_printf_i+0x1a4>
 80079ec:	6823      	ldr	r3, [r4, #0]
 80079ee:	f023 0320 	bic.w	r3, r3, #32
 80079f2:	6023      	str	r3, [r4, #0]
 80079f4:	2310      	movs	r3, #16
 80079f6:	e7a7      	b.n	8007948 <_printf_i+0xf8>
 80079f8:	4824      	ldr	r0, [pc, #144]	; (8007a8c <_printf_i+0x23c>)
 80079fa:	e7e4      	b.n	80079c6 <_printf_i+0x176>
 80079fc:	4615      	mov	r5, r2
 80079fe:	e7bd      	b.n	800797c <_printf_i+0x12c>
 8007a00:	682b      	ldr	r3, [r5, #0]
 8007a02:	6826      	ldr	r6, [r4, #0]
 8007a04:	6961      	ldr	r1, [r4, #20]
 8007a06:	1d18      	adds	r0, r3, #4
 8007a08:	6028      	str	r0, [r5, #0]
 8007a0a:	0635      	lsls	r5, r6, #24
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	d501      	bpl.n	8007a14 <_printf_i+0x1c4>
 8007a10:	6019      	str	r1, [r3, #0]
 8007a12:	e002      	b.n	8007a1a <_printf_i+0x1ca>
 8007a14:	0670      	lsls	r0, r6, #25
 8007a16:	d5fb      	bpl.n	8007a10 <_printf_i+0x1c0>
 8007a18:	8019      	strh	r1, [r3, #0]
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	6123      	str	r3, [r4, #16]
 8007a1e:	4615      	mov	r5, r2
 8007a20:	e7bc      	b.n	800799c <_printf_i+0x14c>
 8007a22:	682b      	ldr	r3, [r5, #0]
 8007a24:	1d1a      	adds	r2, r3, #4
 8007a26:	602a      	str	r2, [r5, #0]
 8007a28:	681d      	ldr	r5, [r3, #0]
 8007a2a:	6862      	ldr	r2, [r4, #4]
 8007a2c:	2100      	movs	r1, #0
 8007a2e:	4628      	mov	r0, r5
 8007a30:	f7f8 fbd6 	bl	80001e0 <memchr>
 8007a34:	b108      	cbz	r0, 8007a3a <_printf_i+0x1ea>
 8007a36:	1b40      	subs	r0, r0, r5
 8007a38:	6060      	str	r0, [r4, #4]
 8007a3a:	6863      	ldr	r3, [r4, #4]
 8007a3c:	6123      	str	r3, [r4, #16]
 8007a3e:	2300      	movs	r3, #0
 8007a40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a44:	e7aa      	b.n	800799c <_printf_i+0x14c>
 8007a46:	6923      	ldr	r3, [r4, #16]
 8007a48:	462a      	mov	r2, r5
 8007a4a:	4649      	mov	r1, r9
 8007a4c:	4640      	mov	r0, r8
 8007a4e:	47d0      	blx	sl
 8007a50:	3001      	adds	r0, #1
 8007a52:	d0ad      	beq.n	80079b0 <_printf_i+0x160>
 8007a54:	6823      	ldr	r3, [r4, #0]
 8007a56:	079b      	lsls	r3, r3, #30
 8007a58:	d413      	bmi.n	8007a82 <_printf_i+0x232>
 8007a5a:	68e0      	ldr	r0, [r4, #12]
 8007a5c:	9b03      	ldr	r3, [sp, #12]
 8007a5e:	4298      	cmp	r0, r3
 8007a60:	bfb8      	it	lt
 8007a62:	4618      	movlt	r0, r3
 8007a64:	e7a6      	b.n	80079b4 <_printf_i+0x164>
 8007a66:	2301      	movs	r3, #1
 8007a68:	4632      	mov	r2, r6
 8007a6a:	4649      	mov	r1, r9
 8007a6c:	4640      	mov	r0, r8
 8007a6e:	47d0      	blx	sl
 8007a70:	3001      	adds	r0, #1
 8007a72:	d09d      	beq.n	80079b0 <_printf_i+0x160>
 8007a74:	3501      	adds	r5, #1
 8007a76:	68e3      	ldr	r3, [r4, #12]
 8007a78:	9903      	ldr	r1, [sp, #12]
 8007a7a:	1a5b      	subs	r3, r3, r1
 8007a7c:	42ab      	cmp	r3, r5
 8007a7e:	dcf2      	bgt.n	8007a66 <_printf_i+0x216>
 8007a80:	e7eb      	b.n	8007a5a <_printf_i+0x20a>
 8007a82:	2500      	movs	r5, #0
 8007a84:	f104 0619 	add.w	r6, r4, #25
 8007a88:	e7f5      	b.n	8007a76 <_printf_i+0x226>
 8007a8a:	bf00      	nop
 8007a8c:	08007c71 	.word	0x08007c71
 8007a90:	08007c82 	.word	0x08007c82

08007a94 <memmove>:
 8007a94:	4288      	cmp	r0, r1
 8007a96:	b510      	push	{r4, lr}
 8007a98:	eb01 0402 	add.w	r4, r1, r2
 8007a9c:	d902      	bls.n	8007aa4 <memmove+0x10>
 8007a9e:	4284      	cmp	r4, r0
 8007aa0:	4623      	mov	r3, r4
 8007aa2:	d807      	bhi.n	8007ab4 <memmove+0x20>
 8007aa4:	1e43      	subs	r3, r0, #1
 8007aa6:	42a1      	cmp	r1, r4
 8007aa8:	d008      	beq.n	8007abc <memmove+0x28>
 8007aaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007aae:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007ab2:	e7f8      	b.n	8007aa6 <memmove+0x12>
 8007ab4:	4402      	add	r2, r0
 8007ab6:	4601      	mov	r1, r0
 8007ab8:	428a      	cmp	r2, r1
 8007aba:	d100      	bne.n	8007abe <memmove+0x2a>
 8007abc:	bd10      	pop	{r4, pc}
 8007abe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007ac2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007ac6:	e7f7      	b.n	8007ab8 <memmove+0x24>

08007ac8 <_sbrk_r>:
 8007ac8:	b538      	push	{r3, r4, r5, lr}
 8007aca:	4d06      	ldr	r5, [pc, #24]	; (8007ae4 <_sbrk_r+0x1c>)
 8007acc:	2300      	movs	r3, #0
 8007ace:	4604      	mov	r4, r0
 8007ad0:	4608      	mov	r0, r1
 8007ad2:	602b      	str	r3, [r5, #0]
 8007ad4:	f7f9 fba8 	bl	8001228 <_sbrk>
 8007ad8:	1c43      	adds	r3, r0, #1
 8007ada:	d102      	bne.n	8007ae2 <_sbrk_r+0x1a>
 8007adc:	682b      	ldr	r3, [r5, #0]
 8007ade:	b103      	cbz	r3, 8007ae2 <_sbrk_r+0x1a>
 8007ae0:	6023      	str	r3, [r4, #0]
 8007ae2:	bd38      	pop	{r3, r4, r5, pc}
 8007ae4:	20000400 	.word	0x20000400

08007ae8 <memcpy>:
 8007ae8:	440a      	add	r2, r1
 8007aea:	4291      	cmp	r1, r2
 8007aec:	f100 33ff 	add.w	r3, r0, #4294967295
 8007af0:	d100      	bne.n	8007af4 <memcpy+0xc>
 8007af2:	4770      	bx	lr
 8007af4:	b510      	push	{r4, lr}
 8007af6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007afa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007afe:	4291      	cmp	r1, r2
 8007b00:	d1f9      	bne.n	8007af6 <memcpy+0xe>
 8007b02:	bd10      	pop	{r4, pc}

08007b04 <_realloc_r>:
 8007b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b08:	4680      	mov	r8, r0
 8007b0a:	4614      	mov	r4, r2
 8007b0c:	460e      	mov	r6, r1
 8007b0e:	b921      	cbnz	r1, 8007b1a <_realloc_r+0x16>
 8007b10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b14:	4611      	mov	r1, r2
 8007b16:	f7ff bc49 	b.w	80073ac <_malloc_r>
 8007b1a:	b92a      	cbnz	r2, 8007b28 <_realloc_r+0x24>
 8007b1c:	f7ff fbda 	bl	80072d4 <_free_r>
 8007b20:	4625      	mov	r5, r4
 8007b22:	4628      	mov	r0, r5
 8007b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b28:	f000 f81b 	bl	8007b62 <_malloc_usable_size_r>
 8007b2c:	4284      	cmp	r4, r0
 8007b2e:	4607      	mov	r7, r0
 8007b30:	d802      	bhi.n	8007b38 <_realloc_r+0x34>
 8007b32:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007b36:	d812      	bhi.n	8007b5e <_realloc_r+0x5a>
 8007b38:	4621      	mov	r1, r4
 8007b3a:	4640      	mov	r0, r8
 8007b3c:	f7ff fc36 	bl	80073ac <_malloc_r>
 8007b40:	4605      	mov	r5, r0
 8007b42:	2800      	cmp	r0, #0
 8007b44:	d0ed      	beq.n	8007b22 <_realloc_r+0x1e>
 8007b46:	42bc      	cmp	r4, r7
 8007b48:	4622      	mov	r2, r4
 8007b4a:	4631      	mov	r1, r6
 8007b4c:	bf28      	it	cs
 8007b4e:	463a      	movcs	r2, r7
 8007b50:	f7ff ffca 	bl	8007ae8 <memcpy>
 8007b54:	4631      	mov	r1, r6
 8007b56:	4640      	mov	r0, r8
 8007b58:	f7ff fbbc 	bl	80072d4 <_free_r>
 8007b5c:	e7e1      	b.n	8007b22 <_realloc_r+0x1e>
 8007b5e:	4635      	mov	r5, r6
 8007b60:	e7df      	b.n	8007b22 <_realloc_r+0x1e>

08007b62 <_malloc_usable_size_r>:
 8007b62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b66:	1f18      	subs	r0, r3, #4
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	bfbc      	itt	lt
 8007b6c:	580b      	ldrlt	r3, [r1, r0]
 8007b6e:	18c0      	addlt	r0, r0, r3
 8007b70:	4770      	bx	lr
	...

08007b74 <_init>:
 8007b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b76:	bf00      	nop
 8007b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b7a:	bc08      	pop	{r3}
 8007b7c:	469e      	mov	lr, r3
 8007b7e:	4770      	bx	lr

08007b80 <_fini>:
 8007b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b82:	bf00      	nop
 8007b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b86:	bc08      	pop	{r3}
 8007b88:	469e      	mov	lr, r3
 8007b8a:	4770      	bx	lr
