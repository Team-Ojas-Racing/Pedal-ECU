
Can_with_it.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009028  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c4  080091b8  080091b8  0000a1b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800937c  0800937c  0000b070  2**0
                  CONTENTS
  4 .ARM          00000008  0800937c  0800937c  0000a37c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009384  08009384  0000b070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009384  08009384  0000a384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009388  08009388  0000a388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800938c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000420  20000070  080093fc  0000b070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000490  080093fc  0000b490  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019fbb  00000000  00000000  0000b0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000343b  00000000  00000000  0002505b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001690  00000000  00000000  00028498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001190  00000000  00000000  00029b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a2d9  00000000  00000000  0002acb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a5f3  00000000  00000000  00054f91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010a6be  00000000  00000000  0006f584  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00179c42  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000673c  00000000  00000000  00179c88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  001803c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080091a0 	.word	0x080091a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080091a0 	.word	0x080091a0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b96a 	b.w	8000d48 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	460c      	mov	r4, r1
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d14e      	bne.n	8000b36 <__udivmoddi4+0xaa>
 8000a98:	4694      	mov	ip, r2
 8000a9a:	458c      	cmp	ip, r1
 8000a9c:	4686      	mov	lr, r0
 8000a9e:	fab2 f282 	clz	r2, r2
 8000aa2:	d962      	bls.n	8000b6a <__udivmoddi4+0xde>
 8000aa4:	b14a      	cbz	r2, 8000aba <__udivmoddi4+0x2e>
 8000aa6:	f1c2 0320 	rsb	r3, r2, #32
 8000aaa:	4091      	lsls	r1, r2
 8000aac:	fa20 f303 	lsr.w	r3, r0, r3
 8000ab0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ab4:	4319      	orrs	r1, r3
 8000ab6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000abe:	fa1f f68c 	uxth.w	r6, ip
 8000ac2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ac6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000aca:	fb07 1114 	mls	r1, r7, r4, r1
 8000ace:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ad2:	fb04 f106 	mul.w	r1, r4, r6
 8000ad6:	4299      	cmp	r1, r3
 8000ad8:	d90a      	bls.n	8000af0 <__udivmoddi4+0x64>
 8000ada:	eb1c 0303 	adds.w	r3, ip, r3
 8000ade:	f104 30ff 	add.w	r0, r4, #4294967295
 8000ae2:	f080 8112 	bcs.w	8000d0a <__udivmoddi4+0x27e>
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	f240 810f 	bls.w	8000d0a <__udivmoddi4+0x27e>
 8000aec:	3c02      	subs	r4, #2
 8000aee:	4463      	add	r3, ip
 8000af0:	1a59      	subs	r1, r3, r1
 8000af2:	fa1f f38e 	uxth.w	r3, lr
 8000af6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000afa:	fb07 1110 	mls	r1, r7, r0, r1
 8000afe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b02:	fb00 f606 	mul.w	r6, r0, r6
 8000b06:	429e      	cmp	r6, r3
 8000b08:	d90a      	bls.n	8000b20 <__udivmoddi4+0x94>
 8000b0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b12:	f080 80fc 	bcs.w	8000d0e <__udivmoddi4+0x282>
 8000b16:	429e      	cmp	r6, r3
 8000b18:	f240 80f9 	bls.w	8000d0e <__udivmoddi4+0x282>
 8000b1c:	4463      	add	r3, ip
 8000b1e:	3802      	subs	r0, #2
 8000b20:	1b9b      	subs	r3, r3, r6
 8000b22:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b26:	2100      	movs	r1, #0
 8000b28:	b11d      	cbz	r5, 8000b32 <__udivmoddi4+0xa6>
 8000b2a:	40d3      	lsrs	r3, r2
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b36:	428b      	cmp	r3, r1
 8000b38:	d905      	bls.n	8000b46 <__udivmoddi4+0xba>
 8000b3a:	b10d      	cbz	r5, 8000b40 <__udivmoddi4+0xb4>
 8000b3c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b40:	2100      	movs	r1, #0
 8000b42:	4608      	mov	r0, r1
 8000b44:	e7f5      	b.n	8000b32 <__udivmoddi4+0xa6>
 8000b46:	fab3 f183 	clz	r1, r3
 8000b4a:	2900      	cmp	r1, #0
 8000b4c:	d146      	bne.n	8000bdc <__udivmoddi4+0x150>
 8000b4e:	42a3      	cmp	r3, r4
 8000b50:	d302      	bcc.n	8000b58 <__udivmoddi4+0xcc>
 8000b52:	4290      	cmp	r0, r2
 8000b54:	f0c0 80f0 	bcc.w	8000d38 <__udivmoddi4+0x2ac>
 8000b58:	1a86      	subs	r6, r0, r2
 8000b5a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b5e:	2001      	movs	r0, #1
 8000b60:	2d00      	cmp	r5, #0
 8000b62:	d0e6      	beq.n	8000b32 <__udivmoddi4+0xa6>
 8000b64:	e9c5 6300 	strd	r6, r3, [r5]
 8000b68:	e7e3      	b.n	8000b32 <__udivmoddi4+0xa6>
 8000b6a:	2a00      	cmp	r2, #0
 8000b6c:	f040 8090 	bne.w	8000c90 <__udivmoddi4+0x204>
 8000b70:	eba1 040c 	sub.w	r4, r1, ip
 8000b74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b78:	fa1f f78c 	uxth.w	r7, ip
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b82:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b86:	fb08 4416 	mls	r4, r8, r6, r4
 8000b8a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b8e:	fb07 f006 	mul.w	r0, r7, r6
 8000b92:	4298      	cmp	r0, r3
 8000b94:	d908      	bls.n	8000ba8 <__udivmoddi4+0x11c>
 8000b96:	eb1c 0303 	adds.w	r3, ip, r3
 8000b9a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b9e:	d202      	bcs.n	8000ba6 <__udivmoddi4+0x11a>
 8000ba0:	4298      	cmp	r0, r3
 8000ba2:	f200 80cd 	bhi.w	8000d40 <__udivmoddi4+0x2b4>
 8000ba6:	4626      	mov	r6, r4
 8000ba8:	1a1c      	subs	r4, r3, r0
 8000baa:	fa1f f38e 	uxth.w	r3, lr
 8000bae:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bb2:	fb08 4410 	mls	r4, r8, r0, r4
 8000bb6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bba:	fb00 f707 	mul.w	r7, r0, r7
 8000bbe:	429f      	cmp	r7, r3
 8000bc0:	d908      	bls.n	8000bd4 <__udivmoddi4+0x148>
 8000bc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bc6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bca:	d202      	bcs.n	8000bd2 <__udivmoddi4+0x146>
 8000bcc:	429f      	cmp	r7, r3
 8000bce:	f200 80b0 	bhi.w	8000d32 <__udivmoddi4+0x2a6>
 8000bd2:	4620      	mov	r0, r4
 8000bd4:	1bdb      	subs	r3, r3, r7
 8000bd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bda:	e7a5      	b.n	8000b28 <__udivmoddi4+0x9c>
 8000bdc:	f1c1 0620 	rsb	r6, r1, #32
 8000be0:	408b      	lsls	r3, r1
 8000be2:	fa22 f706 	lsr.w	r7, r2, r6
 8000be6:	431f      	orrs	r7, r3
 8000be8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000bec:	fa04 f301 	lsl.w	r3, r4, r1
 8000bf0:	ea43 030c 	orr.w	r3, r3, ip
 8000bf4:	40f4      	lsrs	r4, r6
 8000bf6:	fa00 f801 	lsl.w	r8, r0, r1
 8000bfa:	0c38      	lsrs	r0, r7, #16
 8000bfc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c00:	fbb4 fef0 	udiv	lr, r4, r0
 8000c04:	fa1f fc87 	uxth.w	ip, r7
 8000c08:	fb00 441e 	mls	r4, r0, lr, r4
 8000c0c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c10:	fb0e f90c 	mul.w	r9, lr, ip
 8000c14:	45a1      	cmp	r9, r4
 8000c16:	fa02 f201 	lsl.w	r2, r2, r1
 8000c1a:	d90a      	bls.n	8000c32 <__udivmoddi4+0x1a6>
 8000c1c:	193c      	adds	r4, r7, r4
 8000c1e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c22:	f080 8084 	bcs.w	8000d2e <__udivmoddi4+0x2a2>
 8000c26:	45a1      	cmp	r9, r4
 8000c28:	f240 8081 	bls.w	8000d2e <__udivmoddi4+0x2a2>
 8000c2c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c30:	443c      	add	r4, r7
 8000c32:	eba4 0409 	sub.w	r4, r4, r9
 8000c36:	fa1f f983 	uxth.w	r9, r3
 8000c3a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c3e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c42:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c46:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c4a:	45a4      	cmp	ip, r4
 8000c4c:	d907      	bls.n	8000c5e <__udivmoddi4+0x1d2>
 8000c4e:	193c      	adds	r4, r7, r4
 8000c50:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c54:	d267      	bcs.n	8000d26 <__udivmoddi4+0x29a>
 8000c56:	45a4      	cmp	ip, r4
 8000c58:	d965      	bls.n	8000d26 <__udivmoddi4+0x29a>
 8000c5a:	3b02      	subs	r3, #2
 8000c5c:	443c      	add	r4, r7
 8000c5e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c62:	fba0 9302 	umull	r9, r3, r0, r2
 8000c66:	eba4 040c 	sub.w	r4, r4, ip
 8000c6a:	429c      	cmp	r4, r3
 8000c6c:	46ce      	mov	lr, r9
 8000c6e:	469c      	mov	ip, r3
 8000c70:	d351      	bcc.n	8000d16 <__udivmoddi4+0x28a>
 8000c72:	d04e      	beq.n	8000d12 <__udivmoddi4+0x286>
 8000c74:	b155      	cbz	r5, 8000c8c <__udivmoddi4+0x200>
 8000c76:	ebb8 030e 	subs.w	r3, r8, lr
 8000c7a:	eb64 040c 	sbc.w	r4, r4, ip
 8000c7e:	fa04 f606 	lsl.w	r6, r4, r6
 8000c82:	40cb      	lsrs	r3, r1
 8000c84:	431e      	orrs	r6, r3
 8000c86:	40cc      	lsrs	r4, r1
 8000c88:	e9c5 6400 	strd	r6, r4, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	e750      	b.n	8000b32 <__udivmoddi4+0xa6>
 8000c90:	f1c2 0320 	rsb	r3, r2, #32
 8000c94:	fa20 f103 	lsr.w	r1, r0, r3
 8000c98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c9c:	fa24 f303 	lsr.w	r3, r4, r3
 8000ca0:	4094      	lsls	r4, r2
 8000ca2:	430c      	orrs	r4, r1
 8000ca4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ca8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cac:	fa1f f78c 	uxth.w	r7, ip
 8000cb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cb4:	fb08 3110 	mls	r1, r8, r0, r3
 8000cb8:	0c23      	lsrs	r3, r4, #16
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb00 f107 	mul.w	r1, r0, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d908      	bls.n	8000cd8 <__udivmoddi4+0x24c>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cce:	d22c      	bcs.n	8000d2a <__udivmoddi4+0x29e>
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d92a      	bls.n	8000d2a <__udivmoddi4+0x29e>
 8000cd4:	3802      	subs	r0, #2
 8000cd6:	4463      	add	r3, ip
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ce0:	fb08 3311 	mls	r3, r8, r1, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb01 f307 	mul.w	r3, r1, r7
 8000cec:	42a3      	cmp	r3, r4
 8000cee:	d908      	bls.n	8000d02 <__udivmoddi4+0x276>
 8000cf0:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000cf8:	d213      	bcs.n	8000d22 <__udivmoddi4+0x296>
 8000cfa:	42a3      	cmp	r3, r4
 8000cfc:	d911      	bls.n	8000d22 <__udivmoddi4+0x296>
 8000cfe:	3902      	subs	r1, #2
 8000d00:	4464      	add	r4, ip
 8000d02:	1ae4      	subs	r4, r4, r3
 8000d04:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d08:	e739      	b.n	8000b7e <__udivmoddi4+0xf2>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	e6f0      	b.n	8000af0 <__udivmoddi4+0x64>
 8000d0e:	4608      	mov	r0, r1
 8000d10:	e706      	b.n	8000b20 <__udivmoddi4+0x94>
 8000d12:	45c8      	cmp	r8, r9
 8000d14:	d2ae      	bcs.n	8000c74 <__udivmoddi4+0x1e8>
 8000d16:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d1a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d1e:	3801      	subs	r0, #1
 8000d20:	e7a8      	b.n	8000c74 <__udivmoddi4+0x1e8>
 8000d22:	4631      	mov	r1, r6
 8000d24:	e7ed      	b.n	8000d02 <__udivmoddi4+0x276>
 8000d26:	4603      	mov	r3, r0
 8000d28:	e799      	b.n	8000c5e <__udivmoddi4+0x1d2>
 8000d2a:	4630      	mov	r0, r6
 8000d2c:	e7d4      	b.n	8000cd8 <__udivmoddi4+0x24c>
 8000d2e:	46d6      	mov	lr, sl
 8000d30:	e77f      	b.n	8000c32 <__udivmoddi4+0x1a6>
 8000d32:	4463      	add	r3, ip
 8000d34:	3802      	subs	r0, #2
 8000d36:	e74d      	b.n	8000bd4 <__udivmoddi4+0x148>
 8000d38:	4606      	mov	r6, r0
 8000d3a:	4623      	mov	r3, r4
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	e70f      	b.n	8000b60 <__udivmoddi4+0xd4>
 8000d40:	3e02      	subs	r6, #2
 8000d42:	4463      	add	r3, ip
 8000d44:	e730      	b.n	8000ba8 <__udivmoddi4+0x11c>
 8000d46:	bf00      	nop

08000d48 <__aeabi_idiv0>:
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop

08000d4c <canNotification>:
char* txFailure = "No data sent through can!\r\n";
char* rxFailure = "NO data received through can!\r\n";
char* canActivationFault = "CAN not activated!\r\n";
char* txMailboxesFull = "Tx mailboxes full!\r\n";

uint8_t canNotification(){
 8000d4c:	b590      	push	{r4, r7, lr}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
	uint8_t state = 0;
 8000d52:	2300      	movs	r3, #0
 8000d54:	71fb      	strb	r3, [r7, #7]

	if (HAL_CAN_ActivateNotification(&hcan1,CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK) {
 8000d56:	2112      	movs	r1, #18
 8000d58:	480f      	ldr	r0, [pc, #60]	@ (8000d98 <canNotification+0x4c>)
 8000d5a:	f003 fb4f 	bl	80043fc <HAL_CAN_ActivateNotification>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d011      	beq.n	8000d88 <canNotification+0x3c>
		LOGS((uint8_t*)canActivationFault, strlen(canActivationFault));
 8000d64:	4b0d      	ldr	r3, [pc, #52]	@ (8000d9c <canNotification+0x50>)
 8000d66:	681c      	ldr	r4, [r3, #0]
 8000d68:	4b0c      	ldr	r3, [pc, #48]	@ (8000d9c <canNotification+0x50>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff fa2f 	bl	80001d0 <strlen>
 8000d72:	4603      	mov	r3, r0
 8000d74:	b29a      	uxth	r2, r3
 8000d76:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000d7a:	4621      	mov	r1, r4
 8000d7c:	4808      	ldr	r0, [pc, #32]	@ (8000da0 <canNotification+0x54>)
 8000d7e:	f006 fcc3 	bl	8007708 <HAL_UART_Transmit>
		state = 1;
 8000d82:	2301      	movs	r3, #1
 8000d84:	71fb      	strb	r3, [r7, #7]
 8000d86:	e001      	b.n	8000d8c <canNotification+0x40>
	} else {
		state = 0;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	71fb      	strb	r3, [r7, #7]
	}

	return state;
 8000d8c:	79fb      	ldrb	r3, [r7, #7]
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	370c      	adds	r7, #12
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd90      	pop	{r4, r7, pc}
 8000d96:	bf00      	nop
 8000d98:	2000013c 	.word	0x2000013c
 8000d9c:	20000008 	.word	0x20000008
 8000da0:	2000020c 	.word	0x2000020c

08000da4 <canTransmit>:

void canTransmit(uint8_t *data){
 8000da4:	b590      	push	{r4, r7, lr}
 8000da6:	b097      	sub	sp, #92	@ 0x5c
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
	CAN_TxHeaderTypeDef txHeader;
	txHeader.DLC = 8;
 8000dac:	2308      	movs	r3, #8
 8000dae:	64fb      	str	r3, [r7, #76]	@ 0x4c
	txHeader.StdId = 0x65D;
 8000db0:	f240 635d 	movw	r3, #1629	@ 0x65d
 8000db4:	63fb      	str	r3, [r7, #60]	@ 0x3c
	txHeader.IDE = CAN_ID_STD;
 8000db6:	2300      	movs	r3, #0
 8000db8:	647b      	str	r3, [r7, #68]	@ 0x44
	txHeader.TransmitGlobalTime = DISABLE;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
	txHeader.RTR = CAN_RTR_DATA;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	64bb      	str	r3, [r7, #72]	@ 0x48

	static int counter = 0;



	if(HAL_CAN_GetTxMailboxesFreeLevel(&hcan1)==0){
 8000dc4:	4845      	ldr	r0, [pc, #276]	@ (8000edc <canTransmit+0x138>)
 8000dc6:	f003 f976 	bl	80040b6 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d13c      	bne.n	8000e4a <canTransmit+0xa6>
		LOGS((uint8_t*)txMailboxesFull,strlen(txMailboxesFull));
 8000dd0:	4b43      	ldr	r3, [pc, #268]	@ (8000ee0 <canTransmit+0x13c>)
 8000dd2:	681c      	ldr	r4, [r3, #0]
 8000dd4:	4b42      	ldr	r3, [pc, #264]	@ (8000ee0 <canTransmit+0x13c>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff f9f9 	bl	80001d0 <strlen>
 8000dde:	4603      	mov	r3, r0
 8000de0:	b29a      	uxth	r2, r3
 8000de2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000de6:	4621      	mov	r1, r4
 8000de8:	483e      	ldr	r0, [pc, #248]	@ (8000ee4 <canTransmit+0x140>)
 8000dea:	f006 fc8d 	bl	8007708 <HAL_UART_Transmit>
		char msg[16];
		sprintf(msg,"%d\r\n",counter);
 8000dee:	4b3e      	ldr	r3, [pc, #248]	@ (8000ee8 <canTransmit+0x144>)
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000df6:	493d      	ldr	r1, [pc, #244]	@ (8000eec <canTransmit+0x148>)
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f007 fd31 	bl	8008860 <siprintf>
		LOGS((uint8_t*)msg,strlen(msg));
 8000dfe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e02:	4618      	mov	r0, r3
 8000e04:	f7ff f9e4 	bl	80001d0 <strlen>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	b29a      	uxth	r2, r3
 8000e0c:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8000e10:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000e14:	4833      	ldr	r0, [pc, #204]	@ (8000ee4 <canTransmit+0x140>)
 8000e16:	f006 fc77 	bl	8007708 <HAL_UART_Transmit>
		char err[32];
		sprintf(err,"%lu\r\n",HAL_CAN_GetError(&hcan1));
 8000e1a:	4830      	ldr	r0, [pc, #192]	@ (8000edc <canTransmit+0x138>)
 8000e1c:	f003 fd39 	bl	8004892 <HAL_CAN_GetError>
 8000e20:	4602      	mov	r2, r0
 8000e22:	f107 0308 	add.w	r3, r7, #8
 8000e26:	4932      	ldr	r1, [pc, #200]	@ (8000ef0 <canTransmit+0x14c>)
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f007 fd19 	bl	8008860 <siprintf>
		LOGS((uint8_t*)err,strlen(err));
 8000e2e:	f107 0308 	add.w	r3, r7, #8
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff f9cc 	bl	80001d0 <strlen>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	b29a      	uxth	r2, r3
 8000e3c:	f107 0108 	add.w	r1, r7, #8
 8000e40:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000e44:	4827      	ldr	r0, [pc, #156]	@ (8000ee4 <canTransmit+0x140>)
 8000e46:	f006 fc5f 	bl	8007708 <HAL_UART_Transmit>
	}

	if ((HAL_CAN_IsTxMessagePending(&hcan1, CAN_TX_MAILBOX0) && HAL_CAN_IsTxMessagePending(&hcan1, CAN_TX_MAILBOX1) && HAL_CAN_IsTxMessagePending(&hcan1, CAN_TX_MAILBOX2)) == 0) {
 8000e4a:	2101      	movs	r1, #1
 8000e4c:	4823      	ldr	r0, [pc, #140]	@ (8000edc <canTransmit+0x138>)
 8000e4e:	f003 f967 	bl	8004120 <HAL_CAN_IsTxMessagePending>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d00f      	beq.n	8000e78 <canTransmit+0xd4>
 8000e58:	2102      	movs	r1, #2
 8000e5a:	4820      	ldr	r0, [pc, #128]	@ (8000edc <canTransmit+0x138>)
 8000e5c:	f003 f960 	bl	8004120 <HAL_CAN_IsTxMessagePending>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d008      	beq.n	8000e78 <canTransmit+0xd4>
 8000e66:	2104      	movs	r1, #4
 8000e68:	481c      	ldr	r0, [pc, #112]	@ (8000edc <canTransmit+0x138>)
 8000e6a:	f003 f959 	bl	8004120 <HAL_CAN_IsTxMessagePending>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <canTransmit+0xd4>
 8000e74:	2301      	movs	r3, #1
 8000e76:	e000      	b.n	8000e7a <canTransmit+0xd6>
 8000e78:	2300      	movs	r3, #0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d123      	bne.n	8000ec6 <canTransmit+0x122>
		uint32_t mailBox;
		counter++;
 8000e7e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ee8 <canTransmit+0x144>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	3301      	adds	r3, #1
 8000e84:	4a18      	ldr	r2, [pc, #96]	@ (8000ee8 <canTransmit+0x144>)
 8000e86:	6013      	str	r3, [r2, #0]
		char state = HAL_CAN_AddTxMessage(&hcan1, &txHeader, data,&mailBox);
 8000e88:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e8c:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8000e90:	687a      	ldr	r2, [r7, #4]
 8000e92:	4812      	ldr	r0, [pc, #72]	@ (8000edc <canTransmit+0x138>)
 8000e94:	f003 f83f 	bl	8003f16 <HAL_CAN_AddTxMessage>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (state != HAL_OK) {
 8000e9e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d016      	beq.n	8000ed4 <canTransmit+0x130>
			LOGS((uint8_t*)txFailure,strlen(txFailure));
 8000ea6:	4b13      	ldr	r3, [pc, #76]	@ (8000ef4 <canTransmit+0x150>)
 8000ea8:	681c      	ldr	r4, [r3, #0]
 8000eaa:	4b12      	ldr	r3, [pc, #72]	@ (8000ef4 <canTransmit+0x150>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f7ff f98e 	bl	80001d0 <strlen>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	b29a      	uxth	r2, r3
 8000eb8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000ebc:	4621      	mov	r1, r4
 8000ebe:	4809      	ldr	r0, [pc, #36]	@ (8000ee4 <canTransmit+0x140>)
 8000ec0:	f006 fc22 	bl	8007708 <HAL_UART_Transmit>
		}
	}
	else {
		LOGS((uint8_t*)"CBSY\n", 5);
	}
}
 8000ec4:	e006      	b.n	8000ed4 <canTransmit+0x130>
		LOGS((uint8_t*)"CBSY\n", 5);
 8000ec6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000eca:	2205      	movs	r2, #5
 8000ecc:	490a      	ldr	r1, [pc, #40]	@ (8000ef8 <canTransmit+0x154>)
 8000ece:	4805      	ldr	r0, [pc, #20]	@ (8000ee4 <canTransmit+0x140>)
 8000ed0:	f006 fc1a 	bl	8007708 <HAL_UART_Transmit>
}
 8000ed4:	bf00      	nop
 8000ed6:	375c      	adds	r7, #92	@ 0x5c
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd90      	pop	{r4, r7, pc}
 8000edc:	2000013c 	.word	0x2000013c
 8000ee0:	2000000c 	.word	0x2000000c
 8000ee4:	2000020c 	.word	0x2000020c
 8000ee8:	2000008c 	.word	0x2000008c
 8000eec:	08009224 	.word	0x08009224
 8000ef0:	0800922c 	.word	0x0800922c
 8000ef4:	20000000 	.word	0x20000000
 8000ef8:	08009234 	.word	0x08009234

08000efc <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8000efc:	b590      	push	{r4, r7, lr}
 8000efe:	b097      	sub	sp, #92	@ 0x5c
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef rxHeader;

	canData data[] = {0};
 8000f04:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	60da      	str	r2, [r3, #12]

	if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &rxHeader, data->data) != HAL_OK){
 8000f12:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f16:	3306      	adds	r3, #6
 8000f18:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	4830      	ldr	r0, [pc, #192]	@ (8000fe0 <HAL_CAN_RxFifo0MsgPendingCallback+0xe4>)
 8000f20:	f003 f922 	bl	8004168 <HAL_CAN_GetRxMessage>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d00e      	beq.n	8000f48 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>
		LOGS((uint8_t*)rxFailure,strlen(rxFailure));
 8000f2a:	4b2e      	ldr	r3, [pc, #184]	@ (8000fe4 <HAL_CAN_RxFifo0MsgPendingCallback+0xe8>)
 8000f2c:	681c      	ldr	r4, [r3, #0]
 8000f2e:	4b2d      	ldr	r3, [pc, #180]	@ (8000fe4 <HAL_CAN_RxFifo0MsgPendingCallback+0xe8>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff f94c 	bl	80001d0 <strlen>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	b29a      	uxth	r2, r3
 8000f3c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000f40:	4621      	mov	r1, r4
 8000f42:	4829      	ldr	r0, [pc, #164]	@ (8000fe8 <HAL_CAN_RxFifo0MsgPendingCallback+0xec>)
 8000f44:	f006 fbe0 	bl	8007708 <HAL_UART_Transmit>
	}
	if (rxHeader.ExtId == 0x1806E5F4) {
 8000f48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000f4a:	4a28      	ldr	r2, [pc, #160]	@ (8000fec <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d105      	bne.n	8000f5c <HAL_CAN_RxFifo0MsgPendingCallback+0x60>
		data->ID = rxHeader.ExtId;
 8000f50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000f52:	62bb      	str	r3, [r7, #40]	@ 0x28
		data->IDE = CAN_ID_EXT;
 8000f54:	2304      	movs	r3, #4
 8000f56:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 8000f5a:	e028      	b.n	8000fae <HAL_CAN_RxFifo0MsgPendingCallback+0xb2>
	} else if (rxHeader.ExtId == 0x1806E9F4) {
 8000f5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000f5e:	4a24      	ldr	r2, [pc, #144]	@ (8000ff0 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d105      	bne.n	8000f70 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>
		data->ID = rxHeader.ExtId;
 8000f64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000f66:	62bb      	str	r3, [r7, #40]	@ 0x28
		data->IDE = CAN_ID_EXT;
 8000f68:	2304      	movs	r3, #4
 8000f6a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 8000f6e:	e01e      	b.n	8000fae <HAL_CAN_RxFifo0MsgPendingCallback+0xb2>
	} else if (rxHeader.ExtId == 0x1806E7F4) {
 8000f70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000f72:	4a20      	ldr	r2, [pc, #128]	@ (8000ff4 <HAL_CAN_RxFifo0MsgPendingCallback+0xf8>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d105      	bne.n	8000f84 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>
		data->ID = rxHeader.ExtId;
 8000f78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000f7a:	62bb      	str	r3, [r7, #40]	@ 0x28
		data->IDE = CAN_ID_EXT;
 8000f7c:	2304      	movs	r3, #4
 8000f7e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 8000f82:	e014      	b.n	8000fae <HAL_CAN_RxFifo0MsgPendingCallback+0xb2>
	} else {
		char msg[32];
		sprintf(msg, "%lu\r\n", rxHeader.ExtId);
 8000f84:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000f86:	f107 0308 	add.w	r3, r7, #8
 8000f8a:	491b      	ldr	r1, [pc, #108]	@ (8000ff8 <HAL_CAN_RxFifo0MsgPendingCallback+0xfc>)
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f007 fc67 	bl	8008860 <siprintf>
		LOGS((uint8_t*)msg, strlen(msg));
 8000f92:	f107 0308 	add.w	r3, r7, #8
 8000f96:	4618      	mov	r0, r3
 8000f98:	f7ff f91a 	bl	80001d0 <strlen>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	b29a      	uxth	r2, r3
 8000fa0:	f107 0108 	add.w	r1, r7, #8
 8000fa4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000fa8:	480f      	ldr	r0, [pc, #60]	@ (8000fe8 <HAL_CAN_RxFifo0MsgPendingCallback+0xec>)
 8000faa:	f006 fbad 	bl	8007708 <HAL_UART_Transmit>
	}
	data->DLC = rxHeader.DLC;
 8000fae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	data->Fifo = 0;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

	processCanMsg(data);
 8000fbc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f000 f8c1 	bl	8001148 <processCanMsg>

	uint8_t fill0 = HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0);
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	4805      	ldr	r0, [pc, #20]	@ (8000fe0 <HAL_CAN_RxFifo0MsgPendingCallback+0xe4>)
 8000fca:	f003 f9ef 	bl	80043ac <HAL_CAN_GetRxFifoFillLevel>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if(fill0 == 0){
 8000fd4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8000fd8:	2b00      	cmp	r3, #0
		return;
	}
}
 8000fda:	375c      	adds	r7, #92	@ 0x5c
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd90      	pop	{r4, r7, pc}
 8000fe0:	2000013c 	.word	0x2000013c
 8000fe4:	20000004 	.word	0x20000004
 8000fe8:	2000020c 	.word	0x2000020c
 8000fec:	1806e5f4 	.word	0x1806e5f4
 8000ff0:	1806e9f4 	.word	0x1806e9f4
 8000ff4:	1806e7f4 	.word	0x1806e7f4
 8000ff8:	0800922c 	.word	0x0800922c

08000ffc <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8000ffc:	b590      	push	{r4, r7, lr}
 8000ffe:	b097      	sub	sp, #92	@ 0x5c
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef rxHeader;

	canData data[] = {0};
 8001004:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	60da      	str	r2, [r3, #12]

	if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO1, &rxHeader, data->data) != HAL_OK){
 8001012:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001016:	3306      	adds	r3, #6
 8001018:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 800101c:	2101      	movs	r1, #1
 800101e:	482b      	ldr	r0, [pc, #172]	@ (80010cc <HAL_CAN_RxFifo1MsgPendingCallback+0xd0>)
 8001020:	f003 f8a2 	bl	8004168 <HAL_CAN_GetRxMessage>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d00e      	beq.n	8001048 <HAL_CAN_RxFifo1MsgPendingCallback+0x4c>
		LOGS((uint8_t*)rxFailure,strlen(rxFailure));
 800102a:	4b29      	ldr	r3, [pc, #164]	@ (80010d0 <HAL_CAN_RxFifo1MsgPendingCallback+0xd4>)
 800102c:	681c      	ldr	r4, [r3, #0]
 800102e:	4b28      	ldr	r3, [pc, #160]	@ (80010d0 <HAL_CAN_RxFifo1MsgPendingCallback+0xd4>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff f8cc 	bl	80001d0 <strlen>
 8001038:	4603      	mov	r3, r0
 800103a:	b29a      	uxth	r2, r3
 800103c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001040:	4621      	mov	r1, r4
 8001042:	4824      	ldr	r0, [pc, #144]	@ (80010d4 <HAL_CAN_RxFifo1MsgPendingCallback+0xd8>)
 8001044:	f006 fb60 	bl	8007708 <HAL_UART_Transmit>
	}
	if (rxHeader.ExtId == 0x1806E5F4) {
 8001048:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800104a:	4a23      	ldr	r2, [pc, #140]	@ (80010d8 <HAL_CAN_RxFifo1MsgPendingCallback+0xdc>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d105      	bne.n	800105c <HAL_CAN_RxFifo1MsgPendingCallback+0x60>
		data->ID = rxHeader.ExtId;
 8001050:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001052:	62bb      	str	r3, [r7, #40]	@ 0x28
		data->IDE = CAN_ID_EXT;
 8001054:	2304      	movs	r3, #4
 8001056:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 800105a:	e01e      	b.n	800109a <HAL_CAN_RxFifo1MsgPendingCallback+0x9e>
	} else if (rxHeader.ExtId == 0x1806E9F4) {
 800105c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800105e:	4a1f      	ldr	r2, [pc, #124]	@ (80010dc <HAL_CAN_RxFifo1MsgPendingCallback+0xe0>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d105      	bne.n	8001070 <HAL_CAN_RxFifo1MsgPendingCallback+0x74>
		data->ID = rxHeader.ExtId;
 8001064:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001066:	62bb      	str	r3, [r7, #40]	@ 0x28
		data->IDE = CAN_ID_EXT;
 8001068:	2304      	movs	r3, #4
 800106a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 800106e:	e014      	b.n	800109a <HAL_CAN_RxFifo1MsgPendingCallback+0x9e>
	} else {
		char msg[32];
		sprintf(msg, "%lu\r\n", rxHeader.ExtId);
 8001070:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001072:	f107 0308 	add.w	r3, r7, #8
 8001076:	491a      	ldr	r1, [pc, #104]	@ (80010e0 <HAL_CAN_RxFifo1MsgPendingCallback+0xe4>)
 8001078:	4618      	mov	r0, r3
 800107a:	f007 fbf1 	bl	8008860 <siprintf>
		LOGS((uint8_t*)msg, strlen(msg));
 800107e:	f107 0308 	add.w	r3, r7, #8
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff f8a4 	bl	80001d0 <strlen>
 8001088:	4603      	mov	r3, r0
 800108a:	b29a      	uxth	r2, r3
 800108c:	f107 0108 	add.w	r1, r7, #8
 8001090:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001094:	480f      	ldr	r0, [pc, #60]	@ (80010d4 <HAL_CAN_RxFifo1MsgPendingCallback+0xd8>)
 8001096:	f006 fb37 	bl	8007708 <HAL_UART_Transmit>
	}
	data->DLC = rxHeader.DLC;
 800109a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800109c:	b2db      	uxtb	r3, r3
 800109e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	data->Fifo = 0;
 80010a2:	2300      	movs	r3, #0
 80010a4:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

	processCanMsg(data);
 80010a8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010ac:	4618      	mov	r0, r3
 80010ae:	f000 f84b 	bl	8001148 <processCanMsg>
	uint8_t fill1 = HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO1);
 80010b2:	2101      	movs	r1, #1
 80010b4:	4805      	ldr	r0, [pc, #20]	@ (80010cc <HAL_CAN_RxFifo1MsgPendingCallback+0xd0>)
 80010b6:	f003 f979 	bl	80043ac <HAL_CAN_GetRxFifoFillLevel>
 80010ba:	4603      	mov	r3, r0
 80010bc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if(fill1 == 0){
 80010c0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80010c4:	2b00      	cmp	r3, #0
		return;
	}
}
 80010c6:	375c      	adds	r7, #92	@ 0x5c
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd90      	pop	{r4, r7, pc}
 80010cc:	2000013c 	.word	0x2000013c
 80010d0:	20000004 	.word	0x20000004
 80010d4:	2000020c 	.word	0x2000020c
 80010d8:	1806e5f4 	.word	0x1806e5f4
 80010dc:	1806e9f4 	.word	0x1806e9f4
 80010e0:	0800922c 	.word	0x0800922c

080010e4 <getPv>:

uint16_t getPv(uint8_t *arr) {
 80010e4:	b480      	push	{r7}
 80010e6:	b085      	sub	sp, #20
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
    // Assuming len is the length of the array arr
    uint16_t hex_number = 0;
 80010ec:	2300      	movs	r3, #0
 80010ee:	81fb      	strh	r3, [r7, #14]

    // Combine first two bytes into a 16-bit hexadecimal number
    hex_number = (arr[0] << 8) | arr[1];
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	021b      	lsls	r3, r3, #8
 80010f6:	b21a      	sxth	r2, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	3301      	adds	r3, #1
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	b21b      	sxth	r3, r3
 8001100:	4313      	orrs	r3, r2
 8001102:	b21b      	sxth	r3, r3
 8001104:	81fb      	strh	r3, [r7, #14]

    return hex_number;
 8001106:	89fb      	ldrh	r3, [r7, #14]
}
 8001108:	4618      	mov	r0, r3
 800110a:	3714      	adds	r7, #20
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <getPower>:

uint16_t getPower(uint8_t *arr) {
 8001114:	b480      	push	{r7}
 8001116:	b085      	sub	sp, #20
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
    // Assuming len is the length of the array arr
    uint16_t hex_number = 0;
 800111c:	2300      	movs	r3, #0
 800111e:	81fb      	strh	r3, [r7, #14]

    // Combine first two bytes into a 16-bit hexadecimal number
    hex_number = (arr[2] << 8) | arr[3];
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	3302      	adds	r3, #2
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	021b      	lsls	r3, r3, #8
 8001128:	b21a      	sxth	r2, r3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	3303      	adds	r3, #3
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	b21b      	sxth	r3, r3
 8001132:	4313      	orrs	r3, r2
 8001134:	b21b      	sxth	r3, r3
 8001136:	81fb      	strh	r3, [r7, #14]

    return hex_number;
 8001138:	89fb      	ldrh	r3, [r7, #14]
}
 800113a:	4618      	mov	r0, r3
 800113c:	3714      	adds	r7, #20
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
	...

08001148 <processCanMsg>:
    hex_number = (arr[4] << 8);

    return hex_number;
}

void processCanMsg(canData *data){
 8001148:	b5f0      	push	{r4, r5, r6, r7, lr}
 800114a:	b0a3      	sub	sp, #140	@ 0x8c
 800114c:	af04      	add	r7, sp, #16
 800114e:	6078      	str	r0, [r7, #4]
	if(data->ID == 0x1806E5F4){
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a47      	ldr	r2, [pc, #284]	@ (8001274 <processCanMsg+0x12c>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d10d      	bne.n	8001176 <processCanMsg+0x2e>
		char *id = "0x1806E5F4!\r\n";
 800115a:	4b47      	ldr	r3, [pc, #284]	@ (8001278 <processCanMsg+0x130>)
 800115c:	673b      	str	r3, [r7, #112]	@ 0x70
		LOGS((uint8_t*)id,strlen(id));
 800115e:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8001160:	f7ff f836 	bl	80001d0 <strlen>
 8001164:	4603      	mov	r3, r0
 8001166:	b29a      	uxth	r2, r3
 8001168:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800116c:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800116e:	4843      	ldr	r0, [pc, #268]	@ (800127c <processCanMsg+0x134>)
 8001170:	f006 faca 	bl	8007708 <HAL_UART_Transmit>
	}
	else if (data->ID == 0x1806E9F4) {
		char *id = "0x1806E9F4!\r\n";
		LOGS((uint8_t*)id,strlen(id));
	}
}
 8001174:	e079      	b.n	800126a <processCanMsg+0x122>
	else if(data->ID == 0x1806E7F4){
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a41      	ldr	r2, [pc, #260]	@ (8001280 <processCanMsg+0x138>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d162      	bne.n	8001246 <processCanMsg+0xfe>
		bmsDataObj.pv = getPv(data->data);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	3306      	adds	r3, #6
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff ffad 	bl	80010e4 <getPv>
 800118a:	4603      	mov	r3, r0
 800118c:	461a      	mov	r2, r3
 800118e:	4b3d      	ldr	r3, [pc, #244]	@ (8001284 <processCanMsg+0x13c>)
 8001190:	80da      	strh	r2, [r3, #6]
		bmsDataObj.kwPower = getPower(data->data);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	3306      	adds	r3, #6
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff ffbc 	bl	8001114 <getPower>
 800119c:	4603      	mov	r3, r0
 800119e:	461a      	mov	r2, r3
 80011a0:	4b38      	ldr	r3, [pc, #224]	@ (8001284 <processCanMsg+0x13c>)
 80011a2:	811a      	strh	r2, [r3, #8]
		bmsDataObj.relayState = data->data[4];
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	7a9a      	ldrb	r2, [r3, #10]
 80011a8:	4b36      	ldr	r3, [pc, #216]	@ (8001284 <processCanMsg+0x13c>)
 80011aa:	729a      	strb	r2, [r3, #10]
		bmsDataObj.soc = data->data[5];
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	7ada      	ldrb	r2, [r3, #11]
 80011b0:	4b34      	ldr	r3, [pc, #208]	@ (8001284 <processCanMsg+0x13c>)
 80011b2:	711a      	strb	r2, [r3, #4]
		sprintf(msg,"pv:%d.%d\r\nkwpwr:%d.%d\r\nrelayState:%d\r\nsoc:%d\r\n",bmsDataObj.pv/10,bmsDataObj.pv%10, bmsDataObj.kwPower/10,bmsDataObj.kwPower%10,bmsDataObj.relayState,bmsDataObj.soc);
 80011b4:	4b33      	ldr	r3, [pc, #204]	@ (8001284 <processCanMsg+0x13c>)
 80011b6:	88db      	ldrh	r3, [r3, #6]
 80011b8:	4a33      	ldr	r2, [pc, #204]	@ (8001288 <processCanMsg+0x140>)
 80011ba:	fba2 2303 	umull	r2, r3, r2, r3
 80011be:	08db      	lsrs	r3, r3, #3
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	461d      	mov	r5, r3
 80011c4:	4b2f      	ldr	r3, [pc, #188]	@ (8001284 <processCanMsg+0x13c>)
 80011c6:	88da      	ldrh	r2, [r3, #6]
 80011c8:	4b2f      	ldr	r3, [pc, #188]	@ (8001288 <processCanMsg+0x140>)
 80011ca:	fba3 1302 	umull	r1, r3, r3, r2
 80011ce:	08d9      	lsrs	r1, r3, #3
 80011d0:	460b      	mov	r3, r1
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	440b      	add	r3, r1
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	b29b      	uxth	r3, r3
 80011dc:	461e      	mov	r6, r3
 80011de:	4b29      	ldr	r3, [pc, #164]	@ (8001284 <processCanMsg+0x13c>)
 80011e0:	891b      	ldrh	r3, [r3, #8]
 80011e2:	4a29      	ldr	r2, [pc, #164]	@ (8001288 <processCanMsg+0x140>)
 80011e4:	fba2 2303 	umull	r2, r3, r2, r3
 80011e8:	08db      	lsrs	r3, r3, #3
 80011ea:	b29b      	uxth	r3, r3
 80011ec:	461c      	mov	r4, r3
 80011ee:	4b25      	ldr	r3, [pc, #148]	@ (8001284 <processCanMsg+0x13c>)
 80011f0:	891a      	ldrh	r2, [r3, #8]
 80011f2:	4b25      	ldr	r3, [pc, #148]	@ (8001288 <processCanMsg+0x140>)
 80011f4:	fba3 1302 	umull	r1, r3, r3, r2
 80011f8:	08d9      	lsrs	r1, r3, #3
 80011fa:	460b      	mov	r3, r1
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	440b      	add	r3, r1
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	b29b      	uxth	r3, r3
 8001206:	461a      	mov	r2, r3
 8001208:	4b1e      	ldr	r3, [pc, #120]	@ (8001284 <processCanMsg+0x13c>)
 800120a:	7a9b      	ldrb	r3, [r3, #10]
 800120c:	4619      	mov	r1, r3
 800120e:	4b1d      	ldr	r3, [pc, #116]	@ (8001284 <processCanMsg+0x13c>)
 8001210:	791b      	ldrb	r3, [r3, #4]
 8001212:	f107 000c 	add.w	r0, r7, #12
 8001216:	9303      	str	r3, [sp, #12]
 8001218:	9102      	str	r1, [sp, #8]
 800121a:	9201      	str	r2, [sp, #4]
 800121c:	9400      	str	r4, [sp, #0]
 800121e:	4633      	mov	r3, r6
 8001220:	462a      	mov	r2, r5
 8001222:	491a      	ldr	r1, [pc, #104]	@ (800128c <processCanMsg+0x144>)
 8001224:	f007 fb1c 	bl	8008860 <siprintf>
		LOGS((uint8_t*)msg,strlen(msg));
 8001228:	f107 030c 	add.w	r3, r7, #12
 800122c:	4618      	mov	r0, r3
 800122e:	f7fe ffcf 	bl	80001d0 <strlen>
 8001232:	4603      	mov	r3, r0
 8001234:	b29a      	uxth	r2, r3
 8001236:	f107 010c 	add.w	r1, r7, #12
 800123a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800123e:	480f      	ldr	r0, [pc, #60]	@ (800127c <processCanMsg+0x134>)
 8001240:	f006 fa62 	bl	8007708 <HAL_UART_Transmit>
}
 8001244:	e011      	b.n	800126a <processCanMsg+0x122>
	else if (data->ID == 0x1806E9F4) {
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a11      	ldr	r2, [pc, #68]	@ (8001290 <processCanMsg+0x148>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d10c      	bne.n	800126a <processCanMsg+0x122>
		char *id = "0x1806E9F4!\r\n";
 8001250:	4b10      	ldr	r3, [pc, #64]	@ (8001294 <processCanMsg+0x14c>)
 8001252:	677b      	str	r3, [r7, #116]	@ 0x74
		LOGS((uint8_t*)id,strlen(id));
 8001254:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8001256:	f7fe ffbb 	bl	80001d0 <strlen>
 800125a:	4603      	mov	r3, r0
 800125c:	b29a      	uxth	r2, r3
 800125e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001262:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8001264:	4805      	ldr	r0, [pc, #20]	@ (800127c <processCanMsg+0x134>)
 8001266:	f006 fa4f 	bl	8007708 <HAL_UART_Transmit>
}
 800126a:	bf00      	nop
 800126c:	377c      	adds	r7, #124	@ 0x7c
 800126e:	46bd      	mov	sp, r7
 8001270:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001272:	bf00      	nop
 8001274:	1806e5f4 	.word	0x1806e5f4
 8001278:	0800923c 	.word	0x0800923c
 800127c:	2000020c 	.word	0x2000020c
 8001280:	1806e7f4 	.word	0x1806e7f4
 8001284:	200002b0 	.word	0x200002b0
 8001288:	cccccccd 	.word	0xcccccccd
 800128c:	0800924c 	.word	0x0800924c
 8001290:	1806e9f4 	.word	0x1806e9f4
 8001294:	0800927c 	.word	0x0800927c

08001298 <HAL_TIM_PeriodElapsedCallback>:
static void MX_DAC1_Init(void);
static void MX_ADC1_Init(void);
/* USER CODE BEGIN PFP */
uint32_t dacInput(uint16_t adcinput1, uint16_t adcinput2);

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
	dac_val = dacInput(rawValues[0], rawValues[1]);
 80012a0:	4b11      	ldr	r3, [pc, #68]	@ (80012e8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	b29b      	uxth	r3, r3
 80012a6:	4a10      	ldr	r2, [pc, #64]	@ (80012e8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80012a8:	6852      	ldr	r2, [r2, #4]
 80012aa:	b292      	uxth	r2, r2
 80012ac:	4611      	mov	r1, r2
 80012ae:	4618      	mov	r0, r3
 80012b0:	f000 fbca 	bl	8001a48 <dacInput>
 80012b4:	4603      	mov	r3, r0
 80012b6:	4a0d      	ldr	r2, [pc, #52]	@ (80012ec <HAL_TIM_PeriodElapsedCallback+0x54>)
 80012b8:	6013      	str	r3, [r2, #0]

	if(brakePressure > 800){
 80012ba:	4b0d      	ldr	r3, [pc, #52]	@ (80012f0 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 80012c2:	d906      	bls.n	80012d2 <HAL_TIM_PeriodElapsedCallback+0x3a>
		HAL_GPIO_WritePin(BrakeLight_GPIO_Port, BrakeLight_Pin, GPIO_PIN_SET);
 80012c4:	2201      	movs	r2, #1
 80012c6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80012ca:	480a      	ldr	r0, [pc, #40]	@ (80012f4 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80012cc:	f004 fb4c 	bl	8005968 <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(BrakeLight_GPIO_Port, BrakeLight_Pin, GPIO_PIN_RESET);
	}
}
 80012d0:	e005      	b.n	80012de <HAL_TIM_PeriodElapsedCallback+0x46>
		HAL_GPIO_WritePin(BrakeLight_GPIO_Port, BrakeLight_Pin, GPIO_PIN_RESET);
 80012d2:	2200      	movs	r2, #0
 80012d4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80012d8:	4806      	ldr	r0, [pc, #24]	@ (80012f4 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80012da:	f004 fb45 	bl	8005968 <HAL_GPIO_WritePin>
}
 80012de:	bf00      	nop
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	20000294 	.word	0x20000294
 80012ec:	200002ac 	.word	0x200002ac
 80012f0:	200002a8 	.word	0x200002a8
 80012f4:	48000800 	.word	0x48000800

080012f8 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
	rawValues[0] = adcBuffer[ADC1IN5];
 8001300:	4b08      	ldr	r3, [pc, #32]	@ (8001324 <HAL_ADC_ConvCpltCallback+0x2c>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a08      	ldr	r2, [pc, #32]	@ (8001328 <HAL_ADC_ConvCpltCallback+0x30>)
 8001306:	6013      	str	r3, [r2, #0]
	rawValues[1] = adcBuffer[ADC1IN6];
 8001308:	4b06      	ldr	r3, [pc, #24]	@ (8001324 <HAL_ADC_ConvCpltCallback+0x2c>)
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	4a06      	ldr	r2, [pc, #24]	@ (8001328 <HAL_ADC_ConvCpltCallback+0x30>)
 800130e:	6053      	str	r3, [r2, #4]
	brakePressure = adcBuffer[BRAKEPRESSURE];
 8001310:	4b04      	ldr	r3, [pc, #16]	@ (8001324 <HAL_ADC_ConvCpltCallback+0x2c>)
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	4a05      	ldr	r2, [pc, #20]	@ (800132c <HAL_ADC_ConvCpltCallback+0x34>)
 8001316:	6013      	str	r3, [r2, #0]
}
 8001318:	bf00      	nop
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr
 8001324:	2000029c 	.word	0x2000029c
 8001328:	20000294 	.word	0x20000294
 800132c:	200002a8 	.word	0x200002a8

08001330 <ErrorLedBlink>:

void ErrorLedBlink(){
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001334:	2201      	movs	r2, #1
 8001336:	2120      	movs	r1, #32
 8001338:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800133c:	f004 fb14 	bl	8005968 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001340:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001344:	f001 f824 	bl	8002390 <HAL_Delay>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001348:	2200      	movs	r2, #0
 800134a:	2120      	movs	r1, #32
 800134c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001350:	f004 fb0a 	bl	8005968 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001354:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001358:	f001 f81a 	bl	8002390 <HAL_Delay>
}
 800135c:	bf00      	nop
 800135e:	bd80      	pop	{r7, pc}

08001360 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	80fb      	strh	r3, [r7, #6]
	if(RUNON_Pin){
		runON = 1;
 800136a:	4b04      	ldr	r3, [pc, #16]	@ (800137c <HAL_GPIO_EXTI_Callback+0x1c>)
 800136c:	2201      	movs	r2, #1
 800136e:	701a      	strb	r2, [r3, #0]

	//for future interrupts
//	else{
//
//	}
}
 8001370:	bf00      	nop
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	20000330 	.word	0x20000330

08001380 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001380:	b590      	push	{r4, r7, lr}
 8001382:	b087      	sub	sp, #28
 8001384:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001386:	f000 ff87 	bl	8002298 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800138a:	f000 f897 	bl	80014bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800138e:	f000 fab1 	bl	80018f4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001392:	f000 fa89 	bl	80018a8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001396:	f000 fa57 	bl	8001848 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 800139a:	f000 f977 	bl	800168c <MX_CAN1_Init>
  MX_TIM6_Init();
 800139e:	f000 fa1d 	bl	80017dc <MX_TIM6_Init>
  MX_DAC1_Init();
 80013a2:	f000 f9e9 	bl	8001778 <MX_DAC1_Init>
  MX_ADC1_Init();
 80013a6:	f000 f8d9 	bl	800155c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  uint32_t calibrationValue = HAL_ADCEx_Calibration_GetValue(&hadc1,ADC_SINGLE_ENDED);
 80013aa:	217f      	movs	r1, #127	@ 0x7f
 80013ac:	4836      	ldr	r0, [pc, #216]	@ (8001488 <main+0x108>)
 80013ae:	f002 fa9c 	bl	80038ea <HAL_ADCEx_Calibration_GetValue>
 80013b2:	60f8      	str	r0, [r7, #12]
  sprintf(msg, "%lu\r\n", calibrationValue);
 80013b4:	68fa      	ldr	r2, [r7, #12]
 80013b6:	4935      	ldr	r1, [pc, #212]	@ (800148c <main+0x10c>)
 80013b8:	4835      	ldr	r0, [pc, #212]	@ (8001490 <main+0x110>)
 80013ba:	f007 fa51 	bl	8008860 <siprintf>
  LOGS((uint8_t* )msg, strlen(msg));
 80013be:	4834      	ldr	r0, [pc, #208]	@ (8001490 <main+0x110>)
 80013c0:	f7fe ff06 	bl	80001d0 <strlen>
 80013c4:	4603      	mov	r3, r0
 80013c6:	b29a      	uxth	r2, r3
 80013c8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80013cc:	4930      	ldr	r1, [pc, #192]	@ (8001490 <main+0x110>)
 80013ce:	4831      	ldr	r0, [pc, #196]	@ (8001494 <main+0x114>)
 80013d0:	f006 f99a 	bl	8007708 <HAL_UART_Transmit>

  HAL_ADCEx_Calibration_SetValue(&hadc1, ADC_SINGLE_ENDED, calibrationValue);
 80013d4:	68fa      	ldr	r2, [r7, #12]
 80013d6:	217f      	movs	r1, #127	@ 0x7f
 80013d8:	482b      	ldr	r0, [pc, #172]	@ (8001488 <main+0x108>)
 80013da:	f002 fa96 	bl	800390a <HAL_ADCEx_Calibration_SetValue>

  if(HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED)!=HAL_OK){
 80013de:	217f      	movs	r1, #127	@ 0x7f
 80013e0:	4829      	ldr	r0, [pc, #164]	@ (8001488 <main+0x108>)
 80013e2:	f002 fa22 	bl	800382a <HAL_ADCEx_Calibration_Start>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d014      	beq.n	8001416 <main+0x96>
	  LOGS((uint8_t*)adcNcalib,strlen(adcNcalib));
 80013ec:	4b2a      	ldr	r3, [pc, #168]	@ (8001498 <main+0x118>)
 80013ee:	681c      	ldr	r4, [r3, #0]
 80013f0:	4b29      	ldr	r3, [pc, #164]	@ (8001498 <main+0x118>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7fe feeb 	bl	80001d0 <strlen>
 80013fa:	4603      	mov	r3, r0
 80013fc:	b29a      	uxth	r2, r3
 80013fe:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001402:	4621      	mov	r1, r4
 8001404:	4823      	ldr	r0, [pc, #140]	@ (8001494 <main+0x114>)
 8001406:	f006 f97f 	bl	8007708 <HAL_UART_Transmit>
	  ErrorLedBlink();
 800140a:	f7ff ff91 	bl	8001330 <ErrorLedBlink>
	  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800140e:	217f      	movs	r1, #127	@ 0x7f
 8001410:	481d      	ldr	r0, [pc, #116]	@ (8001488 <main+0x108>)
 8001412:	f002 fa0a 	bl	800382a <HAL_ADCEx_Calibration_Start>
  }

  HAL_CAN_Start(&hcan1);
 8001416:	4821      	ldr	r0, [pc, #132]	@ (800149c <main+0x11c>)
 8001418:	f002 fd39 	bl	8003e8e <HAL_CAN_Start>
  if(canNotification()!=0){
 800141c:	f7ff fc96 	bl	8000d4c <canNotification>

  }

  uint8_t test[] = {0x0f,0x93,0,0,0,0,0,0};
 8001420:	4a1f      	ldr	r2, [pc, #124]	@ (80014a0 <main+0x120>)
 8001422:	1d3b      	adds	r3, r7, #4
 8001424:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001428:	e883 0003 	stmia.w	r3, {r0, r1}

  HAL_ADC_Start_DMA(&hadc1, adcBuffer, 3);
 800142c:	2203      	movs	r2, #3
 800142e:	491d      	ldr	r1, [pc, #116]	@ (80014a4 <main+0x124>)
 8001430:	4815      	ldr	r0, [pc, #84]	@ (8001488 <main+0x108>)
 8001432:	f001 fb1d 	bl	8002a70 <HAL_ADC_Start_DMA>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, &dac_val, 1, DAC_ALIGN_12B_R);
 8001436:	2300      	movs	r3, #0
 8001438:	9300      	str	r3, [sp, #0]
 800143a:	2301      	movs	r3, #1
 800143c:	4a1a      	ldr	r2, [pc, #104]	@ (80014a8 <main+0x128>)
 800143e:	2100      	movs	r1, #0
 8001440:	481a      	ldr	r0, [pc, #104]	@ (80014ac <main+0x12c>)
 8001442:	f003 fb67 	bl	8004b14 <HAL_DAC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim6);
 8001446:	481a      	ldr	r0, [pc, #104]	@ (80014b0 <main+0x130>)
 8001448:	f005 fe36 	bl	80070b8 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  canTransmit(test);
 800144c:	1d3b      	adds	r3, r7, #4
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff fca8 	bl	8000da4 <canTransmit>

//	  sprintf(msg,"99 %hu\n",(uint16_t)getDac);

//	  LOGS((uint8_t*)msg,strlen(msg));

	  if(runON==1){
 8001454:	4b17      	ldr	r3, [pc, #92]	@ (80014b4 <main+0x134>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	2b01      	cmp	r3, #1
 800145a:	d109      	bne.n	8001470 <main+0xf0>
		  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 800145c:	2201      	movs	r2, #1
 800145e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001462:	4815      	ldr	r0, [pc, #84]	@ (80014b8 <main+0x138>)
 8001464:	f004 fa80 	bl	8005968 <HAL_GPIO_WritePin>
		  runON = 0;
 8001468:	4b12      	ldr	r3, [pc, #72]	@ (80014b4 <main+0x134>)
 800146a:	2200      	movs	r2, #0
 800146c:	701a      	strb	r2, [r3, #0]
 800146e:	e005      	b.n	800147c <main+0xfc>
	  }else{
		  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8001470:	2200      	movs	r2, #0
 8001472:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001476:	4810      	ldr	r0, [pc, #64]	@ (80014b8 <main+0x138>)
 8001478:	f004 fa76 	bl	8005968 <HAL_GPIO_WritePin>
	  }

	  HAL_Delay(1000);
 800147c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001480:	f000 ff86 	bl	8002390 <HAL_Delay>
	  canTransmit(test);
 8001484:	e7e2      	b.n	800144c <main+0xcc>
 8001486:	bf00      	nop
 8001488:	20000090 	.word	0x20000090
 800148c:	080092f0 	.word	0x080092f0
 8001490:	200002cc 	.word	0x200002cc
 8001494:	2000020c 	.word	0x2000020c
 8001498:	20000010 	.word	0x20000010
 800149c:	2000013c 	.word	0x2000013c
 80014a0:	080092f8 	.word	0x080092f8
 80014a4:	2000029c 	.word	0x2000029c
 80014a8:	200002ac 	.word	0x200002ac
 80014ac:	20000164 	.word	0x20000164
 80014b0:	200001c0 	.word	0x200001c0
 80014b4:	20000330 	.word	0x20000330
 80014b8:	48000800 	.word	0x48000800

080014bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b096      	sub	sp, #88	@ 0x58
 80014c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014c2:	f107 0314 	add.w	r3, r7, #20
 80014c6:	2244      	movs	r2, #68	@ 0x44
 80014c8:	2100      	movs	r1, #0
 80014ca:	4618      	mov	r0, r3
 80014cc:	f007 f9e8 	bl	80088a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014d0:	463b      	mov	r3, r7
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	605a      	str	r2, [r3, #4]
 80014d8:	609a      	str	r2, [r3, #8]
 80014da:	60da      	str	r2, [r3, #12]
 80014dc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80014de:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80014e2:	f004 fa7f 	bl	80059e4 <HAL_PWREx_ControlVoltageScaling>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80014ec:	f000 fb7e 	bl	8001bec <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014f0:	2301      	movs	r3, #1
 80014f2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80014f4:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80014f8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014fa:	2302      	movs	r3, #2
 80014fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014fe:	2303      	movs	r3, #3
 8001500:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001502:	2301      	movs	r3, #1
 8001504:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8001506:	2314      	movs	r3, #20
 8001508:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800150a:	2307      	movs	r3, #7
 800150c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800150e:	2302      	movs	r3, #2
 8001510:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001512:	2302      	movs	r3, #2
 8001514:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001516:	f107 0314 	add.w	r3, r7, #20
 800151a:	4618      	mov	r0, r3
 800151c:	f004 fab8 	bl	8005a90 <HAL_RCC_OscConfig>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001526:	f000 fb61 	bl	8001bec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800152a:	230f      	movs	r3, #15
 800152c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800152e:	2303      	movs	r3, #3
 8001530:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001532:	2300      	movs	r3, #0
 8001534:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001536:	2300      	movs	r3, #0
 8001538:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800153a:	2300      	movs	r3, #0
 800153c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800153e:	463b      	mov	r3, r7
 8001540:	2104      	movs	r1, #4
 8001542:	4618      	mov	r0, r3
 8001544:	f004 fe80 	bl	8006248 <HAL_RCC_ClockConfig>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800154e:	f000 fb4d 	bl	8001bec <Error_Handler>
  }
}
 8001552:	bf00      	nop
 8001554:	3758      	adds	r7, #88	@ 0x58
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
	...

0800155c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b08a      	sub	sp, #40	@ 0x28
 8001560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001562:	f107 031c 	add.w	r3, r7, #28
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	605a      	str	r2, [r3, #4]
 800156c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800156e:	1d3b      	adds	r3, r7, #4
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	605a      	str	r2, [r3, #4]
 8001576:	609a      	str	r2, [r3, #8]
 8001578:	60da      	str	r2, [r3, #12]
 800157a:	611a      	str	r2, [r3, #16]
 800157c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800157e:	4b3e      	ldr	r3, [pc, #248]	@ (8001678 <MX_ADC1_Init+0x11c>)
 8001580:	4a3e      	ldr	r2, [pc, #248]	@ (800167c <MX_ADC1_Init+0x120>)
 8001582:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001584:	4b3c      	ldr	r3, [pc, #240]	@ (8001678 <MX_ADC1_Init+0x11c>)
 8001586:	2200      	movs	r2, #0
 8001588:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800158a:	4b3b      	ldr	r3, [pc, #236]	@ (8001678 <MX_ADC1_Init+0x11c>)
 800158c:	2200      	movs	r2, #0
 800158e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001590:	4b39      	ldr	r3, [pc, #228]	@ (8001678 <MX_ADC1_Init+0x11c>)
 8001592:	2200      	movs	r2, #0
 8001594:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001596:	4b38      	ldr	r3, [pc, #224]	@ (8001678 <MX_ADC1_Init+0x11c>)
 8001598:	2201      	movs	r2, #1
 800159a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800159c:	4b36      	ldr	r3, [pc, #216]	@ (8001678 <MX_ADC1_Init+0x11c>)
 800159e:	2204      	movs	r2, #4
 80015a0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80015a2:	4b35      	ldr	r3, [pc, #212]	@ (8001678 <MX_ADC1_Init+0x11c>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80015a8:	4b33      	ldr	r3, [pc, #204]	@ (8001678 <MX_ADC1_Init+0x11c>)
 80015aa:	2201      	movs	r2, #1
 80015ac:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 80015ae:	4b32      	ldr	r3, [pc, #200]	@ (8001678 <MX_ADC1_Init+0x11c>)
 80015b0:	2203      	movs	r2, #3
 80015b2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015b4:	4b30      	ldr	r3, [pc, #192]	@ (8001678 <MX_ADC1_Init+0x11c>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 80015bc:	4b2e      	ldr	r3, [pc, #184]	@ (8001678 <MX_ADC1_Init+0x11c>)
 80015be:	f44f 62e8 	mov.w	r2, #1856	@ 0x740
 80015c2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 80015c4:	4b2c      	ldr	r3, [pc, #176]	@ (8001678 <MX_ADC1_Init+0x11c>)
 80015c6:	f44f 6240 	mov.w	r2, #3072	@ 0xc00
 80015ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80015cc:	4b2a      	ldr	r3, [pc, #168]	@ (8001678 <MX_ADC1_Init+0x11c>)
 80015ce:	2201      	movs	r2, #1
 80015d0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80015d4:	4b28      	ldr	r3, [pc, #160]	@ (8001678 <MX_ADC1_Init+0x11c>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80015da:	4b27      	ldr	r3, [pc, #156]	@ (8001678 <MX_ADC1_Init+0x11c>)
 80015dc:	2200      	movs	r2, #0
 80015de:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015e2:	4825      	ldr	r0, [pc, #148]	@ (8001678 <MX_ADC1_Init+0x11c>)
 80015e4:	f001 f8f4 	bl	80027d0 <HAL_ADC_Init>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 80015ee:	f000 fafd 	bl	8001bec <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80015f2:	2300      	movs	r3, #0
 80015f4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80015f6:	f107 031c 	add.w	r3, r7, #28
 80015fa:	4619      	mov	r1, r3
 80015fc:	481e      	ldr	r0, [pc, #120]	@ (8001678 <MX_ADC1_Init+0x11c>)
 80015fe:	f002 f9d1 	bl	80039a4 <HAL_ADCEx_MultiModeConfigChannel>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8001608:	f000 faf0 	bl	8001bec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800160c:	4b1c      	ldr	r3, [pc, #112]	@ (8001680 <MX_ADC1_Init+0x124>)
 800160e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001610:	2306      	movs	r3, #6
 8001612:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8001614:	2306      	movs	r3, #6
 8001616:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001618:	237f      	movs	r3, #127	@ 0x7f
 800161a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800161c:	2304      	movs	r3, #4
 800161e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001620:	2300      	movs	r3, #0
 8001622:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001624:	1d3b      	adds	r3, r7, #4
 8001626:	4619      	mov	r1, r3
 8001628:	4813      	ldr	r0, [pc, #76]	@ (8001678 <MX_ADC1_Init+0x11c>)
 800162a:	f001 faf1 	bl	8002c10 <HAL_ADC_ConfigChannel>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8001634:	f000 fada 	bl	8001bec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001638:	4b12      	ldr	r3, [pc, #72]	@ (8001684 <MX_ADC1_Init+0x128>)
 800163a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800163c:	230c      	movs	r3, #12
 800163e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001640:	1d3b      	adds	r3, r7, #4
 8001642:	4619      	mov	r1, r3
 8001644:	480c      	ldr	r0, [pc, #48]	@ (8001678 <MX_ADC1_Init+0x11c>)
 8001646:	f001 fae3 	bl	8002c10 <HAL_ADC_ConfigChannel>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 8001650:	f000 facc 	bl	8001bec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001654:	4b0c      	ldr	r3, [pc, #48]	@ (8001688 <MX_ADC1_Init+0x12c>)
 8001656:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001658:	2312      	movs	r3, #18
 800165a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800165c:	1d3b      	adds	r3, r7, #4
 800165e:	4619      	mov	r1, r3
 8001660:	4805      	ldr	r0, [pc, #20]	@ (8001678 <MX_ADC1_Init+0x11c>)
 8001662:	f001 fad5 	bl	8002c10 <HAL_ADC_ConfigChannel>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <MX_ADC1_Init+0x114>
  {
    Error_Handler();
 800166c:	f000 fabe 	bl	8001bec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001670:	bf00      	nop
 8001672:	3728      	adds	r7, #40	@ 0x28
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	20000090 	.word	0x20000090
 800167c:	50040000 	.word	0x50040000
 8001680:	14f00020 	.word	0x14f00020
 8001684:	19200040 	.word	0x19200040
 8001688:	04300002 	.word	0x04300002

0800168c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b08a      	sub	sp, #40	@ 0x28
 8001690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN CAN1_Init 1 */
	CAN_FilterTypeDef sFilterConfig;

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001692:	4b37      	ldr	r3, [pc, #220]	@ (8001770 <MX_CAN1_Init+0xe4>)
 8001694:	4a37      	ldr	r2, [pc, #220]	@ (8001774 <MX_CAN1_Init+0xe8>)
 8001696:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 10;
 8001698:	4b35      	ldr	r3, [pc, #212]	@ (8001770 <MX_CAN1_Init+0xe4>)
 800169a:	220a      	movs	r2, #10
 800169c:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800169e:	4b34      	ldr	r3, [pc, #208]	@ (8001770 <MX_CAN1_Init+0xe4>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80016a4:	4b32      	ldr	r3, [pc, #200]	@ (8001770 <MX_CAN1_Init+0xe4>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 80016aa:	4b31      	ldr	r3, [pc, #196]	@ (8001770 <MX_CAN1_Init+0xe4>)
 80016ac:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 80016b0:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80016b2:	4b2f      	ldr	r3, [pc, #188]	@ (8001770 <MX_CAN1_Init+0xe4>)
 80016b4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80016b8:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80016ba:	4b2d      	ldr	r3, [pc, #180]	@ (8001770 <MX_CAN1_Init+0xe4>)
 80016bc:	2200      	movs	r2, #0
 80016be:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80016c0:	4b2b      	ldr	r3, [pc, #172]	@ (8001770 <MX_CAN1_Init+0xe4>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80016c6:	4b2a      	ldr	r3, [pc, #168]	@ (8001770 <MX_CAN1_Init+0xe4>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80016cc:	4b28      	ldr	r3, [pc, #160]	@ (8001770 <MX_CAN1_Init+0xe4>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80016d2:	4b27      	ldr	r3, [pc, #156]	@ (8001770 <MX_CAN1_Init+0xe4>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80016d8:	4b25      	ldr	r3, [pc, #148]	@ (8001770 <MX_CAN1_Init+0xe4>)
 80016da:	2200      	movs	r2, #0
 80016dc:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80016de:	4824      	ldr	r0, [pc, #144]	@ (8001770 <MX_CAN1_Init+0xe4>)
 80016e0:	f002 fa10 	bl	8003b04 <HAL_CAN_Init>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 80016ea:	f000 fa7f 	bl	8001bec <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  sFilterConfig.FilterBank = 0;
 80016ee:	2300      	movs	r3, #0
 80016f0:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80016f2:	2300      	movs	r3, #0
 80016f4:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80016f6:	2301      	movs	r3, #1
 80016f8:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 80016fa:	2300      	movs	r3, #0
 80016fc:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 80016fe:	2300      	movs	r3, #0
 8001700:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 8001702:	2300      	movs	r3, #0
 8001704:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 8001706:	2300      	movs	r3, #0
 8001708:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800170a:	2300      	movs	r3, #0
 800170c:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 800170e:	2301      	movs	r3, #1
 8001710:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 8001712:	230e      	movs	r3, #14
 8001714:	627b      	str	r3, [r7, #36]	@ 0x24

  if(HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK){
 8001716:	463b      	mov	r3, r7
 8001718:	4619      	mov	r1, r3
 800171a:	4815      	ldr	r0, [pc, #84]	@ (8001770 <MX_CAN1_Init+0xe4>)
 800171c:	f002 faed 	bl	8003cfa <HAL_CAN_ConfigFilter>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <MX_CAN1_Init+0x9e>
      /* Filter configuration Error */
      Error_Handler();
 8001726:	f000 fa61 	bl	8001bec <Error_Handler>
    }

  sFilterConfig.FilterBank = 1;
 800172a:	2301      	movs	r3, #1
 800172c:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800172e:	2300      	movs	r3, #0
 8001730:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001732:	2301      	movs	r3, #1
 8001734:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 8001736:	2300      	movs	r3, #0
 8001738:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 800173a:	2300      	movs	r3, #0
 800173c:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 800173e:	2300      	movs	r3, #0
 8001740:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 8001742:	2300      	movs	r3, #0
 8001744:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO1;
 8001746:	2301      	movs	r3, #1
 8001748:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 800174a:	2301      	movs	r3, #1
 800174c:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 800174e:	230e      	movs	r3, #14
 8001750:	627b      	str	r3, [r7, #36]	@ 0x24

    if(HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK){
 8001752:	463b      	mov	r3, r7
 8001754:	4619      	mov	r1, r3
 8001756:	4806      	ldr	r0, [pc, #24]	@ (8001770 <MX_CAN1_Init+0xe4>)
 8001758:	f002 facf 	bl	8003cfa <HAL_CAN_ConfigFilter>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <MX_CAN1_Init+0xda>
        /* Filter configuration Error */
        Error_Handler();
 8001762:	f000 fa43 	bl	8001bec <Error_Handler>
      }
  /* USER CODE END CAN1_Init 2 */

}
 8001766:	bf00      	nop
 8001768:	3728      	adds	r7, #40	@ 0x28
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	2000013c 	.word	0x2000013c
 8001774:	40006400 	.word	0x40006400

08001778 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b08a      	sub	sp, #40	@ 0x28
 800177c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800177e:	1d3b      	adds	r3, r7, #4
 8001780:	2224      	movs	r2, #36	@ 0x24
 8001782:	2100      	movs	r1, #0
 8001784:	4618      	mov	r0, r3
 8001786:	f007 f88b 	bl	80088a0 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800178a:	4b12      	ldr	r3, [pc, #72]	@ (80017d4 <MX_DAC1_Init+0x5c>)
 800178c:	4a12      	ldr	r2, [pc, #72]	@ (80017d8 <MX_DAC1_Init+0x60>)
 800178e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001790:	4810      	ldr	r0, [pc, #64]	@ (80017d4 <MX_DAC1_Init+0x5c>)
 8001792:	f003 f99c 	bl	8004ace <HAL_DAC_Init>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800179c:	f000 fa26 	bl	8001bec <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80017a0:	2300      	movs	r3, #0
 80017a2:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 80017a4:	2304      	movs	r3, #4
 80017a6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80017a8:	2300      	movs	r3, #0
 80017aa:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80017ac:	2300      	movs	r3, #0
 80017ae:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80017b0:	2300      	movs	r3, #0
 80017b2:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80017b4:	1d3b      	adds	r3, r7, #4
 80017b6:	2200      	movs	r2, #0
 80017b8:	4619      	mov	r1, r3
 80017ba:	4806      	ldr	r0, [pc, #24]	@ (80017d4 <MX_DAC1_Init+0x5c>)
 80017bc:	f003 faf8 	bl	8004db0 <HAL_DAC_ConfigChannel>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80017c6:	f000 fa11 	bl	8001bec <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80017ca:	bf00      	nop
 80017cc:	3728      	adds	r7, #40	@ 0x28
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	20000164 	.word	0x20000164
 80017d8:	40007400 	.word	0x40007400

080017dc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017e2:	1d3b      	adds	r3, r7, #4
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	605a      	str	r2, [r3, #4]
 80017ea:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80017ec:	4b14      	ldr	r3, [pc, #80]	@ (8001840 <MX_TIM6_Init+0x64>)
 80017ee:	4a15      	ldr	r2, [pc, #84]	@ (8001844 <MX_TIM6_Init+0x68>)
 80017f0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80017f2:	4b13      	ldr	r3, [pc, #76]	@ (8001840 <MX_TIM6_Init+0x64>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017f8:	4b11      	ldr	r3, [pc, #68]	@ (8001840 <MX_TIM6_Init+0x64>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80017fe:	4b10      	ldr	r3, [pc, #64]	@ (8001840 <MX_TIM6_Init+0x64>)
 8001800:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001804:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001806:	4b0e      	ldr	r3, [pc, #56]	@ (8001840 <MX_TIM6_Init+0x64>)
 8001808:	2200      	movs	r2, #0
 800180a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800180c:	480c      	ldr	r0, [pc, #48]	@ (8001840 <MX_TIM6_Init+0x64>)
 800180e:	f005 fbfb 	bl	8007008 <HAL_TIM_Base_Init>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001818:	f000 f9e8 	bl	8001bec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800181c:	2320      	movs	r3, #32
 800181e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001820:	2300      	movs	r3, #0
 8001822:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001824:	1d3b      	adds	r3, r7, #4
 8001826:	4619      	mov	r1, r3
 8001828:	4805      	ldr	r0, [pc, #20]	@ (8001840 <MX_TIM6_Init+0x64>)
 800182a:	f005 fe79 	bl	8007520 <HAL_TIMEx_MasterConfigSynchronization>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001834:	f000 f9da 	bl	8001bec <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001838:	bf00      	nop
 800183a:	3710      	adds	r7, #16
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	200001c0 	.word	0x200001c0
 8001844:	40001000 	.word	0x40001000

08001848 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800184c:	4b14      	ldr	r3, [pc, #80]	@ (80018a0 <MX_USART2_UART_Init+0x58>)
 800184e:	4a15      	ldr	r2, [pc, #84]	@ (80018a4 <MX_USART2_UART_Init+0x5c>)
 8001850:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001852:	4b13      	ldr	r3, [pc, #76]	@ (80018a0 <MX_USART2_UART_Init+0x58>)
 8001854:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001858:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800185a:	4b11      	ldr	r3, [pc, #68]	@ (80018a0 <MX_USART2_UART_Init+0x58>)
 800185c:	2200      	movs	r2, #0
 800185e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001860:	4b0f      	ldr	r3, [pc, #60]	@ (80018a0 <MX_USART2_UART_Init+0x58>)
 8001862:	2200      	movs	r2, #0
 8001864:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001866:	4b0e      	ldr	r3, [pc, #56]	@ (80018a0 <MX_USART2_UART_Init+0x58>)
 8001868:	2200      	movs	r2, #0
 800186a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800186c:	4b0c      	ldr	r3, [pc, #48]	@ (80018a0 <MX_USART2_UART_Init+0x58>)
 800186e:	220c      	movs	r2, #12
 8001870:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001872:	4b0b      	ldr	r3, [pc, #44]	@ (80018a0 <MX_USART2_UART_Init+0x58>)
 8001874:	2200      	movs	r2, #0
 8001876:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001878:	4b09      	ldr	r3, [pc, #36]	@ (80018a0 <MX_USART2_UART_Init+0x58>)
 800187a:	2200      	movs	r2, #0
 800187c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800187e:	4b08      	ldr	r3, [pc, #32]	@ (80018a0 <MX_USART2_UART_Init+0x58>)
 8001880:	2200      	movs	r2, #0
 8001882:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001884:	4b06      	ldr	r3, [pc, #24]	@ (80018a0 <MX_USART2_UART_Init+0x58>)
 8001886:	2200      	movs	r2, #0
 8001888:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800188a:	4805      	ldr	r0, [pc, #20]	@ (80018a0 <MX_USART2_UART_Init+0x58>)
 800188c:	f005 feee 	bl	800766c <HAL_UART_Init>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001896:	f000 f9a9 	bl	8001bec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	2000020c 	.word	0x2000020c
 80018a4:	40004400 	.word	0x40004400

080018a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018ae:	4b10      	ldr	r3, [pc, #64]	@ (80018f0 <MX_DMA_Init+0x48>)
 80018b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018b2:	4a0f      	ldr	r2, [pc, #60]	@ (80018f0 <MX_DMA_Init+0x48>)
 80018b4:	f043 0301 	orr.w	r3, r3, #1
 80018b8:	6493      	str	r3, [r2, #72]	@ 0x48
 80018ba:	4b0d      	ldr	r3, [pc, #52]	@ (80018f0 <MX_DMA_Init+0x48>)
 80018bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	607b      	str	r3, [r7, #4]
 80018c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80018c6:	2200      	movs	r2, #0
 80018c8:	2100      	movs	r1, #0
 80018ca:	200b      	movs	r0, #11
 80018cc:	f003 f8c9 	bl	8004a62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80018d0:	200b      	movs	r0, #11
 80018d2:	f003 f8e2 	bl	8004a9a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80018d6:	2200      	movs	r2, #0
 80018d8:	2100      	movs	r1, #0
 80018da:	200d      	movs	r0, #13
 80018dc:	f003 f8c1 	bl	8004a62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80018e0:	200d      	movs	r0, #13
 80018e2:	f003 f8da 	bl	8004a9a <HAL_NVIC_EnableIRQ>

}
 80018e6:	bf00      	nop
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	40021000 	.word	0x40021000

080018f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b08a      	sub	sp, #40	@ 0x28
 80018f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018fa:	f107 0314 	add.w	r3, r7, #20
 80018fe:	2200      	movs	r2, #0
 8001900:	601a      	str	r2, [r3, #0]
 8001902:	605a      	str	r2, [r3, #4]
 8001904:	609a      	str	r2, [r3, #8]
 8001906:	60da      	str	r2, [r3, #12]
 8001908:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800190a:	4b4b      	ldr	r3, [pc, #300]	@ (8001a38 <MX_GPIO_Init+0x144>)
 800190c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800190e:	4a4a      	ldr	r2, [pc, #296]	@ (8001a38 <MX_GPIO_Init+0x144>)
 8001910:	f043 0304 	orr.w	r3, r3, #4
 8001914:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001916:	4b48      	ldr	r3, [pc, #288]	@ (8001a38 <MX_GPIO_Init+0x144>)
 8001918:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800191a:	f003 0304 	and.w	r3, r3, #4
 800191e:	613b      	str	r3, [r7, #16]
 8001920:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001922:	4b45      	ldr	r3, [pc, #276]	@ (8001a38 <MX_GPIO_Init+0x144>)
 8001924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001926:	4a44      	ldr	r2, [pc, #272]	@ (8001a38 <MX_GPIO_Init+0x144>)
 8001928:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800192c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800192e:	4b42      	ldr	r3, [pc, #264]	@ (8001a38 <MX_GPIO_Init+0x144>)
 8001930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001932:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800193a:	4b3f      	ldr	r3, [pc, #252]	@ (8001a38 <MX_GPIO_Init+0x144>)
 800193c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800193e:	4a3e      	ldr	r2, [pc, #248]	@ (8001a38 <MX_GPIO_Init+0x144>)
 8001940:	f043 0301 	orr.w	r3, r3, #1
 8001944:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001946:	4b3c      	ldr	r3, [pc, #240]	@ (8001a38 <MX_GPIO_Init+0x144>)
 8001948:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800194a:	f003 0301 	and.w	r3, r3, #1
 800194e:	60bb      	str	r3, [r7, #8]
 8001950:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001952:	4b39      	ldr	r3, [pc, #228]	@ (8001a38 <MX_GPIO_Init+0x144>)
 8001954:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001956:	4a38      	ldr	r2, [pc, #224]	@ (8001a38 <MX_GPIO_Init+0x144>)
 8001958:	f043 0302 	orr.w	r3, r3, #2
 800195c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800195e:	4b36      	ldr	r3, [pc, #216]	@ (8001a38 <MX_GPIO_Init+0x144>)
 8001960:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	607b      	str	r3, [r7, #4]
 8001968:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800196a:	2200      	movs	r2, #0
 800196c:	2120      	movs	r1, #32
 800196e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001972:	f003 fff9 	bl	8005968 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_O_GPIO_Port, SD_O_Pin, GPIO_PIN_RESET);
 8001976:	2200      	movs	r2, #0
 8001978:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800197c:	482f      	ldr	r0, [pc, #188]	@ (8001a3c <MX_GPIO_Init+0x148>)
 800197e:	f003 fff3 	bl	8005968 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BUZZER_Pin|BrakeLight_Pin, GPIO_PIN_RESET);
 8001982:	2200      	movs	r2, #0
 8001984:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
 8001988:	482d      	ldr	r0, [pc, #180]	@ (8001a40 <MX_GPIO_Init+0x14c>)
 800198a:	f003 ffed 	bl	8005968 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800198e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001992:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001994:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001998:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199a:	2300      	movs	r3, #0
 800199c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800199e:	f107 0314 	add.w	r3, r7, #20
 80019a2:	4619      	mov	r1, r3
 80019a4:	4826      	ldr	r0, [pc, #152]	@ (8001a40 <MX_GPIO_Init+0x14c>)
 80019a6:	f003 fe35 	bl	8005614 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80019aa:	2320      	movs	r3, #32
 80019ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ae:	2301      	movs	r3, #1
 80019b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b2:	2300      	movs	r3, #0
 80019b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b6:	2300      	movs	r3, #0
 80019b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80019ba:	f107 0314 	add.w	r3, r7, #20
 80019be:	4619      	mov	r1, r3
 80019c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019c4:	f003 fe26 	bl	8005614 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_O_Pin */
  GPIO_InitStruct.Pin = SD_O_Pin;
 80019c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80019cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ce:	2301      	movs	r3, #1
 80019d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d2:	2300      	movs	r3, #0
 80019d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d6:	2300      	movs	r3, #0
 80019d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_O_GPIO_Port, &GPIO_InitStruct);
 80019da:	f107 0314 	add.w	r3, r7, #20
 80019de:	4619      	mov	r1, r3
 80019e0:	4816      	ldr	r0, [pc, #88]	@ (8001a3c <MX_GPIO_Init+0x148>)
 80019e2:	f003 fe17 	bl	8005614 <HAL_GPIO_Init>

  /*Configure GPIO pin : RUNON_Pin */
  GPIO_InitStruct.Pin = RUNON_Pin;
 80019e6:	2380      	movs	r3, #128	@ 0x80
 80019e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019ea:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80019ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f0:	2300      	movs	r3, #0
 80019f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RUNON_GPIO_Port, &GPIO_InitStruct);
 80019f4:	f107 0314 	add.w	r3, r7, #20
 80019f8:	4619      	mov	r1, r3
 80019fa:	4811      	ldr	r0, [pc, #68]	@ (8001a40 <MX_GPIO_Init+0x14c>)
 80019fc:	f003 fe0a 	bl	8005614 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUZZER_Pin BrakeLight_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin|BrakeLight_Pin;
 8001a00:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001a04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a06:	2301      	movs	r3, #1
 8001a08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a12:	f107 0314 	add.w	r3, r7, #20
 8001a16:	4619      	mov	r1, r3
 8001a18:	4809      	ldr	r0, [pc, #36]	@ (8001a40 <MX_GPIO_Init+0x14c>)
 8001a1a:	f003 fdfb 	bl	8005614 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001a1e:	2200      	movs	r2, #0
 8001a20:	2100      	movs	r1, #0
 8001a22:	2028      	movs	r0, #40	@ 0x28
 8001a24:	f003 f81d 	bl	8004a62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001a28:	2028      	movs	r0, #40	@ 0x28
 8001a2a:	f003 f836 	bl	8004a9a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a2e:	bf00      	nop
 8001a30:	3728      	adds	r7, #40	@ 0x28
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	48000400 	.word	0x48000400
 8001a40:	48000800 	.word	0x48000800
 8001a44:	00000000 	.word	0x00000000

08001a48 <dacInput>:
//	data[1] = raw2;
//
//	return out;
//}

uint32_t dacInput(uint16_t adcinput1, uint16_t adcinput2){
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b086      	sub	sp, #24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	4603      	mov	r3, r0
 8001a50:	460a      	mov	r2, r1
 8001a52:	80fb      	strh	r3, [r7, #6]
 8001a54:	4613      	mov	r3, r2
 8001a56:	80bb      	strh	r3, [r7, #4]
	static uint16_t counter = 0;
	static uint32_t rawcheck1 = 0;
	static uint32_t rawcheck2 = 0;

	uint32_t out = 0;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	617b      	str	r3, [r7, #20]

	uint32_t raw1 = 0.72*((1.208)*adcinput1)+748;
 8001a5c:	88fb      	ldrh	r3, [r7, #6]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7fe fd60 	bl	8000524 <__aeabi_i2d>
 8001a64:	a35d      	add	r3, pc, #372	@ (adr r3, 8001bdc <dacInput+0x194>)
 8001a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a6a:	f7fe fdc5 	bl	80005f8 <__aeabi_dmul>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	460b      	mov	r3, r1
 8001a72:	4610      	mov	r0, r2
 8001a74:	4619      	mov	r1, r3
 8001a76:	a35b      	add	r3, pc, #364	@ (adr r3, 8001be4 <dacInput+0x19c>)
 8001a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a7c:	f7fe fdbc 	bl	80005f8 <__aeabi_dmul>
 8001a80:	4602      	mov	r2, r0
 8001a82:	460b      	mov	r3, r1
 8001a84:	4610      	mov	r0, r2
 8001a86:	4619      	mov	r1, r3
 8001a88:	f04f 0200 	mov.w	r2, #0
 8001a8c:	4b4c      	ldr	r3, [pc, #304]	@ (8001bc0 <dacInput+0x178>)
 8001a8e:	f7fe fbfd 	bl	800028c <__adddf3>
 8001a92:	4602      	mov	r2, r0
 8001a94:	460b      	mov	r3, r1
 8001a96:	4610      	mov	r0, r2
 8001a98:	4619      	mov	r1, r3
 8001a9a:	f7fe ffbf 	bl	8000a1c <__aeabi_d2uiz>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	613b      	str	r3, [r7, #16]
	uint32_t raw2 = adcinput2;
 8001aa2:	88bb      	ldrh	r3, [r7, #4]
 8001aa4:	60fb      	str	r3, [r7, #12]

	data[0] = raw1;
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	b29a      	uxth	r2, r3
 8001aaa:	4b46      	ldr	r3, [pc, #280]	@ (8001bc4 <dacInput+0x17c>)
 8001aac:	801a      	strh	r2, [r3, #0]
	data[1] = raw2;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	b29a      	uxth	r2, r3
 8001ab2:	4b44      	ldr	r3, [pc, #272]	@ (8001bc4 <dacInput+0x17c>)
 8001ab4:	805a      	strh	r2, [r3, #2]

	uint8_t deviationCheck = ((abs((float) raw1 - (float) raw2) / 4095.00))* 100;
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	ee07 3a90 	vmov	s15, r3
 8001abc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	ee07 3a90 	vmov	s15, r3
 8001ac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001aca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ace:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ad2:	ee17 3a90 	vmov	r3, s15
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	bfb8      	it	lt
 8001ada:	425b      	neglt	r3, r3
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7fe fd21 	bl	8000524 <__aeabi_i2d>
 8001ae2:	a335      	add	r3, pc, #212	@ (adr r3, 8001bb8 <dacInput+0x170>)
 8001ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ae8:	f7fe feb0 	bl	800084c <__aeabi_ddiv>
 8001aec:	4602      	mov	r2, r0
 8001aee:	460b      	mov	r3, r1
 8001af0:	4610      	mov	r0, r2
 8001af2:	4619      	mov	r1, r3
 8001af4:	f04f 0200 	mov.w	r2, #0
 8001af8:	4b33      	ldr	r3, [pc, #204]	@ (8001bc8 <dacInput+0x180>)
 8001afa:	f7fe fd7d 	bl	80005f8 <__aeabi_dmul>
 8001afe:	4602      	mov	r2, r0
 8001b00:	460b      	mov	r3, r1
 8001b02:	4610      	mov	r0, r2
 8001b04:	4619      	mov	r1, r3
 8001b06:	f7fe ff89 	bl	8000a1c <__aeabi_d2uiz>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	72fb      	strb	r3, [r7, #11]

	data[2] = (uint16_t) deviationCheck;
 8001b0e:	7afb      	ldrb	r3, [r7, #11]
 8001b10:	b29a      	uxth	r2, r3
 8001b12:	4b2c      	ldr	r3, [pc, #176]	@ (8001bc4 <dacInput+0x17c>)
 8001b14:	809a      	strh	r2, [r3, #4]

	//check if both values are same for 1 second
	if ((raw1 != 0) && (raw2 != 0) && raw1 == raw2) {
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d034      	beq.n	8001b86 <dacInput+0x13e>
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d031      	beq.n	8001b86 <dacInput+0x13e>
 8001b22:	693a      	ldr	r2, [r7, #16]
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d12d      	bne.n	8001b86 <dacInput+0x13e>
		//check if raw1 is continuously the same
		if ((raw1 != rawcheck1) && (raw2 != rawcheck2)) {
 8001b2a:	4b28      	ldr	r3, [pc, #160]	@ (8001bcc <dacInput+0x184>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d007      	beq.n	8001b44 <dacInput+0xfc>
 8001b34:	4b26      	ldr	r3, [pc, #152]	@ (8001bd0 <dacInput+0x188>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	68fa      	ldr	r2, [r7, #12]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d002      	beq.n	8001b44 <dacInput+0xfc>
			counter = 0;
 8001b3e:	4b25      	ldr	r3, [pc, #148]	@ (8001bd4 <dacInput+0x18c>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	801a      	strh	r2, [r3, #0]
		}
		//set static value to be compared later
		rawcheck1 = raw1;
 8001b44:	4a21      	ldr	r2, [pc, #132]	@ (8001bcc <dacInput+0x184>)
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	6013      	str	r3, [r2, #0]
		rawcheck2 = raw2;
 8001b4a:	4a21      	ldr	r2, [pc, #132]	@ (8001bd0 <dacInput+0x188>)
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	6013      	str	r3, [r2, #0]

		counter++;
 8001b50:	4b20      	ldr	r3, [pc, #128]	@ (8001bd4 <dacInput+0x18c>)
 8001b52:	881b      	ldrh	r3, [r3, #0]
 8001b54:	3301      	adds	r3, #1
 8001b56:	b29a      	uxth	r2, r3
 8001b58:	4b1e      	ldr	r3, [pc, #120]	@ (8001bd4 <dacInput+0x18c>)
 8001b5a:	801a      	strh	r2, [r3, #0]

		if (counter > 999) {
 8001b5c:	4b1d      	ldr	r3, [pc, #116]	@ (8001bd4 <dacInput+0x18c>)
 8001b5e:	881b      	ldrh	r3, [r3, #0]
 8001b60:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001b64:	d320      	bcc.n	8001ba8 <dacInput+0x160>
		//compare to see if they are still the same
			if (rawcheck1 == raw1 && rawcheck2 == raw2) {
 8001b66:	4b19      	ldr	r3, [pc, #100]	@ (8001bcc <dacInput+0x184>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	693a      	ldr	r2, [r7, #16]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d106      	bne.n	8001b7e <dacInput+0x136>
 8001b70:	4b17      	ldr	r3, [pc, #92]	@ (8001bd0 <dacInput+0x188>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	68fa      	ldr	r2, [r7, #12]
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d101      	bne.n	8001b7e <dacInput+0x136>
				out = 0;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	617b      	str	r3, [r7, #20]
				//LOGS((uint8_t*)potShortPedal,strlen(potShortPedal));
				//Error_Handler();
			}
			counter = 0;
 8001b7e:	4b15      	ldr	r3, [pc, #84]	@ (8001bd4 <dacInput+0x18c>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	801a      	strh	r2, [r3, #0]
		if (counter > 999) {
 8001b84:	e010      	b.n	8001ba8 <dacInput+0x160>
			}
		}
	//check deviation
	else if (deviationCheck > 10) {
 8001b86:	7afb      	ldrb	r3, [r7, #11]
 8001b88:	2b0a      	cmp	r3, #10
 8001b8a:	d908      	bls.n	8001b9e <dacInput+0x156>
		HAL_GPIO_WritePin(SD_O_GPIO_Port, SD_O_Pin, GPIO_PIN_SET);
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b92:	4811      	ldr	r0, [pc, #68]	@ (8001bd8 <dacInput+0x190>)
 8001b94:	f003 fee8 	bl	8005968 <HAL_GPIO_WritePin>
		out = 0;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	617b      	str	r3, [r7, #20]
 8001b9c:	e004      	b.n	8001ba8 <dacInput+0x160>
		//Error_Handler();
	}

	//regular output function(average value)
	else {
		out = ((raw1 + raw2) / 2);
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	085b      	lsrs	r3, r3, #1
 8001ba6:	617b      	str	r3, [r7, #20]
	}
	return out;
 8001ba8:	697b      	ldr	r3, [r7, #20]

}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3718      	adds	r7, #24
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	f3af 8000 	nop.w
 8001bb8:	00000000 	.word	0x00000000
 8001bbc:	40affe00 	.word	0x40affe00
 8001bc0:	40876000 	.word	0x40876000
 8001bc4:	200002bc 	.word	0x200002bc
 8001bc8:	40590000 	.word	0x40590000
 8001bcc:	20000334 	.word	0x20000334
 8001bd0:	20000338 	.word	0x20000338
 8001bd4:	2000033c 	.word	0x2000033c
 8001bd8:	48000400 	.word	0x48000400
 8001bdc:	ced91687 	.word	0xced91687
 8001be0:	3ff353f7 	.word	0x3ff353f7
 8001be4:	70a3d70a 	.word	0x70a3d70a
 8001be8:	3fe70a3d 	.word	0x3fe70a3d

08001bec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bf0:	b672      	cpsid	i
}
 8001bf2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  ErrorLedBlink();
 8001bf4:	f7ff fb9c 	bl	8001330 <ErrorLedBlink>
 8001bf8:	e7fc      	b.n	8001bf4 <Error_Handler+0x8>
	...

08001bfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c02:	4b0f      	ldr	r3, [pc, #60]	@ (8001c40 <HAL_MspInit+0x44>)
 8001c04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c06:	4a0e      	ldr	r2, [pc, #56]	@ (8001c40 <HAL_MspInit+0x44>)
 8001c08:	f043 0301 	orr.w	r3, r3, #1
 8001c0c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c0e:	4b0c      	ldr	r3, [pc, #48]	@ (8001c40 <HAL_MspInit+0x44>)
 8001c10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	607b      	str	r3, [r7, #4]
 8001c18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c1a:	4b09      	ldr	r3, [pc, #36]	@ (8001c40 <HAL_MspInit+0x44>)
 8001c1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c1e:	4a08      	ldr	r2, [pc, #32]	@ (8001c40 <HAL_MspInit+0x44>)
 8001c20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c24:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c26:	4b06      	ldr	r3, [pc, #24]	@ (8001c40 <HAL_MspInit+0x44>)
 8001c28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c2e:	603b      	str	r3, [r7, #0]
 8001c30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c32:	bf00      	nop
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	40021000 	.word	0x40021000

08001c44 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b0ac      	sub	sp, #176	@ 0xb0
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c4c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	605a      	str	r2, [r3, #4]
 8001c56:	609a      	str	r2, [r3, #8]
 8001c58:	60da      	str	r2, [r3, #12]
 8001c5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c5c:	f107 0314 	add.w	r3, r7, #20
 8001c60:	2288      	movs	r2, #136	@ 0x88
 8001c62:	2100      	movs	r1, #0
 8001c64:	4618      	mov	r0, r3
 8001c66:	f006 fe1b 	bl	80088a0 <memset>
  if(hadc->Instance==ADC1)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a4b      	ldr	r2, [pc, #300]	@ (8001d9c <HAL_ADC_MspInit+0x158>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	f040 808f 	bne.w	8001d94 <HAL_ADC_MspInit+0x150>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001c76:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001c7a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001c7c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001c80:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8001c84:	2303      	movs	r3, #3
 8001c86:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8001c8c:	2310      	movs	r3, #16
 8001c8e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001c90:	2307      	movs	r3, #7
 8001c92:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001c94:	2302      	movs	r3, #2
 8001c96:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001c98:	2302      	movs	r3, #2
 8001c9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001c9c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001ca0:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ca2:	f107 0314 	add.w	r3, r7, #20
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f004 fcf2 	bl	8006690 <HAL_RCCEx_PeriphCLKConfig>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <HAL_ADC_MspInit+0x72>
    {
      Error_Handler();
 8001cb2:	f7ff ff9b 	bl	8001bec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001cb6:	4b3a      	ldr	r3, [pc, #232]	@ (8001da0 <HAL_ADC_MspInit+0x15c>)
 8001cb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cba:	4a39      	ldr	r2, [pc, #228]	@ (8001da0 <HAL_ADC_MspInit+0x15c>)
 8001cbc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001cc0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cc2:	4b37      	ldr	r3, [pc, #220]	@ (8001da0 <HAL_ADC_MspInit+0x15c>)
 8001cc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cc6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001cca:	613b      	str	r3, [r7, #16]
 8001ccc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cce:	4b34      	ldr	r3, [pc, #208]	@ (8001da0 <HAL_ADC_MspInit+0x15c>)
 8001cd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cd2:	4a33      	ldr	r2, [pc, #204]	@ (8001da0 <HAL_ADC_MspInit+0x15c>)
 8001cd4:	f043 0304 	orr.w	r3, r3, #4
 8001cd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cda:	4b31      	ldr	r3, [pc, #196]	@ (8001da0 <HAL_ADC_MspInit+0x15c>)
 8001cdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cde:	f003 0304 	and.w	r3, r3, #4
 8001ce2:	60fb      	str	r3, [r7, #12]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce6:	4b2e      	ldr	r3, [pc, #184]	@ (8001da0 <HAL_ADC_MspInit+0x15c>)
 8001ce8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cea:	4a2d      	ldr	r2, [pc, #180]	@ (8001da0 <HAL_ADC_MspInit+0x15c>)
 8001cec:	f043 0301 	orr.w	r3, r3, #1
 8001cf0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cf2:	4b2b      	ldr	r3, [pc, #172]	@ (8001da0 <HAL_ADC_MspInit+0x15c>)
 8001cf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	60bb      	str	r3, [r7, #8]
 8001cfc:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001d04:	230b      	movs	r3, #11
 8001d06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d10:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001d14:	4619      	mov	r1, r3
 8001d16:	4823      	ldr	r0, [pc, #140]	@ (8001da4 <HAL_ADC_MspInit+0x160>)
 8001d18:	f003 fc7c 	bl	8005614 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001d22:	230b      	movs	r3, #11
 8001d24:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d2e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001d32:	4619      	mov	r1, r3
 8001d34:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d38:	f003 fc6c 	bl	8005614 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001d3c:	4b1a      	ldr	r3, [pc, #104]	@ (8001da8 <HAL_ADC_MspInit+0x164>)
 8001d3e:	4a1b      	ldr	r2, [pc, #108]	@ (8001dac <HAL_ADC_MspInit+0x168>)
 8001d40:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001d42:	4b19      	ldr	r3, [pc, #100]	@ (8001da8 <HAL_ADC_MspInit+0x164>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d48:	4b17      	ldr	r3, [pc, #92]	@ (8001da8 <HAL_ADC_MspInit+0x164>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d4e:	4b16      	ldr	r3, [pc, #88]	@ (8001da8 <HAL_ADC_MspInit+0x164>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001d54:	4b14      	ldr	r3, [pc, #80]	@ (8001da8 <HAL_ADC_MspInit+0x164>)
 8001d56:	2280      	movs	r2, #128	@ 0x80
 8001d58:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001d5a:	4b13      	ldr	r3, [pc, #76]	@ (8001da8 <HAL_ADC_MspInit+0x164>)
 8001d5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d60:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001d62:	4b11      	ldr	r3, [pc, #68]	@ (8001da8 <HAL_ADC_MspInit+0x164>)
 8001d64:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001d68:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001d6a:	4b0f      	ldr	r3, [pc, #60]	@ (8001da8 <HAL_ADC_MspInit+0x164>)
 8001d6c:	2220      	movs	r2, #32
 8001d6e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001d70:	4b0d      	ldr	r3, [pc, #52]	@ (8001da8 <HAL_ADC_MspInit+0x164>)
 8001d72:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8001d76:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001d78:	480b      	ldr	r0, [pc, #44]	@ (8001da8 <HAL_ADC_MspInit+0x164>)
 8001d7a:	f003 f9d5 	bl	8005128 <HAL_DMA_Init>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <HAL_ADC_MspInit+0x144>
    {
      Error_Handler();
 8001d84:	f7ff ff32 	bl	8001bec <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	4a07      	ldr	r2, [pc, #28]	@ (8001da8 <HAL_ADC_MspInit+0x164>)
 8001d8c:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001d8e:	4a06      	ldr	r2, [pc, #24]	@ (8001da8 <HAL_ADC_MspInit+0x164>)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001d94:	bf00      	nop
 8001d96:	37b0      	adds	r7, #176	@ 0xb0
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	50040000 	.word	0x50040000
 8001da0:	40021000 	.word	0x40021000
 8001da4:	48000800 	.word	0x48000800
 8001da8:	200000f4 	.word	0x200000f4
 8001dac:	40020008 	.word	0x40020008

08001db0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b08a      	sub	sp, #40	@ 0x28
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db8:	f107 0314 	add.w	r3, r7, #20
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	605a      	str	r2, [r3, #4]
 8001dc2:	609a      	str	r2, [r3, #8]
 8001dc4:	60da      	str	r2, [r3, #12]
 8001dc6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a31      	ldr	r2, [pc, #196]	@ (8001e94 <HAL_CAN_MspInit+0xe4>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d15b      	bne.n	8001e8a <HAL_CAN_MspInit+0xda>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001dd2:	4b31      	ldr	r3, [pc, #196]	@ (8001e98 <HAL_CAN_MspInit+0xe8>)
 8001dd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dd6:	4a30      	ldr	r2, [pc, #192]	@ (8001e98 <HAL_CAN_MspInit+0xe8>)
 8001dd8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001ddc:	6593      	str	r3, [r2, #88]	@ 0x58
 8001dde:	4b2e      	ldr	r3, [pc, #184]	@ (8001e98 <HAL_CAN_MspInit+0xe8>)
 8001de0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001de2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001de6:	613b      	str	r3, [r7, #16]
 8001de8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dea:	4b2b      	ldr	r3, [pc, #172]	@ (8001e98 <HAL_CAN_MspInit+0xe8>)
 8001dec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dee:	4a2a      	ldr	r2, [pc, #168]	@ (8001e98 <HAL_CAN_MspInit+0xe8>)
 8001df0:	f043 0301 	orr.w	r3, r3, #1
 8001df4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001df6:	4b28      	ldr	r3, [pc, #160]	@ (8001e98 <HAL_CAN_MspInit+0xe8>)
 8001df8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	60fb      	str	r3, [r7, #12]
 8001e00:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001e02:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001e06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e08:	2302      	movs	r3, #2
 8001e0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e10:	2303      	movs	r3, #3
 8001e12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001e14:	2309      	movs	r3, #9
 8001e16:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e18:	f107 0314 	add.w	r3, r7, #20
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e22:	f003 fbf7 	bl	8005614 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001e26:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e30:	2301      	movs	r3, #1
 8001e32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e34:	2303      	movs	r3, #3
 8001e36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001e38:	2309      	movs	r3, #9
 8001e3a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e3c:	f107 0314 	add.w	r3, r7, #20
 8001e40:	4619      	mov	r1, r3
 8001e42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e46:	f003 fbe5 	bl	8005614 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 1, 0);
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	2101      	movs	r1, #1
 8001e4e:	2013      	movs	r0, #19
 8001e50:	f002 fe07 	bl	8004a62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001e54:	2013      	movs	r0, #19
 8001e56:	f002 fe20 	bl	8004a9a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 1, 0);
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	2101      	movs	r1, #1
 8001e5e:	2014      	movs	r0, #20
 8001e60:	f002 fdff 	bl	8004a62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001e64:	2014      	movs	r0, #20
 8001e66:	f002 fe18 	bl	8004a9a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 1, 0);
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	2101      	movs	r1, #1
 8001e6e:	2015      	movs	r0, #21
 8001e70:	f002 fdf7 	bl	8004a62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001e74:	2015      	movs	r0, #21
 8001e76:	f002 fe10 	bl	8004a9a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 1, 0);
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	2101      	movs	r1, #1
 8001e7e:	2016      	movs	r0, #22
 8001e80:	f002 fdef 	bl	8004a62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8001e84:	2016      	movs	r0, #22
 8001e86:	f002 fe08 	bl	8004a9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001e8a:	bf00      	nop
 8001e8c:	3728      	adds	r7, #40	@ 0x28
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	40006400 	.word	0x40006400
 8001e98:	40021000 	.word	0x40021000

08001e9c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b08a      	sub	sp, #40	@ 0x28
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea4:	f107 0314 	add.w	r3, r7, #20
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]
 8001eac:	605a      	str	r2, [r3, #4]
 8001eae:	609a      	str	r2, [r3, #8]
 8001eb0:	60da      	str	r2, [r3, #12]
 8001eb2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a2f      	ldr	r2, [pc, #188]	@ (8001f78 <HAL_DAC_MspInit+0xdc>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d158      	bne.n	8001f70 <HAL_DAC_MspInit+0xd4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001ebe:	4b2f      	ldr	r3, [pc, #188]	@ (8001f7c <HAL_DAC_MspInit+0xe0>)
 8001ec0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ec2:	4a2e      	ldr	r2, [pc, #184]	@ (8001f7c <HAL_DAC_MspInit+0xe0>)
 8001ec4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001ec8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001eca:	4b2c      	ldr	r3, [pc, #176]	@ (8001f7c <HAL_DAC_MspInit+0xe0>)
 8001ecc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ece:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001ed2:	613b      	str	r3, [r7, #16]
 8001ed4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed6:	4b29      	ldr	r3, [pc, #164]	@ (8001f7c <HAL_DAC_MspInit+0xe0>)
 8001ed8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eda:	4a28      	ldr	r2, [pc, #160]	@ (8001f7c <HAL_DAC_MspInit+0xe0>)
 8001edc:	f043 0301 	orr.w	r3, r3, #1
 8001ee0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ee2:	4b26      	ldr	r3, [pc, #152]	@ (8001f7c <HAL_DAC_MspInit+0xe0>)
 8001ee4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ee6:	f003 0301 	and.w	r3, r3, #1
 8001eea:	60fb      	str	r3, [r7, #12]
 8001eec:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001eee:	2310      	movs	r3, #16
 8001ef0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001efa:	f107 0314 	add.w	r3, r7, #20
 8001efe:	4619      	mov	r1, r3
 8001f00:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f04:	f003 fb86 	bl	8005614 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8001f08:	4b1d      	ldr	r3, [pc, #116]	@ (8001f80 <HAL_DAC_MspInit+0xe4>)
 8001f0a:	4a1e      	ldr	r2, [pc, #120]	@ (8001f84 <HAL_DAC_MspInit+0xe8>)
 8001f0c:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 8001f0e:	4b1c      	ldr	r3, [pc, #112]	@ (8001f80 <HAL_DAC_MspInit+0xe4>)
 8001f10:	2206      	movs	r2, #6
 8001f12:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f14:	4b1a      	ldr	r3, [pc, #104]	@ (8001f80 <HAL_DAC_MspInit+0xe4>)
 8001f16:	2210      	movs	r2, #16
 8001f18:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f1a:	4b19      	ldr	r3, [pc, #100]	@ (8001f80 <HAL_DAC_MspInit+0xe4>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001f20:	4b17      	ldr	r3, [pc, #92]	@ (8001f80 <HAL_DAC_MspInit+0xe4>)
 8001f22:	2280      	movs	r2, #128	@ 0x80
 8001f24:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001f26:	4b16      	ldr	r3, [pc, #88]	@ (8001f80 <HAL_DAC_MspInit+0xe4>)
 8001f28:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f2c:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001f2e:	4b14      	ldr	r3, [pc, #80]	@ (8001f80 <HAL_DAC_MspInit+0xe4>)
 8001f30:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f34:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8001f36:	4b12      	ldr	r3, [pc, #72]	@ (8001f80 <HAL_DAC_MspInit+0xe4>)
 8001f38:	2220      	movs	r2, #32
 8001f3a:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8001f3c:	4b10      	ldr	r3, [pc, #64]	@ (8001f80 <HAL_DAC_MspInit+0xe4>)
 8001f3e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f42:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8001f44:	480e      	ldr	r0, [pc, #56]	@ (8001f80 <HAL_DAC_MspInit+0xe4>)
 8001f46:	f003 f8ef 	bl	8005128 <HAL_DMA_Init>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d001      	beq.n	8001f54 <HAL_DAC_MspInit+0xb8>
    {
      Error_Handler();
 8001f50:	f7ff fe4c 	bl	8001bec <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4a0a      	ldr	r2, [pc, #40]	@ (8001f80 <HAL_DAC_MspInit+0xe4>)
 8001f58:	609a      	str	r2, [r3, #8]
 8001f5a:	4a09      	ldr	r2, [pc, #36]	@ (8001f80 <HAL_DAC_MspInit+0xe4>)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001f60:	2200      	movs	r2, #0
 8001f62:	2100      	movs	r1, #0
 8001f64:	2036      	movs	r0, #54	@ 0x36
 8001f66:	f002 fd7c 	bl	8004a62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001f6a:	2036      	movs	r0, #54	@ 0x36
 8001f6c:	f002 fd95 	bl	8004a9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001f70:	bf00      	nop
 8001f72:	3728      	adds	r7, #40	@ 0x28
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	40007400 	.word	0x40007400
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	20000178 	.word	0x20000178
 8001f84:	40020030 	.word	0x40020030

08001f88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a0d      	ldr	r2, [pc, #52]	@ (8001fcc <HAL_TIM_Base_MspInit+0x44>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d113      	bne.n	8001fc2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001f9a:	4b0d      	ldr	r3, [pc, #52]	@ (8001fd0 <HAL_TIM_Base_MspInit+0x48>)
 8001f9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f9e:	4a0c      	ldr	r2, [pc, #48]	@ (8001fd0 <HAL_TIM_Base_MspInit+0x48>)
 8001fa0:	f043 0310 	orr.w	r3, r3, #16
 8001fa4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fa6:	4b0a      	ldr	r3, [pc, #40]	@ (8001fd0 <HAL_TIM_Base_MspInit+0x48>)
 8001fa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001faa:	f003 0310 	and.w	r3, r3, #16
 8001fae:	60fb      	str	r3, [r7, #12]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	2036      	movs	r0, #54	@ 0x36
 8001fb8:	f002 fd53 	bl	8004a62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001fbc:	2036      	movs	r0, #54	@ 0x36
 8001fbe:	f002 fd6c 	bl	8004a9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001fc2:	bf00      	nop
 8001fc4:	3710      	adds	r7, #16
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	40001000 	.word	0x40001000
 8001fd0:	40021000 	.word	0x40021000

08001fd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b0ac      	sub	sp, #176	@ 0xb0
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fdc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	601a      	str	r2, [r3, #0]
 8001fe4:	605a      	str	r2, [r3, #4]
 8001fe6:	609a      	str	r2, [r3, #8]
 8001fe8:	60da      	str	r2, [r3, #12]
 8001fea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fec:	f107 0314 	add.w	r3, r7, #20
 8001ff0:	2288      	movs	r2, #136	@ 0x88
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f006 fc53 	bl	80088a0 <memset>
  if(huart->Instance==USART2)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a25      	ldr	r2, [pc, #148]	@ (8002094 <HAL_UART_MspInit+0xc0>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d143      	bne.n	800208c <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002004:	2302      	movs	r3, #2
 8002006:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002008:	2300      	movs	r3, #0
 800200a:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800200c:	f107 0314 	add.w	r3, r7, #20
 8002010:	4618      	mov	r0, r3
 8002012:	f004 fb3d 	bl	8006690 <HAL_RCCEx_PeriphCLKConfig>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800201c:	f7ff fde6 	bl	8001bec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002020:	4b1d      	ldr	r3, [pc, #116]	@ (8002098 <HAL_UART_MspInit+0xc4>)
 8002022:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002024:	4a1c      	ldr	r2, [pc, #112]	@ (8002098 <HAL_UART_MspInit+0xc4>)
 8002026:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800202a:	6593      	str	r3, [r2, #88]	@ 0x58
 800202c:	4b1a      	ldr	r3, [pc, #104]	@ (8002098 <HAL_UART_MspInit+0xc4>)
 800202e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002030:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002034:	613b      	str	r3, [r7, #16]
 8002036:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002038:	4b17      	ldr	r3, [pc, #92]	@ (8002098 <HAL_UART_MspInit+0xc4>)
 800203a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800203c:	4a16      	ldr	r2, [pc, #88]	@ (8002098 <HAL_UART_MspInit+0xc4>)
 800203e:	f043 0301 	orr.w	r3, r3, #1
 8002042:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002044:	4b14      	ldr	r3, [pc, #80]	@ (8002098 <HAL_UART_MspInit+0xc4>)
 8002046:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002048:	f003 0301 	and.w	r3, r3, #1
 800204c:	60fb      	str	r3, [r7, #12]
 800204e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002050:	230c      	movs	r3, #12
 8002052:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002056:	2302      	movs	r3, #2
 8002058:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205c:	2300      	movs	r3, #0
 800205e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002062:	2303      	movs	r3, #3
 8002064:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002068:	2307      	movs	r3, #7
 800206a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800206e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002072:	4619      	mov	r1, r3
 8002074:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002078:	f003 facc 	bl	8005614 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 800207c:	2200      	movs	r2, #0
 800207e:	2102      	movs	r1, #2
 8002080:	2026      	movs	r0, #38	@ 0x26
 8002082:	f002 fcee 	bl	8004a62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002086:	2026      	movs	r0, #38	@ 0x26
 8002088:	f002 fd07 	bl	8004a9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800208c:	bf00      	nop
 800208e:	37b0      	adds	r7, #176	@ 0xb0
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	40004400 	.word	0x40004400
 8002098:	40021000 	.word	0x40021000

0800209c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80020a0:	bf00      	nop
 80020a2:	e7fd      	b.n	80020a0 <NMI_Handler+0x4>

080020a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020a8:	bf00      	nop
 80020aa:	e7fd      	b.n	80020a8 <HardFault_Handler+0x4>

080020ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020b0:	bf00      	nop
 80020b2:	e7fd      	b.n	80020b0 <MemManage_Handler+0x4>

080020b4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020b8:	bf00      	nop
 80020ba:	e7fd      	b.n	80020b8 <BusFault_Handler+0x4>

080020bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020c0:	bf00      	nop
 80020c2:	e7fd      	b.n	80020c0 <UsageFault_Handler+0x4>

080020c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020c8:	bf00      	nop
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr

080020d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020d2:	b480      	push	{r7}
 80020d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020d6:	bf00      	nop
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020e4:	bf00      	nop
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr

080020ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020ee:	b580      	push	{r7, lr}
 80020f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020f2:	f000 f92d 	bl	8002350 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020f6:	bf00      	nop
 80020f8:	bd80      	pop	{r7, pc}
	...

080020fc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002100:	4802      	ldr	r0, [pc, #8]	@ (800210c <DMA1_Channel1_IRQHandler+0x10>)
 8002102:	f003 f9a8 	bl	8005456 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002106:	bf00      	nop
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	200000f4 	.word	0x200000f4

08002110 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8002114:	4802      	ldr	r0, [pc, #8]	@ (8002120 <DMA1_Channel3_IRQHandler+0x10>)
 8002116:	f003 f99e 	bl	8005456 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800211a:	bf00      	nop
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	20000178 	.word	0x20000178

08002124 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002128:	4802      	ldr	r0, [pc, #8]	@ (8002134 <CAN1_TX_IRQHandler+0x10>)
 800212a:	f002 f98d 	bl	8004448 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800212e:	bf00      	nop
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	2000013c 	.word	0x2000013c

08002138 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800213c:	4802      	ldr	r0, [pc, #8]	@ (8002148 <CAN1_RX0_IRQHandler+0x10>)
 800213e:	f002 f983 	bl	8004448 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002142:	bf00      	nop
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	2000013c 	.word	0x2000013c

0800214c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002150:	4802      	ldr	r0, [pc, #8]	@ (800215c <CAN1_RX1_IRQHandler+0x10>)
 8002152:	f002 f979 	bl	8004448 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8002156:	bf00      	nop
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	2000013c 	.word	0x2000013c

08002160 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002164:	4802      	ldr	r0, [pc, #8]	@ (8002170 <CAN1_SCE_IRQHandler+0x10>)
 8002166:	f002 f96f 	bl	8004448 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 800216a:	bf00      	nop
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	2000013c 	.word	0x2000013c

08002174 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002178:	4802      	ldr	r0, [pc, #8]	@ (8002184 <USART2_IRQHandler+0x10>)
 800217a:	f005 fb4f 	bl	800781c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800217e:	bf00      	nop
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	2000020c 	.word	0x2000020c

08002188 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800218c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002190:	f003 fc02 	bl	8005998 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002194:	bf00      	nop
 8002196:	bd80      	pop	{r7, pc}

08002198 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800219c:	4803      	ldr	r0, [pc, #12]	@ (80021ac <TIM6_DAC_IRQHandler+0x14>)
 800219e:	f004 fffb 	bl	8007198 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 80021a2:	4803      	ldr	r0, [pc, #12]	@ (80021b0 <TIM6_DAC_IRQHandler+0x18>)
 80021a4:	f002 fd82 	bl	8004cac <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80021a8:	bf00      	nop
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	200001c0 	.word	0x200001c0
 80021b0:	20000164 	.word	0x20000164

080021b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b086      	sub	sp, #24
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021bc:	4a14      	ldr	r2, [pc, #80]	@ (8002210 <_sbrk+0x5c>)
 80021be:	4b15      	ldr	r3, [pc, #84]	@ (8002214 <_sbrk+0x60>)
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021c8:	4b13      	ldr	r3, [pc, #76]	@ (8002218 <_sbrk+0x64>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d102      	bne.n	80021d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021d0:	4b11      	ldr	r3, [pc, #68]	@ (8002218 <_sbrk+0x64>)
 80021d2:	4a12      	ldr	r2, [pc, #72]	@ (800221c <_sbrk+0x68>)
 80021d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021d6:	4b10      	ldr	r3, [pc, #64]	@ (8002218 <_sbrk+0x64>)
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4413      	add	r3, r2
 80021de:	693a      	ldr	r2, [r7, #16]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d207      	bcs.n	80021f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021e4:	f006 fb64 	bl	80088b0 <__errno>
 80021e8:	4603      	mov	r3, r0
 80021ea:	220c      	movs	r2, #12
 80021ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021ee:	f04f 33ff 	mov.w	r3, #4294967295
 80021f2:	e009      	b.n	8002208 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021f4:	4b08      	ldr	r3, [pc, #32]	@ (8002218 <_sbrk+0x64>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021fa:	4b07      	ldr	r3, [pc, #28]	@ (8002218 <_sbrk+0x64>)
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4413      	add	r3, r2
 8002202:	4a05      	ldr	r2, [pc, #20]	@ (8002218 <_sbrk+0x64>)
 8002204:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002206:	68fb      	ldr	r3, [r7, #12]
}
 8002208:	4618      	mov	r0, r3
 800220a:	3718      	adds	r7, #24
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	20018000 	.word	0x20018000
 8002214:	00000400 	.word	0x00000400
 8002218:	20000340 	.word	0x20000340
 800221c:	20000490 	.word	0x20000490

08002220 <SystemInit>:
/**
 * @brief  Setup the microcontroller system.
 * @retval None
 */

void SystemInit(void) {
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 20U) | (3UL << 22U)); /* set CP10 and CP11 Full Access */
 8002224:	4b06      	ldr	r3, [pc, #24]	@ (8002240 <SystemInit+0x20>)
 8002226:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800222a:	4a05      	ldr	r2, [pc, #20]	@ (8002240 <SystemInit+0x20>)
 800222c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002230:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002234:	bf00      	nop
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	e000ed00 	.word	0xe000ed00

08002244 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002244:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800227c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002248:	f7ff ffea 	bl	8002220 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800224c:	480c      	ldr	r0, [pc, #48]	@ (8002280 <LoopForever+0x6>)
  ldr r1, =_edata
 800224e:	490d      	ldr	r1, [pc, #52]	@ (8002284 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002250:	4a0d      	ldr	r2, [pc, #52]	@ (8002288 <LoopForever+0xe>)
  movs r3, #0
 8002252:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002254:	e002      	b.n	800225c <LoopCopyDataInit>

08002256 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002256:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002258:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800225a:	3304      	adds	r3, #4

0800225c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800225c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800225e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002260:	d3f9      	bcc.n	8002256 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002262:	4a0a      	ldr	r2, [pc, #40]	@ (800228c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002264:	4c0a      	ldr	r4, [pc, #40]	@ (8002290 <LoopForever+0x16>)
  movs r3, #0
 8002266:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002268:	e001      	b.n	800226e <LoopFillZerobss>

0800226a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800226a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800226c:	3204      	adds	r2, #4

0800226e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800226e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002270:	d3fb      	bcc.n	800226a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002272:	f006 fb23 	bl	80088bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002276:	f7ff f883 	bl	8001380 <main>

0800227a <LoopForever>:

LoopForever:
    b LoopForever
 800227a:	e7fe      	b.n	800227a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800227c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002280:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002284:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002288:	0800938c 	.word	0x0800938c
  ldr r2, =_sbss
 800228c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002290:	20000490 	.word	0x20000490

08002294 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002294:	e7fe      	b.n	8002294 <ADC1_2_IRQHandler>
	...

08002298 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800229e:	2300      	movs	r3, #0
 80022a0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022a2:	4b0c      	ldr	r3, [pc, #48]	@ (80022d4 <HAL_Init+0x3c>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a0b      	ldr	r2, [pc, #44]	@ (80022d4 <HAL_Init+0x3c>)
 80022a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022ac:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022ae:	2003      	movs	r0, #3
 80022b0:	f002 fbcc 	bl	8004a4c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80022b4:	2000      	movs	r0, #0
 80022b6:	f000 f80f 	bl	80022d8 <HAL_InitTick>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d002      	beq.n	80022c6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	71fb      	strb	r3, [r7, #7]
 80022c4:	e001      	b.n	80022ca <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80022c6:	f7ff fc99 	bl	8001bfc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80022ca:	79fb      	ldrb	r3, [r7, #7]
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3708      	adds	r7, #8
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	40022000 	.word	0x40022000

080022d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80022e0:	2300      	movs	r3, #0
 80022e2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80022e4:	4b17      	ldr	r3, [pc, #92]	@ (8002344 <HAL_InitTick+0x6c>)
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d023      	beq.n	8002334 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80022ec:	4b16      	ldr	r3, [pc, #88]	@ (8002348 <HAL_InitTick+0x70>)
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	4b14      	ldr	r3, [pc, #80]	@ (8002344 <HAL_InitTick+0x6c>)
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	4619      	mov	r1, r3
 80022f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80022fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002302:	4618      	mov	r0, r3
 8002304:	f002 fbd7 	bl	8004ab6 <HAL_SYSTICK_Config>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d10f      	bne.n	800232e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2b0f      	cmp	r3, #15
 8002312:	d809      	bhi.n	8002328 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002314:	2200      	movs	r2, #0
 8002316:	6879      	ldr	r1, [r7, #4]
 8002318:	f04f 30ff 	mov.w	r0, #4294967295
 800231c:	f002 fba1 	bl	8004a62 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002320:	4a0a      	ldr	r2, [pc, #40]	@ (800234c <HAL_InitTick+0x74>)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6013      	str	r3, [r2, #0]
 8002326:	e007      	b.n	8002338 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	73fb      	strb	r3, [r7, #15]
 800232c:	e004      	b.n	8002338 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	73fb      	strb	r3, [r7, #15]
 8002332:	e001      	b.n	8002338 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002338:	7bfb      	ldrb	r3, [r7, #15]
}
 800233a:	4618      	mov	r0, r3
 800233c:	3710      	adds	r7, #16
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	2000001c 	.word	0x2000001c
 8002348:	20000014 	.word	0x20000014
 800234c:	20000018 	.word	0x20000018

08002350 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002354:	4b06      	ldr	r3, [pc, #24]	@ (8002370 <HAL_IncTick+0x20>)
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	461a      	mov	r2, r3
 800235a:	4b06      	ldr	r3, [pc, #24]	@ (8002374 <HAL_IncTick+0x24>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4413      	add	r3, r2
 8002360:	4a04      	ldr	r2, [pc, #16]	@ (8002374 <HAL_IncTick+0x24>)
 8002362:	6013      	str	r3, [r2, #0]
}
 8002364:	bf00      	nop
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	2000001c 	.word	0x2000001c
 8002374:	20000344 	.word	0x20000344

08002378 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  return uwTick;
 800237c:	4b03      	ldr	r3, [pc, #12]	@ (800238c <HAL_GetTick+0x14>)
 800237e:	681b      	ldr	r3, [r3, #0]
}
 8002380:	4618      	mov	r0, r3
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	20000344 	.word	0x20000344

08002390 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002398:	f7ff ffee 	bl	8002378 <HAL_GetTick>
 800239c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023a8:	d005      	beq.n	80023b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80023aa:	4b0a      	ldr	r3, [pc, #40]	@ (80023d4 <HAL_Delay+0x44>)
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	461a      	mov	r2, r3
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	4413      	add	r3, r2
 80023b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023b6:	bf00      	nop
 80023b8:	f7ff ffde 	bl	8002378 <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	68fa      	ldr	r2, [r7, #12]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d8f7      	bhi.n	80023b8 <HAL_Delay+0x28>
  {
  }
}
 80023c8:	bf00      	nop
 80023ca:	bf00      	nop
 80023cc:	3710      	adds	r7, #16
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	2000001c 	.word	0x2000001c

080023d8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	431a      	orrs	r2, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	609a      	str	r2, [r3, #8]
}
 80023f2:	bf00      	nop
 80023f4:	370c      	adds	r7, #12
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr

080023fe <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80023fe:	b480      	push	{r7}
 8002400:	b083      	sub	sp, #12
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
 8002406:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	431a      	orrs	r2, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	609a      	str	r2, [r3, #8]
}
 8002418:	bf00      	nop
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr

08002424 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002434:	4618      	mov	r0, r3
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002440:	b480      	push	{r7}
 8002442:	b087      	sub	sp, #28
 8002444:	af00      	add	r7, sp, #0
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	607a      	str	r2, [r7, #4]
 800244c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	3360      	adds	r3, #96	@ 0x60
 8002452:	461a      	mov	r2, r3
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	4413      	add	r3, r2
 800245a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	4b08      	ldr	r3, [pc, #32]	@ (8002484 <LL_ADC_SetOffset+0x44>)
 8002462:	4013      	ands	r3, r2
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800246a:	683a      	ldr	r2, [r7, #0]
 800246c:	430a      	orrs	r2, r1
 800246e:	4313      	orrs	r3, r2
 8002470:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002478:	bf00      	nop
 800247a:	371c      	adds	r7, #28
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr
 8002484:	03fff000 	.word	0x03fff000

08002488 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002488:	b480      	push	{r7}
 800248a:	b085      	sub	sp, #20
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	3360      	adds	r3, #96	@ 0x60
 8002496:	461a      	mov	r2, r3
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	4413      	add	r3, r2
 800249e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3714      	adds	r7, #20
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr

080024b4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b087      	sub	sp, #28
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	60b9      	str	r1, [r7, #8]
 80024be:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	3360      	adds	r3, #96	@ 0x60
 80024c4:	461a      	mov	r2, r3
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	4413      	add	r3, r2
 80024cc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	431a      	orrs	r2, r3
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80024de:	bf00      	nop
 80024e0:	371c      	adds	r7, #28
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr

080024ea <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80024ea:	b480      	push	{r7}
 80024ec:	b083      	sub	sp, #12
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d101      	bne.n	8002502 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80024fe:	2301      	movs	r3, #1
 8002500:	e000      	b.n	8002504 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002502:	2300      	movs	r3, #0
}
 8002504:	4618      	mov	r0, r3
 8002506:	370c      	adds	r7, #12
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr

08002510 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002510:	b480      	push	{r7}
 8002512:	b087      	sub	sp, #28
 8002514:	af00      	add	r7, sp, #0
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	3330      	adds	r3, #48	@ 0x30
 8002520:	461a      	mov	r2, r3
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	0a1b      	lsrs	r3, r3, #8
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	f003 030c 	and.w	r3, r3, #12
 800252c:	4413      	add	r3, r2
 800252e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	f003 031f 	and.w	r3, r3, #31
 800253a:	211f      	movs	r1, #31
 800253c:	fa01 f303 	lsl.w	r3, r1, r3
 8002540:	43db      	mvns	r3, r3
 8002542:	401a      	ands	r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	0e9b      	lsrs	r3, r3, #26
 8002548:	f003 011f 	and.w	r1, r3, #31
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	f003 031f 	and.w	r3, r3, #31
 8002552:	fa01 f303 	lsl.w	r3, r1, r3
 8002556:	431a      	orrs	r2, r3
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800255c:	bf00      	nop
 800255e:	371c      	adds	r7, #28
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002568:	b480      	push	{r7}
 800256a:	b087      	sub	sp, #28
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	3314      	adds	r3, #20
 8002578:	461a      	mov	r2, r3
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	0e5b      	lsrs	r3, r3, #25
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	f003 0304 	and.w	r3, r3, #4
 8002584:	4413      	add	r3, r2
 8002586:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	0d1b      	lsrs	r3, r3, #20
 8002590:	f003 031f 	and.w	r3, r3, #31
 8002594:	2107      	movs	r1, #7
 8002596:	fa01 f303 	lsl.w	r3, r1, r3
 800259a:	43db      	mvns	r3, r3
 800259c:	401a      	ands	r2, r3
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	0d1b      	lsrs	r3, r3, #20
 80025a2:	f003 031f 	and.w	r3, r3, #31
 80025a6:	6879      	ldr	r1, [r7, #4]
 80025a8:	fa01 f303 	lsl.w	r3, r1, r3
 80025ac:	431a      	orrs	r2, r3
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80025b2:	bf00      	nop
 80025b4:	371c      	adds	r7, #28
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
	...

080025c0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b085      	sub	sp, #20
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025d8:	43db      	mvns	r3, r3
 80025da:	401a      	ands	r2, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f003 0318 	and.w	r3, r3, #24
 80025e2:	4908      	ldr	r1, [pc, #32]	@ (8002604 <LL_ADC_SetChannelSingleDiff+0x44>)
 80025e4:	40d9      	lsrs	r1, r3
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	400b      	ands	r3, r1
 80025ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025ee:	431a      	orrs	r2, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80025f6:	bf00      	nop
 80025f8:	3714      	adds	r7, #20
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	0007ffff 	.word	0x0007ffff

08002608 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f003 031f 	and.w	r3, r3, #31
}
 8002618:	4618      	mov	r0, r3
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002634:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	6093      	str	r3, [r2, #8]
}
 800263c:	bf00      	nop
 800263e:	370c      	adds	r7, #12
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr

08002648 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002658:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800265c:	d101      	bne.n	8002662 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800265e:	2301      	movs	r3, #1
 8002660:	e000      	b.n	8002664 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002662:	2300      	movs	r3, #0
}
 8002664:	4618      	mov	r0, r3
 8002666:	370c      	adds	r7, #12
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr

08002670 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002680:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002684:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800268c:	bf00      	nop
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80026ac:	d101      	bne.n	80026b2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80026ae:	2301      	movs	r3, #1
 80026b0:	e000      	b.n	80026b4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80026b2:	2300      	movs	r3, #0
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80026d0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80026d4:	f043 0201 	orr.w	r2, r3, #1
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80026dc:	bf00      	nop
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80026f8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80026fc:	f043 0202 	orr.w	r2, r3, #2
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002704:	bf00      	nop
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f003 0301 	and.w	r3, r3, #1
 8002720:	2b01      	cmp	r3, #1
 8002722:	d101      	bne.n	8002728 <LL_ADC_IsEnabled+0x18>
 8002724:	2301      	movs	r3, #1
 8002726:	e000      	b.n	800272a <LL_ADC_IsEnabled+0x1a>
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr

08002736 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002736:	b480      	push	{r7}
 8002738:	b083      	sub	sp, #12
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f003 0302 	and.w	r3, r3, #2
 8002746:	2b02      	cmp	r3, #2
 8002748:	d101      	bne.n	800274e <LL_ADC_IsDisableOngoing+0x18>
 800274a:	2301      	movs	r3, #1
 800274c:	e000      	b.n	8002750 <LL_ADC_IsDisableOngoing+0x1a>
 800274e:	2300      	movs	r3, #0
}
 8002750:	4618      	mov	r0, r3
 8002752:	370c      	adds	r7, #12
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr

0800275c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800276c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002770:	f043 0204 	orr.w	r2, r3, #4
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002778:	bf00      	nop
 800277a:	370c      	adds	r7, #12
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	f003 0304 	and.w	r3, r3, #4
 8002794:	2b04      	cmp	r3, #4
 8002796:	d101      	bne.n	800279c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002798:	2301      	movs	r3, #1
 800279a:	e000      	b.n	800279e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800279c:	2300      	movs	r3, #0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	370c      	adds	r7, #12
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr

080027aa <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80027aa:	b480      	push	{r7}
 80027ac:	b083      	sub	sp, #12
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f003 0308 	and.w	r3, r3, #8
 80027ba:	2b08      	cmp	r3, #8
 80027bc:	d101      	bne.n	80027c2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80027be:	2301      	movs	r3, #1
 80027c0:	e000      	b.n	80027c4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80027c2:	2300      	movs	r3, #0
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80027d0:	b590      	push	{r4, r7, lr}
 80027d2:	b089      	sub	sp, #36	@ 0x24
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027d8:	2300      	movs	r3, #0
 80027da:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80027dc:	2300      	movs	r3, #0
 80027de:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d101      	bne.n	80027ea <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e130      	b.n	8002a4c <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d109      	bne.n	800280c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f7ff fa23 	bl	8001c44 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4618      	mov	r0, r3
 8002812:	f7ff ff19 	bl	8002648 <LL_ADC_IsDeepPowerDownEnabled>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d004      	beq.n	8002826 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4618      	mov	r0, r3
 8002822:	f7ff feff 	bl	8002624 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4618      	mov	r0, r3
 800282c:	f7ff ff34 	bl	8002698 <LL_ADC_IsInternalRegulatorEnabled>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d115      	bne.n	8002862 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4618      	mov	r0, r3
 800283c:	f7ff ff18 	bl	8002670 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002840:	4b84      	ldr	r3, [pc, #528]	@ (8002a54 <HAL_ADC_Init+0x284>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	099b      	lsrs	r3, r3, #6
 8002846:	4a84      	ldr	r2, [pc, #528]	@ (8002a58 <HAL_ADC_Init+0x288>)
 8002848:	fba2 2303 	umull	r2, r3, r2, r3
 800284c:	099b      	lsrs	r3, r3, #6
 800284e:	3301      	adds	r3, #1
 8002850:	005b      	lsls	r3, r3, #1
 8002852:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002854:	e002      	b.n	800285c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	3b01      	subs	r3, #1
 800285a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d1f9      	bne.n	8002856 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4618      	mov	r0, r3
 8002868:	f7ff ff16 	bl	8002698 <LL_ADC_IsInternalRegulatorEnabled>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d10d      	bne.n	800288e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002876:	f043 0210 	orr.w	r2, r3, #16
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002882:	f043 0201 	orr.w	r2, r3, #1
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4618      	mov	r0, r3
 8002894:	f7ff ff76 	bl	8002784 <LL_ADC_REG_IsConversionOngoing>
 8002898:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800289e:	f003 0310 	and.w	r3, r3, #16
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	f040 80c9 	bne.w	8002a3a <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	f040 80c5 	bne.w	8002a3a <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028b4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80028b8:	f043 0202 	orr.w	r2, r3, #2
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7ff ff23 	bl	8002710 <LL_ADC_IsEnabled>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d115      	bne.n	80028fc <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80028d0:	4862      	ldr	r0, [pc, #392]	@ (8002a5c <HAL_ADC_Init+0x28c>)
 80028d2:	f7ff ff1d 	bl	8002710 <LL_ADC_IsEnabled>
 80028d6:	4604      	mov	r4, r0
 80028d8:	4861      	ldr	r0, [pc, #388]	@ (8002a60 <HAL_ADC_Init+0x290>)
 80028da:	f7ff ff19 	bl	8002710 <LL_ADC_IsEnabled>
 80028de:	4603      	mov	r3, r0
 80028e0:	431c      	orrs	r4, r3
 80028e2:	4860      	ldr	r0, [pc, #384]	@ (8002a64 <HAL_ADC_Init+0x294>)
 80028e4:	f7ff ff14 	bl	8002710 <LL_ADC_IsEnabled>
 80028e8:	4603      	mov	r3, r0
 80028ea:	4323      	orrs	r3, r4
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d105      	bne.n	80028fc <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	4619      	mov	r1, r3
 80028f6:	485c      	ldr	r0, [pc, #368]	@ (8002a68 <HAL_ADC_Init+0x298>)
 80028f8:	f7ff fd6e 	bl	80023d8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	7e5b      	ldrb	r3, [r3, #25]
 8002900:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002906:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800290c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002912:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f893 3020 	ldrb.w	r3, [r3, #32]
 800291a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800291c:	4313      	orrs	r3, r2
 800291e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002926:	2b01      	cmp	r3, #1
 8002928:	d106      	bne.n	8002938 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800292e:	3b01      	subs	r3, #1
 8002930:	045b      	lsls	r3, r3, #17
 8002932:	69ba      	ldr	r2, [r7, #24]
 8002934:	4313      	orrs	r3, r2
 8002936:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800293c:	2b00      	cmp	r3, #0
 800293e:	d009      	beq.n	8002954 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002944:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800294c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800294e:	69ba      	ldr	r2, [r7, #24]
 8002950:	4313      	orrs	r3, r2
 8002952:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	68da      	ldr	r2, [r3, #12]
 800295a:	4b44      	ldr	r3, [pc, #272]	@ (8002a6c <HAL_ADC_Init+0x29c>)
 800295c:	4013      	ands	r3, r2
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	6812      	ldr	r2, [r2, #0]
 8002962:	69b9      	ldr	r1, [r7, #24]
 8002964:	430b      	orrs	r3, r1
 8002966:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4618      	mov	r0, r3
 800296e:	f7ff ff1c 	bl	80027aa <LL_ADC_INJ_IsConversionOngoing>
 8002972:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d13d      	bne.n	80029f6 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d13a      	bne.n	80029f6 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002984:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800298c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800298e:	4313      	orrs	r3, r2
 8002990:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800299c:	f023 0302 	bic.w	r3, r3, #2
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	6812      	ldr	r2, [r2, #0]
 80029a4:	69b9      	ldr	r1, [r7, #24]
 80029a6:	430b      	orrs	r3, r1
 80029a8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d118      	bne.n	80029e6 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	691b      	ldr	r3, [r3, #16]
 80029ba:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80029be:	f023 0304 	bic.w	r3, r3, #4
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80029ca:	4311      	orrs	r1, r2
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80029d0:	4311      	orrs	r1, r2
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80029d6:	430a      	orrs	r2, r1
 80029d8:	431a      	orrs	r2, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f042 0201 	orr.w	r2, r2, #1
 80029e2:	611a      	str	r2, [r3, #16]
 80029e4:	e007      	b.n	80029f6 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	691a      	ldr	r2, [r3, #16]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f022 0201 	bic.w	r2, r2, #1
 80029f4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	691b      	ldr	r3, [r3, #16]
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d10c      	bne.n	8002a18 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a04:	f023 010f 	bic.w	r1, r3, #15
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	69db      	ldr	r3, [r3, #28]
 8002a0c:	1e5a      	subs	r2, r3, #1
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	430a      	orrs	r2, r1
 8002a14:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a16:	e007      	b.n	8002a28 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f022 020f 	bic.w	r2, r2, #15
 8002a26:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a2c:	f023 0303 	bic.w	r3, r3, #3
 8002a30:	f043 0201 	orr.w	r2, r3, #1
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	655a      	str	r2, [r3, #84]	@ 0x54
 8002a38:	e007      	b.n	8002a4a <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a3e:	f043 0210 	orr.w	r2, r3, #16
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002a4a:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3724      	adds	r7, #36	@ 0x24
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd90      	pop	{r4, r7, pc}
 8002a54:	20000014 	.word	0x20000014
 8002a58:	053e2d63 	.word	0x053e2d63
 8002a5c:	50040000 	.word	0x50040000
 8002a60:	50040100 	.word	0x50040100
 8002a64:	50040200 	.word	0x50040200
 8002a68:	50040300 	.word	0x50040300
 8002a6c:	fff0c007 	.word	0xfff0c007

08002a70 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b086      	sub	sp, #24
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	60b9      	str	r1, [r7, #8]
 8002a7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a7c:	4853      	ldr	r0, [pc, #332]	@ (8002bcc <HAL_ADC_Start_DMA+0x15c>)
 8002a7e:	f7ff fdc3 	bl	8002608 <LL_ADC_GetMultimode>
 8002a82:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7ff fe7b 	bl	8002784 <LL_ADC_REG_IsConversionOngoing>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	f040 8093 	bne.w	8002bbc <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d101      	bne.n	8002aa4 <HAL_ADC_Start_DMA+0x34>
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	e08e      	b.n	8002bc2 <HAL_ADC_Start_DMA+0x152>
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a47      	ldr	r2, [pc, #284]	@ (8002bd0 <HAL_ADC_Start_DMA+0x160>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d008      	beq.n	8002ac8 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d005      	beq.n	8002ac8 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	2b05      	cmp	r3, #5
 8002ac0:	d002      	beq.n	8002ac8 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	2b09      	cmp	r3, #9
 8002ac6:	d172      	bne.n	8002bae <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002ac8:	68f8      	ldr	r0, [r7, #12]
 8002aca:	f000 fc93 	bl	80033f4 <ADC_Enable>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002ad2:	7dfb      	ldrb	r3, [r7, #23]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d165      	bne.n	8002ba4 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002adc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002ae0:	f023 0301 	bic.w	r3, r3, #1
 8002ae4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a38      	ldr	r2, [pc, #224]	@ (8002bd4 <HAL_ADC_Start_DMA+0x164>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d002      	beq.n	8002afc <HAL_ADC_Start_DMA+0x8c>
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	e000      	b.n	8002afe <HAL_ADC_Start_DMA+0x8e>
 8002afc:	4b36      	ldr	r3, [pc, #216]	@ (8002bd8 <HAL_ADC_Start_DMA+0x168>)
 8002afe:	68fa      	ldr	r2, [r7, #12]
 8002b00:	6812      	ldr	r2, [r2, #0]
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d002      	beq.n	8002b0c <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d105      	bne.n	8002b18 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b10:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	655a      	str	r2, [r3, #84]	@ 0x54
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b1c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d006      	beq.n	8002b32 <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b28:	f023 0206 	bic.w	r2, r3, #6
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002b30:	e002      	b.n	8002b38 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2200      	movs	r2, #0
 8002b36:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b3c:	4a27      	ldr	r2, [pc, #156]	@ (8002bdc <HAL_ADC_Start_DMA+0x16c>)
 8002b3e:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b44:	4a26      	ldr	r2, [pc, #152]	@ (8002be0 <HAL_ADC_Start_DMA+0x170>)
 8002b46:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b4c:	4a25      	ldr	r2, [pc, #148]	@ (8002be4 <HAL_ADC_Start_DMA+0x174>)
 8002b4e:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	221c      	movs	r2, #28
 8002b56:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	685a      	ldr	r2, [r3, #4]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f042 0210 	orr.w	r2, r2, #16
 8002b6e:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	68da      	ldr	r2, [r3, #12]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f042 0201 	orr.w	r2, r2, #1
 8002b7e:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	3340      	adds	r3, #64	@ 0x40
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	68ba      	ldr	r2, [r7, #8]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f002 fb82 	bl	8005298 <HAL_DMA_Start_IT>
 8002b94:	4603      	mov	r3, r0
 8002b96:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7ff fddd 	bl	800275c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002ba2:	e00d      	b.n	8002bc0 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8002bac:	e008      	b.n	8002bc0 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002bba:	e001      	b.n	8002bc0 <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002bc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3718      	adds	r7, #24
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	50040300 	.word	0x50040300
 8002bd0:	50040200 	.word	0x50040200
 8002bd4:	50040100 	.word	0x50040100
 8002bd8:	50040000 	.word	0x50040000
 8002bdc:	080035bf 	.word	0x080035bf
 8002be0:	08003697 	.word	0x08003697
 8002be4:	080036b3 	.word	0x080036b3

08002be8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002bf0:	bf00      	nop
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr

08002bfc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002c04:	bf00      	nop
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b0b6      	sub	sp, #216	@ 0xd8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002c20:	2300      	movs	r3, #0
 8002c22:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d101      	bne.n	8002c32 <HAL_ADC_ConfigChannel+0x22>
 8002c2e:	2302      	movs	r3, #2
 8002c30:	e3c9      	b.n	80033c6 <HAL_ADC_ConfigChannel+0x7b6>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2201      	movs	r2, #1
 8002c36:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7ff fda0 	bl	8002784 <LL_ADC_REG_IsConversionOngoing>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	f040 83aa 	bne.w	80033a0 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	2b05      	cmp	r3, #5
 8002c5a:	d824      	bhi.n	8002ca6 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	3b02      	subs	r3, #2
 8002c62:	2b03      	cmp	r3, #3
 8002c64:	d81b      	bhi.n	8002c9e <HAL_ADC_ConfigChannel+0x8e>
 8002c66:	a201      	add	r2, pc, #4	@ (adr r2, 8002c6c <HAL_ADC_ConfigChannel+0x5c>)
 8002c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c6c:	08002c7d 	.word	0x08002c7d
 8002c70:	08002c85 	.word	0x08002c85
 8002c74:	08002c8d 	.word	0x08002c8d
 8002c78:	08002c95 	.word	0x08002c95
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002c7c:	230c      	movs	r3, #12
 8002c7e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002c82:	e010      	b.n	8002ca6 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002c84:	2312      	movs	r3, #18
 8002c86:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002c8a:	e00c      	b.n	8002ca6 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002c8c:	2318      	movs	r3, #24
 8002c8e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002c92:	e008      	b.n	8002ca6 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002c94:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c98:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002c9c:	e003      	b.n	8002ca6 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002c9e:	2306      	movs	r3, #6
 8002ca0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002ca4:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6818      	ldr	r0, [r3, #0]
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	461a      	mov	r2, r3
 8002cb0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002cb4:	f7ff fc2c 	bl	8002510 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7ff fd61 	bl	8002784 <LL_ADC_REG_IsConversionOngoing>
 8002cc2:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7ff fd6d 	bl	80027aa <LL_ADC_INJ_IsConversionOngoing>
 8002cd0:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002cd4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	f040 81a4 	bne.w	8003026 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002cde:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	f040 819f 	bne.w	8003026 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6818      	ldr	r0, [r3, #0]
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	6819      	ldr	r1, [r3, #0]
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	f7ff fc37 	bl	8002568 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	695a      	ldr	r2, [r3, #20]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	08db      	lsrs	r3, r3, #3
 8002d06:	f003 0303 	and.w	r3, r3, #3
 8002d0a:	005b      	lsls	r3, r3, #1
 8002d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d10:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	691b      	ldr	r3, [r3, #16]
 8002d18:	2b04      	cmp	r3, #4
 8002d1a:	d00a      	beq.n	8002d32 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6818      	ldr	r0, [r3, #0]
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	6919      	ldr	r1, [r3, #16]
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d2c:	f7ff fb88 	bl	8002440 <LL_ADC_SetOffset>
 8002d30:	e179      	b.n	8003026 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	2100      	movs	r1, #0
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7ff fba5 	bl	8002488 <LL_ADC_GetOffsetChannel>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d10a      	bne.n	8002d5e <HAL_ADC_ConfigChannel+0x14e>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2100      	movs	r1, #0
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7ff fb9a 	bl	8002488 <LL_ADC_GetOffsetChannel>
 8002d54:	4603      	mov	r3, r0
 8002d56:	0e9b      	lsrs	r3, r3, #26
 8002d58:	f003 021f 	and.w	r2, r3, #31
 8002d5c:	e01e      	b.n	8002d9c <HAL_ADC_ConfigChannel+0x18c>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2100      	movs	r1, #0
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7ff fb8f 	bl	8002488 <LL_ADC_GetOffsetChannel>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d70:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002d74:	fa93 f3a3 	rbit	r3, r3
 8002d78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002d7c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002d80:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002d84:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d101      	bne.n	8002d90 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002d8c:	2320      	movs	r3, #32
 8002d8e:	e004      	b.n	8002d9a <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002d90:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002d94:	fab3 f383 	clz	r3, r3
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d105      	bne.n	8002db4 <HAL_ADC_ConfigChannel+0x1a4>
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	0e9b      	lsrs	r3, r3, #26
 8002dae:	f003 031f 	and.w	r3, r3, #31
 8002db2:	e018      	b.n	8002de6 <HAL_ADC_ConfigChannel+0x1d6>
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dbc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002dc0:	fa93 f3a3 	rbit	r3, r3
 8002dc4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002dc8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002dcc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002dd0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d101      	bne.n	8002ddc <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002dd8:	2320      	movs	r3, #32
 8002dda:	e004      	b.n	8002de6 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002ddc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002de0:	fab3 f383 	clz	r3, r3
 8002de4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d106      	bne.n	8002df8 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	2200      	movs	r2, #0
 8002df0:	2100      	movs	r1, #0
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7ff fb5e 	bl	80024b4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2101      	movs	r1, #1
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7ff fb42 	bl	8002488 <LL_ADC_GetOffsetChannel>
 8002e04:	4603      	mov	r3, r0
 8002e06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d10a      	bne.n	8002e24 <HAL_ADC_ConfigChannel+0x214>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	2101      	movs	r1, #1
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7ff fb37 	bl	8002488 <LL_ADC_GetOffsetChannel>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	0e9b      	lsrs	r3, r3, #26
 8002e1e:	f003 021f 	and.w	r2, r3, #31
 8002e22:	e01e      	b.n	8002e62 <HAL_ADC_ConfigChannel+0x252>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2101      	movs	r1, #1
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f7ff fb2c 	bl	8002488 <LL_ADC_GetOffsetChannel>
 8002e30:	4603      	mov	r3, r0
 8002e32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002e3a:	fa93 f3a3 	rbit	r3, r3
 8002e3e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002e42:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002e46:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002e4a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d101      	bne.n	8002e56 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002e52:	2320      	movs	r3, #32
 8002e54:	e004      	b.n	8002e60 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002e56:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002e5a:	fab3 f383 	clz	r3, r3
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d105      	bne.n	8002e7a <HAL_ADC_ConfigChannel+0x26a>
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	0e9b      	lsrs	r3, r3, #26
 8002e74:	f003 031f 	and.w	r3, r3, #31
 8002e78:	e018      	b.n	8002eac <HAL_ADC_ConfigChannel+0x29c>
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e82:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002e86:	fa93 f3a3 	rbit	r3, r3
 8002e8a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002e8e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002e92:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002e96:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d101      	bne.n	8002ea2 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002e9e:	2320      	movs	r3, #32
 8002ea0:	e004      	b.n	8002eac <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002ea2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002ea6:	fab3 f383 	clz	r3, r3
 8002eaa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d106      	bne.n	8002ebe <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	2101      	movs	r1, #1
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f7ff fafb 	bl	80024b4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2102      	movs	r1, #2
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7ff fadf 	bl	8002488 <LL_ADC_GetOffsetChannel>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d10a      	bne.n	8002eea <HAL_ADC_ConfigChannel+0x2da>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2102      	movs	r1, #2
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7ff fad4 	bl	8002488 <LL_ADC_GetOffsetChannel>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	0e9b      	lsrs	r3, r3, #26
 8002ee4:	f003 021f 	and.w	r2, r3, #31
 8002ee8:	e01e      	b.n	8002f28 <HAL_ADC_ConfigChannel+0x318>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2102      	movs	r1, #2
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f7ff fac9 	bl	8002488 <LL_ADC_GetOffsetChannel>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002efc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002f00:	fa93 f3a3 	rbit	r3, r3
 8002f04:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002f08:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002f0c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002f10:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d101      	bne.n	8002f1c <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002f18:	2320      	movs	r3, #32
 8002f1a:	e004      	b.n	8002f26 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002f1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f20:	fab3 f383 	clz	r3, r3
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d105      	bne.n	8002f40 <HAL_ADC_ConfigChannel+0x330>
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	0e9b      	lsrs	r3, r3, #26
 8002f3a:	f003 031f 	and.w	r3, r3, #31
 8002f3e:	e014      	b.n	8002f6a <HAL_ADC_ConfigChannel+0x35a>
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f46:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002f48:	fa93 f3a3 	rbit	r3, r3
 8002f4c:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002f4e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002f50:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002f54:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d101      	bne.n	8002f60 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002f5c:	2320      	movs	r3, #32
 8002f5e:	e004      	b.n	8002f6a <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002f60:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002f64:	fab3 f383 	clz	r3, r3
 8002f68:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d106      	bne.n	8002f7c <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2200      	movs	r2, #0
 8002f74:	2102      	movs	r1, #2
 8002f76:	4618      	mov	r0, r3
 8002f78:	f7ff fa9c 	bl	80024b4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2103      	movs	r1, #3
 8002f82:	4618      	mov	r0, r3
 8002f84:	f7ff fa80 	bl	8002488 <LL_ADC_GetOffsetChannel>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d10a      	bne.n	8002fa8 <HAL_ADC_ConfigChannel+0x398>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	2103      	movs	r1, #3
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7ff fa75 	bl	8002488 <LL_ADC_GetOffsetChannel>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	0e9b      	lsrs	r3, r3, #26
 8002fa2:	f003 021f 	and.w	r2, r3, #31
 8002fa6:	e017      	b.n	8002fd8 <HAL_ADC_ConfigChannel+0x3c8>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2103      	movs	r1, #3
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7ff fa6a 	bl	8002488 <LL_ADC_GetOffsetChannel>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002fba:	fa93 f3a3 	rbit	r3, r3
 8002fbe:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002fc0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002fc2:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002fc4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d101      	bne.n	8002fce <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002fca:	2320      	movs	r3, #32
 8002fcc:	e003      	b.n	8002fd6 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002fce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002fd0:	fab3 f383 	clz	r3, r3
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d105      	bne.n	8002ff0 <HAL_ADC_ConfigChannel+0x3e0>
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	0e9b      	lsrs	r3, r3, #26
 8002fea:	f003 031f 	and.w	r3, r3, #31
 8002fee:	e011      	b.n	8003014 <HAL_ADC_ConfigChannel+0x404>
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002ff8:	fa93 f3a3 	rbit	r3, r3
 8002ffc:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002ffe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003000:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8003002:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003004:	2b00      	cmp	r3, #0
 8003006:	d101      	bne.n	800300c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003008:	2320      	movs	r3, #32
 800300a:	e003      	b.n	8003014 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 800300c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800300e:	fab3 f383 	clz	r3, r3
 8003012:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003014:	429a      	cmp	r2, r3
 8003016:	d106      	bne.n	8003026 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2200      	movs	r2, #0
 800301e:	2103      	movs	r1, #3
 8003020:	4618      	mov	r0, r3
 8003022:	f7ff fa47 	bl	80024b4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4618      	mov	r0, r3
 800302c:	f7ff fb70 	bl	8002710 <LL_ADC_IsEnabled>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	f040 8140 	bne.w	80032b8 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6818      	ldr	r0, [r3, #0]
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	6819      	ldr	r1, [r3, #0]
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	461a      	mov	r2, r3
 8003046:	f7ff fabb 	bl	80025c0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	4a8f      	ldr	r2, [pc, #572]	@ (800328c <HAL_ADC_ConfigChannel+0x67c>)
 8003050:	4293      	cmp	r3, r2
 8003052:	f040 8131 	bne.w	80032b8 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003062:	2b00      	cmp	r3, #0
 8003064:	d10b      	bne.n	800307e <HAL_ADC_ConfigChannel+0x46e>
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	0e9b      	lsrs	r3, r3, #26
 800306c:	3301      	adds	r3, #1
 800306e:	f003 031f 	and.w	r3, r3, #31
 8003072:	2b09      	cmp	r3, #9
 8003074:	bf94      	ite	ls
 8003076:	2301      	movls	r3, #1
 8003078:	2300      	movhi	r3, #0
 800307a:	b2db      	uxtb	r3, r3
 800307c:	e019      	b.n	80030b2 <HAL_ADC_ConfigChannel+0x4a2>
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003084:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003086:	fa93 f3a3 	rbit	r3, r3
 800308a:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800308c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800308e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8003090:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003092:	2b00      	cmp	r3, #0
 8003094:	d101      	bne.n	800309a <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8003096:	2320      	movs	r3, #32
 8003098:	e003      	b.n	80030a2 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800309a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800309c:	fab3 f383 	clz	r3, r3
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	3301      	adds	r3, #1
 80030a4:	f003 031f 	and.w	r3, r3, #31
 80030a8:	2b09      	cmp	r3, #9
 80030aa:	bf94      	ite	ls
 80030ac:	2301      	movls	r3, #1
 80030ae:	2300      	movhi	r3, #0
 80030b0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d079      	beq.n	80031aa <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d107      	bne.n	80030d2 <HAL_ADC_ConfigChannel+0x4c2>
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	0e9b      	lsrs	r3, r3, #26
 80030c8:	3301      	adds	r3, #1
 80030ca:	069b      	lsls	r3, r3, #26
 80030cc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80030d0:	e015      	b.n	80030fe <HAL_ADC_ConfigChannel+0x4ee>
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80030da:	fa93 f3a3 	rbit	r3, r3
 80030de:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80030e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80030e2:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80030e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d101      	bne.n	80030ee <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80030ea:	2320      	movs	r3, #32
 80030ec:	e003      	b.n	80030f6 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80030ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80030f0:	fab3 f383 	clz	r3, r3
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	3301      	adds	r3, #1
 80030f8:	069b      	lsls	r3, r3, #26
 80030fa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003106:	2b00      	cmp	r3, #0
 8003108:	d109      	bne.n	800311e <HAL_ADC_ConfigChannel+0x50e>
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	0e9b      	lsrs	r3, r3, #26
 8003110:	3301      	adds	r3, #1
 8003112:	f003 031f 	and.w	r3, r3, #31
 8003116:	2101      	movs	r1, #1
 8003118:	fa01 f303 	lsl.w	r3, r1, r3
 800311c:	e017      	b.n	800314e <HAL_ADC_ConfigChannel+0x53e>
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003124:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003126:	fa93 f3a3 	rbit	r3, r3
 800312a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800312c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800312e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8003130:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003132:	2b00      	cmp	r3, #0
 8003134:	d101      	bne.n	800313a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8003136:	2320      	movs	r3, #32
 8003138:	e003      	b.n	8003142 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800313a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800313c:	fab3 f383 	clz	r3, r3
 8003140:	b2db      	uxtb	r3, r3
 8003142:	3301      	adds	r3, #1
 8003144:	f003 031f 	and.w	r3, r3, #31
 8003148:	2101      	movs	r1, #1
 800314a:	fa01 f303 	lsl.w	r3, r1, r3
 800314e:	ea42 0103 	orr.w	r1, r2, r3
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800315a:	2b00      	cmp	r3, #0
 800315c:	d10a      	bne.n	8003174 <HAL_ADC_ConfigChannel+0x564>
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	0e9b      	lsrs	r3, r3, #26
 8003164:	3301      	adds	r3, #1
 8003166:	f003 021f 	and.w	r2, r3, #31
 800316a:	4613      	mov	r3, r2
 800316c:	005b      	lsls	r3, r3, #1
 800316e:	4413      	add	r3, r2
 8003170:	051b      	lsls	r3, r3, #20
 8003172:	e018      	b.n	80031a6 <HAL_ADC_ConfigChannel+0x596>
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800317a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800317c:	fa93 f3a3 	rbit	r3, r3
 8003180:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8003182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003184:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8003186:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003188:	2b00      	cmp	r3, #0
 800318a:	d101      	bne.n	8003190 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 800318c:	2320      	movs	r3, #32
 800318e:	e003      	b.n	8003198 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8003190:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003192:	fab3 f383 	clz	r3, r3
 8003196:	b2db      	uxtb	r3, r3
 8003198:	3301      	adds	r3, #1
 800319a:	f003 021f 	and.w	r2, r3, #31
 800319e:	4613      	mov	r3, r2
 80031a0:	005b      	lsls	r3, r3, #1
 80031a2:	4413      	add	r3, r2
 80031a4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031a6:	430b      	orrs	r3, r1
 80031a8:	e081      	b.n	80032ae <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d107      	bne.n	80031c6 <HAL_ADC_ConfigChannel+0x5b6>
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	0e9b      	lsrs	r3, r3, #26
 80031bc:	3301      	adds	r3, #1
 80031be:	069b      	lsls	r3, r3, #26
 80031c0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80031c4:	e015      	b.n	80031f2 <HAL_ADC_ConfigChannel+0x5e2>
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031ce:	fa93 f3a3 	rbit	r3, r3
 80031d2:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80031d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80031d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d101      	bne.n	80031e2 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80031de:	2320      	movs	r3, #32
 80031e0:	e003      	b.n	80031ea <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80031e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031e4:	fab3 f383 	clz	r3, r3
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	3301      	adds	r3, #1
 80031ec:	069b      	lsls	r3, r3, #26
 80031ee:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d109      	bne.n	8003212 <HAL_ADC_ConfigChannel+0x602>
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	0e9b      	lsrs	r3, r3, #26
 8003204:	3301      	adds	r3, #1
 8003206:	f003 031f 	and.w	r3, r3, #31
 800320a:	2101      	movs	r1, #1
 800320c:	fa01 f303 	lsl.w	r3, r1, r3
 8003210:	e017      	b.n	8003242 <HAL_ADC_ConfigChannel+0x632>
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	fa93 f3a3 	rbit	r3, r3
 800321e:	61bb      	str	r3, [r7, #24]
  return result;
 8003220:	69bb      	ldr	r3, [r7, #24]
 8003222:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003224:	6a3b      	ldr	r3, [r7, #32]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d101      	bne.n	800322e <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800322a:	2320      	movs	r3, #32
 800322c:	e003      	b.n	8003236 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800322e:	6a3b      	ldr	r3, [r7, #32]
 8003230:	fab3 f383 	clz	r3, r3
 8003234:	b2db      	uxtb	r3, r3
 8003236:	3301      	adds	r3, #1
 8003238:	f003 031f 	and.w	r3, r3, #31
 800323c:	2101      	movs	r1, #1
 800323e:	fa01 f303 	lsl.w	r3, r1, r3
 8003242:	ea42 0103 	orr.w	r1, r2, r3
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800324e:	2b00      	cmp	r3, #0
 8003250:	d10d      	bne.n	800326e <HAL_ADC_ConfigChannel+0x65e>
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	0e9b      	lsrs	r3, r3, #26
 8003258:	3301      	adds	r3, #1
 800325a:	f003 021f 	and.w	r2, r3, #31
 800325e:	4613      	mov	r3, r2
 8003260:	005b      	lsls	r3, r3, #1
 8003262:	4413      	add	r3, r2
 8003264:	3b1e      	subs	r3, #30
 8003266:	051b      	lsls	r3, r3, #20
 8003268:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800326c:	e01e      	b.n	80032ac <HAL_ADC_ConfigChannel+0x69c>
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	fa93 f3a3 	rbit	r3, r3
 800327a:	60fb      	str	r3, [r7, #12]
  return result;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d104      	bne.n	8003290 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8003286:	2320      	movs	r3, #32
 8003288:	e006      	b.n	8003298 <HAL_ADC_ConfigChannel+0x688>
 800328a:	bf00      	nop
 800328c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	fab3 f383 	clz	r3, r3
 8003296:	b2db      	uxtb	r3, r3
 8003298:	3301      	adds	r3, #1
 800329a:	f003 021f 	and.w	r2, r3, #31
 800329e:	4613      	mov	r3, r2
 80032a0:	005b      	lsls	r3, r3, #1
 80032a2:	4413      	add	r3, r2
 80032a4:	3b1e      	subs	r3, #30
 80032a6:	051b      	lsls	r3, r3, #20
 80032a8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032ac:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80032ae:	683a      	ldr	r2, [r7, #0]
 80032b0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032b2:	4619      	mov	r1, r3
 80032b4:	f7ff f958 	bl	8002568 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	4b44      	ldr	r3, [pc, #272]	@ (80033d0 <HAL_ADC_ConfigChannel+0x7c0>)
 80032be:	4013      	ands	r3, r2
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d07a      	beq.n	80033ba <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80032c4:	4843      	ldr	r0, [pc, #268]	@ (80033d4 <HAL_ADC_ConfigChannel+0x7c4>)
 80032c6:	f7ff f8ad 	bl	8002424 <LL_ADC_GetCommonPathInternalCh>
 80032ca:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a41      	ldr	r2, [pc, #260]	@ (80033d8 <HAL_ADC_ConfigChannel+0x7c8>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d12c      	bne.n	8003332 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80032d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80032dc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d126      	bne.n	8003332 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a3c      	ldr	r2, [pc, #240]	@ (80033dc <HAL_ADC_ConfigChannel+0x7cc>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d004      	beq.n	80032f8 <HAL_ADC_ConfigChannel+0x6e8>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a3b      	ldr	r2, [pc, #236]	@ (80033e0 <HAL_ADC_ConfigChannel+0x7d0>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d15d      	bne.n	80033b4 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80032f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80032fc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003300:	4619      	mov	r1, r3
 8003302:	4834      	ldr	r0, [pc, #208]	@ (80033d4 <HAL_ADC_ConfigChannel+0x7c4>)
 8003304:	f7ff f87b 	bl	80023fe <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003308:	4b36      	ldr	r3, [pc, #216]	@ (80033e4 <HAL_ADC_ConfigChannel+0x7d4>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	099b      	lsrs	r3, r3, #6
 800330e:	4a36      	ldr	r2, [pc, #216]	@ (80033e8 <HAL_ADC_ConfigChannel+0x7d8>)
 8003310:	fba2 2303 	umull	r2, r3, r2, r3
 8003314:	099b      	lsrs	r3, r3, #6
 8003316:	1c5a      	adds	r2, r3, #1
 8003318:	4613      	mov	r3, r2
 800331a:	005b      	lsls	r3, r3, #1
 800331c:	4413      	add	r3, r2
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003322:	e002      	b.n	800332a <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	3b01      	subs	r3, #1
 8003328:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d1f9      	bne.n	8003324 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003330:	e040      	b.n	80033b4 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a2d      	ldr	r2, [pc, #180]	@ (80033ec <HAL_ADC_ConfigChannel+0x7dc>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d118      	bne.n	800336e <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800333c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003340:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d112      	bne.n	800336e <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a23      	ldr	r2, [pc, #140]	@ (80033dc <HAL_ADC_ConfigChannel+0x7cc>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d004      	beq.n	800335c <HAL_ADC_ConfigChannel+0x74c>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a22      	ldr	r2, [pc, #136]	@ (80033e0 <HAL_ADC_ConfigChannel+0x7d0>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d12d      	bne.n	80033b8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800335c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003360:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003364:	4619      	mov	r1, r3
 8003366:	481b      	ldr	r0, [pc, #108]	@ (80033d4 <HAL_ADC_ConfigChannel+0x7c4>)
 8003368:	f7ff f849 	bl	80023fe <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800336c:	e024      	b.n	80033b8 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a1f      	ldr	r2, [pc, #124]	@ (80033f0 <HAL_ADC_ConfigChannel+0x7e0>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d120      	bne.n	80033ba <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003378:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800337c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d11a      	bne.n	80033ba <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a14      	ldr	r2, [pc, #80]	@ (80033dc <HAL_ADC_ConfigChannel+0x7cc>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d115      	bne.n	80033ba <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800338e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003392:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003396:	4619      	mov	r1, r3
 8003398:	480e      	ldr	r0, [pc, #56]	@ (80033d4 <HAL_ADC_ConfigChannel+0x7c4>)
 800339a:	f7ff f830 	bl	80023fe <LL_ADC_SetCommonPathInternalCh>
 800339e:	e00c      	b.n	80033ba <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033a4:	f043 0220 	orr.w	r2, r3, #32
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80033b2:	e002      	b.n	80033ba <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80033b4:	bf00      	nop
 80033b6:	e000      	b.n	80033ba <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80033b8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80033c2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	37d8      	adds	r7, #216	@ 0xd8
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	80080000 	.word	0x80080000
 80033d4:	50040300 	.word	0x50040300
 80033d8:	c7520000 	.word	0xc7520000
 80033dc:	50040000 	.word	0x50040000
 80033e0:	50040200 	.word	0x50040200
 80033e4:	20000014 	.word	0x20000014
 80033e8:	053e2d63 	.word	0x053e2d63
 80033ec:	cb840000 	.word	0xcb840000
 80033f0:	80000001 	.word	0x80000001

080033f4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80033fc:	2300      	movs	r3, #0
 80033fe:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4618      	mov	r0, r3
 8003406:	f7ff f983 	bl	8002710 <LL_ADC_IsEnabled>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d169      	bne.n	80034e4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	689a      	ldr	r2, [r3, #8]
 8003416:	4b36      	ldr	r3, [pc, #216]	@ (80034f0 <ADC_Enable+0xfc>)
 8003418:	4013      	ands	r3, r2
 800341a:	2b00      	cmp	r3, #0
 800341c:	d00d      	beq.n	800343a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003422:	f043 0210 	orr.w	r2, r3, #16
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800342e:	f043 0201 	orr.w	r2, r3, #1
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e055      	b.n	80034e6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4618      	mov	r0, r3
 8003440:	f7ff f93e 	bl	80026c0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003444:	482b      	ldr	r0, [pc, #172]	@ (80034f4 <ADC_Enable+0x100>)
 8003446:	f7fe ffed 	bl	8002424 <LL_ADC_GetCommonPathInternalCh>
 800344a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800344c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003450:	2b00      	cmp	r3, #0
 8003452:	d013      	beq.n	800347c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003454:	4b28      	ldr	r3, [pc, #160]	@ (80034f8 <ADC_Enable+0x104>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	099b      	lsrs	r3, r3, #6
 800345a:	4a28      	ldr	r2, [pc, #160]	@ (80034fc <ADC_Enable+0x108>)
 800345c:	fba2 2303 	umull	r2, r3, r2, r3
 8003460:	099b      	lsrs	r3, r3, #6
 8003462:	1c5a      	adds	r2, r3, #1
 8003464:	4613      	mov	r3, r2
 8003466:	005b      	lsls	r3, r3, #1
 8003468:	4413      	add	r3, r2
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800346e:	e002      	b.n	8003476 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	3b01      	subs	r3, #1
 8003474:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d1f9      	bne.n	8003470 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800347c:	f7fe ff7c 	bl	8002378 <HAL_GetTick>
 8003480:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003482:	e028      	b.n	80034d6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4618      	mov	r0, r3
 800348a:	f7ff f941 	bl	8002710 <LL_ADC_IsEnabled>
 800348e:	4603      	mov	r3, r0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d104      	bne.n	800349e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4618      	mov	r0, r3
 800349a:	f7ff f911 	bl	80026c0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800349e:	f7fe ff6b 	bl	8002378 <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d914      	bls.n	80034d6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0301 	and.w	r3, r3, #1
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d00d      	beq.n	80034d6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034be:	f043 0210 	orr.w	r2, r3, #16
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034ca:	f043 0201 	orr.w	r2, r3, #1
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e007      	b.n	80034e6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0301 	and.w	r3, r3, #1
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d1cf      	bne.n	8003484 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3710      	adds	r7, #16
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	8000003f 	.word	0x8000003f
 80034f4:	50040300 	.word	0x50040300
 80034f8:	20000014 	.word	0x20000014
 80034fc:	053e2d63 	.word	0x053e2d63

08003500 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4618      	mov	r0, r3
 800350e:	f7ff f912 	bl	8002736 <LL_ADC_IsDisableOngoing>
 8003512:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4618      	mov	r0, r3
 800351a:	f7ff f8f9 	bl	8002710 <LL_ADC_IsEnabled>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d047      	beq.n	80035b4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d144      	bne.n	80035b4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	f003 030d 	and.w	r3, r3, #13
 8003534:	2b01      	cmp	r3, #1
 8003536:	d10c      	bne.n	8003552 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4618      	mov	r0, r3
 800353e:	f7ff f8d3 	bl	80026e8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2203      	movs	r2, #3
 8003548:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800354a:	f7fe ff15 	bl	8002378 <HAL_GetTick>
 800354e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003550:	e029      	b.n	80035a6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003556:	f043 0210 	orr.w	r2, r3, #16
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003562:	f043 0201 	orr.w	r2, r3, #1
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e023      	b.n	80035b6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800356e:	f7fe ff03 	bl	8002378 <HAL_GetTick>
 8003572:	4602      	mov	r2, r0
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	2b02      	cmp	r3, #2
 800357a:	d914      	bls.n	80035a6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	2b00      	cmp	r3, #0
 8003588:	d00d      	beq.n	80035a6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800358e:	f043 0210 	orr.w	r2, r3, #16
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800359a:	f043 0201 	orr.w	r2, r3, #1
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e007      	b.n	80035b6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	f003 0301 	and.w	r3, r3, #1
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d1dc      	bne.n	800356e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3710      	adds	r7, #16
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}

080035be <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80035be:	b580      	push	{r7, lr}
 80035c0:	b084      	sub	sp, #16
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035ca:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035d0:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d14b      	bne.n	8003670 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035dc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0308 	and.w	r3, r3, #8
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d021      	beq.n	8003636 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7fe ff77 	bl	80024ea <LL_ADC_REG_IsTriggerSourceSWStart>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d032      	beq.n	8003668 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d12b      	bne.n	8003668 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003614:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003620:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d11f      	bne.n	8003668 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800362c:	f043 0201 	orr.w	r2, r3, #1
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	655a      	str	r2, [r3, #84]	@ 0x54
 8003634:	e018      	b.n	8003668 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	f003 0302 	and.w	r3, r3, #2
 8003640:	2b00      	cmp	r3, #0
 8003642:	d111      	bne.n	8003668 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003648:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003654:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003658:	2b00      	cmp	r3, #0
 800365a:	d105      	bne.n	8003668 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003660:	f043 0201 	orr.w	r2, r3, #1
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003668:	68f8      	ldr	r0, [r7, #12]
 800366a:	f7fd fe45 	bl	80012f8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800366e:	e00e      	b.n	800368e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003674:	f003 0310 	and.w	r3, r3, #16
 8003678:	2b00      	cmp	r3, #0
 800367a:	d003      	beq.n	8003684 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800367c:	68f8      	ldr	r0, [r7, #12]
 800367e:	f7ff fabd 	bl	8002bfc <HAL_ADC_ErrorCallback>
}
 8003682:	e004      	b.n	800368e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003688:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	4798      	blx	r3
}
 800368e:	bf00      	nop
 8003690:	3710      	adds	r7, #16
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}

08003696 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003696:	b580      	push	{r7, lr}
 8003698:	b084      	sub	sp, #16
 800369a:	af00      	add	r7, sp, #0
 800369c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036a2:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80036a4:	68f8      	ldr	r0, [r7, #12]
 80036a6:	f7ff fa9f 	bl	8002be8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80036aa:	bf00      	nop
 80036ac:	3710      	adds	r7, #16
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}

080036b2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80036b2:	b580      	push	{r7, lr}
 80036b4:	b084      	sub	sp, #16
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036be:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036c4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036d0:	f043 0204 	orr.w	r2, r3, #4
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80036d8:	68f8      	ldr	r0, [r7, #12]
 80036da:	f7ff fa8f 	bl	8002bfc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80036de:	bf00      	nop
 80036e0:	3710      	adds	r7, #16
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}

080036e6 <LL_ADC_SetCalibrationFactor>:
{
 80036e6:	b480      	push	{r7}
 80036e8:	b085      	sub	sp, #20
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	60f8      	str	r0, [r7, #12]
 80036ee:	60b9      	str	r1, [r7, #8]
 80036f0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CALFACT,
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	f003 137f 	and.w	r3, r3, #8323199	@ 0x7f007f
 80036fe:	43db      	mvns	r3, r3
 8003700:	401a      	ands	r2, r3
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	0b19      	lsrs	r1, r3, #12
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800370c:	43db      	mvns	r3, r3
 800370e:	400b      	ands	r3, r1
 8003710:	f003 0310 	and.w	r3, r3, #16
 8003714:	6879      	ldr	r1, [r7, #4]
 8003716:	fa01 f303 	lsl.w	r3, r1, r3
 800371a:	431a      	orrs	r2, r3
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
}
 8003722:	bf00      	nop
 8003724:	3714      	adds	r7, #20
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr

0800372e <LL_ADC_GetCalibrationFactor>:
{
 800372e:	b480      	push	{r7}
 8003730:	b083      	sub	sp, #12
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
 8003736:	6039      	str	r1, [r7, #0]
  return (uint32_t)(READ_BIT(ADCx->CALFACT,
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	4013      	ands	r3, r2
 8003742:	f003 127f 	and.w	r2, r3, #8323199	@ 0x7f007f
                    >> ((SingleDiff & ADC_SINGLEDIFF_CALIB_F_BIT_D_MASK) >>
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	0b1b      	lsrs	r3, r3, #12
 800374a:	f003 0310 	and.w	r3, r3, #16
  return (uint32_t)(READ_BIT(ADCx->CALFACT,
 800374e:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003752:	4618      	mov	r0, r3
 8003754:	370c      	adds	r7, #12
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr

0800375e <LL_ADC_IsEnabled>:
{
 800375e:	b480      	push	{r7}
 8003760:	b083      	sub	sp, #12
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f003 0301 	and.w	r3, r3, #1
 800376e:	2b01      	cmp	r3, #1
 8003770:	d101      	bne.n	8003776 <LL_ADC_IsEnabled+0x18>
 8003772:	2301      	movs	r3, #1
 8003774:	e000      	b.n	8003778 <LL_ADC_IsEnabled+0x1a>
 8003776:	2300      	movs	r3, #0
}
 8003778:	4618      	mov	r0, r3
 800377a:	370c      	adds	r7, #12
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <LL_ADC_StartCalibration>:
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8003796:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800379a:	683a      	ldr	r2, [r7, #0]
 800379c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80037a0:	4313      	orrs	r3, r2
 80037a2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	609a      	str	r2, [r3, #8]
}
 80037aa:	bf00      	nop
 80037ac:	370c      	adds	r7, #12
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr

080037b6 <LL_ADC_IsCalibrationOnGoing>:
{
 80037b6:	b480      	push	{r7}
 80037b8:	b083      	sub	sp, #12
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80037c6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80037ca:	d101      	bne.n	80037d0 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80037cc:	2301      	movs	r3, #1
 80037ce:	e000      	b.n	80037d2 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80037d0:	2300      	movs	r3, #0
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	370c      	adds	r7, #12
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr

080037de <LL_ADC_REG_IsConversionOngoing>:
{
 80037de:	b480      	push	{r7}
 80037e0:	b083      	sub	sp, #12
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	f003 0304 	and.w	r3, r3, #4
 80037ee:	2b04      	cmp	r3, #4
 80037f0:	d101      	bne.n	80037f6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80037f2:	2301      	movs	r3, #1
 80037f4:	e000      	b.n	80037f8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80037f6:	2300      	movs	r3, #0
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	370c      	adds	r7, #12
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr

08003804 <LL_ADC_INJ_IsConversionOngoing>:
{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f003 0308 	and.w	r3, r3, #8
 8003814:	2b08      	cmp	r3, #8
 8003816:	d101      	bne.n	800381c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003818:	2301      	movs	r3, #1
 800381a:	e000      	b.n	800381e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800381c:	2300      	movs	r3, #0
}
 800381e:	4618      	mov	r0, r3
 8003820:	370c      	adds	r7, #12
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr

0800382a <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800382a:	b580      	push	{r7, lr}
 800382c:	b084      	sub	sp, #16
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]
 8003832:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003834:	2300      	movs	r3, #0
 8003836:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800383e:	2b01      	cmp	r3, #1
 8003840:	d101      	bne.n	8003846 <HAL_ADCEx_Calibration_Start+0x1c>
 8003842:	2302      	movs	r3, #2
 8003844:	e04d      	b.n	80038e2 <HAL_ADCEx_Calibration_Start+0xb8>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2201      	movs	r2, #1
 800384a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f7ff fe56 	bl	8003500 <ADC_Disable>
 8003854:	4603      	mov	r3, r0
 8003856:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003858:	7bfb      	ldrb	r3, [r7, #15]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d136      	bne.n	80038cc <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003862:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003866:	f023 0302 	bic.w	r3, r3, #2
 800386a:	f043 0202 	orr.w	r2, r3, #2
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	6839      	ldr	r1, [r7, #0]
 8003878:	4618      	mov	r0, r3
 800387a:	f7ff ff83 	bl	8003784 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800387e:	e014      	b.n	80038aa <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	3301      	adds	r3, #1
 8003884:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 800388c:	d30d      	bcc.n	80038aa <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003892:	f023 0312 	bic.w	r3, r3, #18
 8003896:	f043 0210 	orr.w	r2, r3, #16
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e01b      	b.n	80038e2 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4618      	mov	r0, r3
 80038b0:	f7ff ff81 	bl	80037b6 <LL_ADC_IsCalibrationOnGoing>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d1e2      	bne.n	8003880 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038be:	f023 0303 	bic.w	r3, r3, #3
 80038c2:	f043 0201 	orr.w	r2, r3, #1
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	655a      	str	r2, [r3, #84]	@ 0x54
 80038ca:	e005      	b.n	80038d8 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038d0:	f043 0210 	orr.w	r2, r3, #16
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80038e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3710      	adds	r7, #16
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}

080038ea <HAL_ADCEx_Calibration_GetValue>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval Calibration value.
  */
uint32_t HAL_ADCEx_Calibration_GetValue(const ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80038ea:	b580      	push	{r7, lr}
 80038ec:	b082      	sub	sp, #8
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	6078      	str	r0, [r7, #4]
 80038f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Return the selected ADC calibration value */
  return LL_ADC_GetCalibrationFactor(hadc->Instance, SingleDiff);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	6839      	ldr	r1, [r7, #0]
 80038fa:	4618      	mov	r0, r3
 80038fc:	f7ff ff17 	bl	800372e <LL_ADC_GetCalibrationFactor>
 8003900:	4603      	mov	r3, r0
}
 8003902:	4618      	mov	r0, r3
 8003904:	3708      	adds	r7, #8
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}

0800390a <HAL_ADCEx_Calibration_SetValue>:
  * @param CalibrationFactor Calibration factor (coded on 7 bits maximum)
  * @retval HAL state
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_SetValue(ADC_HandleTypeDef *hadc, uint32_t SingleDiff,
                                                 uint32_t CalibrationFactor)
{
 800390a:	b580      	push	{r7, lr}
 800390c:	b088      	sub	sp, #32
 800390e:	af00      	add	r7, sp, #0
 8003910:	60f8      	str	r0, [r7, #12]
 8003912:	60b9      	str	r1, [r7, #8]
 8003914:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003916:	2300      	movs	r3, #0
 8003918:	77fb      	strb	r3, [r7, #31]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));
  assert_param(IS_ADC_CALFACT(CalibrationFactor));

  /* Process locked */
  __HAL_LOCK(hadc);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003920:	2b01      	cmp	r3, #1
 8003922:	d101      	bne.n	8003928 <HAL_ADCEx_Calibration_SetValue+0x1e>
 8003924:	2302      	movs	r3, #2
 8003926:	e038      	b.n	800399a <HAL_ADCEx_Calibration_SetValue+0x90>
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Verification of hardware constraints before modifying the calibration    */
  /* factors register: ADC must be enabled, no conversion on going.           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4618      	mov	r0, r3
 8003936:	f7ff ff52 	bl	80037de <LL_ADC_REG_IsConversionOngoing>
 800393a:	61b8      	str	r0, [r7, #24]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4618      	mov	r0, r3
 8003942:	f7ff ff5f 	bl	8003804 <LL_ADC_INJ_IsConversionOngoing>
 8003946:	6178      	str	r0, [r7, #20]

  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4618      	mov	r0, r3
 800394e:	f7ff ff06 	bl	800375e <LL_ADC_IsEnabled>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d00d      	beq.n	8003974 <HAL_ADCEx_Calibration_SetValue+0x6a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d10a      	bne.n	8003974 <HAL_ADCEx_Calibration_SetValue+0x6a>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d107      	bne.n	8003974 <HAL_ADCEx_Calibration_SetValue+0x6a>
     )
  {
    /* Set the selected ADC calibration value */
    LL_ADC_SetCalibrationFactor(hadc->Instance, SingleDiff, CalibrationFactor);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	68b9      	ldr	r1, [r7, #8]
 800396c:	4618      	mov	r0, r3
 800396e:	f7ff feba 	bl	80036e6 <LL_ADC_SetCalibrationFactor>
 8003972:	e00d      	b.n	8003990 <HAL_ADCEx_Calibration_SetValue+0x86>
  }
  else
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003978:	f043 0220 	orr.w	r2, r3, #32
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Update ADC error code */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003984:	f043 0201 	orr.w	r2, r3, #1
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Update ADC state machine to error */
    tmp_hal_status = HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2200      	movs	r2, #0
 8003994:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003998:	7ffb      	ldrb	r3, [r7, #31]
}
 800399a:	4618      	mov	r0, r3
 800399c:	3720      	adds	r7, #32
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
	...

080039a4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80039a4:	b590      	push	{r4, r7, lr}
 80039a6:	b09f      	sub	sp, #124	@ 0x7c
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039ae:	2300      	movs	r3, #0
 80039b0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d101      	bne.n	80039c2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80039be:	2302      	movs	r3, #2
 80039c0:	e093      	b.n	8003aea <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2201      	movs	r2, #1
 80039c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80039ca:	2300      	movs	r3, #0
 80039cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80039ce:	2300      	movs	r3, #0
 80039d0:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a47      	ldr	r2, [pc, #284]	@ (8003af4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d102      	bne.n	80039e2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80039dc:	4b46      	ldr	r3, [pc, #280]	@ (8003af8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80039de:	60bb      	str	r3, [r7, #8]
 80039e0:	e001      	b.n	80039e6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80039e2:	2300      	movs	r3, #0
 80039e4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d10b      	bne.n	8003a04 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039f0:	f043 0220 	orr.w	r2, r3, #32
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e072      	b.n	8003aea <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7ff fee9 	bl	80037de <LL_ADC_REG_IsConversionOngoing>
 8003a0c:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4618      	mov	r0, r3
 8003a14:	f7ff fee3 	bl	80037de <LL_ADC_REG_IsConversionOngoing>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d154      	bne.n	8003ac8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003a1e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d151      	bne.n	8003ac8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003a24:	4b35      	ldr	r3, [pc, #212]	@ (8003afc <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8003a26:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d02c      	beq.n	8003a8a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003a30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	6859      	ldr	r1, [r3, #4]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003a42:	035b      	lsls	r3, r3, #13
 8003a44:	430b      	orrs	r3, r1
 8003a46:	431a      	orrs	r2, r3
 8003a48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a4a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a4c:	4829      	ldr	r0, [pc, #164]	@ (8003af4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003a4e:	f7ff fe86 	bl	800375e <LL_ADC_IsEnabled>
 8003a52:	4604      	mov	r4, r0
 8003a54:	4828      	ldr	r0, [pc, #160]	@ (8003af8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003a56:	f7ff fe82 	bl	800375e <LL_ADC_IsEnabled>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	431c      	orrs	r4, r3
 8003a5e:	4828      	ldr	r0, [pc, #160]	@ (8003b00 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003a60:	f7ff fe7d 	bl	800375e <LL_ADC_IsEnabled>
 8003a64:	4603      	mov	r3, r0
 8003a66:	4323      	orrs	r3, r4
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d137      	bne.n	8003adc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003a6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003a74:	f023 030f 	bic.w	r3, r3, #15
 8003a78:	683a      	ldr	r2, [r7, #0]
 8003a7a:	6811      	ldr	r1, [r2, #0]
 8003a7c:	683a      	ldr	r2, [r7, #0]
 8003a7e:	6892      	ldr	r2, [r2, #8]
 8003a80:	430a      	orrs	r2, r1
 8003a82:	431a      	orrs	r2, r3
 8003a84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a86:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003a88:	e028      	b.n	8003adc <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003a8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003a92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a94:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a96:	4817      	ldr	r0, [pc, #92]	@ (8003af4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003a98:	f7ff fe61 	bl	800375e <LL_ADC_IsEnabled>
 8003a9c:	4604      	mov	r4, r0
 8003a9e:	4816      	ldr	r0, [pc, #88]	@ (8003af8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003aa0:	f7ff fe5d 	bl	800375e <LL_ADC_IsEnabled>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	431c      	orrs	r4, r3
 8003aa8:	4815      	ldr	r0, [pc, #84]	@ (8003b00 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003aaa:	f7ff fe58 	bl	800375e <LL_ADC_IsEnabled>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	4323      	orrs	r3, r4
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d112      	bne.n	8003adc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003ab6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003abe:	f023 030f 	bic.w	r3, r3, #15
 8003ac2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003ac4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003ac6:	e009      	b.n	8003adc <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003acc:	f043 0220 	orr.w	r2, r3, #32
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8003ada:	e000      	b.n	8003ade <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003adc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003ae6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	377c      	adds	r7, #124	@ 0x7c
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd90      	pop	{r4, r7, pc}
 8003af2:	bf00      	nop
 8003af4:	50040000 	.word	0x50040000
 8003af8:	50040100 	.word	0x50040100
 8003afc:	50040300 	.word	0x50040300
 8003b00:	50040200 	.word	0x50040200

08003b04 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d101      	bne.n	8003b16 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e0ed      	b.n	8003cf2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d102      	bne.n	8003b28 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f7fe f944 	bl	8001db0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f042 0201 	orr.w	r2, r2, #1
 8003b36:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b38:	f7fe fc1e 	bl	8002378 <HAL_GetTick>
 8003b3c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003b3e:	e012      	b.n	8003b66 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003b40:	f7fe fc1a 	bl	8002378 <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	2b0a      	cmp	r3, #10
 8003b4c:	d90b      	bls.n	8003b66 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b52:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2205      	movs	r2, #5
 8003b5e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e0c5      	b.n	8003cf2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f003 0301 	and.w	r3, r3, #1
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d0e5      	beq.n	8003b40 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f022 0202 	bic.w	r2, r2, #2
 8003b82:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b84:	f7fe fbf8 	bl	8002378 <HAL_GetTick>
 8003b88:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003b8a:	e012      	b.n	8003bb2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003b8c:	f7fe fbf4 	bl	8002378 <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	2b0a      	cmp	r3, #10
 8003b98:	d90b      	bls.n	8003bb2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b9e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2205      	movs	r2, #5
 8003baa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e09f      	b.n	8003cf2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f003 0302 	and.w	r3, r3, #2
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d1e5      	bne.n	8003b8c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	7e1b      	ldrb	r3, [r3, #24]
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d108      	bne.n	8003bda <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003bd6:	601a      	str	r2, [r3, #0]
 8003bd8:	e007      	b.n	8003bea <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003be8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	7e5b      	ldrb	r3, [r3, #25]
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d108      	bne.n	8003c04 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003c00:	601a      	str	r2, [r3, #0]
 8003c02:	e007      	b.n	8003c14 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c12:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	7e9b      	ldrb	r3, [r3, #26]
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d108      	bne.n	8003c2e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f042 0220 	orr.w	r2, r2, #32
 8003c2a:	601a      	str	r2, [r3, #0]
 8003c2c:	e007      	b.n	8003c3e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f022 0220 	bic.w	r2, r2, #32
 8003c3c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	7edb      	ldrb	r3, [r3, #27]
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d108      	bne.n	8003c58 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f022 0210 	bic.w	r2, r2, #16
 8003c54:	601a      	str	r2, [r3, #0]
 8003c56:	e007      	b.n	8003c68 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f042 0210 	orr.w	r2, r2, #16
 8003c66:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	7f1b      	ldrb	r3, [r3, #28]
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d108      	bne.n	8003c82 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f042 0208 	orr.w	r2, r2, #8
 8003c7e:	601a      	str	r2, [r3, #0]
 8003c80:	e007      	b.n	8003c92 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f022 0208 	bic.w	r2, r2, #8
 8003c90:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	7f5b      	ldrb	r3, [r3, #29]
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d108      	bne.n	8003cac <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f042 0204 	orr.w	r2, r2, #4
 8003ca8:	601a      	str	r2, [r3, #0]
 8003caa:	e007      	b.n	8003cbc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f022 0204 	bic.w	r2, r2, #4
 8003cba:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	689a      	ldr	r2, [r3, #8]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	431a      	orrs	r2, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	431a      	orrs	r2, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	695b      	ldr	r3, [r3, #20]
 8003cd0:	ea42 0103 	orr.w	r1, r2, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	1e5a      	subs	r2, r3, #1
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	430a      	orrs	r2, r1
 8003ce0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3710      	adds	r7, #16
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}

08003cfa <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8003cfa:	b480      	push	{r7}
 8003cfc:	b087      	sub	sp, #28
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
 8003d02:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d10:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003d12:	7cfb      	ldrb	r3, [r7, #19]
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d003      	beq.n	8003d20 <HAL_CAN_ConfigFilter+0x26>
 8003d18:	7cfb      	ldrb	r3, [r7, #19]
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	f040 80aa 	bne.w	8003e74 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003d26:	f043 0201 	orr.w	r2, r3, #1
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	695b      	ldr	r3, [r3, #20]
 8003d34:	f003 031f 	and.w	r3, r3, #31
 8003d38:	2201      	movs	r2, #1
 8003d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	43db      	mvns	r3, r3
 8003d4a:	401a      	ands	r2, r3
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	69db      	ldr	r3, [r3, #28]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d123      	bne.n	8003da2 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	43db      	mvns	r3, r3
 8003d64:	401a      	ands	r2, r3
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003d78:	683a      	ldr	r2, [r7, #0]
 8003d7a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003d7c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	3248      	adds	r2, #72	@ 0x48
 8003d82:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003d96:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003d98:	6979      	ldr	r1, [r7, #20]
 8003d9a:	3348      	adds	r3, #72	@ 0x48
 8003d9c:	00db      	lsls	r3, r3, #3
 8003d9e:	440b      	add	r3, r1
 8003da0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	69db      	ldr	r3, [r3, #28]
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d122      	bne.n	8003df0 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	431a      	orrs	r2, r3
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003dc6:	683a      	ldr	r2, [r7, #0]
 8003dc8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003dca:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	3248      	adds	r2, #72	@ 0x48
 8003dd0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003de4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003de6:	6979      	ldr	r1, [r7, #20]
 8003de8:	3348      	adds	r3, #72	@ 0x48
 8003dea:	00db      	lsls	r3, r3, #3
 8003dec:	440b      	add	r3, r1
 8003dee:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	699b      	ldr	r3, [r3, #24]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d109      	bne.n	8003e0c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	43db      	mvns	r3, r3
 8003e02:	401a      	ands	r2, r3
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8003e0a:	e007      	b.n	8003e1c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	431a      	orrs	r2, r3
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	691b      	ldr	r3, [r3, #16]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d109      	bne.n	8003e38 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	43db      	mvns	r3, r3
 8003e2e:	401a      	ands	r2, r3
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8003e36:	e007      	b.n	8003e48 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	431a      	orrs	r2, r3
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	6a1b      	ldr	r3, [r3, #32]
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d107      	bne.n	8003e60 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	431a      	orrs	r2, r3
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003e66:	f023 0201 	bic.w	r2, r3, #1
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8003e70:	2300      	movs	r3, #0
 8003e72:	e006      	b.n	8003e82 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e78:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
  }
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	371c      	adds	r7, #28
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr

08003e8e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003e8e:	b580      	push	{r7, lr}
 8003e90:	b084      	sub	sp, #16
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d12e      	bne.n	8003f00 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2202      	movs	r2, #2
 8003ea6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f022 0201 	bic.w	r2, r2, #1
 8003eb8:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003eba:	f7fe fa5d 	bl	8002378 <HAL_GetTick>
 8003ebe:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003ec0:	e012      	b.n	8003ee8 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003ec2:	f7fe fa59 	bl	8002378 <HAL_GetTick>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	2b0a      	cmp	r3, #10
 8003ece:	d90b      	bls.n	8003ee8 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed4:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2205      	movs	r2, #5
 8003ee0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e012      	b.n	8003f0e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	f003 0301 	and.w	r3, r3, #1
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d1e5      	bne.n	8003ec2 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8003efc:	2300      	movs	r3, #0
 8003efe:	e006      	b.n	8003f0e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f04:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
  }
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3710      	adds	r7, #16
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}

08003f16 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8003f16:	b480      	push	{r7}
 8003f18:	b089      	sub	sp, #36	@ 0x24
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	60f8      	str	r0, [r7, #12]
 8003f1e:	60b9      	str	r1, [r7, #8]
 8003f20:	607a      	str	r2, [r7, #4]
 8003f22:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f2a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003f34:	7ffb      	ldrb	r3, [r7, #31]
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d003      	beq.n	8003f42 <HAL_CAN_AddTxMessage+0x2c>
 8003f3a:	7ffb      	ldrb	r3, [r7, #31]
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	f040 80ad 	bne.w	800409c <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003f42:	69bb      	ldr	r3, [r7, #24]
 8003f44:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d10a      	bne.n	8003f62 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003f4c:	69bb      	ldr	r3, [r7, #24]
 8003f4e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d105      	bne.n	8003f62 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	f000 8095 	beq.w	800408c <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003f62:	69bb      	ldr	r3, [r7, #24]
 8003f64:	0e1b      	lsrs	r3, r3, #24
 8003f66:	f003 0303 	and.w	r3, r3, #3
 8003f6a:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	409a      	lsls	r2, r3
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d10d      	bne.n	8003f9a <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003f88:	68f9      	ldr	r1, [r7, #12]
 8003f8a:	6809      	ldr	r1, [r1, #0]
 8003f8c:	431a      	orrs	r2, r3
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	3318      	adds	r3, #24
 8003f92:	011b      	lsls	r3, r3, #4
 8003f94:	440b      	add	r3, r1
 8003f96:	601a      	str	r2, [r3, #0]
 8003f98:	e00f      	b.n	8003fba <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003fa4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003faa:	68f9      	ldr	r1, [r7, #12]
 8003fac:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003fae:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	3318      	adds	r3, #24
 8003fb4:	011b      	lsls	r3, r3, #4
 8003fb6:	440b      	add	r3, r1
 8003fb8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6819      	ldr	r1, [r3, #0]
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	691a      	ldr	r2, [r3, #16]
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	3318      	adds	r3, #24
 8003fc6:	011b      	lsls	r3, r3, #4
 8003fc8:	440b      	add	r3, r1
 8003fca:	3304      	adds	r3, #4
 8003fcc:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	7d1b      	ldrb	r3, [r3, #20]
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d111      	bne.n	8003ffa <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	3318      	adds	r3, #24
 8003fde:	011b      	lsls	r3, r3, #4
 8003fe0:	4413      	add	r3, r2
 8003fe2:	3304      	adds	r3, #4
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	68fa      	ldr	r2, [r7, #12]
 8003fe8:	6811      	ldr	r1, [r2, #0]
 8003fea:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	3318      	adds	r3, #24
 8003ff2:	011b      	lsls	r3, r3, #4
 8003ff4:	440b      	add	r3, r1
 8003ff6:	3304      	adds	r3, #4
 8003ff8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	3307      	adds	r3, #7
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	061a      	lsls	r2, r3, #24
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	3306      	adds	r3, #6
 8004006:	781b      	ldrb	r3, [r3, #0]
 8004008:	041b      	lsls	r3, r3, #16
 800400a:	431a      	orrs	r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	3305      	adds	r3, #5
 8004010:	781b      	ldrb	r3, [r3, #0]
 8004012:	021b      	lsls	r3, r3, #8
 8004014:	4313      	orrs	r3, r2
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	3204      	adds	r2, #4
 800401a:	7812      	ldrb	r2, [r2, #0]
 800401c:	4610      	mov	r0, r2
 800401e:	68fa      	ldr	r2, [r7, #12]
 8004020:	6811      	ldr	r1, [r2, #0]
 8004022:	ea43 0200 	orr.w	r2, r3, r0
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	011b      	lsls	r3, r3, #4
 800402a:	440b      	add	r3, r1
 800402c:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8004030:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	3303      	adds	r3, #3
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	061a      	lsls	r2, r3, #24
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	3302      	adds	r3, #2
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	041b      	lsls	r3, r3, #16
 8004042:	431a      	orrs	r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	3301      	adds	r3, #1
 8004048:	781b      	ldrb	r3, [r3, #0]
 800404a:	021b      	lsls	r3, r3, #8
 800404c:	4313      	orrs	r3, r2
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	7812      	ldrb	r2, [r2, #0]
 8004052:	4610      	mov	r0, r2
 8004054:	68fa      	ldr	r2, [r7, #12]
 8004056:	6811      	ldr	r1, [r2, #0]
 8004058:	ea43 0200 	orr.w	r2, r3, r0
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	011b      	lsls	r3, r3, #4
 8004060:	440b      	add	r3, r1
 8004062:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8004066:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	3318      	adds	r3, #24
 8004070:	011b      	lsls	r3, r3, #4
 8004072:	4413      	add	r3, r2
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	68fa      	ldr	r2, [r7, #12]
 8004078:	6811      	ldr	r1, [r2, #0]
 800407a:	f043 0201 	orr.w	r2, r3, #1
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	3318      	adds	r3, #24
 8004082:	011b      	lsls	r3, r3, #4
 8004084:	440b      	add	r3, r1
 8004086:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004088:	2300      	movs	r3, #0
 800408a:	e00e      	b.n	80040aa <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004090:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e006      	b.n	80040aa <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040a0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
  }
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3724      	adds	r7, #36	@ 0x24
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr

080040b6 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 80040b6:	b480      	push	{r7}
 80040b8:	b085      	sub	sp, #20
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80040be:	2300      	movs	r3, #0
 80040c0:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040c8:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80040ca:	7afb      	ldrb	r3, [r7, #11]
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d002      	beq.n	80040d6 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80040d0:	7afb      	ldrb	r3, [r7, #11]
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d11d      	bne.n	8004112 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d002      	beq.n	80040ea <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	3301      	adds	r3, #1
 80040e8:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d002      	beq.n	80040fe <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	3301      	adds	r3, #1
 80040fc:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004108:	2b00      	cmp	r3, #0
 800410a:	d002      	beq.n	8004112 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	3301      	adds	r3, #1
 8004110:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8004112:	68fb      	ldr	r3, [r7, #12]
}
 8004114:	4618      	mov	r0, r3
 8004116:	3714      	adds	r7, #20
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8004120:	b480      	push	{r7}
 8004122:	b085      	sub	sp, #20
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 800412a:	2300      	movs	r3, #0
 800412c:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004134:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8004136:	7afb      	ldrb	r3, [r7, #11]
 8004138:	2b01      	cmp	r3, #1
 800413a:	d002      	beq.n	8004142 <HAL_CAN_IsTxMessagePending+0x22>
 800413c:	7afb      	ldrb	r3, [r7, #11]
 800413e:	2b02      	cmp	r3, #2
 8004140:	d10b      	bne.n	800415a <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	689a      	ldr	r2, [r3, #8]
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	069b      	lsls	r3, r3, #26
 800414c:	401a      	ands	r2, r3
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	069b      	lsls	r3, r3, #26
 8004152:	429a      	cmp	r2, r3
 8004154:	d001      	beq.n	800415a <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8004156:	2301      	movs	r3, #1
 8004158:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 800415a:	68fb      	ldr	r3, [r7, #12]
}
 800415c:	4618      	mov	r0, r3
 800415e:	3714      	adds	r7, #20
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004168:	b480      	push	{r7}
 800416a:	b087      	sub	sp, #28
 800416c:	af00      	add	r7, sp, #0
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	60b9      	str	r1, [r7, #8]
 8004172:	607a      	str	r2, [r7, #4]
 8004174:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	f893 3020 	ldrb.w	r3, [r3, #32]
 800417c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800417e:	7dfb      	ldrb	r3, [r7, #23]
 8004180:	2b01      	cmp	r3, #1
 8004182:	d003      	beq.n	800418c <HAL_CAN_GetRxMessage+0x24>
 8004184:	7dfb      	ldrb	r3, [r7, #23]
 8004186:	2b02      	cmp	r3, #2
 8004188:	f040 8103 	bne.w	8004392 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d10e      	bne.n	80041b0 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	f003 0303 	and.w	r3, r3, #3
 800419c:	2b00      	cmp	r3, #0
 800419e:	d116      	bne.n	80041ce <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e0f7      	b.n	80043a0 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	f003 0303 	and.w	r3, r3, #3
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d107      	bne.n	80041ce <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041c2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e0e8      	b.n	80043a0 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	331b      	adds	r3, #27
 80041d6:	011b      	lsls	r3, r3, #4
 80041d8:	4413      	add	r3, r2
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0204 	and.w	r2, r3, #4
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d10c      	bne.n	8004206 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	331b      	adds	r3, #27
 80041f4:	011b      	lsls	r3, r3, #4
 80041f6:	4413      	add	r3, r2
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	0d5b      	lsrs	r3, r3, #21
 80041fc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	601a      	str	r2, [r3, #0]
 8004204:	e00b      	b.n	800421e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	331b      	adds	r3, #27
 800420e:	011b      	lsls	r3, r3, #4
 8004210:	4413      	add	r3, r2
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	08db      	lsrs	r3, r3, #3
 8004216:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	331b      	adds	r3, #27
 8004226:	011b      	lsls	r3, r3, #4
 8004228:	4413      	add	r3, r2
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 0202 	and.w	r2, r3, #2
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	331b      	adds	r3, #27
 800423c:	011b      	lsls	r3, r3, #4
 800423e:	4413      	add	r3, r2
 8004240:	3304      	adds	r3, #4
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0308 	and.w	r3, r3, #8
 8004248:	2b00      	cmp	r3, #0
 800424a:	d003      	beq.n	8004254 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2208      	movs	r2, #8
 8004250:	611a      	str	r2, [r3, #16]
 8004252:	e00b      	b.n	800426c <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	331b      	adds	r3, #27
 800425c:	011b      	lsls	r3, r3, #4
 800425e:	4413      	add	r3, r2
 8004260:	3304      	adds	r3, #4
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 020f 	and.w	r2, r3, #15
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	331b      	adds	r3, #27
 8004274:	011b      	lsls	r3, r3, #4
 8004276:	4413      	add	r3, r2
 8004278:	3304      	adds	r3, #4
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	0a1b      	lsrs	r3, r3, #8
 800427e:	b2da      	uxtb	r2, r3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	331b      	adds	r3, #27
 800428c:	011b      	lsls	r3, r3, #4
 800428e:	4413      	add	r3, r2
 8004290:	3304      	adds	r3, #4
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	0c1b      	lsrs	r3, r3, #16
 8004296:	b29a      	uxth	r2, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	011b      	lsls	r3, r3, #4
 80042a4:	4413      	add	r3, r2
 80042a6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	b2da      	uxtb	r2, r3
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	011b      	lsls	r3, r3, #4
 80042ba:	4413      	add	r3, r2
 80042bc:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	0a1a      	lsrs	r2, r3, #8
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	3301      	adds	r3, #1
 80042c8:	b2d2      	uxtb	r2, r2
 80042ca:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	011b      	lsls	r3, r3, #4
 80042d4:	4413      	add	r3, r2
 80042d6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	0c1a      	lsrs	r2, r3, #16
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	3302      	adds	r3, #2
 80042e2:	b2d2      	uxtb	r2, r2
 80042e4:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	011b      	lsls	r3, r3, #4
 80042ee:	4413      	add	r3, r2
 80042f0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	0e1a      	lsrs	r2, r3, #24
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	3303      	adds	r3, #3
 80042fc:	b2d2      	uxtb	r2, r2
 80042fe:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	011b      	lsls	r3, r3, #4
 8004308:	4413      	add	r3, r2
 800430a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	3304      	adds	r3, #4
 8004314:	b2d2      	uxtb	r2, r2
 8004316:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	011b      	lsls	r3, r3, #4
 8004320:	4413      	add	r3, r2
 8004322:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	0a1a      	lsrs	r2, r3, #8
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	3305      	adds	r3, #5
 800432e:	b2d2      	uxtb	r2, r2
 8004330:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	011b      	lsls	r3, r3, #4
 800433a:	4413      	add	r3, r2
 800433c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	0c1a      	lsrs	r2, r3, #16
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	3306      	adds	r3, #6
 8004348:	b2d2      	uxtb	r2, r2
 800434a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	011b      	lsls	r3, r3, #4
 8004354:	4413      	add	r3, r2
 8004356:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	0e1a      	lsrs	r2, r3, #24
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	3307      	adds	r3, #7
 8004362:	b2d2      	uxtb	r2, r2
 8004364:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d108      	bne.n	800437e <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68da      	ldr	r2, [r3, #12]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f042 0220 	orr.w	r2, r2, #32
 800437a:	60da      	str	r2, [r3, #12]
 800437c:	e007      	b.n	800438e <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	691a      	ldr	r2, [r3, #16]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f042 0220 	orr.w	r2, r2, #32
 800438c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800438e:	2300      	movs	r3, #0
 8004390:	e006      	b.n	80043a0 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004396:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
  }
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	371c      	adds	r7, #28
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr

080043ac <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b085      	sub	sp, #20
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 80043b6:	2300      	movs	r3, #0
 80043b8:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80043c0:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80043c2:	7afb      	ldrb	r3, [r7, #11]
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d002      	beq.n	80043ce <HAL_CAN_GetRxFifoFillLevel+0x22>
 80043c8:	7afb      	ldrb	r3, [r7, #11]
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d10f      	bne.n	80043ee <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d106      	bne.n	80043e2 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	f003 0303 	and.w	r3, r3, #3
 80043de:	60fb      	str	r3, [r7, #12]
 80043e0:	e005      	b.n	80043ee <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	691b      	ldr	r3, [r3, #16]
 80043e8:	f003 0303 	and.w	r3, r3, #3
 80043ec:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 80043ee:	68fb      	ldr	r3, [r7, #12]
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3714      	adds	r7, #20
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr

080043fc <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b085      	sub	sp, #20
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f893 3020 	ldrb.w	r3, [r3, #32]
 800440c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800440e:	7bfb      	ldrb	r3, [r7, #15]
 8004410:	2b01      	cmp	r3, #1
 8004412:	d002      	beq.n	800441a <HAL_CAN_ActivateNotification+0x1e>
 8004414:	7bfb      	ldrb	r3, [r7, #15]
 8004416:	2b02      	cmp	r3, #2
 8004418:	d109      	bne.n	800442e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	6959      	ldr	r1, [r3, #20]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	683a      	ldr	r2, [r7, #0]
 8004426:	430a      	orrs	r2, r1
 8004428:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800442a:	2300      	movs	r3, #0
 800442c:	e006      	b.n	800443c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004432:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
  }
}
 800443c:	4618      	mov	r0, r3
 800443e:	3714      	adds	r7, #20
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr

08004448 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b08a      	sub	sp, #40	@ 0x28
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004450:	2300      	movs	r3, #0
 8004452:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	695b      	ldr	r3, [r3, #20]
 800445a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	68db      	ldr	r3, [r3, #12]
 8004472:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	699b      	ldr	r3, [r3, #24]
 8004482:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004484:	6a3b      	ldr	r3, [r7, #32]
 8004486:	f003 0301 	and.w	r3, r3, #1
 800448a:	2b00      	cmp	r3, #0
 800448c:	d07c      	beq.n	8004588 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	f003 0301 	and.w	r3, r3, #1
 8004494:	2b00      	cmp	r3, #0
 8004496:	d023      	beq.n	80044e0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	2201      	movs	r2, #1
 800449e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80044a0:	69bb      	ldr	r3, [r7, #24]
 80044a2:	f003 0302 	and.w	r3, r3, #2
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d003      	beq.n	80044b2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f000 f983 	bl	80047b6 <HAL_CAN_TxMailbox0CompleteCallback>
 80044b0:	e016      	b.n	80044e0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80044b2:	69bb      	ldr	r3, [r7, #24]
 80044b4:	f003 0304 	and.w	r3, r3, #4
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d004      	beq.n	80044c6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80044bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044be:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80044c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80044c4:	e00c      	b.n	80044e0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	f003 0308 	and.w	r3, r3, #8
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d004      	beq.n	80044da <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80044d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044d2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80044d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80044d8:	e002      	b.n	80044e0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f000 f989 	bl	80047f2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80044e0:	69bb      	ldr	r3, [r7, #24]
 80044e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d024      	beq.n	8004534 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80044f2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80044f4:	69bb      	ldr	r3, [r7, #24]
 80044f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d003      	beq.n	8004506 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 f963 	bl	80047ca <HAL_CAN_TxMailbox1CompleteCallback>
 8004504:	e016      	b.n	8004534 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800450c:	2b00      	cmp	r3, #0
 800450e:	d004      	beq.n	800451a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004512:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004516:	627b      	str	r3, [r7, #36]	@ 0x24
 8004518:	e00c      	b.n	8004534 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004520:	2b00      	cmp	r3, #0
 8004522:	d004      	beq.n	800452e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004526:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800452a:	627b      	str	r3, [r7, #36]	@ 0x24
 800452c:	e002      	b.n	8004534 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f000 f969 	bl	8004806 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004534:	69bb      	ldr	r3, [r7, #24]
 8004536:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d024      	beq.n	8004588 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004546:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004548:	69bb      	ldr	r3, [r7, #24]
 800454a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d003      	beq.n	800455a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f000 f943 	bl	80047de <HAL_CAN_TxMailbox2CompleteCallback>
 8004558:	e016      	b.n	8004588 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800455a:	69bb      	ldr	r3, [r7, #24]
 800455c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d004      	beq.n	800456e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004566:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800456a:	627b      	str	r3, [r7, #36]	@ 0x24
 800456c:	e00c      	b.n	8004588 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800456e:	69bb      	ldr	r3, [r7, #24]
 8004570:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004574:	2b00      	cmp	r3, #0
 8004576:	d004      	beq.n	8004582 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800457a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800457e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004580:	e002      	b.n	8004588 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f000 f949 	bl	800481a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004588:	6a3b      	ldr	r3, [r7, #32]
 800458a:	f003 0308 	and.w	r3, r3, #8
 800458e:	2b00      	cmp	r3, #0
 8004590:	d00c      	beq.n	80045ac <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	f003 0310 	and.w	r3, r3, #16
 8004598:	2b00      	cmp	r3, #0
 800459a:	d007      	beq.n	80045ac <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800459c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800459e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80045a2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	2210      	movs	r2, #16
 80045aa:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80045ac:	6a3b      	ldr	r3, [r7, #32]
 80045ae:	f003 0304 	and.w	r3, r3, #4
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d00b      	beq.n	80045ce <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	f003 0308 	and.w	r3, r3, #8
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d006      	beq.n	80045ce <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	2208      	movs	r2, #8
 80045c6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f000 f930 	bl	800482e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80045ce:	6a3b      	ldr	r3, [r7, #32]
 80045d0:	f003 0302 	and.w	r3, r3, #2
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d009      	beq.n	80045ec <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	68db      	ldr	r3, [r3, #12]
 80045de:	f003 0303 	and.w	r3, r3, #3
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d002      	beq.n	80045ec <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f7fc fc88 	bl	8000efc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80045ec:	6a3b      	ldr	r3, [r7, #32]
 80045ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d00c      	beq.n	8004610 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	f003 0310 	and.w	r3, r3, #16
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d007      	beq.n	8004610 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004602:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004606:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	2210      	movs	r2, #16
 800460e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004610:	6a3b      	ldr	r3, [r7, #32]
 8004612:	f003 0320 	and.w	r3, r3, #32
 8004616:	2b00      	cmp	r3, #0
 8004618:	d00b      	beq.n	8004632 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	f003 0308 	and.w	r3, r3, #8
 8004620:	2b00      	cmp	r3, #0
 8004622:	d006      	beq.n	8004632 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	2208      	movs	r2, #8
 800462a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 f908 	bl	8004842 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004632:	6a3b      	ldr	r3, [r7, #32]
 8004634:	f003 0310 	and.w	r3, r3, #16
 8004638:	2b00      	cmp	r3, #0
 800463a:	d009      	beq.n	8004650 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	691b      	ldr	r3, [r3, #16]
 8004642:	f003 0303 	and.w	r3, r3, #3
 8004646:	2b00      	cmp	r3, #0
 8004648:	d002      	beq.n	8004650 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f7fc fcd6 	bl	8000ffc <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004650:	6a3b      	ldr	r3, [r7, #32]
 8004652:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d00b      	beq.n	8004672 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	f003 0310 	and.w	r3, r3, #16
 8004660:	2b00      	cmp	r3, #0
 8004662:	d006      	beq.n	8004672 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	2210      	movs	r2, #16
 800466a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f000 f8f2 	bl	8004856 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004672:	6a3b      	ldr	r3, [r7, #32]
 8004674:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004678:	2b00      	cmp	r3, #0
 800467a:	d00b      	beq.n	8004694 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	f003 0308 	and.w	r3, r3, #8
 8004682:	2b00      	cmp	r3, #0
 8004684:	d006      	beq.n	8004694 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	2208      	movs	r2, #8
 800468c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 f8eb 	bl	800486a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004694:	6a3b      	ldr	r3, [r7, #32]
 8004696:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d07b      	beq.n	8004796 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	f003 0304 	and.w	r3, r3, #4
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d072      	beq.n	800478e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80046a8:	6a3b      	ldr	r3, [r7, #32]
 80046aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d008      	beq.n	80046c4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d003      	beq.n	80046c4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80046bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046be:	f043 0301 	orr.w	r3, r3, #1
 80046c2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80046c4:	6a3b      	ldr	r3, [r7, #32]
 80046c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d008      	beq.n	80046e0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d003      	beq.n	80046e0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80046d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046da:	f043 0302 	orr.w	r3, r3, #2
 80046de:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80046e0:	6a3b      	ldr	r3, [r7, #32]
 80046e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d008      	beq.n	80046fc <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d003      	beq.n	80046fc <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80046f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f6:	f043 0304 	orr.w	r3, r3, #4
 80046fa:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80046fc:	6a3b      	ldr	r3, [r7, #32]
 80046fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004702:	2b00      	cmp	r3, #0
 8004704:	d043      	beq.n	800478e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800470c:	2b00      	cmp	r3, #0
 800470e:	d03e      	beq.n	800478e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004716:	2b60      	cmp	r3, #96	@ 0x60
 8004718:	d02b      	beq.n	8004772 <HAL_CAN_IRQHandler+0x32a>
 800471a:	2b60      	cmp	r3, #96	@ 0x60
 800471c:	d82e      	bhi.n	800477c <HAL_CAN_IRQHandler+0x334>
 800471e:	2b50      	cmp	r3, #80	@ 0x50
 8004720:	d022      	beq.n	8004768 <HAL_CAN_IRQHandler+0x320>
 8004722:	2b50      	cmp	r3, #80	@ 0x50
 8004724:	d82a      	bhi.n	800477c <HAL_CAN_IRQHandler+0x334>
 8004726:	2b40      	cmp	r3, #64	@ 0x40
 8004728:	d019      	beq.n	800475e <HAL_CAN_IRQHandler+0x316>
 800472a:	2b40      	cmp	r3, #64	@ 0x40
 800472c:	d826      	bhi.n	800477c <HAL_CAN_IRQHandler+0x334>
 800472e:	2b30      	cmp	r3, #48	@ 0x30
 8004730:	d010      	beq.n	8004754 <HAL_CAN_IRQHandler+0x30c>
 8004732:	2b30      	cmp	r3, #48	@ 0x30
 8004734:	d822      	bhi.n	800477c <HAL_CAN_IRQHandler+0x334>
 8004736:	2b10      	cmp	r3, #16
 8004738:	d002      	beq.n	8004740 <HAL_CAN_IRQHandler+0x2f8>
 800473a:	2b20      	cmp	r3, #32
 800473c:	d005      	beq.n	800474a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800473e:	e01d      	b.n	800477c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004742:	f043 0308 	orr.w	r3, r3, #8
 8004746:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004748:	e019      	b.n	800477e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800474a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800474c:	f043 0310 	orr.w	r3, r3, #16
 8004750:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004752:	e014      	b.n	800477e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004756:	f043 0320 	orr.w	r3, r3, #32
 800475a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800475c:	e00f      	b.n	800477e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800475e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004760:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004764:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004766:	e00a      	b.n	800477e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800476a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800476e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004770:	e005      	b.n	800477e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004774:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004778:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800477a:	e000      	b.n	800477e <HAL_CAN_IRQHandler+0x336>
            break;
 800477c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	699a      	ldr	r2, [r3, #24]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800478c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	2204      	movs	r2, #4
 8004794:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004798:	2b00      	cmp	r3, #0
 800479a:	d008      	beq.n	80047ae <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80047a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a2:	431a      	orrs	r2, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f000 f868 	bl	800487e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80047ae:	bf00      	nop
 80047b0:	3728      	adds	r7, #40	@ 0x28
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}

080047b6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80047b6:	b480      	push	{r7}
 80047b8:	b083      	sub	sp, #12
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80047be:	bf00      	nop
 80047c0:	370c      	adds	r7, #12
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr

080047ca <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80047ca:	b480      	push	{r7}
 80047cc:	b083      	sub	sp, #12
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80047d2:	bf00      	nop
 80047d4:	370c      	adds	r7, #12
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr

080047de <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80047de:	b480      	push	{r7}
 80047e0:	b083      	sub	sp, #12
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80047e6:	bf00      	nop
 80047e8:	370c      	adds	r7, #12
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr

080047f2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80047f2:	b480      	push	{r7}
 80047f4:	b083      	sub	sp, #12
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80047fa:	bf00      	nop
 80047fc:	370c      	adds	r7, #12
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr

08004806 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004806:	b480      	push	{r7}
 8004808:	b083      	sub	sp, #12
 800480a:	af00      	add	r7, sp, #0
 800480c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800480e:	bf00      	nop
 8004810:	370c      	adds	r7, #12
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr

0800481a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800481a:	b480      	push	{r7}
 800481c:	b083      	sub	sp, #12
 800481e:	af00      	add	r7, sp, #0
 8004820:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004822:	bf00      	nop
 8004824:	370c      	adds	r7, #12
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr

0800482e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800482e:	b480      	push	{r7}
 8004830:	b083      	sub	sp, #12
 8004832:	af00      	add	r7, sp, #0
 8004834:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004836:	bf00      	nop
 8004838:	370c      	adds	r7, #12
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr

08004842 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004842:	b480      	push	{r7}
 8004844:	b083      	sub	sp, #12
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800484a:	bf00      	nop
 800484c:	370c      	adds	r7, #12
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr

08004856 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004856:	b480      	push	{r7}
 8004858:	b083      	sub	sp, #12
 800485a:	af00      	add	r7, sp, #0
 800485c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800485e:	bf00      	nop
 8004860:	370c      	adds	r7, #12
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr

0800486a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800486a:	b480      	push	{r7}
 800486c:	b083      	sub	sp, #12
 800486e:	af00      	add	r7, sp, #0
 8004870:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004872:	bf00      	nop
 8004874:	370c      	adds	r7, #12
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr

0800487e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800487e:	b480      	push	{r7}
 8004880:	b083      	sub	sp, #12
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004886:	bf00      	nop
 8004888:	370c      	adds	r7, #12
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr

08004892 <HAL_CAN_GetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval CAN Error Code
  */
uint32_t HAL_CAN_GetError(const CAN_HandleTypeDef *hcan)
{
 8004892:	b480      	push	{r7}
 8004894:	b083      	sub	sp, #12
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
  /* Return CAN error code */
  return hcan->ErrorCode;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 800489e:	4618      	mov	r0, r3
 80048a0:	370c      	adds	r7, #12
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr
	...

080048ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b085      	sub	sp, #20
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f003 0307 	and.w	r3, r3, #7
 80048ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80048bc:	4b0c      	ldr	r3, [pc, #48]	@ (80048f0 <__NVIC_SetPriorityGrouping+0x44>)
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80048c2:	68ba      	ldr	r2, [r7, #8]
 80048c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80048c8:	4013      	ands	r3, r2
 80048ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80048d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80048d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80048de:	4a04      	ldr	r2, [pc, #16]	@ (80048f0 <__NVIC_SetPriorityGrouping+0x44>)
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	60d3      	str	r3, [r2, #12]
}
 80048e4:	bf00      	nop
 80048e6:	3714      	adds	r7, #20
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr
 80048f0:	e000ed00 	.word	0xe000ed00

080048f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80048f4:	b480      	push	{r7}
 80048f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80048f8:	4b04      	ldr	r3, [pc, #16]	@ (800490c <__NVIC_GetPriorityGrouping+0x18>)
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	0a1b      	lsrs	r3, r3, #8
 80048fe:	f003 0307 	and.w	r3, r3, #7
}
 8004902:	4618      	mov	r0, r3
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr
 800490c:	e000ed00 	.word	0xe000ed00

08004910 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004910:	b480      	push	{r7}
 8004912:	b083      	sub	sp, #12
 8004914:	af00      	add	r7, sp, #0
 8004916:	4603      	mov	r3, r0
 8004918:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800491a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800491e:	2b00      	cmp	r3, #0
 8004920:	db0b      	blt.n	800493a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004922:	79fb      	ldrb	r3, [r7, #7]
 8004924:	f003 021f 	and.w	r2, r3, #31
 8004928:	4907      	ldr	r1, [pc, #28]	@ (8004948 <__NVIC_EnableIRQ+0x38>)
 800492a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800492e:	095b      	lsrs	r3, r3, #5
 8004930:	2001      	movs	r0, #1
 8004932:	fa00 f202 	lsl.w	r2, r0, r2
 8004936:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800493a:	bf00      	nop
 800493c:	370c      	adds	r7, #12
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr
 8004946:	bf00      	nop
 8004948:	e000e100 	.word	0xe000e100

0800494c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800494c:	b480      	push	{r7}
 800494e:	b083      	sub	sp, #12
 8004950:	af00      	add	r7, sp, #0
 8004952:	4603      	mov	r3, r0
 8004954:	6039      	str	r1, [r7, #0]
 8004956:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004958:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800495c:	2b00      	cmp	r3, #0
 800495e:	db0a      	blt.n	8004976 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	b2da      	uxtb	r2, r3
 8004964:	490c      	ldr	r1, [pc, #48]	@ (8004998 <__NVIC_SetPriority+0x4c>)
 8004966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800496a:	0112      	lsls	r2, r2, #4
 800496c:	b2d2      	uxtb	r2, r2
 800496e:	440b      	add	r3, r1
 8004970:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004974:	e00a      	b.n	800498c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	b2da      	uxtb	r2, r3
 800497a:	4908      	ldr	r1, [pc, #32]	@ (800499c <__NVIC_SetPriority+0x50>)
 800497c:	79fb      	ldrb	r3, [r7, #7]
 800497e:	f003 030f 	and.w	r3, r3, #15
 8004982:	3b04      	subs	r3, #4
 8004984:	0112      	lsls	r2, r2, #4
 8004986:	b2d2      	uxtb	r2, r2
 8004988:	440b      	add	r3, r1
 800498a:	761a      	strb	r2, [r3, #24]
}
 800498c:	bf00      	nop
 800498e:	370c      	adds	r7, #12
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr
 8004998:	e000e100 	.word	0xe000e100
 800499c:	e000ed00 	.word	0xe000ed00

080049a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b089      	sub	sp, #36	@ 0x24
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	60f8      	str	r0, [r7, #12]
 80049a8:	60b9      	str	r1, [r7, #8]
 80049aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f003 0307 	and.w	r3, r3, #7
 80049b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	f1c3 0307 	rsb	r3, r3, #7
 80049ba:	2b04      	cmp	r3, #4
 80049bc:	bf28      	it	cs
 80049be:	2304      	movcs	r3, #4
 80049c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049c2:	69fb      	ldr	r3, [r7, #28]
 80049c4:	3304      	adds	r3, #4
 80049c6:	2b06      	cmp	r3, #6
 80049c8:	d902      	bls.n	80049d0 <NVIC_EncodePriority+0x30>
 80049ca:	69fb      	ldr	r3, [r7, #28]
 80049cc:	3b03      	subs	r3, #3
 80049ce:	e000      	b.n	80049d2 <NVIC_EncodePriority+0x32>
 80049d0:	2300      	movs	r3, #0
 80049d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049d4:	f04f 32ff 	mov.w	r2, #4294967295
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	fa02 f303 	lsl.w	r3, r2, r3
 80049de:	43da      	mvns	r2, r3
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	401a      	ands	r2, r3
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80049e8:	f04f 31ff 	mov.w	r1, #4294967295
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	fa01 f303 	lsl.w	r3, r1, r3
 80049f2:	43d9      	mvns	r1, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049f8:	4313      	orrs	r3, r2
         );
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3724      	adds	r7, #36	@ 0x24
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr
	...

08004a08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b082      	sub	sp, #8
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	3b01      	subs	r3, #1
 8004a14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004a18:	d301      	bcc.n	8004a1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e00f      	b.n	8004a3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a1e:	4a0a      	ldr	r2, [pc, #40]	@ (8004a48 <SysTick_Config+0x40>)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	3b01      	subs	r3, #1
 8004a24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004a26:	210f      	movs	r1, #15
 8004a28:	f04f 30ff 	mov.w	r0, #4294967295
 8004a2c:	f7ff ff8e 	bl	800494c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a30:	4b05      	ldr	r3, [pc, #20]	@ (8004a48 <SysTick_Config+0x40>)
 8004a32:	2200      	movs	r2, #0
 8004a34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a36:	4b04      	ldr	r3, [pc, #16]	@ (8004a48 <SysTick_Config+0x40>)
 8004a38:	2207      	movs	r2, #7
 8004a3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a3c:	2300      	movs	r3, #0
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3708      	adds	r7, #8
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	bf00      	nop
 8004a48:	e000e010 	.word	0xe000e010

08004a4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b082      	sub	sp, #8
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f7ff ff29 	bl	80048ac <__NVIC_SetPriorityGrouping>
}
 8004a5a:	bf00      	nop
 8004a5c:	3708      	adds	r7, #8
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}

08004a62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a62:	b580      	push	{r7, lr}
 8004a64:	b086      	sub	sp, #24
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	4603      	mov	r3, r0
 8004a6a:	60b9      	str	r1, [r7, #8]
 8004a6c:	607a      	str	r2, [r7, #4]
 8004a6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004a70:	2300      	movs	r3, #0
 8004a72:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004a74:	f7ff ff3e 	bl	80048f4 <__NVIC_GetPriorityGrouping>
 8004a78:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	68b9      	ldr	r1, [r7, #8]
 8004a7e:	6978      	ldr	r0, [r7, #20]
 8004a80:	f7ff ff8e 	bl	80049a0 <NVIC_EncodePriority>
 8004a84:	4602      	mov	r2, r0
 8004a86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a8a:	4611      	mov	r1, r2
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f7ff ff5d 	bl	800494c <__NVIC_SetPriority>
}
 8004a92:	bf00      	nop
 8004a94:	3718      	adds	r7, #24
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}

08004a9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a9a:	b580      	push	{r7, lr}
 8004a9c:	b082      	sub	sp, #8
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004aa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f7ff ff31 	bl	8004910 <__NVIC_EnableIRQ>
}
 8004aae:	bf00      	nop
 8004ab0:	3708      	adds	r7, #8
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}

08004ab6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004ab6:	b580      	push	{r7, lr}
 8004ab8:	b082      	sub	sp, #8
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f7ff ffa2 	bl	8004a08 <SysTick_Config>
 8004ac4:	4603      	mov	r3, r0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3708      	adds	r7, #8
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}

08004ace <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004ace:	b580      	push	{r7, lr}
 8004ad0:	b082      	sub	sp, #8
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d101      	bne.n	8004ae0 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e014      	b.n	8004b0a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	791b      	ldrb	r3, [r3, #4]
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d105      	bne.n	8004af6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f7fd f9d3 	bl	8001e9c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2202      	movs	r2, #2
 8004afa:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2201      	movs	r2, #1
 8004b06:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004b08:	2300      	movs	r3, #0
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3708      	adds	r7, #8
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}
	...

08004b14 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b086      	sub	sp, #24
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	60b9      	str	r1, [r7, #8]
 8004b1e:	607a      	str	r2, [r7, #4]
 8004b20:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8004b22:	2300      	movs	r3, #0
 8004b24:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	795b      	ldrb	r3, [r3, #5]
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d101      	bne.n	8004b32 <HAL_DAC_Start_DMA+0x1e>
 8004b2e:	2302      	movs	r3, #2
 8004b30:	e0ab      	b.n	8004c8a <HAL_DAC_Start_DMA+0x176>
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2201      	movs	r2, #1
 8004b36:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2202      	movs	r2, #2
 8004b3c:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d12f      	bne.n	8004ba4 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	4a52      	ldr	r2, [pc, #328]	@ (8004c94 <HAL_DAC_Start_DMA+0x180>)
 8004b4a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	4a51      	ldr	r2, [pc, #324]	@ (8004c98 <HAL_DAC_Start_DMA+0x184>)
 8004b52:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	4a50      	ldr	r2, [pc, #320]	@ (8004c9c <HAL_DAC_Start_DMA+0x188>)
 8004b5a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004b6a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8004b6c:	6a3b      	ldr	r3, [r7, #32]
 8004b6e:	2b08      	cmp	r3, #8
 8004b70:	d013      	beq.n	8004b9a <HAL_DAC_Start_DMA+0x86>
 8004b72:	6a3b      	ldr	r3, [r7, #32]
 8004b74:	2b08      	cmp	r3, #8
 8004b76:	d845      	bhi.n	8004c04 <HAL_DAC_Start_DMA+0xf0>
 8004b78:	6a3b      	ldr	r3, [r7, #32]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d003      	beq.n	8004b86 <HAL_DAC_Start_DMA+0x72>
 8004b7e:	6a3b      	ldr	r3, [r7, #32]
 8004b80:	2b04      	cmp	r3, #4
 8004b82:	d005      	beq.n	8004b90 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8004b84:	e03e      	b.n	8004c04 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	3308      	adds	r3, #8
 8004b8c:	613b      	str	r3, [r7, #16]
        break;
 8004b8e:	e03c      	b.n	8004c0a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	330c      	adds	r3, #12
 8004b96:	613b      	str	r3, [r7, #16]
        break;
 8004b98:	e037      	b.n	8004c0a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	3310      	adds	r3, #16
 8004ba0:	613b      	str	r3, [r7, #16]
        break;
 8004ba2:	e032      	b.n	8004c0a <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	4a3d      	ldr	r2, [pc, #244]	@ (8004ca0 <HAL_DAC_Start_DMA+0x18c>)
 8004baa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	4a3c      	ldr	r2, [pc, #240]	@ (8004ca4 <HAL_DAC_Start_DMA+0x190>)
 8004bb2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	4a3b      	ldr	r2, [pc, #236]	@ (8004ca8 <HAL_DAC_Start_DMA+0x194>)
 8004bba:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8004bca:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8004bcc:	6a3b      	ldr	r3, [r7, #32]
 8004bce:	2b08      	cmp	r3, #8
 8004bd0:	d013      	beq.n	8004bfa <HAL_DAC_Start_DMA+0xe6>
 8004bd2:	6a3b      	ldr	r3, [r7, #32]
 8004bd4:	2b08      	cmp	r3, #8
 8004bd6:	d817      	bhi.n	8004c08 <HAL_DAC_Start_DMA+0xf4>
 8004bd8:	6a3b      	ldr	r3, [r7, #32]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d003      	beq.n	8004be6 <HAL_DAC_Start_DMA+0xd2>
 8004bde:	6a3b      	ldr	r3, [r7, #32]
 8004be0:	2b04      	cmp	r3, #4
 8004be2:	d005      	beq.n	8004bf0 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8004be4:	e010      	b.n	8004c08 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	3314      	adds	r3, #20
 8004bec:	613b      	str	r3, [r7, #16]
        break;
 8004bee:	e00c      	b.n	8004c0a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	3318      	adds	r3, #24
 8004bf6:	613b      	str	r3, [r7, #16]
        break;
 8004bf8:	e007      	b.n	8004c0a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	331c      	adds	r3, #28
 8004c00:	613b      	str	r3, [r7, #16]
        break;
 8004c02:	e002      	b.n	8004c0a <HAL_DAC_Start_DMA+0xf6>
        break;
 8004c04:	bf00      	nop
 8004c06:	e000      	b.n	8004c0a <HAL_DAC_Start_DMA+0xf6>
        break;
 8004c08:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d111      	bne.n	8004c34 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004c1e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	6898      	ldr	r0, [r3, #8]
 8004c24:	6879      	ldr	r1, [r7, #4]
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	693a      	ldr	r2, [r7, #16]
 8004c2a:	f000 fb35 	bl	8005298 <HAL_DMA_Start_IT>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	75fb      	strb	r3, [r7, #23]
 8004c32:	e010      	b.n	8004c56 <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8004c42:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	68d8      	ldr	r0, [r3, #12]
 8004c48:	6879      	ldr	r1, [r7, #4]
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	693a      	ldr	r2, [r7, #16]
 8004c4e:	f000 fb23 	bl	8005298 <HAL_DMA_Start_IT>
 8004c52:	4603      	mov	r3, r0
 8004c54:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8004c5c:	7dfb      	ldrb	r3, [r7, #23]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d10c      	bne.n	8004c7c <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	6819      	ldr	r1, [r3, #0]
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	f003 0310 	and.w	r3, r3, #16
 8004c6e:	2201      	movs	r2, #1
 8004c70:	409a      	lsls	r2, r3
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	430a      	orrs	r2, r1
 8004c78:	601a      	str	r2, [r3, #0]
 8004c7a:	e005      	b.n	8004c88 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	691b      	ldr	r3, [r3, #16]
 8004c80:	f043 0204 	orr.w	r2, r3, #4
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8004c88:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3718      	adds	r7, #24
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	bf00      	nop
 8004c94:	08004fff 	.word	0x08004fff
 8004c98:	08005021 	.word	0x08005021
 8004c9c:	0800503d 	.word	0x0800503d
 8004ca0:	080050bb 	.word	0x080050bb
 8004ca4:	080050dd 	.word	0x080050dd
 8004ca8:	080050f9 	.word	0x080050f9

08004cac <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b082      	sub	sp, #8
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004cbe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cc2:	d120      	bne.n	8004d06 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004cce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cd2:	d118      	bne.n	8004d06 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2204      	movs	r2, #4
 8004cd8:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	691b      	ldr	r3, [r3, #16]
 8004cde:	f043 0201 	orr.w	r2, r3, #1
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004cee:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004cfe:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f000 f84b 	bl	8004d9c <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004d10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d14:	d120      	bne.n	8004d58 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d1c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004d20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d24:	d118      	bne.n	8004d58 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2204      	movs	r2, #4
 8004d2a:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	691b      	ldr	r3, [r3, #16]
 8004d30:	f043 0202 	orr.w	r2, r3, #2
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8004d40:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8004d50:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f000 f9a7 	bl	80050a6 <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 8004d58:	bf00      	nop
 8004d5a:	3708      	adds	r7, #8
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}

08004d60 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b083      	sub	sp, #12
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8004d68:	bf00      	nop
 8004d6a:	370c      	adds	r7, #12
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr

08004d74 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b083      	sub	sp, #12
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8004d7c:	bf00      	nop
 8004d7e:	370c      	adds	r7, #12
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr

08004d88 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b083      	sub	sp, #12
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8004d90:	bf00      	nop
 8004d92:	370c      	adds	r7, #12
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr

08004d9c <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b083      	sub	sp, #12
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8004da4:	bf00      	nop
 8004da6:	370c      	adds	r7, #12
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr

08004db0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b088      	sub	sp, #32
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	60f8      	str	r0, [r7, #12]
 8004db8:	60b9      	str	r1, [r7, #8]
 8004dba:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	795b      	ldrb	r3, [r3, #5]
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d101      	bne.n	8004dcc <HAL_DAC_ConfigChannel+0x1c>
 8004dc8:	2302      	movs	r3, #2
 8004dca:	e114      	b.n	8004ff6 <HAL_DAC_ConfigChannel+0x246>
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2202      	movs	r2, #2
 8004dd6:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	2b04      	cmp	r3, #4
 8004dde:	f040 8081 	bne.w	8004ee4 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004de2:	f7fd fac9 	bl	8002378 <HAL_GetTick>
 8004de6:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d140      	bne.n	8004e70 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004dee:	e018      	b.n	8004e22 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004df0:	f7fd fac2 	bl	8002378 <HAL_GetTick>
 8004df4:	4602      	mov	r2, r0
 8004df6:	69fb      	ldr	r3, [r7, #28]
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d911      	bls.n	8004e22 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e04:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d00a      	beq.n	8004e22 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	691b      	ldr	r3, [r3, #16]
 8004e10:	f043 0208 	orr.w	r2, r3, #8
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2203      	movs	r2, #3
 8004e1c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	e0e9      	b.n	8004ff6 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e28:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d1df      	bne.n	8004df0 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8004e30:	2001      	movs	r0, #1
 8004e32:	f7fd faad 	bl	8002390 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	68ba      	ldr	r2, [r7, #8]
 8004e3c:	6992      	ldr	r2, [r2, #24]
 8004e3e:	641a      	str	r2, [r3, #64]	@ 0x40
 8004e40:	e023      	b.n	8004e8a <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004e42:	f7fd fa99 	bl	8002378 <HAL_GetTick>
 8004e46:	4602      	mov	r2, r0
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	1ad3      	subs	r3, r2, r3
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d90f      	bls.n	8004e70 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	da0a      	bge.n	8004e70 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	f043 0208 	orr.w	r2, r3, #8
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2203      	movs	r2, #3
 8004e6a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	e0c2      	b.n	8004ff6 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	dbe3      	blt.n	8004e42 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8004e7a:	2001      	movs	r0, #1
 8004e7c:	f7fd fa88 	bl	8002390 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	68ba      	ldr	r2, [r7, #8]
 8004e86:	6992      	ldr	r2, [r2, #24]
 8004e88:	645a      	str	r2, [r3, #68]	@ 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f003 0310 	and.w	r3, r3, #16
 8004e96:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8004e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e9e:	43db      	mvns	r3, r3
 8004ea0:	ea02 0103 	and.w	r1, r2, r3
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	69da      	ldr	r2, [r3, #28]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f003 0310 	and.w	r3, r3, #16
 8004eae:	409a      	lsls	r2, r3
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	430a      	orrs	r2, r1
 8004eb6:	649a      	str	r2, [r3, #72]	@ 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f003 0310 	and.w	r3, r3, #16
 8004ec4:	21ff      	movs	r1, #255	@ 0xff
 8004ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8004eca:	43db      	mvns	r3, r3
 8004ecc:	ea02 0103 	and.w	r1, r2, r3
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	6a1a      	ldr	r2, [r3, #32]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f003 0310 	and.w	r3, r3, #16
 8004eda:	409a      	lsls	r2, r3
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	430a      	orrs	r2, r1
 8004ee2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	691b      	ldr	r3, [r3, #16]
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d11d      	bne.n	8004f28 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ef2:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f003 0310 	and.w	r3, r3, #16
 8004efa:	221f      	movs	r2, #31
 8004efc:	fa02 f303 	lsl.w	r3, r2, r3
 8004f00:	43db      	mvns	r3, r3
 8004f02:	69ba      	ldr	r2, [r7, #24]
 8004f04:	4013      	ands	r3, r2
 8004f06:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	695b      	ldr	r3, [r3, #20]
 8004f0c:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f003 0310 	and.w	r3, r3, #16
 8004f14:	697a      	ldr	r2, [r7, #20]
 8004f16:	fa02 f303 	lsl.w	r3, r2, r3
 8004f1a:	69ba      	ldr	r2, [r7, #24]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	69ba      	ldr	r2, [r7, #24]
 8004f26:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f2e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f003 0310 	and.w	r3, r3, #16
 8004f36:	2207      	movs	r2, #7
 8004f38:	fa02 f303 	lsl.w	r3, r2, r3
 8004f3c:	43db      	mvns	r3, r3
 8004f3e:	69ba      	ldr	r2, [r7, #24]
 8004f40:	4013      	ands	r3, r2
 8004f42:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	431a      	orrs	r2, r3
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	68db      	ldr	r3, [r3, #12]
 8004f52:	4313      	orrs	r3, r2
 8004f54:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f003 0310 	and.w	r3, r3, #16
 8004f5c:	697a      	ldr	r2, [r7, #20]
 8004f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f62:	69ba      	ldr	r2, [r7, #24]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	69ba      	ldr	r2, [r7, #24]
 8004f6e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	6819      	ldr	r1, [r3, #0]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f003 0310 	and.w	r3, r3, #16
 8004f7c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004f80:	fa02 f303 	lsl.w	r3, r2, r3
 8004f84:	43da      	mvns	r2, r3
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	400a      	ands	r2, r1
 8004f8c:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f003 0310 	and.w	r3, r3, #16
 8004f9c:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8004fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa4:	43db      	mvns	r3, r3
 8004fa6:	69ba      	ldr	r2, [r7, #24]
 8004fa8:	4013      	ands	r3, r2
 8004faa:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f003 0310 	and.w	r3, r3, #16
 8004fb8:	697a      	ldr	r2, [r7, #20]
 8004fba:	fa02 f303 	lsl.w	r3, r2, r3
 8004fbe:	69ba      	ldr	r2, [r7, #24]
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	69ba      	ldr	r2, [r7, #24]
 8004fca:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	6819      	ldr	r1, [r3, #0]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f003 0310 	and.w	r3, r3, #16
 8004fd8:	22c0      	movs	r2, #192	@ 0xc0
 8004fda:	fa02 f303 	lsl.w	r3, r2, r3
 8004fde:	43da      	mvns	r2, r3
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	400a      	ands	r2, r1
 8004fe6:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2201      	movs	r2, #1
 8004fec:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004ff4:	2300      	movs	r3, #0
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3720      	adds	r7, #32
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}

08004ffe <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004ffe:	b580      	push	{r7, lr}
 8005000:	b084      	sub	sp, #16
 8005002:	af00      	add	r7, sp, #0
 8005004:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800500a:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800500c:	68f8      	ldr	r0, [r7, #12]
 800500e:	f7ff fea7 	bl	8004d60 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2201      	movs	r2, #1
 8005016:	711a      	strb	r2, [r3, #4]
}
 8005018:	bf00      	nop
 800501a:	3710      	adds	r7, #16
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}

08005020 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800502c:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800502e:	68f8      	ldr	r0, [r7, #12]
 8005030:	f7ff fea0 	bl	8004d74 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005034:	bf00      	nop
 8005036:	3710      	adds	r7, #16
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}

0800503c <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005048:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	f043 0204 	orr.w	r2, r3, #4
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8005056:	68f8      	ldr	r0, [r7, #12]
 8005058:	f7ff fe96 	bl	8004d88 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2201      	movs	r2, #1
 8005060:	711a      	strb	r2, [r3, #4]
}
 8005062:	bf00      	nop
 8005064:	3710      	adds	r7, #16
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}

0800506a <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800506a:	b480      	push	{r7}
 800506c:	b083      	sub	sp, #12
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8005072:	bf00      	nop
 8005074:	370c      	adds	r7, #12
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr

0800507e <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800507e:	b480      	push	{r7}
 8005080:	b083      	sub	sp, #12
 8005082:	af00      	add	r7, sp, #0
 8005084:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8005086:	bf00      	nop
 8005088:	370c      	adds	r7, #12
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr

08005092 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005092:	b480      	push	{r7}
 8005094:	b083      	sub	sp, #12
 8005096:	af00      	add	r7, sp, #0
 8005098:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800509a:	bf00      	nop
 800509c:	370c      	adds	r7, #12
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr

080050a6 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80050a6:	b480      	push	{r7}
 80050a8:	b083      	sub	sp, #12
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80050ae:	bf00      	nop
 80050b0:	370c      	adds	r7, #12
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr

080050ba <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80050ba:	b580      	push	{r7, lr}
 80050bc:	b084      	sub	sp, #16
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050c6:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80050c8:	68f8      	ldr	r0, [r7, #12]
 80050ca:	f7ff ffce 	bl	800506a <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2201      	movs	r2, #1
 80050d2:	711a      	strb	r2, [r3, #4]
}
 80050d4:	bf00      	nop
 80050d6:	3710      	adds	r7, #16
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}

080050dc <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050e8:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80050ea:	68f8      	ldr	r0, [r7, #12]
 80050ec:	f7ff ffc7 	bl	800507e <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80050f0:	bf00      	nop
 80050f2:	3710      	adds	r7, #16
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}

080050f8 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b084      	sub	sp, #16
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005104:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	691b      	ldr	r3, [r3, #16]
 800510a:	f043 0204 	orr.w	r2, r3, #4
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8005112:	68f8      	ldr	r0, [r7, #12]
 8005114:	f7ff ffbd 	bl	8005092 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2201      	movs	r2, #1
 800511c:	711a      	strb	r2, [r3, #4]
}
 800511e:	bf00      	nop
 8005120:	3710      	adds	r7, #16
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
	...

08005128 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005128:	b480      	push	{r7}
 800512a:	b085      	sub	sp, #20
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d101      	bne.n	800513a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e098      	b.n	800526c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	461a      	mov	r2, r3
 8005140:	4b4d      	ldr	r3, [pc, #308]	@ (8005278 <HAL_DMA_Init+0x150>)
 8005142:	429a      	cmp	r2, r3
 8005144:	d80f      	bhi.n	8005166 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	461a      	mov	r2, r3
 800514c:	4b4b      	ldr	r3, [pc, #300]	@ (800527c <HAL_DMA_Init+0x154>)
 800514e:	4413      	add	r3, r2
 8005150:	4a4b      	ldr	r2, [pc, #300]	@ (8005280 <HAL_DMA_Init+0x158>)
 8005152:	fba2 2303 	umull	r2, r3, r2, r3
 8005156:	091b      	lsrs	r3, r3, #4
 8005158:	009a      	lsls	r2, r3, #2
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a48      	ldr	r2, [pc, #288]	@ (8005284 <HAL_DMA_Init+0x15c>)
 8005162:	641a      	str	r2, [r3, #64]	@ 0x40
 8005164:	e00e      	b.n	8005184 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	461a      	mov	r2, r3
 800516c:	4b46      	ldr	r3, [pc, #280]	@ (8005288 <HAL_DMA_Init+0x160>)
 800516e:	4413      	add	r3, r2
 8005170:	4a43      	ldr	r2, [pc, #268]	@ (8005280 <HAL_DMA_Init+0x158>)
 8005172:	fba2 2303 	umull	r2, r3, r2, r3
 8005176:	091b      	lsrs	r3, r3, #4
 8005178:	009a      	lsls	r2, r3, #2
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a42      	ldr	r2, [pc, #264]	@ (800528c <HAL_DMA_Init+0x164>)
 8005182:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2202      	movs	r2, #2
 8005188:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800519a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800519e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80051a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	691b      	ldr	r3, [r3, #16]
 80051ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	699b      	ldr	r3, [r3, #24]
 80051ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6a1b      	ldr	r3, [r3, #32]
 80051c6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80051c8:	68fa      	ldr	r2, [r7, #12]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	68fa      	ldr	r2, [r7, #12]
 80051d4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80051de:	d039      	beq.n	8005254 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051e4:	4a27      	ldr	r2, [pc, #156]	@ (8005284 <HAL_DMA_Init+0x15c>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d11a      	bne.n	8005220 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80051ea:	4b29      	ldr	r3, [pc, #164]	@ (8005290 <HAL_DMA_Init+0x168>)
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051f2:	f003 031c 	and.w	r3, r3, #28
 80051f6:	210f      	movs	r1, #15
 80051f8:	fa01 f303 	lsl.w	r3, r1, r3
 80051fc:	43db      	mvns	r3, r3
 80051fe:	4924      	ldr	r1, [pc, #144]	@ (8005290 <HAL_DMA_Init+0x168>)
 8005200:	4013      	ands	r3, r2
 8005202:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005204:	4b22      	ldr	r3, [pc, #136]	@ (8005290 <HAL_DMA_Init+0x168>)
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6859      	ldr	r1, [r3, #4]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005210:	f003 031c 	and.w	r3, r3, #28
 8005214:	fa01 f303 	lsl.w	r3, r1, r3
 8005218:	491d      	ldr	r1, [pc, #116]	@ (8005290 <HAL_DMA_Init+0x168>)
 800521a:	4313      	orrs	r3, r2
 800521c:	600b      	str	r3, [r1, #0]
 800521e:	e019      	b.n	8005254 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005220:	4b1c      	ldr	r3, [pc, #112]	@ (8005294 <HAL_DMA_Init+0x16c>)
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005228:	f003 031c 	and.w	r3, r3, #28
 800522c:	210f      	movs	r1, #15
 800522e:	fa01 f303 	lsl.w	r3, r1, r3
 8005232:	43db      	mvns	r3, r3
 8005234:	4917      	ldr	r1, [pc, #92]	@ (8005294 <HAL_DMA_Init+0x16c>)
 8005236:	4013      	ands	r3, r2
 8005238:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800523a:	4b16      	ldr	r3, [pc, #88]	@ (8005294 <HAL_DMA_Init+0x16c>)
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6859      	ldr	r1, [r3, #4]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005246:	f003 031c 	and.w	r3, r3, #28
 800524a:	fa01 f303 	lsl.w	r3, r1, r3
 800524e:	4911      	ldr	r1, [pc, #68]	@ (8005294 <HAL_DMA_Init+0x16c>)
 8005250:	4313      	orrs	r3, r2
 8005252:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2201      	movs	r2, #1
 800525e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800526a:	2300      	movs	r3, #0
}
 800526c:	4618      	mov	r0, r3
 800526e:	3714      	adds	r7, #20
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr
 8005278:	40020407 	.word	0x40020407
 800527c:	bffdfff8 	.word	0xbffdfff8
 8005280:	cccccccd 	.word	0xcccccccd
 8005284:	40020000 	.word	0x40020000
 8005288:	bffdfbf8 	.word	0xbffdfbf8
 800528c:	40020400 	.word	0x40020400
 8005290:	400200a8 	.word	0x400200a8
 8005294:	400204a8 	.word	0x400204a8

08005298 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b086      	sub	sp, #24
 800529c:	af00      	add	r7, sp, #0
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	607a      	str	r2, [r7, #4]
 80052a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052a6:	2300      	movs	r3, #0
 80052a8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d101      	bne.n	80052b8 <HAL_DMA_Start_IT+0x20>
 80052b4:	2302      	movs	r3, #2
 80052b6:	e04b      	b.n	8005350 <HAL_DMA_Start_IT+0xb8>
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2201      	movs	r2, #1
 80052bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d13a      	bne.n	8005342 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2202      	movs	r2, #2
 80052d0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2200      	movs	r2, #0
 80052d8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f022 0201 	bic.w	r2, r2, #1
 80052e8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	687a      	ldr	r2, [r7, #4]
 80052ee:	68b9      	ldr	r1, [r7, #8]
 80052f0:	68f8      	ldr	r0, [r7, #12]
 80052f2:	f000 f95f 	bl	80055b4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d008      	beq.n	8005310 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f042 020e 	orr.w	r2, r2, #14
 800530c:	601a      	str	r2, [r3, #0]
 800530e:	e00f      	b.n	8005330 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f022 0204 	bic.w	r2, r2, #4
 800531e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f042 020a 	orr.w	r2, r2, #10
 800532e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f042 0201 	orr.w	r2, r2, #1
 800533e:	601a      	str	r2, [r3, #0]
 8005340:	e005      	b.n	800534e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2200      	movs	r2, #0
 8005346:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800534a:	2302      	movs	r3, #2
 800534c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800534e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005350:	4618      	mov	r0, r3
 8005352:	3718      	adds	r7, #24
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}

08005358 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005358:	b480      	push	{r7}
 800535a:	b085      	sub	sp, #20
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005360:	2300      	movs	r3, #0
 8005362:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800536a:	b2db      	uxtb	r3, r3
 800536c:	2b02      	cmp	r3, #2
 800536e:	d008      	beq.n	8005382 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2204      	movs	r2, #4
 8005374:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e022      	b.n	80053c8 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f022 020e 	bic.w	r2, r2, #14
 8005390:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f022 0201 	bic.w	r2, r2, #1
 80053a0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053a6:	f003 021c 	and.w	r2, r3, #28
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053ae:	2101      	movs	r1, #1
 80053b0:	fa01 f202 	lsl.w	r2, r1, r2
 80053b4:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2201      	movs	r2, #1
 80053ba:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80053c6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3714      	adds	r7, #20
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr

080053d4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b084      	sub	sp, #16
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053dc:	2300      	movs	r3, #0
 80053de:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	2b02      	cmp	r3, #2
 80053ea:	d005      	beq.n	80053f8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2204      	movs	r2, #4
 80053f0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	73fb      	strb	r3, [r7, #15]
 80053f6:	e029      	b.n	800544c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f022 020e 	bic.w	r2, r2, #14
 8005406:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f022 0201 	bic.w	r2, r2, #1
 8005416:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800541c:	f003 021c 	and.w	r2, r3, #28
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005424:	2101      	movs	r1, #1
 8005426:	fa01 f202 	lsl.w	r2, r1, r2
 800542a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2200      	movs	r2, #0
 8005438:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005440:	2b00      	cmp	r3, #0
 8005442:	d003      	beq.n	800544c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	4798      	blx	r3
    }
  }
  return status;
 800544c:	7bfb      	ldrb	r3, [r7, #15]
}
 800544e:	4618      	mov	r0, r3
 8005450:	3710      	adds	r7, #16
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}

08005456 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005456:	b580      	push	{r7, lr}
 8005458:	b084      	sub	sp, #16
 800545a:	af00      	add	r7, sp, #0
 800545c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005472:	f003 031c 	and.w	r3, r3, #28
 8005476:	2204      	movs	r2, #4
 8005478:	409a      	lsls	r2, r3
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	4013      	ands	r3, r2
 800547e:	2b00      	cmp	r3, #0
 8005480:	d026      	beq.n	80054d0 <HAL_DMA_IRQHandler+0x7a>
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	f003 0304 	and.w	r3, r3, #4
 8005488:	2b00      	cmp	r3, #0
 800548a:	d021      	beq.n	80054d0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f003 0320 	and.w	r3, r3, #32
 8005496:	2b00      	cmp	r3, #0
 8005498:	d107      	bne.n	80054aa <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f022 0204 	bic.w	r2, r2, #4
 80054a8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054ae:	f003 021c 	and.w	r2, r3, #28
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054b6:	2104      	movs	r1, #4
 80054b8:	fa01 f202 	lsl.w	r2, r1, r2
 80054bc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d071      	beq.n	80055aa <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80054ce:	e06c      	b.n	80055aa <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054d4:	f003 031c 	and.w	r3, r3, #28
 80054d8:	2202      	movs	r2, #2
 80054da:	409a      	lsls	r2, r3
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	4013      	ands	r3, r2
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d02e      	beq.n	8005542 <HAL_DMA_IRQHandler+0xec>
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	f003 0302 	and.w	r3, r3, #2
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d029      	beq.n	8005542 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 0320 	and.w	r3, r3, #32
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d10b      	bne.n	8005514 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f022 020a 	bic.w	r2, r2, #10
 800550a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005518:	f003 021c 	and.w	r2, r3, #28
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005520:	2102      	movs	r1, #2
 8005522:	fa01 f202 	lsl.w	r2, r1, r2
 8005526:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2200      	movs	r2, #0
 800552c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005534:	2b00      	cmp	r3, #0
 8005536:	d038      	beq.n	80055aa <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005540:	e033      	b.n	80055aa <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005546:	f003 031c 	and.w	r3, r3, #28
 800554a:	2208      	movs	r2, #8
 800554c:	409a      	lsls	r2, r3
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	4013      	ands	r3, r2
 8005552:	2b00      	cmp	r3, #0
 8005554:	d02a      	beq.n	80055ac <HAL_DMA_IRQHandler+0x156>
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	f003 0308 	and.w	r3, r3, #8
 800555c:	2b00      	cmp	r3, #0
 800555e:	d025      	beq.n	80055ac <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f022 020e 	bic.w	r2, r2, #14
 800556e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005574:	f003 021c 	and.w	r2, r3, #28
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800557c:	2101      	movs	r1, #1
 800557e:	fa01 f202 	lsl.w	r2, r1, r2
 8005582:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2201      	movs	r2, #1
 8005588:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2201      	movs	r2, #1
 800558e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2200      	movs	r2, #0
 8005596:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d004      	beq.n	80055ac <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80055aa:	bf00      	nop
 80055ac:	bf00      	nop
}
 80055ae:	3710      	adds	r7, #16
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}

080055b4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b085      	sub	sp, #20
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	60f8      	str	r0, [r7, #12]
 80055bc:	60b9      	str	r1, [r7, #8]
 80055be:	607a      	str	r2, [r7, #4]
 80055c0:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055c6:	f003 021c 	and.w	r2, r3, #28
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ce:	2101      	movs	r1, #1
 80055d0:	fa01 f202 	lsl.w	r2, r1, r2
 80055d4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	683a      	ldr	r2, [r7, #0]
 80055dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	2b10      	cmp	r3, #16
 80055e4:	d108      	bne.n	80055f8 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	68ba      	ldr	r2, [r7, #8]
 80055f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80055f6:	e007      	b.n	8005608 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	68ba      	ldr	r2, [r7, #8]
 80055fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	687a      	ldr	r2, [r7, #4]
 8005606:	60da      	str	r2, [r3, #12]
}
 8005608:	bf00      	nop
 800560a:	3714      	adds	r7, #20
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005614:	b480      	push	{r7}
 8005616:	b087      	sub	sp, #28
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800561e:	2300      	movs	r3, #0
 8005620:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005622:	e17f      	b.n	8005924 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	2101      	movs	r1, #1
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	fa01 f303 	lsl.w	r3, r1, r3
 8005630:	4013      	ands	r3, r2
 8005632:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2b00      	cmp	r3, #0
 8005638:	f000 8171 	beq.w	800591e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	f003 0303 	and.w	r3, r3, #3
 8005644:	2b01      	cmp	r3, #1
 8005646:	d005      	beq.n	8005654 <HAL_GPIO_Init+0x40>
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	f003 0303 	and.w	r3, r3, #3
 8005650:	2b02      	cmp	r3, #2
 8005652:	d130      	bne.n	80056b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	005b      	lsls	r3, r3, #1
 800565e:	2203      	movs	r2, #3
 8005660:	fa02 f303 	lsl.w	r3, r2, r3
 8005664:	43db      	mvns	r3, r3
 8005666:	693a      	ldr	r2, [r7, #16]
 8005668:	4013      	ands	r3, r2
 800566a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	68da      	ldr	r2, [r3, #12]
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	005b      	lsls	r3, r3, #1
 8005674:	fa02 f303 	lsl.w	r3, r2, r3
 8005678:	693a      	ldr	r2, [r7, #16]
 800567a:	4313      	orrs	r3, r2
 800567c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	693a      	ldr	r2, [r7, #16]
 8005682:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800568a:	2201      	movs	r2, #1
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	fa02 f303 	lsl.w	r3, r2, r3
 8005692:	43db      	mvns	r3, r3
 8005694:	693a      	ldr	r2, [r7, #16]
 8005696:	4013      	ands	r3, r2
 8005698:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	091b      	lsrs	r3, r3, #4
 80056a0:	f003 0201 	and.w	r2, r3, #1
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	fa02 f303 	lsl.w	r3, r2, r3
 80056aa:	693a      	ldr	r2, [r7, #16]
 80056ac:	4313      	orrs	r3, r2
 80056ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	693a      	ldr	r2, [r7, #16]
 80056b4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	f003 0303 	and.w	r3, r3, #3
 80056be:	2b03      	cmp	r3, #3
 80056c0:	d118      	bne.n	80056f4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80056c8:	2201      	movs	r2, #1
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	fa02 f303 	lsl.w	r3, r2, r3
 80056d0:	43db      	mvns	r3, r3
 80056d2:	693a      	ldr	r2, [r7, #16]
 80056d4:	4013      	ands	r3, r2
 80056d6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	08db      	lsrs	r3, r3, #3
 80056de:	f003 0201 	and.w	r2, r3, #1
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	fa02 f303 	lsl.w	r3, r2, r3
 80056e8:	693a      	ldr	r2, [r7, #16]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	693a      	ldr	r2, [r7, #16]
 80056f2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	f003 0303 	and.w	r3, r3, #3
 80056fc:	2b03      	cmp	r3, #3
 80056fe:	d017      	beq.n	8005730 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	68db      	ldr	r3, [r3, #12]
 8005704:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	005b      	lsls	r3, r3, #1
 800570a:	2203      	movs	r2, #3
 800570c:	fa02 f303 	lsl.w	r3, r2, r3
 8005710:	43db      	mvns	r3, r3
 8005712:	693a      	ldr	r2, [r7, #16]
 8005714:	4013      	ands	r3, r2
 8005716:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	689a      	ldr	r2, [r3, #8]
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	005b      	lsls	r3, r3, #1
 8005720:	fa02 f303 	lsl.w	r3, r2, r3
 8005724:	693a      	ldr	r2, [r7, #16]
 8005726:	4313      	orrs	r3, r2
 8005728:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	693a      	ldr	r2, [r7, #16]
 800572e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	f003 0303 	and.w	r3, r3, #3
 8005738:	2b02      	cmp	r3, #2
 800573a:	d123      	bne.n	8005784 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	08da      	lsrs	r2, r3, #3
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	3208      	adds	r2, #8
 8005744:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005748:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	f003 0307 	and.w	r3, r3, #7
 8005750:	009b      	lsls	r3, r3, #2
 8005752:	220f      	movs	r2, #15
 8005754:	fa02 f303 	lsl.w	r3, r2, r3
 8005758:	43db      	mvns	r3, r3
 800575a:	693a      	ldr	r2, [r7, #16]
 800575c:	4013      	ands	r3, r2
 800575e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	691a      	ldr	r2, [r3, #16]
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	f003 0307 	and.w	r3, r3, #7
 800576a:	009b      	lsls	r3, r3, #2
 800576c:	fa02 f303 	lsl.w	r3, r2, r3
 8005770:	693a      	ldr	r2, [r7, #16]
 8005772:	4313      	orrs	r3, r2
 8005774:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	08da      	lsrs	r2, r3, #3
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	3208      	adds	r2, #8
 800577e:	6939      	ldr	r1, [r7, #16]
 8005780:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	005b      	lsls	r3, r3, #1
 800578e:	2203      	movs	r2, #3
 8005790:	fa02 f303 	lsl.w	r3, r2, r3
 8005794:	43db      	mvns	r3, r3
 8005796:	693a      	ldr	r2, [r7, #16]
 8005798:	4013      	ands	r3, r2
 800579a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	f003 0203 	and.w	r2, r3, #3
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	005b      	lsls	r3, r3, #1
 80057a8:	fa02 f303 	lsl.w	r3, r2, r3
 80057ac:	693a      	ldr	r2, [r7, #16]
 80057ae:	4313      	orrs	r3, r2
 80057b0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	693a      	ldr	r2, [r7, #16]
 80057b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	f000 80ac 	beq.w	800591e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057c6:	4b5f      	ldr	r3, [pc, #380]	@ (8005944 <HAL_GPIO_Init+0x330>)
 80057c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057ca:	4a5e      	ldr	r2, [pc, #376]	@ (8005944 <HAL_GPIO_Init+0x330>)
 80057cc:	f043 0301 	orr.w	r3, r3, #1
 80057d0:	6613      	str	r3, [r2, #96]	@ 0x60
 80057d2:	4b5c      	ldr	r3, [pc, #368]	@ (8005944 <HAL_GPIO_Init+0x330>)
 80057d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057d6:	f003 0301 	and.w	r3, r3, #1
 80057da:	60bb      	str	r3, [r7, #8]
 80057dc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80057de:	4a5a      	ldr	r2, [pc, #360]	@ (8005948 <HAL_GPIO_Init+0x334>)
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	089b      	lsrs	r3, r3, #2
 80057e4:	3302      	adds	r3, #2
 80057e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	f003 0303 	and.w	r3, r3, #3
 80057f2:	009b      	lsls	r3, r3, #2
 80057f4:	220f      	movs	r2, #15
 80057f6:	fa02 f303 	lsl.w	r3, r2, r3
 80057fa:	43db      	mvns	r3, r3
 80057fc:	693a      	ldr	r2, [r7, #16]
 80057fe:	4013      	ands	r3, r2
 8005800:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005808:	d025      	beq.n	8005856 <HAL_GPIO_Init+0x242>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4a4f      	ldr	r2, [pc, #316]	@ (800594c <HAL_GPIO_Init+0x338>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d01f      	beq.n	8005852 <HAL_GPIO_Init+0x23e>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4a4e      	ldr	r2, [pc, #312]	@ (8005950 <HAL_GPIO_Init+0x33c>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d019      	beq.n	800584e <HAL_GPIO_Init+0x23a>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4a4d      	ldr	r2, [pc, #308]	@ (8005954 <HAL_GPIO_Init+0x340>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d013      	beq.n	800584a <HAL_GPIO_Init+0x236>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	4a4c      	ldr	r2, [pc, #304]	@ (8005958 <HAL_GPIO_Init+0x344>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d00d      	beq.n	8005846 <HAL_GPIO_Init+0x232>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4a4b      	ldr	r2, [pc, #300]	@ (800595c <HAL_GPIO_Init+0x348>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d007      	beq.n	8005842 <HAL_GPIO_Init+0x22e>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	4a4a      	ldr	r2, [pc, #296]	@ (8005960 <HAL_GPIO_Init+0x34c>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d101      	bne.n	800583e <HAL_GPIO_Init+0x22a>
 800583a:	2306      	movs	r3, #6
 800583c:	e00c      	b.n	8005858 <HAL_GPIO_Init+0x244>
 800583e:	2307      	movs	r3, #7
 8005840:	e00a      	b.n	8005858 <HAL_GPIO_Init+0x244>
 8005842:	2305      	movs	r3, #5
 8005844:	e008      	b.n	8005858 <HAL_GPIO_Init+0x244>
 8005846:	2304      	movs	r3, #4
 8005848:	e006      	b.n	8005858 <HAL_GPIO_Init+0x244>
 800584a:	2303      	movs	r3, #3
 800584c:	e004      	b.n	8005858 <HAL_GPIO_Init+0x244>
 800584e:	2302      	movs	r3, #2
 8005850:	e002      	b.n	8005858 <HAL_GPIO_Init+0x244>
 8005852:	2301      	movs	r3, #1
 8005854:	e000      	b.n	8005858 <HAL_GPIO_Init+0x244>
 8005856:	2300      	movs	r3, #0
 8005858:	697a      	ldr	r2, [r7, #20]
 800585a:	f002 0203 	and.w	r2, r2, #3
 800585e:	0092      	lsls	r2, r2, #2
 8005860:	4093      	lsls	r3, r2
 8005862:	693a      	ldr	r2, [r7, #16]
 8005864:	4313      	orrs	r3, r2
 8005866:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005868:	4937      	ldr	r1, [pc, #220]	@ (8005948 <HAL_GPIO_Init+0x334>)
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	089b      	lsrs	r3, r3, #2
 800586e:	3302      	adds	r3, #2
 8005870:	693a      	ldr	r2, [r7, #16]
 8005872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005876:	4b3b      	ldr	r3, [pc, #236]	@ (8005964 <HAL_GPIO_Init+0x350>)
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	43db      	mvns	r3, r3
 8005880:	693a      	ldr	r2, [r7, #16]
 8005882:	4013      	ands	r3, r2
 8005884:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800588e:	2b00      	cmp	r3, #0
 8005890:	d003      	beq.n	800589a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8005892:	693a      	ldr	r2, [r7, #16]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	4313      	orrs	r3, r2
 8005898:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800589a:	4a32      	ldr	r2, [pc, #200]	@ (8005964 <HAL_GPIO_Init+0x350>)
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80058a0:	4b30      	ldr	r3, [pc, #192]	@ (8005964 <HAL_GPIO_Init+0x350>)
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	43db      	mvns	r3, r3
 80058aa:	693a      	ldr	r2, [r7, #16]
 80058ac:	4013      	ands	r3, r2
 80058ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d003      	beq.n	80058c4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80058bc:	693a      	ldr	r2, [r7, #16]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	4313      	orrs	r3, r2
 80058c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80058c4:	4a27      	ldr	r2, [pc, #156]	@ (8005964 <HAL_GPIO_Init+0x350>)
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80058ca:	4b26      	ldr	r3, [pc, #152]	@ (8005964 <HAL_GPIO_Init+0x350>)
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	43db      	mvns	r3, r3
 80058d4:	693a      	ldr	r2, [r7, #16]
 80058d6:	4013      	ands	r3, r2
 80058d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d003      	beq.n	80058ee <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80058e6:	693a      	ldr	r2, [r7, #16]
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80058ee:	4a1d      	ldr	r2, [pc, #116]	@ (8005964 <HAL_GPIO_Init+0x350>)
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80058f4:	4b1b      	ldr	r3, [pc, #108]	@ (8005964 <HAL_GPIO_Init+0x350>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	43db      	mvns	r3, r3
 80058fe:	693a      	ldr	r2, [r7, #16]
 8005900:	4013      	ands	r3, r2
 8005902:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800590c:	2b00      	cmp	r3, #0
 800590e:	d003      	beq.n	8005918 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8005910:	693a      	ldr	r2, [r7, #16]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	4313      	orrs	r3, r2
 8005916:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005918:	4a12      	ldr	r2, [pc, #72]	@ (8005964 <HAL_GPIO_Init+0x350>)
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	3301      	adds	r3, #1
 8005922:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	fa22 f303 	lsr.w	r3, r2, r3
 800592e:	2b00      	cmp	r3, #0
 8005930:	f47f ae78 	bne.w	8005624 <HAL_GPIO_Init+0x10>
  }
}
 8005934:	bf00      	nop
 8005936:	bf00      	nop
 8005938:	371c      	adds	r7, #28
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr
 8005942:	bf00      	nop
 8005944:	40021000 	.word	0x40021000
 8005948:	40010000 	.word	0x40010000
 800594c:	48000400 	.word	0x48000400
 8005950:	48000800 	.word	0x48000800
 8005954:	48000c00 	.word	0x48000c00
 8005958:	48001000 	.word	0x48001000
 800595c:	48001400 	.word	0x48001400
 8005960:	48001800 	.word	0x48001800
 8005964:	40010400 	.word	0x40010400

08005968 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005968:	b480      	push	{r7}
 800596a:	b083      	sub	sp, #12
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	460b      	mov	r3, r1
 8005972:	807b      	strh	r3, [r7, #2]
 8005974:	4613      	mov	r3, r2
 8005976:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005978:	787b      	ldrb	r3, [r7, #1]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d003      	beq.n	8005986 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800597e:	887a      	ldrh	r2, [r7, #2]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005984:	e002      	b.n	800598c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005986:	887a      	ldrh	r2, [r7, #2]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800598c:	bf00      	nop
 800598e:	370c      	adds	r7, #12
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b082      	sub	sp, #8
 800599c:	af00      	add	r7, sp, #0
 800599e:	4603      	mov	r3, r0
 80059a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80059a2:	4b08      	ldr	r3, [pc, #32]	@ (80059c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80059a4:	695a      	ldr	r2, [r3, #20]
 80059a6:	88fb      	ldrh	r3, [r7, #6]
 80059a8:	4013      	ands	r3, r2
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d006      	beq.n	80059bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80059ae:	4a05      	ldr	r2, [pc, #20]	@ (80059c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80059b0:	88fb      	ldrh	r3, [r7, #6]
 80059b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80059b4:	88fb      	ldrh	r3, [r7, #6]
 80059b6:	4618      	mov	r0, r3
 80059b8:	f7fb fcd2 	bl	8001360 <HAL_GPIO_EXTI_Callback>
  }
}
 80059bc:	bf00      	nop
 80059be:	3708      	adds	r7, #8
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}
 80059c4:	40010400 	.word	0x40010400

080059c8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80059c8:	b480      	push	{r7}
 80059ca:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80059cc:	4b04      	ldr	r3, [pc, #16]	@ (80059e0 <HAL_PWREx_GetVoltageRange+0x18>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr
 80059de:	bf00      	nop
 80059e0:	40007000 	.word	0x40007000

080059e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b085      	sub	sp, #20
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80059f2:	d130      	bne.n	8005a56 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80059f4:	4b23      	ldr	r3, [pc, #140]	@ (8005a84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80059fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a00:	d038      	beq.n	8005a74 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005a02:	4b20      	ldr	r3, [pc, #128]	@ (8005a84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005a0a:	4a1e      	ldr	r2, [pc, #120]	@ (8005a84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005a0c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005a10:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005a12:	4b1d      	ldr	r3, [pc, #116]	@ (8005a88 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	2232      	movs	r2, #50	@ 0x32
 8005a18:	fb02 f303 	mul.w	r3, r2, r3
 8005a1c:	4a1b      	ldr	r2, [pc, #108]	@ (8005a8c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a22:	0c9b      	lsrs	r3, r3, #18
 8005a24:	3301      	adds	r3, #1
 8005a26:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005a28:	e002      	b.n	8005a30 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	3b01      	subs	r3, #1
 8005a2e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005a30:	4b14      	ldr	r3, [pc, #80]	@ (8005a84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005a32:	695b      	ldr	r3, [r3, #20]
 8005a34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a3c:	d102      	bne.n	8005a44 <HAL_PWREx_ControlVoltageScaling+0x60>
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d1f2      	bne.n	8005a2a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005a44:	4b0f      	ldr	r3, [pc, #60]	@ (8005a84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005a46:	695b      	ldr	r3, [r3, #20]
 8005a48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a50:	d110      	bne.n	8005a74 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005a52:	2303      	movs	r3, #3
 8005a54:	e00f      	b.n	8005a76 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005a56:	4b0b      	ldr	r3, [pc, #44]	@ (8005a84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005a5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a62:	d007      	beq.n	8005a74 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005a64:	4b07      	ldr	r3, [pc, #28]	@ (8005a84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005a6c:	4a05      	ldr	r2, [pc, #20]	@ (8005a84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005a6e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005a72:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005a74:	2300      	movs	r3, #0
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3714      	adds	r7, #20
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr
 8005a82:	bf00      	nop
 8005a84:	40007000 	.word	0x40007000
 8005a88:	20000014 	.word	0x20000014
 8005a8c:	431bde83 	.word	0x431bde83

08005a90 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b088      	sub	sp, #32
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d101      	bne.n	8005aa2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e3ca      	b.n	8006238 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005aa2:	4b97      	ldr	r3, [pc, #604]	@ (8005d00 <HAL_RCC_OscConfig+0x270>)
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	f003 030c 	and.w	r3, r3, #12
 8005aaa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005aac:	4b94      	ldr	r3, [pc, #592]	@ (8005d00 <HAL_RCC_OscConfig+0x270>)
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	f003 0303 	and.w	r3, r3, #3
 8005ab4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f003 0310 	and.w	r3, r3, #16
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	f000 80e4 	beq.w	8005c8c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005ac4:	69bb      	ldr	r3, [r7, #24]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d007      	beq.n	8005ada <HAL_RCC_OscConfig+0x4a>
 8005aca:	69bb      	ldr	r3, [r7, #24]
 8005acc:	2b0c      	cmp	r3, #12
 8005ace:	f040 808b 	bne.w	8005be8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	f040 8087 	bne.w	8005be8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005ada:	4b89      	ldr	r3, [pc, #548]	@ (8005d00 <HAL_RCC_OscConfig+0x270>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f003 0302 	and.w	r3, r3, #2
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d005      	beq.n	8005af2 <HAL_RCC_OscConfig+0x62>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	699b      	ldr	r3, [r3, #24]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d101      	bne.n	8005af2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	e3a2      	b.n	8006238 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6a1a      	ldr	r2, [r3, #32]
 8005af6:	4b82      	ldr	r3, [pc, #520]	@ (8005d00 <HAL_RCC_OscConfig+0x270>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f003 0308 	and.w	r3, r3, #8
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d004      	beq.n	8005b0c <HAL_RCC_OscConfig+0x7c>
 8005b02:	4b7f      	ldr	r3, [pc, #508]	@ (8005d00 <HAL_RCC_OscConfig+0x270>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005b0a:	e005      	b.n	8005b18 <HAL_RCC_OscConfig+0x88>
 8005b0c:	4b7c      	ldr	r3, [pc, #496]	@ (8005d00 <HAL_RCC_OscConfig+0x270>)
 8005b0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b12:	091b      	lsrs	r3, r3, #4
 8005b14:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d223      	bcs.n	8005b64 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6a1b      	ldr	r3, [r3, #32]
 8005b20:	4618      	mov	r0, r3
 8005b22:	f000 fd55 	bl	80065d0 <RCC_SetFlashLatencyFromMSIRange>
 8005b26:	4603      	mov	r3, r0
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d001      	beq.n	8005b30 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	e383      	b.n	8006238 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005b30:	4b73      	ldr	r3, [pc, #460]	@ (8005d00 <HAL_RCC_OscConfig+0x270>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a72      	ldr	r2, [pc, #456]	@ (8005d00 <HAL_RCC_OscConfig+0x270>)
 8005b36:	f043 0308 	orr.w	r3, r3, #8
 8005b3a:	6013      	str	r3, [r2, #0]
 8005b3c:	4b70      	ldr	r3, [pc, #448]	@ (8005d00 <HAL_RCC_OscConfig+0x270>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6a1b      	ldr	r3, [r3, #32]
 8005b48:	496d      	ldr	r1, [pc, #436]	@ (8005d00 <HAL_RCC_OscConfig+0x270>)
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005b4e:	4b6c      	ldr	r3, [pc, #432]	@ (8005d00 <HAL_RCC_OscConfig+0x270>)
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	69db      	ldr	r3, [r3, #28]
 8005b5a:	021b      	lsls	r3, r3, #8
 8005b5c:	4968      	ldr	r1, [pc, #416]	@ (8005d00 <HAL_RCC_OscConfig+0x270>)
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	604b      	str	r3, [r1, #4]
 8005b62:	e025      	b.n	8005bb0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005b64:	4b66      	ldr	r3, [pc, #408]	@ (8005d00 <HAL_RCC_OscConfig+0x270>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a65      	ldr	r2, [pc, #404]	@ (8005d00 <HAL_RCC_OscConfig+0x270>)
 8005b6a:	f043 0308 	orr.w	r3, r3, #8
 8005b6e:	6013      	str	r3, [r2, #0]
 8005b70:	4b63      	ldr	r3, [pc, #396]	@ (8005d00 <HAL_RCC_OscConfig+0x270>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6a1b      	ldr	r3, [r3, #32]
 8005b7c:	4960      	ldr	r1, [pc, #384]	@ (8005d00 <HAL_RCC_OscConfig+0x270>)
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005b82:	4b5f      	ldr	r3, [pc, #380]	@ (8005d00 <HAL_RCC_OscConfig+0x270>)
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	69db      	ldr	r3, [r3, #28]
 8005b8e:	021b      	lsls	r3, r3, #8
 8005b90:	495b      	ldr	r1, [pc, #364]	@ (8005d00 <HAL_RCC_OscConfig+0x270>)
 8005b92:	4313      	orrs	r3, r2
 8005b94:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005b96:	69bb      	ldr	r3, [r7, #24]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d109      	bne.n	8005bb0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6a1b      	ldr	r3, [r3, #32]
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f000 fd15 	bl	80065d0 <RCC_SetFlashLatencyFromMSIRange>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d001      	beq.n	8005bb0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	e343      	b.n	8006238 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005bb0:	f000 fc4a 	bl	8006448 <HAL_RCC_GetSysClockFreq>
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	4b52      	ldr	r3, [pc, #328]	@ (8005d00 <HAL_RCC_OscConfig+0x270>)
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	091b      	lsrs	r3, r3, #4
 8005bbc:	f003 030f 	and.w	r3, r3, #15
 8005bc0:	4950      	ldr	r1, [pc, #320]	@ (8005d04 <HAL_RCC_OscConfig+0x274>)
 8005bc2:	5ccb      	ldrb	r3, [r1, r3]
 8005bc4:	f003 031f 	and.w	r3, r3, #31
 8005bc8:	fa22 f303 	lsr.w	r3, r2, r3
 8005bcc:	4a4e      	ldr	r2, [pc, #312]	@ (8005d08 <HAL_RCC_OscConfig+0x278>)
 8005bce:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005bd0:	4b4e      	ldr	r3, [pc, #312]	@ (8005d0c <HAL_RCC_OscConfig+0x27c>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f7fc fb7f 	bl	80022d8 <HAL_InitTick>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005bde:	7bfb      	ldrb	r3, [r7, #15]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d052      	beq.n	8005c8a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8005be4:	7bfb      	ldrb	r3, [r7, #15]
 8005be6:	e327      	b.n	8006238 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	699b      	ldr	r3, [r3, #24]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d032      	beq.n	8005c56 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005bf0:	4b43      	ldr	r3, [pc, #268]	@ (8005d00 <HAL_RCC_OscConfig+0x270>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a42      	ldr	r2, [pc, #264]	@ (8005d00 <HAL_RCC_OscConfig+0x270>)
 8005bf6:	f043 0301 	orr.w	r3, r3, #1
 8005bfa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005bfc:	f7fc fbbc 	bl	8002378 <HAL_GetTick>
 8005c00:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005c02:	e008      	b.n	8005c16 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005c04:	f7fc fbb8 	bl	8002378 <HAL_GetTick>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	1ad3      	subs	r3, r2, r3
 8005c0e:	2b02      	cmp	r3, #2
 8005c10:	d901      	bls.n	8005c16 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8005c12:	2303      	movs	r3, #3
 8005c14:	e310      	b.n	8006238 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005c16:	4b3a      	ldr	r3, [pc, #232]	@ (8005d00 <HAL_RCC_OscConfig+0x270>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f003 0302 	and.w	r3, r3, #2
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d0f0      	beq.n	8005c04 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005c22:	4b37      	ldr	r3, [pc, #220]	@ (8005d00 <HAL_RCC_OscConfig+0x270>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a36      	ldr	r2, [pc, #216]	@ (8005d00 <HAL_RCC_OscConfig+0x270>)
 8005c28:	f043 0308 	orr.w	r3, r3, #8
 8005c2c:	6013      	str	r3, [r2, #0]
 8005c2e:	4b34      	ldr	r3, [pc, #208]	@ (8005d00 <HAL_RCC_OscConfig+0x270>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6a1b      	ldr	r3, [r3, #32]
 8005c3a:	4931      	ldr	r1, [pc, #196]	@ (8005d00 <HAL_RCC_OscConfig+0x270>)
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005c40:	4b2f      	ldr	r3, [pc, #188]	@ (8005d00 <HAL_RCC_OscConfig+0x270>)
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	69db      	ldr	r3, [r3, #28]
 8005c4c:	021b      	lsls	r3, r3, #8
 8005c4e:	492c      	ldr	r1, [pc, #176]	@ (8005d00 <HAL_RCC_OscConfig+0x270>)
 8005c50:	4313      	orrs	r3, r2
 8005c52:	604b      	str	r3, [r1, #4]
 8005c54:	e01a      	b.n	8005c8c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005c56:	4b2a      	ldr	r3, [pc, #168]	@ (8005d00 <HAL_RCC_OscConfig+0x270>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a29      	ldr	r2, [pc, #164]	@ (8005d00 <HAL_RCC_OscConfig+0x270>)
 8005c5c:	f023 0301 	bic.w	r3, r3, #1
 8005c60:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005c62:	f7fc fb89 	bl	8002378 <HAL_GetTick>
 8005c66:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005c68:	e008      	b.n	8005c7c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005c6a:	f7fc fb85 	bl	8002378 <HAL_GetTick>
 8005c6e:	4602      	mov	r2, r0
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	1ad3      	subs	r3, r2, r3
 8005c74:	2b02      	cmp	r3, #2
 8005c76:	d901      	bls.n	8005c7c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8005c78:	2303      	movs	r3, #3
 8005c7a:	e2dd      	b.n	8006238 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005c7c:	4b20      	ldr	r3, [pc, #128]	@ (8005d00 <HAL_RCC_OscConfig+0x270>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f003 0302 	and.w	r3, r3, #2
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d1f0      	bne.n	8005c6a <HAL_RCC_OscConfig+0x1da>
 8005c88:	e000      	b.n	8005c8c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005c8a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f003 0301 	and.w	r3, r3, #1
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d074      	beq.n	8005d82 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005c98:	69bb      	ldr	r3, [r7, #24]
 8005c9a:	2b08      	cmp	r3, #8
 8005c9c:	d005      	beq.n	8005caa <HAL_RCC_OscConfig+0x21a>
 8005c9e:	69bb      	ldr	r3, [r7, #24]
 8005ca0:	2b0c      	cmp	r3, #12
 8005ca2:	d10e      	bne.n	8005cc2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	2b03      	cmp	r3, #3
 8005ca8:	d10b      	bne.n	8005cc2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005caa:	4b15      	ldr	r3, [pc, #84]	@ (8005d00 <HAL_RCC_OscConfig+0x270>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d064      	beq.n	8005d80 <HAL_RCC_OscConfig+0x2f0>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d160      	bne.n	8005d80 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e2ba      	b.n	8006238 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005cca:	d106      	bne.n	8005cda <HAL_RCC_OscConfig+0x24a>
 8005ccc:	4b0c      	ldr	r3, [pc, #48]	@ (8005d00 <HAL_RCC_OscConfig+0x270>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a0b      	ldr	r2, [pc, #44]	@ (8005d00 <HAL_RCC_OscConfig+0x270>)
 8005cd2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005cd6:	6013      	str	r3, [r2, #0]
 8005cd8:	e026      	b.n	8005d28 <HAL_RCC_OscConfig+0x298>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005ce2:	d115      	bne.n	8005d10 <HAL_RCC_OscConfig+0x280>
 8005ce4:	4b06      	ldr	r3, [pc, #24]	@ (8005d00 <HAL_RCC_OscConfig+0x270>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a05      	ldr	r2, [pc, #20]	@ (8005d00 <HAL_RCC_OscConfig+0x270>)
 8005cea:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005cee:	6013      	str	r3, [r2, #0]
 8005cf0:	4b03      	ldr	r3, [pc, #12]	@ (8005d00 <HAL_RCC_OscConfig+0x270>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a02      	ldr	r2, [pc, #8]	@ (8005d00 <HAL_RCC_OscConfig+0x270>)
 8005cf6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005cfa:	6013      	str	r3, [r2, #0]
 8005cfc:	e014      	b.n	8005d28 <HAL_RCC_OscConfig+0x298>
 8005cfe:	bf00      	nop
 8005d00:	40021000 	.word	0x40021000
 8005d04:	08009300 	.word	0x08009300
 8005d08:	20000014 	.word	0x20000014
 8005d0c:	20000018 	.word	0x20000018
 8005d10:	4ba0      	ldr	r3, [pc, #640]	@ (8005f94 <HAL_RCC_OscConfig+0x504>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a9f      	ldr	r2, [pc, #636]	@ (8005f94 <HAL_RCC_OscConfig+0x504>)
 8005d16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d1a:	6013      	str	r3, [r2, #0]
 8005d1c:	4b9d      	ldr	r3, [pc, #628]	@ (8005f94 <HAL_RCC_OscConfig+0x504>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a9c      	ldr	r2, [pc, #624]	@ (8005f94 <HAL_RCC_OscConfig+0x504>)
 8005d22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005d26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d013      	beq.n	8005d58 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d30:	f7fc fb22 	bl	8002378 <HAL_GetTick>
 8005d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005d36:	e008      	b.n	8005d4a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d38:	f7fc fb1e 	bl	8002378 <HAL_GetTick>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	1ad3      	subs	r3, r2, r3
 8005d42:	2b64      	cmp	r3, #100	@ 0x64
 8005d44:	d901      	bls.n	8005d4a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005d46:	2303      	movs	r3, #3
 8005d48:	e276      	b.n	8006238 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005d4a:	4b92      	ldr	r3, [pc, #584]	@ (8005f94 <HAL_RCC_OscConfig+0x504>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d0f0      	beq.n	8005d38 <HAL_RCC_OscConfig+0x2a8>
 8005d56:	e014      	b.n	8005d82 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d58:	f7fc fb0e 	bl	8002378 <HAL_GetTick>
 8005d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005d5e:	e008      	b.n	8005d72 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d60:	f7fc fb0a 	bl	8002378 <HAL_GetTick>
 8005d64:	4602      	mov	r2, r0
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	1ad3      	subs	r3, r2, r3
 8005d6a:	2b64      	cmp	r3, #100	@ 0x64
 8005d6c:	d901      	bls.n	8005d72 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005d6e:	2303      	movs	r3, #3
 8005d70:	e262      	b.n	8006238 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005d72:	4b88      	ldr	r3, [pc, #544]	@ (8005f94 <HAL_RCC_OscConfig+0x504>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d1f0      	bne.n	8005d60 <HAL_RCC_OscConfig+0x2d0>
 8005d7e:	e000      	b.n	8005d82 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f003 0302 	and.w	r3, r3, #2
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d060      	beq.n	8005e50 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005d8e:	69bb      	ldr	r3, [r7, #24]
 8005d90:	2b04      	cmp	r3, #4
 8005d92:	d005      	beq.n	8005da0 <HAL_RCC_OscConfig+0x310>
 8005d94:	69bb      	ldr	r3, [r7, #24]
 8005d96:	2b0c      	cmp	r3, #12
 8005d98:	d119      	bne.n	8005dce <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	2b02      	cmp	r3, #2
 8005d9e:	d116      	bne.n	8005dce <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005da0:	4b7c      	ldr	r3, [pc, #496]	@ (8005f94 <HAL_RCC_OscConfig+0x504>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d005      	beq.n	8005db8 <HAL_RCC_OscConfig+0x328>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d101      	bne.n	8005db8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005db4:	2301      	movs	r3, #1
 8005db6:	e23f      	b.n	8006238 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005db8:	4b76      	ldr	r3, [pc, #472]	@ (8005f94 <HAL_RCC_OscConfig+0x504>)
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	691b      	ldr	r3, [r3, #16]
 8005dc4:	061b      	lsls	r3, r3, #24
 8005dc6:	4973      	ldr	r1, [pc, #460]	@ (8005f94 <HAL_RCC_OscConfig+0x504>)
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005dcc:	e040      	b.n	8005e50 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	68db      	ldr	r3, [r3, #12]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d023      	beq.n	8005e1e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005dd6:	4b6f      	ldr	r3, [pc, #444]	@ (8005f94 <HAL_RCC_OscConfig+0x504>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a6e      	ldr	r2, [pc, #440]	@ (8005f94 <HAL_RCC_OscConfig+0x504>)
 8005ddc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005de0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005de2:	f7fc fac9 	bl	8002378 <HAL_GetTick>
 8005de6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005de8:	e008      	b.n	8005dfc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005dea:	f7fc fac5 	bl	8002378 <HAL_GetTick>
 8005dee:	4602      	mov	r2, r0
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	1ad3      	subs	r3, r2, r3
 8005df4:	2b02      	cmp	r3, #2
 8005df6:	d901      	bls.n	8005dfc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005df8:	2303      	movs	r3, #3
 8005dfa:	e21d      	b.n	8006238 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005dfc:	4b65      	ldr	r3, [pc, #404]	@ (8005f94 <HAL_RCC_OscConfig+0x504>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d0f0      	beq.n	8005dea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e08:	4b62      	ldr	r3, [pc, #392]	@ (8005f94 <HAL_RCC_OscConfig+0x504>)
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	691b      	ldr	r3, [r3, #16]
 8005e14:	061b      	lsls	r3, r3, #24
 8005e16:	495f      	ldr	r1, [pc, #380]	@ (8005f94 <HAL_RCC_OscConfig+0x504>)
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	604b      	str	r3, [r1, #4]
 8005e1c:	e018      	b.n	8005e50 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e1e:	4b5d      	ldr	r3, [pc, #372]	@ (8005f94 <HAL_RCC_OscConfig+0x504>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a5c      	ldr	r2, [pc, #368]	@ (8005f94 <HAL_RCC_OscConfig+0x504>)
 8005e24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e2a:	f7fc faa5 	bl	8002378 <HAL_GetTick>
 8005e2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005e30:	e008      	b.n	8005e44 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e32:	f7fc faa1 	bl	8002378 <HAL_GetTick>
 8005e36:	4602      	mov	r2, r0
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	1ad3      	subs	r3, r2, r3
 8005e3c:	2b02      	cmp	r3, #2
 8005e3e:	d901      	bls.n	8005e44 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005e40:	2303      	movs	r3, #3
 8005e42:	e1f9      	b.n	8006238 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005e44:	4b53      	ldr	r3, [pc, #332]	@ (8005f94 <HAL_RCC_OscConfig+0x504>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d1f0      	bne.n	8005e32 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f003 0308 	and.w	r3, r3, #8
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d03c      	beq.n	8005ed6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	695b      	ldr	r3, [r3, #20]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d01c      	beq.n	8005e9e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e64:	4b4b      	ldr	r3, [pc, #300]	@ (8005f94 <HAL_RCC_OscConfig+0x504>)
 8005e66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e6a:	4a4a      	ldr	r2, [pc, #296]	@ (8005f94 <HAL_RCC_OscConfig+0x504>)
 8005e6c:	f043 0301 	orr.w	r3, r3, #1
 8005e70:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e74:	f7fc fa80 	bl	8002378 <HAL_GetTick>
 8005e78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005e7a:	e008      	b.n	8005e8e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e7c:	f7fc fa7c 	bl	8002378 <HAL_GetTick>
 8005e80:	4602      	mov	r2, r0
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	1ad3      	subs	r3, r2, r3
 8005e86:	2b02      	cmp	r3, #2
 8005e88:	d901      	bls.n	8005e8e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005e8a:	2303      	movs	r3, #3
 8005e8c:	e1d4      	b.n	8006238 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005e8e:	4b41      	ldr	r3, [pc, #260]	@ (8005f94 <HAL_RCC_OscConfig+0x504>)
 8005e90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e94:	f003 0302 	and.w	r3, r3, #2
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d0ef      	beq.n	8005e7c <HAL_RCC_OscConfig+0x3ec>
 8005e9c:	e01b      	b.n	8005ed6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e9e:	4b3d      	ldr	r3, [pc, #244]	@ (8005f94 <HAL_RCC_OscConfig+0x504>)
 8005ea0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ea4:	4a3b      	ldr	r2, [pc, #236]	@ (8005f94 <HAL_RCC_OscConfig+0x504>)
 8005ea6:	f023 0301 	bic.w	r3, r3, #1
 8005eaa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005eae:	f7fc fa63 	bl	8002378 <HAL_GetTick>
 8005eb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005eb4:	e008      	b.n	8005ec8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005eb6:	f7fc fa5f 	bl	8002378 <HAL_GetTick>
 8005eba:	4602      	mov	r2, r0
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	1ad3      	subs	r3, r2, r3
 8005ec0:	2b02      	cmp	r3, #2
 8005ec2:	d901      	bls.n	8005ec8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005ec4:	2303      	movs	r3, #3
 8005ec6:	e1b7      	b.n	8006238 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005ec8:	4b32      	ldr	r3, [pc, #200]	@ (8005f94 <HAL_RCC_OscConfig+0x504>)
 8005eca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ece:	f003 0302 	and.w	r3, r3, #2
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d1ef      	bne.n	8005eb6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f003 0304 	and.w	r3, r3, #4
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	f000 80a6 	beq.w	8006030 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005ee8:	4b2a      	ldr	r3, [pc, #168]	@ (8005f94 <HAL_RCC_OscConfig+0x504>)
 8005eea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005eec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d10d      	bne.n	8005f10 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ef4:	4b27      	ldr	r3, [pc, #156]	@ (8005f94 <HAL_RCC_OscConfig+0x504>)
 8005ef6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ef8:	4a26      	ldr	r2, [pc, #152]	@ (8005f94 <HAL_RCC_OscConfig+0x504>)
 8005efa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005efe:	6593      	str	r3, [r2, #88]	@ 0x58
 8005f00:	4b24      	ldr	r3, [pc, #144]	@ (8005f94 <HAL_RCC_OscConfig+0x504>)
 8005f02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f08:	60bb      	str	r3, [r7, #8]
 8005f0a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f10:	4b21      	ldr	r3, [pc, #132]	@ (8005f98 <HAL_RCC_OscConfig+0x508>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d118      	bne.n	8005f4e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005f1c:	4b1e      	ldr	r3, [pc, #120]	@ (8005f98 <HAL_RCC_OscConfig+0x508>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a1d      	ldr	r2, [pc, #116]	@ (8005f98 <HAL_RCC_OscConfig+0x508>)
 8005f22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f26:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f28:	f7fc fa26 	bl	8002378 <HAL_GetTick>
 8005f2c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f2e:	e008      	b.n	8005f42 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f30:	f7fc fa22 	bl	8002378 <HAL_GetTick>
 8005f34:	4602      	mov	r2, r0
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	1ad3      	subs	r3, r2, r3
 8005f3a:	2b02      	cmp	r3, #2
 8005f3c:	d901      	bls.n	8005f42 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005f3e:	2303      	movs	r3, #3
 8005f40:	e17a      	b.n	8006238 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f42:	4b15      	ldr	r3, [pc, #84]	@ (8005f98 <HAL_RCC_OscConfig+0x508>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d0f0      	beq.n	8005f30 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d108      	bne.n	8005f68 <HAL_RCC_OscConfig+0x4d8>
 8005f56:	4b0f      	ldr	r3, [pc, #60]	@ (8005f94 <HAL_RCC_OscConfig+0x504>)
 8005f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f5c:	4a0d      	ldr	r2, [pc, #52]	@ (8005f94 <HAL_RCC_OscConfig+0x504>)
 8005f5e:	f043 0301 	orr.w	r3, r3, #1
 8005f62:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005f66:	e029      	b.n	8005fbc <HAL_RCC_OscConfig+0x52c>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	2b05      	cmp	r3, #5
 8005f6e:	d115      	bne.n	8005f9c <HAL_RCC_OscConfig+0x50c>
 8005f70:	4b08      	ldr	r3, [pc, #32]	@ (8005f94 <HAL_RCC_OscConfig+0x504>)
 8005f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f76:	4a07      	ldr	r2, [pc, #28]	@ (8005f94 <HAL_RCC_OscConfig+0x504>)
 8005f78:	f043 0304 	orr.w	r3, r3, #4
 8005f7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005f80:	4b04      	ldr	r3, [pc, #16]	@ (8005f94 <HAL_RCC_OscConfig+0x504>)
 8005f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f86:	4a03      	ldr	r2, [pc, #12]	@ (8005f94 <HAL_RCC_OscConfig+0x504>)
 8005f88:	f043 0301 	orr.w	r3, r3, #1
 8005f8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005f90:	e014      	b.n	8005fbc <HAL_RCC_OscConfig+0x52c>
 8005f92:	bf00      	nop
 8005f94:	40021000 	.word	0x40021000
 8005f98:	40007000 	.word	0x40007000
 8005f9c:	4b9c      	ldr	r3, [pc, #624]	@ (8006210 <HAL_RCC_OscConfig+0x780>)
 8005f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fa2:	4a9b      	ldr	r2, [pc, #620]	@ (8006210 <HAL_RCC_OscConfig+0x780>)
 8005fa4:	f023 0301 	bic.w	r3, r3, #1
 8005fa8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005fac:	4b98      	ldr	r3, [pc, #608]	@ (8006210 <HAL_RCC_OscConfig+0x780>)
 8005fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fb2:	4a97      	ldr	r2, [pc, #604]	@ (8006210 <HAL_RCC_OscConfig+0x780>)
 8005fb4:	f023 0304 	bic.w	r3, r3, #4
 8005fb8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d016      	beq.n	8005ff2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fc4:	f7fc f9d8 	bl	8002378 <HAL_GetTick>
 8005fc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005fca:	e00a      	b.n	8005fe2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fcc:	f7fc f9d4 	bl	8002378 <HAL_GetTick>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	1ad3      	subs	r3, r2, r3
 8005fd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d901      	bls.n	8005fe2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005fde:	2303      	movs	r3, #3
 8005fe0:	e12a      	b.n	8006238 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005fe2:	4b8b      	ldr	r3, [pc, #556]	@ (8006210 <HAL_RCC_OscConfig+0x780>)
 8005fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fe8:	f003 0302 	and.w	r3, r3, #2
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d0ed      	beq.n	8005fcc <HAL_RCC_OscConfig+0x53c>
 8005ff0:	e015      	b.n	800601e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ff2:	f7fc f9c1 	bl	8002378 <HAL_GetTick>
 8005ff6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005ff8:	e00a      	b.n	8006010 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ffa:	f7fc f9bd 	bl	8002378 <HAL_GetTick>
 8005ffe:	4602      	mov	r2, r0
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	1ad3      	subs	r3, r2, r3
 8006004:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006008:	4293      	cmp	r3, r2
 800600a:	d901      	bls.n	8006010 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800600c:	2303      	movs	r3, #3
 800600e:	e113      	b.n	8006238 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006010:	4b7f      	ldr	r3, [pc, #508]	@ (8006210 <HAL_RCC_OscConfig+0x780>)
 8006012:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006016:	f003 0302 	and.w	r3, r3, #2
 800601a:	2b00      	cmp	r3, #0
 800601c:	d1ed      	bne.n	8005ffa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800601e:	7ffb      	ldrb	r3, [r7, #31]
 8006020:	2b01      	cmp	r3, #1
 8006022:	d105      	bne.n	8006030 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006024:	4b7a      	ldr	r3, [pc, #488]	@ (8006210 <HAL_RCC_OscConfig+0x780>)
 8006026:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006028:	4a79      	ldr	r2, [pc, #484]	@ (8006210 <HAL_RCC_OscConfig+0x780>)
 800602a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800602e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006034:	2b00      	cmp	r3, #0
 8006036:	f000 80fe 	beq.w	8006236 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800603e:	2b02      	cmp	r3, #2
 8006040:	f040 80d0 	bne.w	80061e4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006044:	4b72      	ldr	r3, [pc, #456]	@ (8006210 <HAL_RCC_OscConfig+0x780>)
 8006046:	68db      	ldr	r3, [r3, #12]
 8006048:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	f003 0203 	and.w	r2, r3, #3
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006054:	429a      	cmp	r2, r3
 8006056:	d130      	bne.n	80060ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006062:	3b01      	subs	r3, #1
 8006064:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006066:	429a      	cmp	r2, r3
 8006068:	d127      	bne.n	80060ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006074:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006076:	429a      	cmp	r2, r3
 8006078:	d11f      	bne.n	80060ba <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006084:	2a07      	cmp	r2, #7
 8006086:	bf14      	ite	ne
 8006088:	2201      	movne	r2, #1
 800608a:	2200      	moveq	r2, #0
 800608c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800608e:	4293      	cmp	r3, r2
 8006090:	d113      	bne.n	80060ba <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800609c:	085b      	lsrs	r3, r3, #1
 800609e:	3b01      	subs	r3, #1
 80060a0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d109      	bne.n	80060ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060b0:	085b      	lsrs	r3, r3, #1
 80060b2:	3b01      	subs	r3, #1
 80060b4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d06e      	beq.n	8006198 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80060ba:	69bb      	ldr	r3, [r7, #24]
 80060bc:	2b0c      	cmp	r3, #12
 80060be:	d069      	beq.n	8006194 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80060c0:	4b53      	ldr	r3, [pc, #332]	@ (8006210 <HAL_RCC_OscConfig+0x780>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d105      	bne.n	80060d8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80060cc:	4b50      	ldr	r3, [pc, #320]	@ (8006210 <HAL_RCC_OscConfig+0x780>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d001      	beq.n	80060dc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80060d8:	2301      	movs	r3, #1
 80060da:	e0ad      	b.n	8006238 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80060dc:	4b4c      	ldr	r3, [pc, #304]	@ (8006210 <HAL_RCC_OscConfig+0x780>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a4b      	ldr	r2, [pc, #300]	@ (8006210 <HAL_RCC_OscConfig+0x780>)
 80060e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80060e6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80060e8:	f7fc f946 	bl	8002378 <HAL_GetTick>
 80060ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80060ee:	e008      	b.n	8006102 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060f0:	f7fc f942 	bl	8002378 <HAL_GetTick>
 80060f4:	4602      	mov	r2, r0
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	1ad3      	subs	r3, r2, r3
 80060fa:	2b02      	cmp	r3, #2
 80060fc:	d901      	bls.n	8006102 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80060fe:	2303      	movs	r3, #3
 8006100:	e09a      	b.n	8006238 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006102:	4b43      	ldr	r3, [pc, #268]	@ (8006210 <HAL_RCC_OscConfig+0x780>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800610a:	2b00      	cmp	r3, #0
 800610c:	d1f0      	bne.n	80060f0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800610e:	4b40      	ldr	r3, [pc, #256]	@ (8006210 <HAL_RCC_OscConfig+0x780>)
 8006110:	68da      	ldr	r2, [r3, #12]
 8006112:	4b40      	ldr	r3, [pc, #256]	@ (8006214 <HAL_RCC_OscConfig+0x784>)
 8006114:	4013      	ands	r3, r2
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800611a:	687a      	ldr	r2, [r7, #4]
 800611c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800611e:	3a01      	subs	r2, #1
 8006120:	0112      	lsls	r2, r2, #4
 8006122:	4311      	orrs	r1, r2
 8006124:	687a      	ldr	r2, [r7, #4]
 8006126:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006128:	0212      	lsls	r2, r2, #8
 800612a:	4311      	orrs	r1, r2
 800612c:	687a      	ldr	r2, [r7, #4]
 800612e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006130:	0852      	lsrs	r2, r2, #1
 8006132:	3a01      	subs	r2, #1
 8006134:	0552      	lsls	r2, r2, #21
 8006136:	4311      	orrs	r1, r2
 8006138:	687a      	ldr	r2, [r7, #4]
 800613a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800613c:	0852      	lsrs	r2, r2, #1
 800613e:	3a01      	subs	r2, #1
 8006140:	0652      	lsls	r2, r2, #25
 8006142:	4311      	orrs	r1, r2
 8006144:	687a      	ldr	r2, [r7, #4]
 8006146:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006148:	0912      	lsrs	r2, r2, #4
 800614a:	0452      	lsls	r2, r2, #17
 800614c:	430a      	orrs	r2, r1
 800614e:	4930      	ldr	r1, [pc, #192]	@ (8006210 <HAL_RCC_OscConfig+0x780>)
 8006150:	4313      	orrs	r3, r2
 8006152:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006154:	4b2e      	ldr	r3, [pc, #184]	@ (8006210 <HAL_RCC_OscConfig+0x780>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a2d      	ldr	r2, [pc, #180]	@ (8006210 <HAL_RCC_OscConfig+0x780>)
 800615a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800615e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006160:	4b2b      	ldr	r3, [pc, #172]	@ (8006210 <HAL_RCC_OscConfig+0x780>)
 8006162:	68db      	ldr	r3, [r3, #12]
 8006164:	4a2a      	ldr	r2, [pc, #168]	@ (8006210 <HAL_RCC_OscConfig+0x780>)
 8006166:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800616a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800616c:	f7fc f904 	bl	8002378 <HAL_GetTick>
 8006170:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006172:	e008      	b.n	8006186 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006174:	f7fc f900 	bl	8002378 <HAL_GetTick>
 8006178:	4602      	mov	r2, r0
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	1ad3      	subs	r3, r2, r3
 800617e:	2b02      	cmp	r3, #2
 8006180:	d901      	bls.n	8006186 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8006182:	2303      	movs	r3, #3
 8006184:	e058      	b.n	8006238 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006186:	4b22      	ldr	r3, [pc, #136]	@ (8006210 <HAL_RCC_OscConfig+0x780>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800618e:	2b00      	cmp	r3, #0
 8006190:	d0f0      	beq.n	8006174 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006192:	e050      	b.n	8006236 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006194:	2301      	movs	r3, #1
 8006196:	e04f      	b.n	8006238 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006198:	4b1d      	ldr	r3, [pc, #116]	@ (8006210 <HAL_RCC_OscConfig+0x780>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d148      	bne.n	8006236 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80061a4:	4b1a      	ldr	r3, [pc, #104]	@ (8006210 <HAL_RCC_OscConfig+0x780>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a19      	ldr	r2, [pc, #100]	@ (8006210 <HAL_RCC_OscConfig+0x780>)
 80061aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80061ae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80061b0:	4b17      	ldr	r3, [pc, #92]	@ (8006210 <HAL_RCC_OscConfig+0x780>)
 80061b2:	68db      	ldr	r3, [r3, #12]
 80061b4:	4a16      	ldr	r2, [pc, #88]	@ (8006210 <HAL_RCC_OscConfig+0x780>)
 80061b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80061ba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80061bc:	f7fc f8dc 	bl	8002378 <HAL_GetTick>
 80061c0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80061c2:	e008      	b.n	80061d6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061c4:	f7fc f8d8 	bl	8002378 <HAL_GetTick>
 80061c8:	4602      	mov	r2, r0
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	1ad3      	subs	r3, r2, r3
 80061ce:	2b02      	cmp	r3, #2
 80061d0:	d901      	bls.n	80061d6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80061d2:	2303      	movs	r3, #3
 80061d4:	e030      	b.n	8006238 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80061d6:	4b0e      	ldr	r3, [pc, #56]	@ (8006210 <HAL_RCC_OscConfig+0x780>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d0f0      	beq.n	80061c4 <HAL_RCC_OscConfig+0x734>
 80061e2:	e028      	b.n	8006236 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80061e4:	69bb      	ldr	r3, [r7, #24]
 80061e6:	2b0c      	cmp	r3, #12
 80061e8:	d023      	beq.n	8006232 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061ea:	4b09      	ldr	r3, [pc, #36]	@ (8006210 <HAL_RCC_OscConfig+0x780>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a08      	ldr	r2, [pc, #32]	@ (8006210 <HAL_RCC_OscConfig+0x780>)
 80061f0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80061f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061f6:	f7fc f8bf 	bl	8002378 <HAL_GetTick>
 80061fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80061fc:	e00c      	b.n	8006218 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061fe:	f7fc f8bb 	bl	8002378 <HAL_GetTick>
 8006202:	4602      	mov	r2, r0
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	1ad3      	subs	r3, r2, r3
 8006208:	2b02      	cmp	r3, #2
 800620a:	d905      	bls.n	8006218 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800620c:	2303      	movs	r3, #3
 800620e:	e013      	b.n	8006238 <HAL_RCC_OscConfig+0x7a8>
 8006210:	40021000 	.word	0x40021000
 8006214:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006218:	4b09      	ldr	r3, [pc, #36]	@ (8006240 <HAL_RCC_OscConfig+0x7b0>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006220:	2b00      	cmp	r3, #0
 8006222:	d1ec      	bne.n	80061fe <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006224:	4b06      	ldr	r3, [pc, #24]	@ (8006240 <HAL_RCC_OscConfig+0x7b0>)
 8006226:	68da      	ldr	r2, [r3, #12]
 8006228:	4905      	ldr	r1, [pc, #20]	@ (8006240 <HAL_RCC_OscConfig+0x7b0>)
 800622a:	4b06      	ldr	r3, [pc, #24]	@ (8006244 <HAL_RCC_OscConfig+0x7b4>)
 800622c:	4013      	ands	r3, r2
 800622e:	60cb      	str	r3, [r1, #12]
 8006230:	e001      	b.n	8006236 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	e000      	b.n	8006238 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8006236:	2300      	movs	r3, #0
}
 8006238:	4618      	mov	r0, r3
 800623a:	3720      	adds	r7, #32
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}
 8006240:	40021000 	.word	0x40021000
 8006244:	feeefffc 	.word	0xfeeefffc

08006248 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b084      	sub	sp, #16
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d101      	bne.n	800625c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006258:	2301      	movs	r3, #1
 800625a:	e0e7      	b.n	800642c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800625c:	4b75      	ldr	r3, [pc, #468]	@ (8006434 <HAL_RCC_ClockConfig+0x1ec>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f003 0307 	and.w	r3, r3, #7
 8006264:	683a      	ldr	r2, [r7, #0]
 8006266:	429a      	cmp	r2, r3
 8006268:	d910      	bls.n	800628c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800626a:	4b72      	ldr	r3, [pc, #456]	@ (8006434 <HAL_RCC_ClockConfig+0x1ec>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f023 0207 	bic.w	r2, r3, #7
 8006272:	4970      	ldr	r1, [pc, #448]	@ (8006434 <HAL_RCC_ClockConfig+0x1ec>)
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	4313      	orrs	r3, r2
 8006278:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800627a:	4b6e      	ldr	r3, [pc, #440]	@ (8006434 <HAL_RCC_ClockConfig+0x1ec>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f003 0307 	and.w	r3, r3, #7
 8006282:	683a      	ldr	r2, [r7, #0]
 8006284:	429a      	cmp	r2, r3
 8006286:	d001      	beq.n	800628c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006288:	2301      	movs	r3, #1
 800628a:	e0cf      	b.n	800642c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f003 0302 	and.w	r3, r3, #2
 8006294:	2b00      	cmp	r3, #0
 8006296:	d010      	beq.n	80062ba <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	689a      	ldr	r2, [r3, #8]
 800629c:	4b66      	ldr	r3, [pc, #408]	@ (8006438 <HAL_RCC_ClockConfig+0x1f0>)
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d908      	bls.n	80062ba <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80062a8:	4b63      	ldr	r3, [pc, #396]	@ (8006438 <HAL_RCC_ClockConfig+0x1f0>)
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	4960      	ldr	r1, [pc, #384]	@ (8006438 <HAL_RCC_ClockConfig+0x1f0>)
 80062b6:	4313      	orrs	r3, r2
 80062b8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f003 0301 	and.w	r3, r3, #1
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d04c      	beq.n	8006360 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	2b03      	cmp	r3, #3
 80062cc:	d107      	bne.n	80062de <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80062ce:	4b5a      	ldr	r3, [pc, #360]	@ (8006438 <HAL_RCC_ClockConfig+0x1f0>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d121      	bne.n	800631e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80062da:	2301      	movs	r3, #1
 80062dc:	e0a6      	b.n	800642c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	2b02      	cmp	r3, #2
 80062e4:	d107      	bne.n	80062f6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80062e6:	4b54      	ldr	r3, [pc, #336]	@ (8006438 <HAL_RCC_ClockConfig+0x1f0>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d115      	bne.n	800631e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	e09a      	b.n	800642c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d107      	bne.n	800630e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80062fe:	4b4e      	ldr	r3, [pc, #312]	@ (8006438 <HAL_RCC_ClockConfig+0x1f0>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f003 0302 	and.w	r3, r3, #2
 8006306:	2b00      	cmp	r3, #0
 8006308:	d109      	bne.n	800631e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	e08e      	b.n	800642c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800630e:	4b4a      	ldr	r3, [pc, #296]	@ (8006438 <HAL_RCC_ClockConfig+0x1f0>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006316:	2b00      	cmp	r3, #0
 8006318:	d101      	bne.n	800631e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800631a:	2301      	movs	r3, #1
 800631c:	e086      	b.n	800642c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800631e:	4b46      	ldr	r3, [pc, #280]	@ (8006438 <HAL_RCC_ClockConfig+0x1f0>)
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	f023 0203 	bic.w	r2, r3, #3
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	4943      	ldr	r1, [pc, #268]	@ (8006438 <HAL_RCC_ClockConfig+0x1f0>)
 800632c:	4313      	orrs	r3, r2
 800632e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006330:	f7fc f822 	bl	8002378 <HAL_GetTick>
 8006334:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006336:	e00a      	b.n	800634e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006338:	f7fc f81e 	bl	8002378 <HAL_GetTick>
 800633c:	4602      	mov	r2, r0
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	1ad3      	subs	r3, r2, r3
 8006342:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006346:	4293      	cmp	r3, r2
 8006348:	d901      	bls.n	800634e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800634a:	2303      	movs	r3, #3
 800634c:	e06e      	b.n	800642c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800634e:	4b3a      	ldr	r3, [pc, #232]	@ (8006438 <HAL_RCC_ClockConfig+0x1f0>)
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	f003 020c 	and.w	r2, r3, #12
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	009b      	lsls	r3, r3, #2
 800635c:	429a      	cmp	r2, r3
 800635e:	d1eb      	bne.n	8006338 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f003 0302 	and.w	r3, r3, #2
 8006368:	2b00      	cmp	r3, #0
 800636a:	d010      	beq.n	800638e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	689a      	ldr	r2, [r3, #8]
 8006370:	4b31      	ldr	r3, [pc, #196]	@ (8006438 <HAL_RCC_ClockConfig+0x1f0>)
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006378:	429a      	cmp	r2, r3
 800637a:	d208      	bcs.n	800638e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800637c:	4b2e      	ldr	r3, [pc, #184]	@ (8006438 <HAL_RCC_ClockConfig+0x1f0>)
 800637e:	689b      	ldr	r3, [r3, #8]
 8006380:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	492b      	ldr	r1, [pc, #172]	@ (8006438 <HAL_RCC_ClockConfig+0x1f0>)
 800638a:	4313      	orrs	r3, r2
 800638c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800638e:	4b29      	ldr	r3, [pc, #164]	@ (8006434 <HAL_RCC_ClockConfig+0x1ec>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f003 0307 	and.w	r3, r3, #7
 8006396:	683a      	ldr	r2, [r7, #0]
 8006398:	429a      	cmp	r2, r3
 800639a:	d210      	bcs.n	80063be <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800639c:	4b25      	ldr	r3, [pc, #148]	@ (8006434 <HAL_RCC_ClockConfig+0x1ec>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f023 0207 	bic.w	r2, r3, #7
 80063a4:	4923      	ldr	r1, [pc, #140]	@ (8006434 <HAL_RCC_ClockConfig+0x1ec>)
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	4313      	orrs	r3, r2
 80063aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80063ac:	4b21      	ldr	r3, [pc, #132]	@ (8006434 <HAL_RCC_ClockConfig+0x1ec>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f003 0307 	and.w	r3, r3, #7
 80063b4:	683a      	ldr	r2, [r7, #0]
 80063b6:	429a      	cmp	r2, r3
 80063b8:	d001      	beq.n	80063be <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80063ba:	2301      	movs	r3, #1
 80063bc:	e036      	b.n	800642c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f003 0304 	and.w	r3, r3, #4
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d008      	beq.n	80063dc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80063ca:	4b1b      	ldr	r3, [pc, #108]	@ (8006438 <HAL_RCC_ClockConfig+0x1f0>)
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	68db      	ldr	r3, [r3, #12]
 80063d6:	4918      	ldr	r1, [pc, #96]	@ (8006438 <HAL_RCC_ClockConfig+0x1f0>)
 80063d8:	4313      	orrs	r3, r2
 80063da:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f003 0308 	and.w	r3, r3, #8
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d009      	beq.n	80063fc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80063e8:	4b13      	ldr	r3, [pc, #76]	@ (8006438 <HAL_RCC_ClockConfig+0x1f0>)
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	691b      	ldr	r3, [r3, #16]
 80063f4:	00db      	lsls	r3, r3, #3
 80063f6:	4910      	ldr	r1, [pc, #64]	@ (8006438 <HAL_RCC_ClockConfig+0x1f0>)
 80063f8:	4313      	orrs	r3, r2
 80063fa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80063fc:	f000 f824 	bl	8006448 <HAL_RCC_GetSysClockFreq>
 8006400:	4602      	mov	r2, r0
 8006402:	4b0d      	ldr	r3, [pc, #52]	@ (8006438 <HAL_RCC_ClockConfig+0x1f0>)
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	091b      	lsrs	r3, r3, #4
 8006408:	f003 030f 	and.w	r3, r3, #15
 800640c:	490b      	ldr	r1, [pc, #44]	@ (800643c <HAL_RCC_ClockConfig+0x1f4>)
 800640e:	5ccb      	ldrb	r3, [r1, r3]
 8006410:	f003 031f 	and.w	r3, r3, #31
 8006414:	fa22 f303 	lsr.w	r3, r2, r3
 8006418:	4a09      	ldr	r2, [pc, #36]	@ (8006440 <HAL_RCC_ClockConfig+0x1f8>)
 800641a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800641c:	4b09      	ldr	r3, [pc, #36]	@ (8006444 <HAL_RCC_ClockConfig+0x1fc>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4618      	mov	r0, r3
 8006422:	f7fb ff59 	bl	80022d8 <HAL_InitTick>
 8006426:	4603      	mov	r3, r0
 8006428:	72fb      	strb	r3, [r7, #11]

  return status;
 800642a:	7afb      	ldrb	r3, [r7, #11]
}
 800642c:	4618      	mov	r0, r3
 800642e:	3710      	adds	r7, #16
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}
 8006434:	40022000 	.word	0x40022000
 8006438:	40021000 	.word	0x40021000
 800643c:	08009300 	.word	0x08009300
 8006440:	20000014 	.word	0x20000014
 8006444:	20000018 	.word	0x20000018

08006448 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006448:	b480      	push	{r7}
 800644a:	b089      	sub	sp, #36	@ 0x24
 800644c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800644e:	2300      	movs	r3, #0
 8006450:	61fb      	str	r3, [r7, #28]
 8006452:	2300      	movs	r3, #0
 8006454:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006456:	4b3e      	ldr	r3, [pc, #248]	@ (8006550 <HAL_RCC_GetSysClockFreq+0x108>)
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	f003 030c 	and.w	r3, r3, #12
 800645e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006460:	4b3b      	ldr	r3, [pc, #236]	@ (8006550 <HAL_RCC_GetSysClockFreq+0x108>)
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	f003 0303 	and.w	r3, r3, #3
 8006468:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d005      	beq.n	800647c <HAL_RCC_GetSysClockFreq+0x34>
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	2b0c      	cmp	r3, #12
 8006474:	d121      	bne.n	80064ba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2b01      	cmp	r3, #1
 800647a:	d11e      	bne.n	80064ba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800647c:	4b34      	ldr	r3, [pc, #208]	@ (8006550 <HAL_RCC_GetSysClockFreq+0x108>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f003 0308 	and.w	r3, r3, #8
 8006484:	2b00      	cmp	r3, #0
 8006486:	d107      	bne.n	8006498 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006488:	4b31      	ldr	r3, [pc, #196]	@ (8006550 <HAL_RCC_GetSysClockFreq+0x108>)
 800648a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800648e:	0a1b      	lsrs	r3, r3, #8
 8006490:	f003 030f 	and.w	r3, r3, #15
 8006494:	61fb      	str	r3, [r7, #28]
 8006496:	e005      	b.n	80064a4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006498:	4b2d      	ldr	r3, [pc, #180]	@ (8006550 <HAL_RCC_GetSysClockFreq+0x108>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	091b      	lsrs	r3, r3, #4
 800649e:	f003 030f 	and.w	r3, r3, #15
 80064a2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80064a4:	4a2b      	ldr	r2, [pc, #172]	@ (8006554 <HAL_RCC_GetSysClockFreq+0x10c>)
 80064a6:	69fb      	ldr	r3, [r7, #28]
 80064a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064ac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d10d      	bne.n	80064d0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80064b4:	69fb      	ldr	r3, [r7, #28]
 80064b6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80064b8:	e00a      	b.n	80064d0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	2b04      	cmp	r3, #4
 80064be:	d102      	bne.n	80064c6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80064c0:	4b25      	ldr	r3, [pc, #148]	@ (8006558 <HAL_RCC_GetSysClockFreq+0x110>)
 80064c2:	61bb      	str	r3, [r7, #24]
 80064c4:	e004      	b.n	80064d0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	2b08      	cmp	r3, #8
 80064ca:	d101      	bne.n	80064d0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80064cc:	4b23      	ldr	r3, [pc, #140]	@ (800655c <HAL_RCC_GetSysClockFreq+0x114>)
 80064ce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	2b0c      	cmp	r3, #12
 80064d4:	d134      	bne.n	8006540 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80064d6:	4b1e      	ldr	r3, [pc, #120]	@ (8006550 <HAL_RCC_GetSysClockFreq+0x108>)
 80064d8:	68db      	ldr	r3, [r3, #12]
 80064da:	f003 0303 	and.w	r3, r3, #3
 80064de:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	2b02      	cmp	r3, #2
 80064e4:	d003      	beq.n	80064ee <HAL_RCC_GetSysClockFreq+0xa6>
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	2b03      	cmp	r3, #3
 80064ea:	d003      	beq.n	80064f4 <HAL_RCC_GetSysClockFreq+0xac>
 80064ec:	e005      	b.n	80064fa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80064ee:	4b1a      	ldr	r3, [pc, #104]	@ (8006558 <HAL_RCC_GetSysClockFreq+0x110>)
 80064f0:	617b      	str	r3, [r7, #20]
      break;
 80064f2:	e005      	b.n	8006500 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80064f4:	4b19      	ldr	r3, [pc, #100]	@ (800655c <HAL_RCC_GetSysClockFreq+0x114>)
 80064f6:	617b      	str	r3, [r7, #20]
      break;
 80064f8:	e002      	b.n	8006500 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80064fa:	69fb      	ldr	r3, [r7, #28]
 80064fc:	617b      	str	r3, [r7, #20]
      break;
 80064fe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006500:	4b13      	ldr	r3, [pc, #76]	@ (8006550 <HAL_RCC_GetSysClockFreq+0x108>)
 8006502:	68db      	ldr	r3, [r3, #12]
 8006504:	091b      	lsrs	r3, r3, #4
 8006506:	f003 0307 	and.w	r3, r3, #7
 800650a:	3301      	adds	r3, #1
 800650c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800650e:	4b10      	ldr	r3, [pc, #64]	@ (8006550 <HAL_RCC_GetSysClockFreq+0x108>)
 8006510:	68db      	ldr	r3, [r3, #12]
 8006512:	0a1b      	lsrs	r3, r3, #8
 8006514:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006518:	697a      	ldr	r2, [r7, #20]
 800651a:	fb03 f202 	mul.w	r2, r3, r2
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	fbb2 f3f3 	udiv	r3, r2, r3
 8006524:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006526:	4b0a      	ldr	r3, [pc, #40]	@ (8006550 <HAL_RCC_GetSysClockFreq+0x108>)
 8006528:	68db      	ldr	r3, [r3, #12]
 800652a:	0e5b      	lsrs	r3, r3, #25
 800652c:	f003 0303 	and.w	r3, r3, #3
 8006530:	3301      	adds	r3, #1
 8006532:	005b      	lsls	r3, r3, #1
 8006534:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006536:	697a      	ldr	r2, [r7, #20]
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	fbb2 f3f3 	udiv	r3, r2, r3
 800653e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006540:	69bb      	ldr	r3, [r7, #24]
}
 8006542:	4618      	mov	r0, r3
 8006544:	3724      	adds	r7, #36	@ 0x24
 8006546:	46bd      	mov	sp, r7
 8006548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654c:	4770      	bx	lr
 800654e:	bf00      	nop
 8006550:	40021000 	.word	0x40021000
 8006554:	08009318 	.word	0x08009318
 8006558:	00f42400 	.word	0x00f42400
 800655c:	007a1200 	.word	0x007a1200

08006560 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006560:	b480      	push	{r7}
 8006562:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006564:	4b03      	ldr	r3, [pc, #12]	@ (8006574 <HAL_RCC_GetHCLKFreq+0x14>)
 8006566:	681b      	ldr	r3, [r3, #0]
}
 8006568:	4618      	mov	r0, r3
 800656a:	46bd      	mov	sp, r7
 800656c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006570:	4770      	bx	lr
 8006572:	bf00      	nop
 8006574:	20000014 	.word	0x20000014

08006578 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800657c:	f7ff fff0 	bl	8006560 <HAL_RCC_GetHCLKFreq>
 8006580:	4602      	mov	r2, r0
 8006582:	4b06      	ldr	r3, [pc, #24]	@ (800659c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006584:	689b      	ldr	r3, [r3, #8]
 8006586:	0a1b      	lsrs	r3, r3, #8
 8006588:	f003 0307 	and.w	r3, r3, #7
 800658c:	4904      	ldr	r1, [pc, #16]	@ (80065a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800658e:	5ccb      	ldrb	r3, [r1, r3]
 8006590:	f003 031f 	and.w	r3, r3, #31
 8006594:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006598:	4618      	mov	r0, r3
 800659a:	bd80      	pop	{r7, pc}
 800659c:	40021000 	.word	0x40021000
 80065a0:	08009310 	.word	0x08009310

080065a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80065a8:	f7ff ffda 	bl	8006560 <HAL_RCC_GetHCLKFreq>
 80065ac:	4602      	mov	r2, r0
 80065ae:	4b06      	ldr	r3, [pc, #24]	@ (80065c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	0adb      	lsrs	r3, r3, #11
 80065b4:	f003 0307 	and.w	r3, r3, #7
 80065b8:	4904      	ldr	r1, [pc, #16]	@ (80065cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80065ba:	5ccb      	ldrb	r3, [r1, r3]
 80065bc:	f003 031f 	and.w	r3, r3, #31
 80065c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	bd80      	pop	{r7, pc}
 80065c8:	40021000 	.word	0x40021000
 80065cc:	08009310 	.word	0x08009310

080065d0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b086      	sub	sp, #24
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80065d8:	2300      	movs	r3, #0
 80065da:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80065dc:	4b2a      	ldr	r3, [pc, #168]	@ (8006688 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80065de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d003      	beq.n	80065f0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80065e8:	f7ff f9ee 	bl	80059c8 <HAL_PWREx_GetVoltageRange>
 80065ec:	6178      	str	r0, [r7, #20]
 80065ee:	e014      	b.n	800661a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80065f0:	4b25      	ldr	r3, [pc, #148]	@ (8006688 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80065f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065f4:	4a24      	ldr	r2, [pc, #144]	@ (8006688 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80065f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80065fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80065fc:	4b22      	ldr	r3, [pc, #136]	@ (8006688 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80065fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006600:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006604:	60fb      	str	r3, [r7, #12]
 8006606:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006608:	f7ff f9de 	bl	80059c8 <HAL_PWREx_GetVoltageRange>
 800660c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800660e:	4b1e      	ldr	r3, [pc, #120]	@ (8006688 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006610:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006612:	4a1d      	ldr	r2, [pc, #116]	@ (8006688 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006614:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006618:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006620:	d10b      	bne.n	800663a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2b80      	cmp	r3, #128	@ 0x80
 8006626:	d919      	bls.n	800665c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2ba0      	cmp	r3, #160	@ 0xa0
 800662c:	d902      	bls.n	8006634 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800662e:	2302      	movs	r3, #2
 8006630:	613b      	str	r3, [r7, #16]
 8006632:	e013      	b.n	800665c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006634:	2301      	movs	r3, #1
 8006636:	613b      	str	r3, [r7, #16]
 8006638:	e010      	b.n	800665c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2b80      	cmp	r3, #128	@ 0x80
 800663e:	d902      	bls.n	8006646 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006640:	2303      	movs	r3, #3
 8006642:	613b      	str	r3, [r7, #16]
 8006644:	e00a      	b.n	800665c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2b80      	cmp	r3, #128	@ 0x80
 800664a:	d102      	bne.n	8006652 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800664c:	2302      	movs	r3, #2
 800664e:	613b      	str	r3, [r7, #16]
 8006650:	e004      	b.n	800665c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2b70      	cmp	r3, #112	@ 0x70
 8006656:	d101      	bne.n	800665c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006658:	2301      	movs	r3, #1
 800665a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800665c:	4b0b      	ldr	r3, [pc, #44]	@ (800668c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f023 0207 	bic.w	r2, r3, #7
 8006664:	4909      	ldr	r1, [pc, #36]	@ (800668c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	4313      	orrs	r3, r2
 800666a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800666c:	4b07      	ldr	r3, [pc, #28]	@ (800668c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f003 0307 	and.w	r3, r3, #7
 8006674:	693a      	ldr	r2, [r7, #16]
 8006676:	429a      	cmp	r2, r3
 8006678:	d001      	beq.n	800667e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800667a:	2301      	movs	r3, #1
 800667c:	e000      	b.n	8006680 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800667e:	2300      	movs	r3, #0
}
 8006680:	4618      	mov	r0, r3
 8006682:	3718      	adds	r7, #24
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}
 8006688:	40021000 	.word	0x40021000
 800668c:	40022000 	.word	0x40022000

08006690 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b086      	sub	sp, #24
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006698:	2300      	movs	r3, #0
 800669a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800669c:	2300      	movs	r3, #0
 800669e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d041      	beq.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80066b0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80066b4:	d02a      	beq.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80066b6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80066ba:	d824      	bhi.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80066bc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80066c0:	d008      	beq.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80066c2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80066c6:	d81e      	bhi.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d00a      	beq.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80066cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80066d0:	d010      	beq.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80066d2:	e018      	b.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80066d4:	4b86      	ldr	r3, [pc, #536]	@ (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80066d6:	68db      	ldr	r3, [r3, #12]
 80066d8:	4a85      	ldr	r2, [pc, #532]	@ (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80066da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066de:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80066e0:	e015      	b.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	3304      	adds	r3, #4
 80066e6:	2100      	movs	r1, #0
 80066e8:	4618      	mov	r0, r3
 80066ea:	f000 fabb 	bl	8006c64 <RCCEx_PLLSAI1_Config>
 80066ee:	4603      	mov	r3, r0
 80066f0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80066f2:	e00c      	b.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	3320      	adds	r3, #32
 80066f8:	2100      	movs	r1, #0
 80066fa:	4618      	mov	r0, r3
 80066fc:	f000 fba6 	bl	8006e4c <RCCEx_PLLSAI2_Config>
 8006700:	4603      	mov	r3, r0
 8006702:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006704:	e003      	b.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006706:	2301      	movs	r3, #1
 8006708:	74fb      	strb	r3, [r7, #19]
      break;
 800670a:	e000      	b.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800670c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800670e:	7cfb      	ldrb	r3, [r7, #19]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d10b      	bne.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006714:	4b76      	ldr	r3, [pc, #472]	@ (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006716:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800671a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006722:	4973      	ldr	r1, [pc, #460]	@ (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006724:	4313      	orrs	r3, r2
 8006726:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800672a:	e001      	b.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800672c:	7cfb      	ldrb	r3, [r7, #19]
 800672e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006738:	2b00      	cmp	r3, #0
 800673a:	d041      	beq.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006740:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006744:	d02a      	beq.n	800679c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8006746:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800674a:	d824      	bhi.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800674c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006750:	d008      	beq.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006752:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006756:	d81e      	bhi.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006758:	2b00      	cmp	r3, #0
 800675a:	d00a      	beq.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800675c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006760:	d010      	beq.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006762:	e018      	b.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006764:	4b62      	ldr	r3, [pc, #392]	@ (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006766:	68db      	ldr	r3, [r3, #12]
 8006768:	4a61      	ldr	r2, [pc, #388]	@ (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800676a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800676e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006770:	e015      	b.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	3304      	adds	r3, #4
 8006776:	2100      	movs	r1, #0
 8006778:	4618      	mov	r0, r3
 800677a:	f000 fa73 	bl	8006c64 <RCCEx_PLLSAI1_Config>
 800677e:	4603      	mov	r3, r0
 8006780:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006782:	e00c      	b.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	3320      	adds	r3, #32
 8006788:	2100      	movs	r1, #0
 800678a:	4618      	mov	r0, r3
 800678c:	f000 fb5e 	bl	8006e4c <RCCEx_PLLSAI2_Config>
 8006790:	4603      	mov	r3, r0
 8006792:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006794:	e003      	b.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	74fb      	strb	r3, [r7, #19]
      break;
 800679a:	e000      	b.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800679c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800679e:	7cfb      	ldrb	r3, [r7, #19]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d10b      	bne.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80067a4:	4b52      	ldr	r3, [pc, #328]	@ (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80067a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067aa:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80067b2:	494f      	ldr	r1, [pc, #316]	@ (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80067b4:	4313      	orrs	r3, r2
 80067b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80067ba:	e001      	b.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067bc:	7cfb      	ldrb	r3, [r7, #19]
 80067be:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	f000 80a0 	beq.w	800690e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80067ce:	2300      	movs	r3, #0
 80067d0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80067d2:	4b47      	ldr	r3, [pc, #284]	@ (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80067d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d101      	bne.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80067de:	2301      	movs	r3, #1
 80067e0:	e000      	b.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80067e2:	2300      	movs	r3, #0
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d00d      	beq.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80067e8:	4b41      	ldr	r3, [pc, #260]	@ (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80067ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067ec:	4a40      	ldr	r2, [pc, #256]	@ (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80067ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80067f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80067f4:	4b3e      	ldr	r3, [pc, #248]	@ (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80067f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80067fc:	60bb      	str	r3, [r7, #8]
 80067fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006800:	2301      	movs	r3, #1
 8006802:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006804:	4b3b      	ldr	r3, [pc, #236]	@ (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a3a      	ldr	r2, [pc, #232]	@ (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800680a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800680e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006810:	f7fb fdb2 	bl	8002378 <HAL_GetTick>
 8006814:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006816:	e009      	b.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006818:	f7fb fdae 	bl	8002378 <HAL_GetTick>
 800681c:	4602      	mov	r2, r0
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	1ad3      	subs	r3, r2, r3
 8006822:	2b02      	cmp	r3, #2
 8006824:	d902      	bls.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8006826:	2303      	movs	r3, #3
 8006828:	74fb      	strb	r3, [r7, #19]
        break;
 800682a:	e005      	b.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800682c:	4b31      	ldr	r3, [pc, #196]	@ (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006834:	2b00      	cmp	r3, #0
 8006836:	d0ef      	beq.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8006838:	7cfb      	ldrb	r3, [r7, #19]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d15c      	bne.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800683e:	4b2c      	ldr	r3, [pc, #176]	@ (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006840:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006844:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006848:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d01f      	beq.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006856:	697a      	ldr	r2, [r7, #20]
 8006858:	429a      	cmp	r2, r3
 800685a:	d019      	beq.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800685c:	4b24      	ldr	r3, [pc, #144]	@ (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800685e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006862:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006866:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006868:	4b21      	ldr	r3, [pc, #132]	@ (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800686a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800686e:	4a20      	ldr	r2, [pc, #128]	@ (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006870:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006874:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006878:	4b1d      	ldr	r3, [pc, #116]	@ (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800687a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800687e:	4a1c      	ldr	r2, [pc, #112]	@ (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006880:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006884:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006888:	4a19      	ldr	r2, [pc, #100]	@ (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	f003 0301 	and.w	r3, r3, #1
 8006896:	2b00      	cmp	r3, #0
 8006898:	d016      	beq.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800689a:	f7fb fd6d 	bl	8002378 <HAL_GetTick>
 800689e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80068a0:	e00b      	b.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068a2:	f7fb fd69 	bl	8002378 <HAL_GetTick>
 80068a6:	4602      	mov	r2, r0
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	1ad3      	subs	r3, r2, r3
 80068ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d902      	bls.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80068b4:	2303      	movs	r3, #3
 80068b6:	74fb      	strb	r3, [r7, #19]
            break;
 80068b8:	e006      	b.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80068ba:	4b0d      	ldr	r3, [pc, #52]	@ (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80068bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068c0:	f003 0302 	and.w	r3, r3, #2
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d0ec      	beq.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80068c8:	7cfb      	ldrb	r3, [r7, #19]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d10c      	bne.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80068ce:	4b08      	ldr	r3, [pc, #32]	@ (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80068d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068d4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80068de:	4904      	ldr	r1, [pc, #16]	@ (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80068e0:	4313      	orrs	r3, r2
 80068e2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80068e6:	e009      	b.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80068e8:	7cfb      	ldrb	r3, [r7, #19]
 80068ea:	74bb      	strb	r3, [r7, #18]
 80068ec:	e006      	b.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80068ee:	bf00      	nop
 80068f0:	40021000 	.word	0x40021000
 80068f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068f8:	7cfb      	ldrb	r3, [r7, #19]
 80068fa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80068fc:	7c7b      	ldrb	r3, [r7, #17]
 80068fe:	2b01      	cmp	r3, #1
 8006900:	d105      	bne.n	800690e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006902:	4b9e      	ldr	r3, [pc, #632]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006904:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006906:	4a9d      	ldr	r2, [pc, #628]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006908:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800690c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f003 0301 	and.w	r3, r3, #1
 8006916:	2b00      	cmp	r3, #0
 8006918:	d00a      	beq.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800691a:	4b98      	ldr	r3, [pc, #608]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800691c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006920:	f023 0203 	bic.w	r2, r3, #3
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006928:	4994      	ldr	r1, [pc, #592]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800692a:	4313      	orrs	r3, r2
 800692c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f003 0302 	and.w	r3, r3, #2
 8006938:	2b00      	cmp	r3, #0
 800693a:	d00a      	beq.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800693c:	4b8f      	ldr	r3, [pc, #572]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800693e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006942:	f023 020c 	bic.w	r2, r3, #12
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800694a:	498c      	ldr	r1, [pc, #560]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800694c:	4313      	orrs	r3, r2
 800694e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f003 0304 	and.w	r3, r3, #4
 800695a:	2b00      	cmp	r3, #0
 800695c:	d00a      	beq.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800695e:	4b87      	ldr	r3, [pc, #540]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006960:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006964:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800696c:	4983      	ldr	r1, [pc, #524]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800696e:	4313      	orrs	r3, r2
 8006970:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f003 0308 	and.w	r3, r3, #8
 800697c:	2b00      	cmp	r3, #0
 800697e:	d00a      	beq.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006980:	4b7e      	ldr	r3, [pc, #504]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006982:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006986:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800698e:	497b      	ldr	r1, [pc, #492]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006990:	4313      	orrs	r3, r2
 8006992:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f003 0310 	and.w	r3, r3, #16
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d00a      	beq.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80069a2:	4b76      	ldr	r3, [pc, #472]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80069a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069a8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80069b0:	4972      	ldr	r1, [pc, #456]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80069b2:	4313      	orrs	r3, r2
 80069b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f003 0320 	and.w	r3, r3, #32
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d00a      	beq.n	80069da <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80069c4:	4b6d      	ldr	r3, [pc, #436]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80069c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069ca:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069d2:	496a      	ldr	r1, [pc, #424]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80069d4:	4313      	orrs	r3, r2
 80069d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d00a      	beq.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80069e6:	4b65      	ldr	r3, [pc, #404]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80069e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069ec:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069f4:	4961      	ldr	r1, [pc, #388]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80069f6:	4313      	orrs	r3, r2
 80069f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d00a      	beq.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006a08:	4b5c      	ldr	r3, [pc, #368]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a0e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a16:	4959      	ldr	r1, [pc, #356]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d00a      	beq.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006a2a:	4b54      	ldr	r3, [pc, #336]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a30:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a38:	4950      	ldr	r1, [pc, #320]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d00a      	beq.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006a4c:	4b4b      	ldr	r3, [pc, #300]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a52:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a5a:	4948      	ldr	r1, [pc, #288]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d00a      	beq.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006a6e:	4b43      	ldr	r3, [pc, #268]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a74:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a7c:	493f      	ldr	r1, [pc, #252]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d028      	beq.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006a90:	4b3a      	ldr	r3, [pc, #232]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a96:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a9e:	4937      	ldr	r1, [pc, #220]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006aaa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006aae:	d106      	bne.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006ab0:	4b32      	ldr	r3, [pc, #200]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ab2:	68db      	ldr	r3, [r3, #12]
 8006ab4:	4a31      	ldr	r2, [pc, #196]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ab6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006aba:	60d3      	str	r3, [r2, #12]
 8006abc:	e011      	b.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ac2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006ac6:	d10c      	bne.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	3304      	adds	r3, #4
 8006acc:	2101      	movs	r1, #1
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f000 f8c8 	bl	8006c64 <RCCEx_PLLSAI1_Config>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006ad8:	7cfb      	ldrb	r3, [r7, #19]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d001      	beq.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8006ade:	7cfb      	ldrb	r3, [r7, #19]
 8006ae0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d028      	beq.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006aee:	4b23      	ldr	r3, [pc, #140]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006af4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006afc:	491f      	ldr	r1, [pc, #124]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006afe:	4313      	orrs	r3, r2
 8006b00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b08:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b0c:	d106      	bne.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b0e:	4b1b      	ldr	r3, [pc, #108]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b10:	68db      	ldr	r3, [r3, #12]
 8006b12:	4a1a      	ldr	r2, [pc, #104]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b14:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006b18:	60d3      	str	r3, [r2, #12]
 8006b1a:	e011      	b.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b20:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006b24:	d10c      	bne.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	3304      	adds	r3, #4
 8006b2a:	2101      	movs	r1, #1
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	f000 f899 	bl	8006c64 <RCCEx_PLLSAI1_Config>
 8006b32:	4603      	mov	r3, r0
 8006b34:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006b36:	7cfb      	ldrb	r3, [r7, #19]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d001      	beq.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8006b3c:	7cfb      	ldrb	r3, [r7, #19]
 8006b3e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d02b      	beq.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006b4c:	4b0b      	ldr	r3, [pc, #44]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b52:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b5a:	4908      	ldr	r1, [pc, #32]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b66:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b6a:	d109      	bne.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b6c:	4b03      	ldr	r3, [pc, #12]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b6e:	68db      	ldr	r3, [r3, #12]
 8006b70:	4a02      	ldr	r2, [pc, #8]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006b76:	60d3      	str	r3, [r2, #12]
 8006b78:	e014      	b.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8006b7a:	bf00      	nop
 8006b7c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b84:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006b88:	d10c      	bne.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	3304      	adds	r3, #4
 8006b8e:	2101      	movs	r1, #1
 8006b90:	4618      	mov	r0, r3
 8006b92:	f000 f867 	bl	8006c64 <RCCEx_PLLSAI1_Config>
 8006b96:	4603      	mov	r3, r0
 8006b98:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006b9a:	7cfb      	ldrb	r3, [r7, #19]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d001      	beq.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8006ba0:	7cfb      	ldrb	r3, [r7, #19]
 8006ba2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d02f      	beq.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006bb0:	4b2b      	ldr	r3, [pc, #172]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bb6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006bbe:	4928      	ldr	r1, [pc, #160]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006bca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006bce:	d10d      	bne.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	3304      	adds	r3, #4
 8006bd4:	2102      	movs	r1, #2
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f000 f844 	bl	8006c64 <RCCEx_PLLSAI1_Config>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006be0:	7cfb      	ldrb	r3, [r7, #19]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d014      	beq.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006be6:	7cfb      	ldrb	r3, [r7, #19]
 8006be8:	74bb      	strb	r3, [r7, #18]
 8006bea:	e011      	b.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006bf0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006bf4:	d10c      	bne.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	3320      	adds	r3, #32
 8006bfa:	2102      	movs	r1, #2
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f000 f925 	bl	8006e4c <RCCEx_PLLSAI2_Config>
 8006c02:	4603      	mov	r3, r0
 8006c04:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006c06:	7cfb      	ldrb	r3, [r7, #19]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d001      	beq.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006c0c:	7cfb      	ldrb	r3, [r7, #19]
 8006c0e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d00a      	beq.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006c1c:	4b10      	ldr	r3, [pc, #64]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c22:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006c2a:	490d      	ldr	r1, [pc, #52]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d00b      	beq.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006c3e:	4b08      	ldr	r3, [pc, #32]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c44:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c4e:	4904      	ldr	r1, [pc, #16]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006c50:	4313      	orrs	r3, r2
 8006c52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006c56:	7cbb      	ldrb	r3, [r7, #18]
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	3718      	adds	r7, #24
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}
 8006c60:	40021000 	.word	0x40021000

08006c64 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b084      	sub	sp, #16
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006c72:	4b75      	ldr	r3, [pc, #468]	@ (8006e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c74:	68db      	ldr	r3, [r3, #12]
 8006c76:	f003 0303 	and.w	r3, r3, #3
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d018      	beq.n	8006cb0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006c7e:	4b72      	ldr	r3, [pc, #456]	@ (8006e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c80:	68db      	ldr	r3, [r3, #12]
 8006c82:	f003 0203 	and.w	r2, r3, #3
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d10d      	bne.n	8006caa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
       ||
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d009      	beq.n	8006caa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006c96:	4b6c      	ldr	r3, [pc, #432]	@ (8006e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c98:	68db      	ldr	r3, [r3, #12]
 8006c9a:	091b      	lsrs	r3, r3, #4
 8006c9c:	f003 0307 	and.w	r3, r3, #7
 8006ca0:	1c5a      	adds	r2, r3, #1
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	685b      	ldr	r3, [r3, #4]
       ||
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	d047      	beq.n	8006d3a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006caa:	2301      	movs	r3, #1
 8006cac:	73fb      	strb	r3, [r7, #15]
 8006cae:	e044      	b.n	8006d3a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	2b03      	cmp	r3, #3
 8006cb6:	d018      	beq.n	8006cea <RCCEx_PLLSAI1_Config+0x86>
 8006cb8:	2b03      	cmp	r3, #3
 8006cba:	d825      	bhi.n	8006d08 <RCCEx_PLLSAI1_Config+0xa4>
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d002      	beq.n	8006cc6 <RCCEx_PLLSAI1_Config+0x62>
 8006cc0:	2b02      	cmp	r3, #2
 8006cc2:	d009      	beq.n	8006cd8 <RCCEx_PLLSAI1_Config+0x74>
 8006cc4:	e020      	b.n	8006d08 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006cc6:	4b60      	ldr	r3, [pc, #384]	@ (8006e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f003 0302 	and.w	r3, r3, #2
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d11d      	bne.n	8006d0e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006cd6:	e01a      	b.n	8006d0e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006cd8:	4b5b      	ldr	r3, [pc, #364]	@ (8006e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d116      	bne.n	8006d12 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006ce8:	e013      	b.n	8006d12 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006cea:	4b57      	ldr	r3, [pc, #348]	@ (8006e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d10f      	bne.n	8006d16 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006cf6:	4b54      	ldr	r3, [pc, #336]	@ (8006e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d109      	bne.n	8006d16 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006d02:	2301      	movs	r3, #1
 8006d04:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006d06:	e006      	b.n	8006d16 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	73fb      	strb	r3, [r7, #15]
      break;
 8006d0c:	e004      	b.n	8006d18 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006d0e:	bf00      	nop
 8006d10:	e002      	b.n	8006d18 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006d12:	bf00      	nop
 8006d14:	e000      	b.n	8006d18 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006d16:	bf00      	nop
    }

    if(status == HAL_OK)
 8006d18:	7bfb      	ldrb	r3, [r7, #15]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d10d      	bne.n	8006d3a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006d1e:	4b4a      	ldr	r3, [pc, #296]	@ (8006e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d20:	68db      	ldr	r3, [r3, #12]
 8006d22:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6819      	ldr	r1, [r3, #0]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	3b01      	subs	r3, #1
 8006d30:	011b      	lsls	r3, r3, #4
 8006d32:	430b      	orrs	r3, r1
 8006d34:	4944      	ldr	r1, [pc, #272]	@ (8006e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d36:	4313      	orrs	r3, r2
 8006d38:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006d3a:	7bfb      	ldrb	r3, [r7, #15]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d17d      	bne.n	8006e3c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006d40:	4b41      	ldr	r3, [pc, #260]	@ (8006e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a40      	ldr	r2, [pc, #256]	@ (8006e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d46:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006d4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d4c:	f7fb fb14 	bl	8002378 <HAL_GetTick>
 8006d50:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006d52:	e009      	b.n	8006d68 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006d54:	f7fb fb10 	bl	8002378 <HAL_GetTick>
 8006d58:	4602      	mov	r2, r0
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	1ad3      	subs	r3, r2, r3
 8006d5e:	2b02      	cmp	r3, #2
 8006d60:	d902      	bls.n	8006d68 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006d62:	2303      	movs	r3, #3
 8006d64:	73fb      	strb	r3, [r7, #15]
        break;
 8006d66:	e005      	b.n	8006d74 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006d68:	4b37      	ldr	r3, [pc, #220]	@ (8006e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d1ef      	bne.n	8006d54 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006d74:	7bfb      	ldrb	r3, [r7, #15]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d160      	bne.n	8006e3c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d111      	bne.n	8006da4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006d80:	4b31      	ldr	r3, [pc, #196]	@ (8006e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d82:	691b      	ldr	r3, [r3, #16]
 8006d84:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8006d88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d8c:	687a      	ldr	r2, [r7, #4]
 8006d8e:	6892      	ldr	r2, [r2, #8]
 8006d90:	0211      	lsls	r1, r2, #8
 8006d92:	687a      	ldr	r2, [r7, #4]
 8006d94:	68d2      	ldr	r2, [r2, #12]
 8006d96:	0912      	lsrs	r2, r2, #4
 8006d98:	0452      	lsls	r2, r2, #17
 8006d9a:	430a      	orrs	r2, r1
 8006d9c:	492a      	ldr	r1, [pc, #168]	@ (8006e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	610b      	str	r3, [r1, #16]
 8006da2:	e027      	b.n	8006df4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	2b01      	cmp	r3, #1
 8006da8:	d112      	bne.n	8006dd0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006daa:	4b27      	ldr	r3, [pc, #156]	@ (8006e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006dac:	691b      	ldr	r3, [r3, #16]
 8006dae:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8006db2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006db6:	687a      	ldr	r2, [r7, #4]
 8006db8:	6892      	ldr	r2, [r2, #8]
 8006dba:	0211      	lsls	r1, r2, #8
 8006dbc:	687a      	ldr	r2, [r7, #4]
 8006dbe:	6912      	ldr	r2, [r2, #16]
 8006dc0:	0852      	lsrs	r2, r2, #1
 8006dc2:	3a01      	subs	r2, #1
 8006dc4:	0552      	lsls	r2, r2, #21
 8006dc6:	430a      	orrs	r2, r1
 8006dc8:	491f      	ldr	r1, [pc, #124]	@ (8006e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	610b      	str	r3, [r1, #16]
 8006dce:	e011      	b.n	8006df4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006dd0:	4b1d      	ldr	r3, [pc, #116]	@ (8006e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006dd2:	691b      	ldr	r3, [r3, #16]
 8006dd4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8006dd8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006ddc:	687a      	ldr	r2, [r7, #4]
 8006dde:	6892      	ldr	r2, [r2, #8]
 8006de0:	0211      	lsls	r1, r2, #8
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	6952      	ldr	r2, [r2, #20]
 8006de6:	0852      	lsrs	r2, r2, #1
 8006de8:	3a01      	subs	r2, #1
 8006dea:	0652      	lsls	r2, r2, #25
 8006dec:	430a      	orrs	r2, r1
 8006dee:	4916      	ldr	r1, [pc, #88]	@ (8006e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006df0:	4313      	orrs	r3, r2
 8006df2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006df4:	4b14      	ldr	r3, [pc, #80]	@ (8006e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a13      	ldr	r2, [pc, #76]	@ (8006e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006dfa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006dfe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e00:	f7fb faba 	bl	8002378 <HAL_GetTick>
 8006e04:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006e06:	e009      	b.n	8006e1c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006e08:	f7fb fab6 	bl	8002378 <HAL_GetTick>
 8006e0c:	4602      	mov	r2, r0
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	1ad3      	subs	r3, r2, r3
 8006e12:	2b02      	cmp	r3, #2
 8006e14:	d902      	bls.n	8006e1c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8006e16:	2303      	movs	r3, #3
 8006e18:	73fb      	strb	r3, [r7, #15]
          break;
 8006e1a:	e005      	b.n	8006e28 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006e1c:	4b0a      	ldr	r3, [pc, #40]	@ (8006e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d0ef      	beq.n	8006e08 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006e28:	7bfb      	ldrb	r3, [r7, #15]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d106      	bne.n	8006e3c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006e2e:	4b06      	ldr	r3, [pc, #24]	@ (8006e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e30:	691a      	ldr	r2, [r3, #16]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	699b      	ldr	r3, [r3, #24]
 8006e36:	4904      	ldr	r1, [pc, #16]	@ (8006e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3710      	adds	r7, #16
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}
 8006e46:	bf00      	nop
 8006e48:	40021000 	.word	0x40021000

08006e4c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b084      	sub	sp, #16
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006e56:	2300      	movs	r3, #0
 8006e58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006e5a:	4b6a      	ldr	r3, [pc, #424]	@ (8007004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006e5c:	68db      	ldr	r3, [r3, #12]
 8006e5e:	f003 0303 	and.w	r3, r3, #3
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d018      	beq.n	8006e98 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006e66:	4b67      	ldr	r3, [pc, #412]	@ (8007004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006e68:	68db      	ldr	r3, [r3, #12]
 8006e6a:	f003 0203 	and.w	r2, r3, #3
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	429a      	cmp	r2, r3
 8006e74:	d10d      	bne.n	8006e92 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
       ||
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d009      	beq.n	8006e92 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006e7e:	4b61      	ldr	r3, [pc, #388]	@ (8007004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006e80:	68db      	ldr	r3, [r3, #12]
 8006e82:	091b      	lsrs	r3, r3, #4
 8006e84:	f003 0307 	and.w	r3, r3, #7
 8006e88:	1c5a      	adds	r2, r3, #1
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	685b      	ldr	r3, [r3, #4]
       ||
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	d047      	beq.n	8006f22 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006e92:	2301      	movs	r3, #1
 8006e94:	73fb      	strb	r3, [r7, #15]
 8006e96:	e044      	b.n	8006f22 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	2b03      	cmp	r3, #3
 8006e9e:	d018      	beq.n	8006ed2 <RCCEx_PLLSAI2_Config+0x86>
 8006ea0:	2b03      	cmp	r3, #3
 8006ea2:	d825      	bhi.n	8006ef0 <RCCEx_PLLSAI2_Config+0xa4>
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d002      	beq.n	8006eae <RCCEx_PLLSAI2_Config+0x62>
 8006ea8:	2b02      	cmp	r3, #2
 8006eaa:	d009      	beq.n	8006ec0 <RCCEx_PLLSAI2_Config+0x74>
 8006eac:	e020      	b.n	8006ef0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006eae:	4b55      	ldr	r3, [pc, #340]	@ (8007004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f003 0302 	and.w	r3, r3, #2
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d11d      	bne.n	8006ef6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006ebe:	e01a      	b.n	8006ef6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006ec0:	4b50      	ldr	r3, [pc, #320]	@ (8007004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d116      	bne.n	8006efa <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006ed0:	e013      	b.n	8006efa <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006ed2:	4b4c      	ldr	r3, [pc, #304]	@ (8007004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d10f      	bne.n	8006efe <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006ede:	4b49      	ldr	r3, [pc, #292]	@ (8007004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d109      	bne.n	8006efe <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8006eea:	2301      	movs	r3, #1
 8006eec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006eee:	e006      	b.n	8006efe <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	73fb      	strb	r3, [r7, #15]
      break;
 8006ef4:	e004      	b.n	8006f00 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006ef6:	bf00      	nop
 8006ef8:	e002      	b.n	8006f00 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006efa:	bf00      	nop
 8006efc:	e000      	b.n	8006f00 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006efe:	bf00      	nop
    }

    if(status == HAL_OK)
 8006f00:	7bfb      	ldrb	r3, [r7, #15]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d10d      	bne.n	8006f22 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006f06:	4b3f      	ldr	r3, [pc, #252]	@ (8007004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f08:	68db      	ldr	r3, [r3, #12]
 8006f0a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6819      	ldr	r1, [r3, #0]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	3b01      	subs	r3, #1
 8006f18:	011b      	lsls	r3, r3, #4
 8006f1a:	430b      	orrs	r3, r1
 8006f1c:	4939      	ldr	r1, [pc, #228]	@ (8007004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006f22:	7bfb      	ldrb	r3, [r7, #15]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d167      	bne.n	8006ff8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006f28:	4b36      	ldr	r3, [pc, #216]	@ (8007004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a35      	ldr	r2, [pc, #212]	@ (8007004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006f32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f34:	f7fb fa20 	bl	8002378 <HAL_GetTick>
 8006f38:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006f3a:	e009      	b.n	8006f50 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006f3c:	f7fb fa1c 	bl	8002378 <HAL_GetTick>
 8006f40:	4602      	mov	r2, r0
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	1ad3      	subs	r3, r2, r3
 8006f46:	2b02      	cmp	r3, #2
 8006f48:	d902      	bls.n	8006f50 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006f4a:	2303      	movs	r3, #3
 8006f4c:	73fb      	strb	r3, [r7, #15]
        break;
 8006f4e:	e005      	b.n	8006f5c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006f50:	4b2c      	ldr	r3, [pc, #176]	@ (8007004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d1ef      	bne.n	8006f3c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006f5c:	7bfb      	ldrb	r3, [r7, #15]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d14a      	bne.n	8006ff8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d111      	bne.n	8006f8c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006f68:	4b26      	ldr	r3, [pc, #152]	@ (8007004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f6a:	695b      	ldr	r3, [r3, #20]
 8006f6c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8006f70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f74:	687a      	ldr	r2, [r7, #4]
 8006f76:	6892      	ldr	r2, [r2, #8]
 8006f78:	0211      	lsls	r1, r2, #8
 8006f7a:	687a      	ldr	r2, [r7, #4]
 8006f7c:	68d2      	ldr	r2, [r2, #12]
 8006f7e:	0912      	lsrs	r2, r2, #4
 8006f80:	0452      	lsls	r2, r2, #17
 8006f82:	430a      	orrs	r2, r1
 8006f84:	491f      	ldr	r1, [pc, #124]	@ (8007004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f86:	4313      	orrs	r3, r2
 8006f88:	614b      	str	r3, [r1, #20]
 8006f8a:	e011      	b.n	8006fb0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006f8c:	4b1d      	ldr	r3, [pc, #116]	@ (8007004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f8e:	695b      	ldr	r3, [r3, #20]
 8006f90:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8006f94:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006f98:	687a      	ldr	r2, [r7, #4]
 8006f9a:	6892      	ldr	r2, [r2, #8]
 8006f9c:	0211      	lsls	r1, r2, #8
 8006f9e:	687a      	ldr	r2, [r7, #4]
 8006fa0:	6912      	ldr	r2, [r2, #16]
 8006fa2:	0852      	lsrs	r2, r2, #1
 8006fa4:	3a01      	subs	r2, #1
 8006fa6:	0652      	lsls	r2, r2, #25
 8006fa8:	430a      	orrs	r2, r1
 8006faa:	4916      	ldr	r1, [pc, #88]	@ (8007004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006fac:	4313      	orrs	r3, r2
 8006fae:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006fb0:	4b14      	ldr	r3, [pc, #80]	@ (8007004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a13      	ldr	r2, [pc, #76]	@ (8007004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006fb6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006fba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fbc:	f7fb f9dc 	bl	8002378 <HAL_GetTick>
 8006fc0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006fc2:	e009      	b.n	8006fd8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006fc4:	f7fb f9d8 	bl	8002378 <HAL_GetTick>
 8006fc8:	4602      	mov	r2, r0
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	1ad3      	subs	r3, r2, r3
 8006fce:	2b02      	cmp	r3, #2
 8006fd0:	d902      	bls.n	8006fd8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8006fd2:	2303      	movs	r3, #3
 8006fd4:	73fb      	strb	r3, [r7, #15]
          break;
 8006fd6:	e005      	b.n	8006fe4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006fd8:	4b0a      	ldr	r3, [pc, #40]	@ (8007004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d0ef      	beq.n	8006fc4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8006fe4:	7bfb      	ldrb	r3, [r7, #15]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d106      	bne.n	8006ff8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006fea:	4b06      	ldr	r3, [pc, #24]	@ (8007004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006fec:	695a      	ldr	r2, [r3, #20]
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	695b      	ldr	r3, [r3, #20]
 8006ff2:	4904      	ldr	r1, [pc, #16]	@ (8007004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3710      	adds	r7, #16
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}
 8007002:	bf00      	nop
 8007004:	40021000 	.word	0x40021000

08007008 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b082      	sub	sp, #8
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d101      	bne.n	800701a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007016:	2301      	movs	r3, #1
 8007018:	e049      	b.n	80070ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007020:	b2db      	uxtb	r3, r3
 8007022:	2b00      	cmp	r3, #0
 8007024:	d106      	bne.n	8007034 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2200      	movs	r2, #0
 800702a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f7fa ffaa 	bl	8001f88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2202      	movs	r2, #2
 8007038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681a      	ldr	r2, [r3, #0]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	3304      	adds	r3, #4
 8007044:	4619      	mov	r1, r3
 8007046:	4610      	mov	r0, r2
 8007048:	f000 f9d0 	bl	80073ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2201      	movs	r2, #1
 8007050:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2201      	movs	r2, #1
 8007058:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2201      	movs	r2, #1
 8007060:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2201      	movs	r2, #1
 8007068:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2201      	movs	r2, #1
 8007070:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2201      	movs	r2, #1
 8007078:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2201      	movs	r2, #1
 8007080:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2201      	movs	r2, #1
 8007088:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2201      	movs	r2, #1
 8007090:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2201      	movs	r2, #1
 8007098:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2201      	movs	r2, #1
 80070a0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2201      	movs	r2, #1
 80070a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80070ac:	2300      	movs	r3, #0
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	3708      	adds	r7, #8
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}
	...

080070b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b085      	sub	sp, #20
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80070c6:	b2db      	uxtb	r3, r3
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	d001      	beq.n	80070d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80070cc:	2301      	movs	r3, #1
 80070ce:	e04f      	b.n	8007170 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2202      	movs	r2, #2
 80070d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	68da      	ldr	r2, [r3, #12]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f042 0201 	orr.w	r2, r2, #1
 80070e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a23      	ldr	r2, [pc, #140]	@ (800717c <HAL_TIM_Base_Start_IT+0xc4>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d01d      	beq.n	800712e <HAL_TIM_Base_Start_IT+0x76>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070fa:	d018      	beq.n	800712e <HAL_TIM_Base_Start_IT+0x76>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a1f      	ldr	r2, [pc, #124]	@ (8007180 <HAL_TIM_Base_Start_IT+0xc8>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d013      	beq.n	800712e <HAL_TIM_Base_Start_IT+0x76>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a1e      	ldr	r2, [pc, #120]	@ (8007184 <HAL_TIM_Base_Start_IT+0xcc>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d00e      	beq.n	800712e <HAL_TIM_Base_Start_IT+0x76>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a1c      	ldr	r2, [pc, #112]	@ (8007188 <HAL_TIM_Base_Start_IT+0xd0>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d009      	beq.n	800712e <HAL_TIM_Base_Start_IT+0x76>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a1b      	ldr	r2, [pc, #108]	@ (800718c <HAL_TIM_Base_Start_IT+0xd4>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d004      	beq.n	800712e <HAL_TIM_Base_Start_IT+0x76>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a19      	ldr	r2, [pc, #100]	@ (8007190 <HAL_TIM_Base_Start_IT+0xd8>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d115      	bne.n	800715a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	689a      	ldr	r2, [r3, #8]
 8007134:	4b17      	ldr	r3, [pc, #92]	@ (8007194 <HAL_TIM_Base_Start_IT+0xdc>)
 8007136:	4013      	ands	r3, r2
 8007138:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	2b06      	cmp	r3, #6
 800713e:	d015      	beq.n	800716c <HAL_TIM_Base_Start_IT+0xb4>
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007146:	d011      	beq.n	800716c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	681a      	ldr	r2, [r3, #0]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f042 0201 	orr.w	r2, r2, #1
 8007156:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007158:	e008      	b.n	800716c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	681a      	ldr	r2, [r3, #0]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f042 0201 	orr.w	r2, r2, #1
 8007168:	601a      	str	r2, [r3, #0]
 800716a:	e000      	b.n	800716e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800716c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800716e:	2300      	movs	r3, #0
}
 8007170:	4618      	mov	r0, r3
 8007172:	3714      	adds	r7, #20
 8007174:	46bd      	mov	sp, r7
 8007176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717a:	4770      	bx	lr
 800717c:	40012c00 	.word	0x40012c00
 8007180:	40000400 	.word	0x40000400
 8007184:	40000800 	.word	0x40000800
 8007188:	40000c00 	.word	0x40000c00
 800718c:	40013400 	.word	0x40013400
 8007190:	40014000 	.word	0x40014000
 8007194:	00010007 	.word	0x00010007

08007198 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b084      	sub	sp, #16
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	68db      	ldr	r3, [r3, #12]
 80071a6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	691b      	ldr	r3, [r3, #16]
 80071ae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	f003 0302 	and.w	r3, r3, #2
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d020      	beq.n	80071fc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	f003 0302 	and.w	r3, r3, #2
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d01b      	beq.n	80071fc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f06f 0202 	mvn.w	r2, #2
 80071cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2201      	movs	r2, #1
 80071d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	699b      	ldr	r3, [r3, #24]
 80071da:	f003 0303 	and.w	r3, r3, #3
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d003      	beq.n	80071ea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f000 f8e4 	bl	80073b0 <HAL_TIM_IC_CaptureCallback>
 80071e8:	e005      	b.n	80071f6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f000 f8d6 	bl	800739c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f000 f8e7 	bl	80073c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2200      	movs	r2, #0
 80071fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	f003 0304 	and.w	r3, r3, #4
 8007202:	2b00      	cmp	r3, #0
 8007204:	d020      	beq.n	8007248 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	f003 0304 	and.w	r3, r3, #4
 800720c:	2b00      	cmp	r3, #0
 800720e:	d01b      	beq.n	8007248 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f06f 0204 	mvn.w	r2, #4
 8007218:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2202      	movs	r2, #2
 800721e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	699b      	ldr	r3, [r3, #24]
 8007226:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800722a:	2b00      	cmp	r3, #0
 800722c:	d003      	beq.n	8007236 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f000 f8be 	bl	80073b0 <HAL_TIM_IC_CaptureCallback>
 8007234:	e005      	b.n	8007242 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f000 f8b0 	bl	800739c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f000 f8c1 	bl	80073c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2200      	movs	r2, #0
 8007246:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	f003 0308 	and.w	r3, r3, #8
 800724e:	2b00      	cmp	r3, #0
 8007250:	d020      	beq.n	8007294 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	f003 0308 	and.w	r3, r3, #8
 8007258:	2b00      	cmp	r3, #0
 800725a:	d01b      	beq.n	8007294 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f06f 0208 	mvn.w	r2, #8
 8007264:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2204      	movs	r2, #4
 800726a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	69db      	ldr	r3, [r3, #28]
 8007272:	f003 0303 	and.w	r3, r3, #3
 8007276:	2b00      	cmp	r3, #0
 8007278:	d003      	beq.n	8007282 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f000 f898 	bl	80073b0 <HAL_TIM_IC_CaptureCallback>
 8007280:	e005      	b.n	800728e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f000 f88a 	bl	800739c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f000 f89b 	bl	80073c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2200      	movs	r2, #0
 8007292:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	f003 0310 	and.w	r3, r3, #16
 800729a:	2b00      	cmp	r3, #0
 800729c:	d020      	beq.n	80072e0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	f003 0310 	and.w	r3, r3, #16
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d01b      	beq.n	80072e0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f06f 0210 	mvn.w	r2, #16
 80072b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2208      	movs	r2, #8
 80072b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	69db      	ldr	r3, [r3, #28]
 80072be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d003      	beq.n	80072ce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f000 f872 	bl	80073b0 <HAL_TIM_IC_CaptureCallback>
 80072cc:	e005      	b.n	80072da <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f000 f864 	bl	800739c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f000 f875 	bl	80073c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2200      	movs	r2, #0
 80072de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	f003 0301 	and.w	r3, r3, #1
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d00c      	beq.n	8007304 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	f003 0301 	and.w	r3, r3, #1
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d007      	beq.n	8007304 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f06f 0201 	mvn.w	r2, #1
 80072fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f7f9 ffca 	bl	8001298 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800730a:	2b00      	cmp	r3, #0
 800730c:	d00c      	beq.n	8007328 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007314:	2b00      	cmp	r3, #0
 8007316:	d007      	beq.n	8007328 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007320:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f000 f98e 	bl	8007644 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800732e:	2b00      	cmp	r3, #0
 8007330:	d00c      	beq.n	800734c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007338:	2b00      	cmp	r3, #0
 800733a:	d007      	beq.n	800734c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007344:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f000 f986 	bl	8007658 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007352:	2b00      	cmp	r3, #0
 8007354:	d00c      	beq.n	8007370 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800735c:	2b00      	cmp	r3, #0
 800735e:	d007      	beq.n	8007370 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007368:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f000 f834 	bl	80073d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	f003 0320 	and.w	r3, r3, #32
 8007376:	2b00      	cmp	r3, #0
 8007378:	d00c      	beq.n	8007394 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	f003 0320 	and.w	r3, r3, #32
 8007380:	2b00      	cmp	r3, #0
 8007382:	d007      	beq.n	8007394 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f06f 0220 	mvn.w	r2, #32
 800738c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f000 f94e 	bl	8007630 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007394:	bf00      	nop
 8007396:	3710      	adds	r7, #16
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}

0800739c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800739c:	b480      	push	{r7}
 800739e:	b083      	sub	sp, #12
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80073a4:	bf00      	nop
 80073a6:	370c      	adds	r7, #12
 80073a8:	46bd      	mov	sp, r7
 80073aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ae:	4770      	bx	lr

080073b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b083      	sub	sp, #12
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80073b8:	bf00      	nop
 80073ba:	370c      	adds	r7, #12
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr

080073c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b083      	sub	sp, #12
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80073cc:	bf00      	nop
 80073ce:	370c      	adds	r7, #12
 80073d0:	46bd      	mov	sp, r7
 80073d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d6:	4770      	bx	lr

080073d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80073d8:	b480      	push	{r7}
 80073da:	b083      	sub	sp, #12
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80073e0:	bf00      	nop
 80073e2:	370c      	adds	r7, #12
 80073e4:	46bd      	mov	sp, r7
 80073e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ea:	4770      	bx	lr

080073ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b085      	sub	sp, #20
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
 80073f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	4a40      	ldr	r2, [pc, #256]	@ (8007500 <TIM_Base_SetConfig+0x114>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d013      	beq.n	800742c <TIM_Base_SetConfig+0x40>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800740a:	d00f      	beq.n	800742c <TIM_Base_SetConfig+0x40>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	4a3d      	ldr	r2, [pc, #244]	@ (8007504 <TIM_Base_SetConfig+0x118>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d00b      	beq.n	800742c <TIM_Base_SetConfig+0x40>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	4a3c      	ldr	r2, [pc, #240]	@ (8007508 <TIM_Base_SetConfig+0x11c>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d007      	beq.n	800742c <TIM_Base_SetConfig+0x40>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	4a3b      	ldr	r2, [pc, #236]	@ (800750c <TIM_Base_SetConfig+0x120>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d003      	beq.n	800742c <TIM_Base_SetConfig+0x40>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	4a3a      	ldr	r2, [pc, #232]	@ (8007510 <TIM_Base_SetConfig+0x124>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d108      	bne.n	800743e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007432:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	68fa      	ldr	r2, [r7, #12]
 800743a:	4313      	orrs	r3, r2
 800743c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	4a2f      	ldr	r2, [pc, #188]	@ (8007500 <TIM_Base_SetConfig+0x114>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d01f      	beq.n	8007486 <TIM_Base_SetConfig+0x9a>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800744c:	d01b      	beq.n	8007486 <TIM_Base_SetConfig+0x9a>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	4a2c      	ldr	r2, [pc, #176]	@ (8007504 <TIM_Base_SetConfig+0x118>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d017      	beq.n	8007486 <TIM_Base_SetConfig+0x9a>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	4a2b      	ldr	r2, [pc, #172]	@ (8007508 <TIM_Base_SetConfig+0x11c>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d013      	beq.n	8007486 <TIM_Base_SetConfig+0x9a>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	4a2a      	ldr	r2, [pc, #168]	@ (800750c <TIM_Base_SetConfig+0x120>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d00f      	beq.n	8007486 <TIM_Base_SetConfig+0x9a>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	4a29      	ldr	r2, [pc, #164]	@ (8007510 <TIM_Base_SetConfig+0x124>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d00b      	beq.n	8007486 <TIM_Base_SetConfig+0x9a>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	4a28      	ldr	r2, [pc, #160]	@ (8007514 <TIM_Base_SetConfig+0x128>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d007      	beq.n	8007486 <TIM_Base_SetConfig+0x9a>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	4a27      	ldr	r2, [pc, #156]	@ (8007518 <TIM_Base_SetConfig+0x12c>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d003      	beq.n	8007486 <TIM_Base_SetConfig+0x9a>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	4a26      	ldr	r2, [pc, #152]	@ (800751c <TIM_Base_SetConfig+0x130>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d108      	bne.n	8007498 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800748c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	68db      	ldr	r3, [r3, #12]
 8007492:	68fa      	ldr	r2, [r7, #12]
 8007494:	4313      	orrs	r3, r2
 8007496:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	695b      	ldr	r3, [r3, #20]
 80074a2:	4313      	orrs	r3, r2
 80074a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	68fa      	ldr	r2, [r7, #12]
 80074aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	689a      	ldr	r2, [r3, #8]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	681a      	ldr	r2, [r3, #0]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	4a10      	ldr	r2, [pc, #64]	@ (8007500 <TIM_Base_SetConfig+0x114>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d00f      	beq.n	80074e4 <TIM_Base_SetConfig+0xf8>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	4a12      	ldr	r2, [pc, #72]	@ (8007510 <TIM_Base_SetConfig+0x124>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d00b      	beq.n	80074e4 <TIM_Base_SetConfig+0xf8>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	4a11      	ldr	r2, [pc, #68]	@ (8007514 <TIM_Base_SetConfig+0x128>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d007      	beq.n	80074e4 <TIM_Base_SetConfig+0xf8>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	4a10      	ldr	r2, [pc, #64]	@ (8007518 <TIM_Base_SetConfig+0x12c>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d003      	beq.n	80074e4 <TIM_Base_SetConfig+0xf8>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	4a0f      	ldr	r2, [pc, #60]	@ (800751c <TIM_Base_SetConfig+0x130>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d103      	bne.n	80074ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	691a      	ldr	r2, [r3, #16]
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2201      	movs	r2, #1
 80074f0:	615a      	str	r2, [r3, #20]
}
 80074f2:	bf00      	nop
 80074f4:	3714      	adds	r7, #20
 80074f6:	46bd      	mov	sp, r7
 80074f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fc:	4770      	bx	lr
 80074fe:	bf00      	nop
 8007500:	40012c00 	.word	0x40012c00
 8007504:	40000400 	.word	0x40000400
 8007508:	40000800 	.word	0x40000800
 800750c:	40000c00 	.word	0x40000c00
 8007510:	40013400 	.word	0x40013400
 8007514:	40014000 	.word	0x40014000
 8007518:	40014400 	.word	0x40014400
 800751c:	40014800 	.word	0x40014800

08007520 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007520:	b480      	push	{r7}
 8007522:	b085      	sub	sp, #20
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
 8007528:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007530:	2b01      	cmp	r3, #1
 8007532:	d101      	bne.n	8007538 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007534:	2302      	movs	r3, #2
 8007536:	e068      	b.n	800760a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2201      	movs	r2, #1
 800753c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2202      	movs	r2, #2
 8007544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	685b      	ldr	r3, [r3, #4]
 800754e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	689b      	ldr	r3, [r3, #8]
 8007556:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4a2e      	ldr	r2, [pc, #184]	@ (8007618 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d004      	beq.n	800756c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4a2d      	ldr	r2, [pc, #180]	@ (800761c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d108      	bne.n	800757e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007572:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	685b      	ldr	r3, [r3, #4]
 8007578:	68fa      	ldr	r2, [r7, #12]
 800757a:	4313      	orrs	r3, r2
 800757c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007584:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	68fa      	ldr	r2, [r7, #12]
 800758c:	4313      	orrs	r3, r2
 800758e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	68fa      	ldr	r2, [r7, #12]
 8007596:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a1e      	ldr	r2, [pc, #120]	@ (8007618 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d01d      	beq.n	80075de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075aa:	d018      	beq.n	80075de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a1b      	ldr	r2, [pc, #108]	@ (8007620 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d013      	beq.n	80075de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a1a      	ldr	r2, [pc, #104]	@ (8007624 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d00e      	beq.n	80075de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4a18      	ldr	r2, [pc, #96]	@ (8007628 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d009      	beq.n	80075de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4a13      	ldr	r2, [pc, #76]	@ (800761c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d004      	beq.n	80075de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4a14      	ldr	r2, [pc, #80]	@ (800762c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d10c      	bne.n	80075f8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80075e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	689b      	ldr	r3, [r3, #8]
 80075ea:	68ba      	ldr	r2, [r7, #8]
 80075ec:	4313      	orrs	r3, r2
 80075ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	68ba      	ldr	r2, [r7, #8]
 80075f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2201      	movs	r2, #1
 80075fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2200      	movs	r2, #0
 8007604:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007608:	2300      	movs	r3, #0
}
 800760a:	4618      	mov	r0, r3
 800760c:	3714      	adds	r7, #20
 800760e:	46bd      	mov	sp, r7
 8007610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007614:	4770      	bx	lr
 8007616:	bf00      	nop
 8007618:	40012c00 	.word	0x40012c00
 800761c:	40013400 	.word	0x40013400
 8007620:	40000400 	.word	0x40000400
 8007624:	40000800 	.word	0x40000800
 8007628:	40000c00 	.word	0x40000c00
 800762c:	40014000 	.word	0x40014000

08007630 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007630:	b480      	push	{r7}
 8007632:	b083      	sub	sp, #12
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007638:	bf00      	nop
 800763a:	370c      	adds	r7, #12
 800763c:	46bd      	mov	sp, r7
 800763e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007642:	4770      	bx	lr

08007644 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007644:	b480      	push	{r7}
 8007646:	b083      	sub	sp, #12
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800764c:	bf00      	nop
 800764e:	370c      	adds	r7, #12
 8007650:	46bd      	mov	sp, r7
 8007652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007656:	4770      	bx	lr

08007658 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007658:	b480      	push	{r7}
 800765a:	b083      	sub	sp, #12
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007660:	bf00      	nop
 8007662:	370c      	adds	r7, #12
 8007664:	46bd      	mov	sp, r7
 8007666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766a:	4770      	bx	lr

0800766c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b082      	sub	sp, #8
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d101      	bne.n	800767e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800767a:	2301      	movs	r3, #1
 800767c:	e040      	b.n	8007700 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007682:	2b00      	cmp	r3, #0
 8007684:	d106      	bne.n	8007694 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2200      	movs	r2, #0
 800768a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f7fa fca0 	bl	8001fd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2224      	movs	r2, #36	@ 0x24
 8007698:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	681a      	ldr	r2, [r3, #0]
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f022 0201 	bic.w	r2, r2, #1
 80076a8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d002      	beq.n	80076b8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f000 fe74 	bl	80083a0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f000 fbb9 	bl	8007e30 <UART_SetConfig>
 80076be:	4603      	mov	r3, r0
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	d101      	bne.n	80076c8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80076c4:	2301      	movs	r3, #1
 80076c6:	e01b      	b.n	8007700 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	685a      	ldr	r2, [r3, #4]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80076d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	689a      	ldr	r2, [r3, #8]
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80076e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	681a      	ldr	r2, [r3, #0]
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f042 0201 	orr.w	r2, r2, #1
 80076f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f000 fef3 	bl	80084e4 <UART_CheckIdleState>
 80076fe:	4603      	mov	r3, r0
}
 8007700:	4618      	mov	r0, r3
 8007702:	3708      	adds	r7, #8
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}

08007708 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b08a      	sub	sp, #40	@ 0x28
 800770c:	af02      	add	r7, sp, #8
 800770e:	60f8      	str	r0, [r7, #12]
 8007710:	60b9      	str	r1, [r7, #8]
 8007712:	603b      	str	r3, [r7, #0]
 8007714:	4613      	mov	r3, r2
 8007716:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800771c:	2b20      	cmp	r3, #32
 800771e:	d177      	bne.n	8007810 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d002      	beq.n	800772c <HAL_UART_Transmit+0x24>
 8007726:	88fb      	ldrh	r3, [r7, #6]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d101      	bne.n	8007730 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800772c:	2301      	movs	r3, #1
 800772e:	e070      	b.n	8007812 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	2200      	movs	r2, #0
 8007734:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2221      	movs	r2, #33	@ 0x21
 800773c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800773e:	f7fa fe1b 	bl	8002378 <HAL_GetTick>
 8007742:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	88fa      	ldrh	r2, [r7, #6]
 8007748:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	88fa      	ldrh	r2, [r7, #6]
 8007750:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	689b      	ldr	r3, [r3, #8]
 8007758:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800775c:	d108      	bne.n	8007770 <HAL_UART_Transmit+0x68>
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	691b      	ldr	r3, [r3, #16]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d104      	bne.n	8007770 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007766:	2300      	movs	r3, #0
 8007768:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	61bb      	str	r3, [r7, #24]
 800776e:	e003      	b.n	8007778 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007774:	2300      	movs	r3, #0
 8007776:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007778:	e02f      	b.n	80077da <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	9300      	str	r3, [sp, #0]
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	2200      	movs	r2, #0
 8007782:	2180      	movs	r1, #128	@ 0x80
 8007784:	68f8      	ldr	r0, [r7, #12]
 8007786:	f000 ff55 	bl	8008634 <UART_WaitOnFlagUntilTimeout>
 800778a:	4603      	mov	r3, r0
 800778c:	2b00      	cmp	r3, #0
 800778e:	d004      	beq.n	800779a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2220      	movs	r2, #32
 8007794:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8007796:	2303      	movs	r3, #3
 8007798:	e03b      	b.n	8007812 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800779a:	69fb      	ldr	r3, [r7, #28]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d10b      	bne.n	80077b8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80077a0:	69bb      	ldr	r3, [r7, #24]
 80077a2:	881a      	ldrh	r2, [r3, #0]
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80077ac:	b292      	uxth	r2, r2
 80077ae:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80077b0:	69bb      	ldr	r3, [r7, #24]
 80077b2:	3302      	adds	r3, #2
 80077b4:	61bb      	str	r3, [r7, #24]
 80077b6:	e007      	b.n	80077c8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80077b8:	69fb      	ldr	r3, [r7, #28]
 80077ba:	781a      	ldrb	r2, [r3, #0]
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80077c2:	69fb      	ldr	r3, [r7, #28]
 80077c4:	3301      	adds	r3, #1
 80077c6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80077ce:	b29b      	uxth	r3, r3
 80077d0:	3b01      	subs	r3, #1
 80077d2:	b29a      	uxth	r2, r3
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80077e0:	b29b      	uxth	r3, r3
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d1c9      	bne.n	800777a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	9300      	str	r3, [sp, #0]
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	2200      	movs	r2, #0
 80077ee:	2140      	movs	r1, #64	@ 0x40
 80077f0:	68f8      	ldr	r0, [r7, #12]
 80077f2:	f000 ff1f 	bl	8008634 <UART_WaitOnFlagUntilTimeout>
 80077f6:	4603      	mov	r3, r0
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d004      	beq.n	8007806 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	2220      	movs	r2, #32
 8007800:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8007802:	2303      	movs	r3, #3
 8007804:	e005      	b.n	8007812 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2220      	movs	r2, #32
 800780a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800780c:	2300      	movs	r3, #0
 800780e:	e000      	b.n	8007812 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8007810:	2302      	movs	r3, #2
  }
}
 8007812:	4618      	mov	r0, r3
 8007814:	3720      	adds	r7, #32
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}
	...

0800781c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b0ba      	sub	sp, #232	@ 0xe8
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	69db      	ldr	r3, [r3, #28]
 800782a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	689b      	ldr	r3, [r3, #8]
 800783e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007842:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007846:	f640 030f 	movw	r3, #2063	@ 0x80f
 800784a:	4013      	ands	r3, r2
 800784c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007850:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007854:	2b00      	cmp	r3, #0
 8007856:	d115      	bne.n	8007884 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007858:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800785c:	f003 0320 	and.w	r3, r3, #32
 8007860:	2b00      	cmp	r3, #0
 8007862:	d00f      	beq.n	8007884 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007864:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007868:	f003 0320 	and.w	r3, r3, #32
 800786c:	2b00      	cmp	r3, #0
 800786e:	d009      	beq.n	8007884 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007874:	2b00      	cmp	r3, #0
 8007876:	f000 82ae 	beq.w	8007dd6 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	4798      	blx	r3
      }
      return;
 8007882:	e2a8      	b.n	8007dd6 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8007884:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007888:	2b00      	cmp	r3, #0
 800788a:	f000 8117 	beq.w	8007abc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800788e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007892:	f003 0301 	and.w	r3, r3, #1
 8007896:	2b00      	cmp	r3, #0
 8007898:	d106      	bne.n	80078a8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800789a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800789e:	4b85      	ldr	r3, [pc, #532]	@ (8007ab4 <HAL_UART_IRQHandler+0x298>)
 80078a0:	4013      	ands	r3, r2
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	f000 810a 	beq.w	8007abc <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80078a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078ac:	f003 0301 	and.w	r3, r3, #1
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d011      	beq.n	80078d8 <HAL_UART_IRQHandler+0xbc>
 80078b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d00b      	beq.n	80078d8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	2201      	movs	r2, #1
 80078c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80078ce:	f043 0201 	orr.w	r2, r3, #1
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80078d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078dc:	f003 0302 	and.w	r3, r3, #2
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d011      	beq.n	8007908 <HAL_UART_IRQHandler+0xec>
 80078e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80078e8:	f003 0301 	and.w	r3, r3, #1
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d00b      	beq.n	8007908 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	2202      	movs	r2, #2
 80078f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80078fe:	f043 0204 	orr.w	r2, r3, #4
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007908:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800790c:	f003 0304 	and.w	r3, r3, #4
 8007910:	2b00      	cmp	r3, #0
 8007912:	d011      	beq.n	8007938 <HAL_UART_IRQHandler+0x11c>
 8007914:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007918:	f003 0301 	and.w	r3, r3, #1
 800791c:	2b00      	cmp	r3, #0
 800791e:	d00b      	beq.n	8007938 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	2204      	movs	r2, #4
 8007926:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800792e:	f043 0202 	orr.w	r2, r3, #2
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007938:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800793c:	f003 0308 	and.w	r3, r3, #8
 8007940:	2b00      	cmp	r3, #0
 8007942:	d017      	beq.n	8007974 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007944:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007948:	f003 0320 	and.w	r3, r3, #32
 800794c:	2b00      	cmp	r3, #0
 800794e:	d105      	bne.n	800795c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007950:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007954:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007958:	2b00      	cmp	r3, #0
 800795a:	d00b      	beq.n	8007974 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	2208      	movs	r2, #8
 8007962:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800796a:	f043 0208 	orr.w	r2, r3, #8
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007974:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007978:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800797c:	2b00      	cmp	r3, #0
 800797e:	d012      	beq.n	80079a6 <HAL_UART_IRQHandler+0x18a>
 8007980:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007984:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007988:	2b00      	cmp	r3, #0
 800798a:	d00c      	beq.n	80079a6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007994:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800799c:	f043 0220 	orr.w	r2, r3, #32
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	f000 8214 	beq.w	8007dda <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80079b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079b6:	f003 0320 	and.w	r3, r3, #32
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d00d      	beq.n	80079da <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80079be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079c2:	f003 0320 	and.w	r3, r3, #32
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d007      	beq.n	80079da <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d003      	beq.n	80079da <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80079e0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	689b      	ldr	r3, [r3, #8]
 80079ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079ee:	2b40      	cmp	r3, #64	@ 0x40
 80079f0:	d005      	beq.n	80079fe <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80079f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80079f6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d04f      	beq.n	8007a9e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f000 fe7f 	bl	8008702 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	689b      	ldr	r3, [r3, #8]
 8007a0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a0e:	2b40      	cmp	r3, #64	@ 0x40
 8007a10:	d141      	bne.n	8007a96 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	3308      	adds	r3, #8
 8007a18:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007a20:	e853 3f00 	ldrex	r3, [r3]
 8007a24:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007a28:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007a2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a30:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	3308      	adds	r3, #8
 8007a3a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007a3e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007a42:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a46:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007a4a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007a4e:	e841 2300 	strex	r3, r2, [r1]
 8007a52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007a56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d1d9      	bne.n	8007a12 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d013      	beq.n	8007a8e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a6a:	4a13      	ldr	r2, [pc, #76]	@ (8007ab8 <HAL_UART_IRQHandler+0x29c>)
 8007a6c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a72:	4618      	mov	r0, r3
 8007a74:	f7fd fcae 	bl	80053d4 <HAL_DMA_Abort_IT>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d017      	beq.n	8007aae <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a84:	687a      	ldr	r2, [r7, #4]
 8007a86:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007a88:	4610      	mov	r0, r2
 8007a8a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a8c:	e00f      	b.n	8007aae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f000 f9b8 	bl	8007e04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a94:	e00b      	b.n	8007aae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f000 f9b4 	bl	8007e04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a9c:	e007      	b.n	8007aae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f000 f9b0 	bl	8007e04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8007aac:	e195      	b.n	8007dda <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007aae:	bf00      	nop
    return;
 8007ab0:	e193      	b.n	8007dda <HAL_UART_IRQHandler+0x5be>
 8007ab2:	bf00      	nop
 8007ab4:	04000120 	.word	0x04000120
 8007ab8:	080087cb 	.word	0x080087cb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	f040 814e 	bne.w	8007d62 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007ac6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007aca:	f003 0310 	and.w	r3, r3, #16
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	f000 8147 	beq.w	8007d62 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007ad4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ad8:	f003 0310 	and.w	r3, r3, #16
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	f000 8140 	beq.w	8007d62 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	2210      	movs	r2, #16
 8007ae8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	689b      	ldr	r3, [r3, #8]
 8007af0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007af4:	2b40      	cmp	r3, #64	@ 0x40
 8007af6:	f040 80b8 	bne.w	8007c6a <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007b06:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	f000 8167 	beq.w	8007dde <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007b16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	f080 815f 	bcs.w	8007dde <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007b26:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f003 0320 	and.w	r3, r3, #32
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	f040 8086 	bne.w	8007c48 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b44:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007b48:	e853 3f00 	ldrex	r3, [r3]
 8007b4c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007b50:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007b54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007b58:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	461a      	mov	r2, r3
 8007b62:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007b66:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007b6a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b6e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007b72:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007b76:	e841 2300 	strex	r3, r2, [r1]
 8007b7a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007b7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d1da      	bne.n	8007b3c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	3308      	adds	r3, #8
 8007b8c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b8e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007b90:	e853 3f00 	ldrex	r3, [r3]
 8007b94:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007b96:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007b98:	f023 0301 	bic.w	r3, r3, #1
 8007b9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	3308      	adds	r3, #8
 8007ba6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007baa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007bae:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bb0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007bb2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007bb6:	e841 2300 	strex	r3, r2, [r1]
 8007bba:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007bbc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d1e1      	bne.n	8007b86 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	3308      	adds	r3, #8
 8007bc8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007bcc:	e853 3f00 	ldrex	r3, [r3]
 8007bd0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007bd2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007bd4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007bd8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	3308      	adds	r3, #8
 8007be2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007be6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007be8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bea:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007bec:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007bee:	e841 2300 	strex	r3, r2, [r1]
 8007bf2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007bf4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d1e3      	bne.n	8007bc2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2220      	movs	r2, #32
 8007bfe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2200      	movs	r2, #0
 8007c06:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c10:	e853 3f00 	ldrex	r3, [r3]
 8007c14:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007c16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c18:	f023 0310 	bic.w	r3, r3, #16
 8007c1c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	461a      	mov	r2, r3
 8007c26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007c2a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007c2c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c2e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007c30:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007c32:	e841 2300 	strex	r3, r2, [r1]
 8007c36:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007c38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d1e4      	bne.n	8007c08 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c42:	4618      	mov	r0, r3
 8007c44:	f7fd fb88 	bl	8005358 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2202      	movs	r2, #2
 8007c4c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007c5a:	b29b      	uxth	r3, r3
 8007c5c:	1ad3      	subs	r3, r2, r3
 8007c5e:	b29b      	uxth	r3, r3
 8007c60:	4619      	mov	r1, r3
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f000 f8d8 	bl	8007e18 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007c68:	e0b9      	b.n	8007dde <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007c76:	b29b      	uxth	r3, r3
 8007c78:	1ad3      	subs	r3, r2, r3
 8007c7a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007c84:	b29b      	uxth	r3, r3
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	f000 80ab 	beq.w	8007de2 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8007c8c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	f000 80a6 	beq.w	8007de2 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c9e:	e853 3f00 	ldrex	r3, [r3]
 8007ca2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007ca4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ca6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007caa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007cb8:	647b      	str	r3, [r7, #68]	@ 0x44
 8007cba:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cbc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007cbe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007cc0:	e841 2300 	strex	r3, r2, [r1]
 8007cc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007cc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d1e4      	bne.n	8007c96 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	3308      	adds	r3, #8
 8007cd2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cd6:	e853 3f00 	ldrex	r3, [r3]
 8007cda:	623b      	str	r3, [r7, #32]
   return(result);
 8007cdc:	6a3b      	ldr	r3, [r7, #32]
 8007cde:	f023 0301 	bic.w	r3, r3, #1
 8007ce2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	3308      	adds	r3, #8
 8007cec:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007cf0:	633a      	str	r2, [r7, #48]	@ 0x30
 8007cf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cf4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007cf6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007cf8:	e841 2300 	strex	r3, r2, [r1]
 8007cfc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007cfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d1e3      	bne.n	8007ccc <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2220      	movs	r2, #32
 8007d08:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2200      	movs	r2, #0
 8007d16:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d1e:	693b      	ldr	r3, [r7, #16]
 8007d20:	e853 3f00 	ldrex	r3, [r3]
 8007d24:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	f023 0310 	bic.w	r3, r3, #16
 8007d2c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	461a      	mov	r2, r3
 8007d36:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007d3a:	61fb      	str	r3, [r7, #28]
 8007d3c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d3e:	69b9      	ldr	r1, [r7, #24]
 8007d40:	69fa      	ldr	r2, [r7, #28]
 8007d42:	e841 2300 	strex	r3, r2, [r1]
 8007d46:	617b      	str	r3, [r7, #20]
   return(result);
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d1e4      	bne.n	8007d18 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2202      	movs	r2, #2
 8007d52:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007d54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007d58:	4619      	mov	r1, r3
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f000 f85c 	bl	8007e18 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007d60:	e03f      	b.n	8007de2 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007d62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d66:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d00e      	beq.n	8007d8c <HAL_UART_IRQHandler+0x570>
 8007d6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d008      	beq.n	8007d8c <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007d82:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f000 fd60 	bl	800884a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007d8a:	e02d      	b.n	8007de8 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007d8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d00e      	beq.n	8007db6 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007d98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d008      	beq.n	8007db6 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d01c      	beq.n	8007de6 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	4798      	blx	r3
    }
    return;
 8007db4:	e017      	b.n	8007de6 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007db6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007dba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d012      	beq.n	8007de8 <HAL_UART_IRQHandler+0x5cc>
 8007dc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007dc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d00c      	beq.n	8007de8 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f000 fd11 	bl	80087f6 <UART_EndTransmit_IT>
    return;
 8007dd4:	e008      	b.n	8007de8 <HAL_UART_IRQHandler+0x5cc>
      return;
 8007dd6:	bf00      	nop
 8007dd8:	e006      	b.n	8007de8 <HAL_UART_IRQHandler+0x5cc>
    return;
 8007dda:	bf00      	nop
 8007ddc:	e004      	b.n	8007de8 <HAL_UART_IRQHandler+0x5cc>
      return;
 8007dde:	bf00      	nop
 8007de0:	e002      	b.n	8007de8 <HAL_UART_IRQHandler+0x5cc>
      return;
 8007de2:	bf00      	nop
 8007de4:	e000      	b.n	8007de8 <HAL_UART_IRQHandler+0x5cc>
    return;
 8007de6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007de8:	37e8      	adds	r7, #232	@ 0xe8
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}
 8007dee:	bf00      	nop

08007df0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b083      	sub	sp, #12
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007df8:	bf00      	nop
 8007dfa:	370c      	adds	r7, #12
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e02:	4770      	bx	lr

08007e04 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007e04:	b480      	push	{r7}
 8007e06:	b083      	sub	sp, #12
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007e0c:	bf00      	nop
 8007e0e:	370c      	adds	r7, #12
 8007e10:	46bd      	mov	sp, r7
 8007e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e16:	4770      	bx	lr

08007e18 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b083      	sub	sp, #12
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
 8007e20:	460b      	mov	r3, r1
 8007e22:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007e24:	bf00      	nop
 8007e26:	370c      	adds	r7, #12
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2e:	4770      	bx	lr

08007e30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e34:	b08a      	sub	sp, #40	@ 0x28
 8007e36:	af00      	add	r7, sp, #0
 8007e38:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	689a      	ldr	r2, [r3, #8]
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	691b      	ldr	r3, [r3, #16]
 8007e48:	431a      	orrs	r2, r3
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	695b      	ldr	r3, [r3, #20]
 8007e4e:	431a      	orrs	r2, r3
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	69db      	ldr	r3, [r3, #28]
 8007e54:	4313      	orrs	r3, r2
 8007e56:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	681a      	ldr	r2, [r3, #0]
 8007e5e:	4ba4      	ldr	r3, [pc, #656]	@ (80080f0 <UART_SetConfig+0x2c0>)
 8007e60:	4013      	ands	r3, r2
 8007e62:	68fa      	ldr	r2, [r7, #12]
 8007e64:	6812      	ldr	r2, [r2, #0]
 8007e66:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007e68:	430b      	orrs	r3, r1
 8007e6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	68da      	ldr	r2, [r3, #12]
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	430a      	orrs	r2, r1
 8007e80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	699b      	ldr	r3, [r3, #24]
 8007e86:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4a99      	ldr	r2, [pc, #612]	@ (80080f4 <UART_SetConfig+0x2c4>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d004      	beq.n	8007e9c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	6a1b      	ldr	r3, [r3, #32]
 8007e96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	689b      	ldr	r3, [r3, #8]
 8007ea2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007eac:	430a      	orrs	r2, r1
 8007eae:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	4a90      	ldr	r2, [pc, #576]	@ (80080f8 <UART_SetConfig+0x2c8>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d126      	bne.n	8007f08 <UART_SetConfig+0xd8>
 8007eba:	4b90      	ldr	r3, [pc, #576]	@ (80080fc <UART_SetConfig+0x2cc>)
 8007ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ec0:	f003 0303 	and.w	r3, r3, #3
 8007ec4:	2b03      	cmp	r3, #3
 8007ec6:	d81b      	bhi.n	8007f00 <UART_SetConfig+0xd0>
 8007ec8:	a201      	add	r2, pc, #4	@ (adr r2, 8007ed0 <UART_SetConfig+0xa0>)
 8007eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ece:	bf00      	nop
 8007ed0:	08007ee1 	.word	0x08007ee1
 8007ed4:	08007ef1 	.word	0x08007ef1
 8007ed8:	08007ee9 	.word	0x08007ee9
 8007edc:	08007ef9 	.word	0x08007ef9
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ee6:	e116      	b.n	8008116 <UART_SetConfig+0x2e6>
 8007ee8:	2302      	movs	r3, #2
 8007eea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007eee:	e112      	b.n	8008116 <UART_SetConfig+0x2e6>
 8007ef0:	2304      	movs	r3, #4
 8007ef2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ef6:	e10e      	b.n	8008116 <UART_SetConfig+0x2e6>
 8007ef8:	2308      	movs	r3, #8
 8007efa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007efe:	e10a      	b.n	8008116 <UART_SetConfig+0x2e6>
 8007f00:	2310      	movs	r3, #16
 8007f02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007f06:	e106      	b.n	8008116 <UART_SetConfig+0x2e6>
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4a7c      	ldr	r2, [pc, #496]	@ (8008100 <UART_SetConfig+0x2d0>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d138      	bne.n	8007f84 <UART_SetConfig+0x154>
 8007f12:	4b7a      	ldr	r3, [pc, #488]	@ (80080fc <UART_SetConfig+0x2cc>)
 8007f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f18:	f003 030c 	and.w	r3, r3, #12
 8007f1c:	2b0c      	cmp	r3, #12
 8007f1e:	d82d      	bhi.n	8007f7c <UART_SetConfig+0x14c>
 8007f20:	a201      	add	r2, pc, #4	@ (adr r2, 8007f28 <UART_SetConfig+0xf8>)
 8007f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f26:	bf00      	nop
 8007f28:	08007f5d 	.word	0x08007f5d
 8007f2c:	08007f7d 	.word	0x08007f7d
 8007f30:	08007f7d 	.word	0x08007f7d
 8007f34:	08007f7d 	.word	0x08007f7d
 8007f38:	08007f6d 	.word	0x08007f6d
 8007f3c:	08007f7d 	.word	0x08007f7d
 8007f40:	08007f7d 	.word	0x08007f7d
 8007f44:	08007f7d 	.word	0x08007f7d
 8007f48:	08007f65 	.word	0x08007f65
 8007f4c:	08007f7d 	.word	0x08007f7d
 8007f50:	08007f7d 	.word	0x08007f7d
 8007f54:	08007f7d 	.word	0x08007f7d
 8007f58:	08007f75 	.word	0x08007f75
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007f62:	e0d8      	b.n	8008116 <UART_SetConfig+0x2e6>
 8007f64:	2302      	movs	r3, #2
 8007f66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007f6a:	e0d4      	b.n	8008116 <UART_SetConfig+0x2e6>
 8007f6c:	2304      	movs	r3, #4
 8007f6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007f72:	e0d0      	b.n	8008116 <UART_SetConfig+0x2e6>
 8007f74:	2308      	movs	r3, #8
 8007f76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007f7a:	e0cc      	b.n	8008116 <UART_SetConfig+0x2e6>
 8007f7c:	2310      	movs	r3, #16
 8007f7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007f82:	e0c8      	b.n	8008116 <UART_SetConfig+0x2e6>
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	4a5e      	ldr	r2, [pc, #376]	@ (8008104 <UART_SetConfig+0x2d4>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d125      	bne.n	8007fda <UART_SetConfig+0x1aa>
 8007f8e:	4b5b      	ldr	r3, [pc, #364]	@ (80080fc <UART_SetConfig+0x2cc>)
 8007f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f94:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007f98:	2b30      	cmp	r3, #48	@ 0x30
 8007f9a:	d016      	beq.n	8007fca <UART_SetConfig+0x19a>
 8007f9c:	2b30      	cmp	r3, #48	@ 0x30
 8007f9e:	d818      	bhi.n	8007fd2 <UART_SetConfig+0x1a2>
 8007fa0:	2b20      	cmp	r3, #32
 8007fa2:	d00a      	beq.n	8007fba <UART_SetConfig+0x18a>
 8007fa4:	2b20      	cmp	r3, #32
 8007fa6:	d814      	bhi.n	8007fd2 <UART_SetConfig+0x1a2>
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d002      	beq.n	8007fb2 <UART_SetConfig+0x182>
 8007fac:	2b10      	cmp	r3, #16
 8007fae:	d008      	beq.n	8007fc2 <UART_SetConfig+0x192>
 8007fb0:	e00f      	b.n	8007fd2 <UART_SetConfig+0x1a2>
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007fb8:	e0ad      	b.n	8008116 <UART_SetConfig+0x2e6>
 8007fba:	2302      	movs	r3, #2
 8007fbc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007fc0:	e0a9      	b.n	8008116 <UART_SetConfig+0x2e6>
 8007fc2:	2304      	movs	r3, #4
 8007fc4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007fc8:	e0a5      	b.n	8008116 <UART_SetConfig+0x2e6>
 8007fca:	2308      	movs	r3, #8
 8007fcc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007fd0:	e0a1      	b.n	8008116 <UART_SetConfig+0x2e6>
 8007fd2:	2310      	movs	r3, #16
 8007fd4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007fd8:	e09d      	b.n	8008116 <UART_SetConfig+0x2e6>
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4a4a      	ldr	r2, [pc, #296]	@ (8008108 <UART_SetConfig+0x2d8>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d125      	bne.n	8008030 <UART_SetConfig+0x200>
 8007fe4:	4b45      	ldr	r3, [pc, #276]	@ (80080fc <UART_SetConfig+0x2cc>)
 8007fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fea:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007fee:	2bc0      	cmp	r3, #192	@ 0xc0
 8007ff0:	d016      	beq.n	8008020 <UART_SetConfig+0x1f0>
 8007ff2:	2bc0      	cmp	r3, #192	@ 0xc0
 8007ff4:	d818      	bhi.n	8008028 <UART_SetConfig+0x1f8>
 8007ff6:	2b80      	cmp	r3, #128	@ 0x80
 8007ff8:	d00a      	beq.n	8008010 <UART_SetConfig+0x1e0>
 8007ffa:	2b80      	cmp	r3, #128	@ 0x80
 8007ffc:	d814      	bhi.n	8008028 <UART_SetConfig+0x1f8>
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d002      	beq.n	8008008 <UART_SetConfig+0x1d8>
 8008002:	2b40      	cmp	r3, #64	@ 0x40
 8008004:	d008      	beq.n	8008018 <UART_SetConfig+0x1e8>
 8008006:	e00f      	b.n	8008028 <UART_SetConfig+0x1f8>
 8008008:	2300      	movs	r3, #0
 800800a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800800e:	e082      	b.n	8008116 <UART_SetConfig+0x2e6>
 8008010:	2302      	movs	r3, #2
 8008012:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008016:	e07e      	b.n	8008116 <UART_SetConfig+0x2e6>
 8008018:	2304      	movs	r3, #4
 800801a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800801e:	e07a      	b.n	8008116 <UART_SetConfig+0x2e6>
 8008020:	2308      	movs	r3, #8
 8008022:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008026:	e076      	b.n	8008116 <UART_SetConfig+0x2e6>
 8008028:	2310      	movs	r3, #16
 800802a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800802e:	e072      	b.n	8008116 <UART_SetConfig+0x2e6>
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4a35      	ldr	r2, [pc, #212]	@ (800810c <UART_SetConfig+0x2dc>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d12a      	bne.n	8008090 <UART_SetConfig+0x260>
 800803a:	4b30      	ldr	r3, [pc, #192]	@ (80080fc <UART_SetConfig+0x2cc>)
 800803c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008040:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008044:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008048:	d01a      	beq.n	8008080 <UART_SetConfig+0x250>
 800804a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800804e:	d81b      	bhi.n	8008088 <UART_SetConfig+0x258>
 8008050:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008054:	d00c      	beq.n	8008070 <UART_SetConfig+0x240>
 8008056:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800805a:	d815      	bhi.n	8008088 <UART_SetConfig+0x258>
 800805c:	2b00      	cmp	r3, #0
 800805e:	d003      	beq.n	8008068 <UART_SetConfig+0x238>
 8008060:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008064:	d008      	beq.n	8008078 <UART_SetConfig+0x248>
 8008066:	e00f      	b.n	8008088 <UART_SetConfig+0x258>
 8008068:	2300      	movs	r3, #0
 800806a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800806e:	e052      	b.n	8008116 <UART_SetConfig+0x2e6>
 8008070:	2302      	movs	r3, #2
 8008072:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008076:	e04e      	b.n	8008116 <UART_SetConfig+0x2e6>
 8008078:	2304      	movs	r3, #4
 800807a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800807e:	e04a      	b.n	8008116 <UART_SetConfig+0x2e6>
 8008080:	2308      	movs	r3, #8
 8008082:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008086:	e046      	b.n	8008116 <UART_SetConfig+0x2e6>
 8008088:	2310      	movs	r3, #16
 800808a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800808e:	e042      	b.n	8008116 <UART_SetConfig+0x2e6>
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	4a17      	ldr	r2, [pc, #92]	@ (80080f4 <UART_SetConfig+0x2c4>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d13a      	bne.n	8008110 <UART_SetConfig+0x2e0>
 800809a:	4b18      	ldr	r3, [pc, #96]	@ (80080fc <UART_SetConfig+0x2cc>)
 800809c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080a0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80080a4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80080a8:	d01a      	beq.n	80080e0 <UART_SetConfig+0x2b0>
 80080aa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80080ae:	d81b      	bhi.n	80080e8 <UART_SetConfig+0x2b8>
 80080b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80080b4:	d00c      	beq.n	80080d0 <UART_SetConfig+0x2a0>
 80080b6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80080ba:	d815      	bhi.n	80080e8 <UART_SetConfig+0x2b8>
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d003      	beq.n	80080c8 <UART_SetConfig+0x298>
 80080c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80080c4:	d008      	beq.n	80080d8 <UART_SetConfig+0x2a8>
 80080c6:	e00f      	b.n	80080e8 <UART_SetConfig+0x2b8>
 80080c8:	2300      	movs	r3, #0
 80080ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80080ce:	e022      	b.n	8008116 <UART_SetConfig+0x2e6>
 80080d0:	2302      	movs	r3, #2
 80080d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80080d6:	e01e      	b.n	8008116 <UART_SetConfig+0x2e6>
 80080d8:	2304      	movs	r3, #4
 80080da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80080de:	e01a      	b.n	8008116 <UART_SetConfig+0x2e6>
 80080e0:	2308      	movs	r3, #8
 80080e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80080e6:	e016      	b.n	8008116 <UART_SetConfig+0x2e6>
 80080e8:	2310      	movs	r3, #16
 80080ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80080ee:	e012      	b.n	8008116 <UART_SetConfig+0x2e6>
 80080f0:	efff69f3 	.word	0xefff69f3
 80080f4:	40008000 	.word	0x40008000
 80080f8:	40013800 	.word	0x40013800
 80080fc:	40021000 	.word	0x40021000
 8008100:	40004400 	.word	0x40004400
 8008104:	40004800 	.word	0x40004800
 8008108:	40004c00 	.word	0x40004c00
 800810c:	40005000 	.word	0x40005000
 8008110:	2310      	movs	r3, #16
 8008112:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4a9f      	ldr	r2, [pc, #636]	@ (8008398 <UART_SetConfig+0x568>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d17a      	bne.n	8008216 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008120:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008124:	2b08      	cmp	r3, #8
 8008126:	d824      	bhi.n	8008172 <UART_SetConfig+0x342>
 8008128:	a201      	add	r2, pc, #4	@ (adr r2, 8008130 <UART_SetConfig+0x300>)
 800812a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800812e:	bf00      	nop
 8008130:	08008155 	.word	0x08008155
 8008134:	08008173 	.word	0x08008173
 8008138:	0800815d 	.word	0x0800815d
 800813c:	08008173 	.word	0x08008173
 8008140:	08008163 	.word	0x08008163
 8008144:	08008173 	.word	0x08008173
 8008148:	08008173 	.word	0x08008173
 800814c:	08008173 	.word	0x08008173
 8008150:	0800816b 	.word	0x0800816b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008154:	f7fe fa10 	bl	8006578 <HAL_RCC_GetPCLK1Freq>
 8008158:	61f8      	str	r0, [r7, #28]
        break;
 800815a:	e010      	b.n	800817e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800815c:	4b8f      	ldr	r3, [pc, #572]	@ (800839c <UART_SetConfig+0x56c>)
 800815e:	61fb      	str	r3, [r7, #28]
        break;
 8008160:	e00d      	b.n	800817e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008162:	f7fe f971 	bl	8006448 <HAL_RCC_GetSysClockFreq>
 8008166:	61f8      	str	r0, [r7, #28]
        break;
 8008168:	e009      	b.n	800817e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800816a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800816e:	61fb      	str	r3, [r7, #28]
        break;
 8008170:	e005      	b.n	800817e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8008172:	2300      	movs	r3, #0
 8008174:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008176:	2301      	movs	r3, #1
 8008178:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800817c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800817e:	69fb      	ldr	r3, [r7, #28]
 8008180:	2b00      	cmp	r3, #0
 8008182:	f000 80fb 	beq.w	800837c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	685a      	ldr	r2, [r3, #4]
 800818a:	4613      	mov	r3, r2
 800818c:	005b      	lsls	r3, r3, #1
 800818e:	4413      	add	r3, r2
 8008190:	69fa      	ldr	r2, [r7, #28]
 8008192:	429a      	cmp	r2, r3
 8008194:	d305      	bcc.n	80081a2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	685b      	ldr	r3, [r3, #4]
 800819a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800819c:	69fa      	ldr	r2, [r7, #28]
 800819e:	429a      	cmp	r2, r3
 80081a0:	d903      	bls.n	80081aa <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80081a2:	2301      	movs	r3, #1
 80081a4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80081a8:	e0e8      	b.n	800837c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80081aa:	69fb      	ldr	r3, [r7, #28]
 80081ac:	2200      	movs	r2, #0
 80081ae:	461c      	mov	r4, r3
 80081b0:	4615      	mov	r5, r2
 80081b2:	f04f 0200 	mov.w	r2, #0
 80081b6:	f04f 0300 	mov.w	r3, #0
 80081ba:	022b      	lsls	r3, r5, #8
 80081bc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80081c0:	0222      	lsls	r2, r4, #8
 80081c2:	68f9      	ldr	r1, [r7, #12]
 80081c4:	6849      	ldr	r1, [r1, #4]
 80081c6:	0849      	lsrs	r1, r1, #1
 80081c8:	2000      	movs	r0, #0
 80081ca:	4688      	mov	r8, r1
 80081cc:	4681      	mov	r9, r0
 80081ce:	eb12 0a08 	adds.w	sl, r2, r8
 80081d2:	eb43 0b09 	adc.w	fp, r3, r9
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	685b      	ldr	r3, [r3, #4]
 80081da:	2200      	movs	r2, #0
 80081dc:	603b      	str	r3, [r7, #0]
 80081de:	607a      	str	r2, [r7, #4]
 80081e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081e4:	4650      	mov	r0, sl
 80081e6:	4659      	mov	r1, fp
 80081e8:	f7f8 fc38 	bl	8000a5c <__aeabi_uldivmod>
 80081ec:	4602      	mov	r2, r0
 80081ee:	460b      	mov	r3, r1
 80081f0:	4613      	mov	r3, r2
 80081f2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80081f4:	69bb      	ldr	r3, [r7, #24]
 80081f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80081fa:	d308      	bcc.n	800820e <UART_SetConfig+0x3de>
 80081fc:	69bb      	ldr	r3, [r7, #24]
 80081fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008202:	d204      	bcs.n	800820e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	69ba      	ldr	r2, [r7, #24]
 800820a:	60da      	str	r2, [r3, #12]
 800820c:	e0b6      	b.n	800837c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800820e:	2301      	movs	r3, #1
 8008210:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008214:	e0b2      	b.n	800837c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	69db      	ldr	r3, [r3, #28]
 800821a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800821e:	d15e      	bne.n	80082de <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8008220:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008224:	2b08      	cmp	r3, #8
 8008226:	d828      	bhi.n	800827a <UART_SetConfig+0x44a>
 8008228:	a201      	add	r2, pc, #4	@ (adr r2, 8008230 <UART_SetConfig+0x400>)
 800822a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800822e:	bf00      	nop
 8008230:	08008255 	.word	0x08008255
 8008234:	0800825d 	.word	0x0800825d
 8008238:	08008265 	.word	0x08008265
 800823c:	0800827b 	.word	0x0800827b
 8008240:	0800826b 	.word	0x0800826b
 8008244:	0800827b 	.word	0x0800827b
 8008248:	0800827b 	.word	0x0800827b
 800824c:	0800827b 	.word	0x0800827b
 8008250:	08008273 	.word	0x08008273
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008254:	f7fe f990 	bl	8006578 <HAL_RCC_GetPCLK1Freq>
 8008258:	61f8      	str	r0, [r7, #28]
        break;
 800825a:	e014      	b.n	8008286 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800825c:	f7fe f9a2 	bl	80065a4 <HAL_RCC_GetPCLK2Freq>
 8008260:	61f8      	str	r0, [r7, #28]
        break;
 8008262:	e010      	b.n	8008286 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008264:	4b4d      	ldr	r3, [pc, #308]	@ (800839c <UART_SetConfig+0x56c>)
 8008266:	61fb      	str	r3, [r7, #28]
        break;
 8008268:	e00d      	b.n	8008286 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800826a:	f7fe f8ed 	bl	8006448 <HAL_RCC_GetSysClockFreq>
 800826e:	61f8      	str	r0, [r7, #28]
        break;
 8008270:	e009      	b.n	8008286 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008272:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008276:	61fb      	str	r3, [r7, #28]
        break;
 8008278:	e005      	b.n	8008286 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800827a:	2300      	movs	r3, #0
 800827c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800827e:	2301      	movs	r3, #1
 8008280:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008284:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008286:	69fb      	ldr	r3, [r7, #28]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d077      	beq.n	800837c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800828c:	69fb      	ldr	r3, [r7, #28]
 800828e:	005a      	lsls	r2, r3, #1
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	685b      	ldr	r3, [r3, #4]
 8008294:	085b      	lsrs	r3, r3, #1
 8008296:	441a      	add	r2, r3
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	685b      	ldr	r3, [r3, #4]
 800829c:	fbb2 f3f3 	udiv	r3, r2, r3
 80082a0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80082a2:	69bb      	ldr	r3, [r7, #24]
 80082a4:	2b0f      	cmp	r3, #15
 80082a6:	d916      	bls.n	80082d6 <UART_SetConfig+0x4a6>
 80082a8:	69bb      	ldr	r3, [r7, #24]
 80082aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80082ae:	d212      	bcs.n	80082d6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80082b0:	69bb      	ldr	r3, [r7, #24]
 80082b2:	b29b      	uxth	r3, r3
 80082b4:	f023 030f 	bic.w	r3, r3, #15
 80082b8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80082ba:	69bb      	ldr	r3, [r7, #24]
 80082bc:	085b      	lsrs	r3, r3, #1
 80082be:	b29b      	uxth	r3, r3
 80082c0:	f003 0307 	and.w	r3, r3, #7
 80082c4:	b29a      	uxth	r2, r3
 80082c6:	8afb      	ldrh	r3, [r7, #22]
 80082c8:	4313      	orrs	r3, r2
 80082ca:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	8afa      	ldrh	r2, [r7, #22]
 80082d2:	60da      	str	r2, [r3, #12]
 80082d4:	e052      	b.n	800837c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80082d6:	2301      	movs	r3, #1
 80082d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80082dc:	e04e      	b.n	800837c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80082de:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80082e2:	2b08      	cmp	r3, #8
 80082e4:	d827      	bhi.n	8008336 <UART_SetConfig+0x506>
 80082e6:	a201      	add	r2, pc, #4	@ (adr r2, 80082ec <UART_SetConfig+0x4bc>)
 80082e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ec:	08008311 	.word	0x08008311
 80082f0:	08008319 	.word	0x08008319
 80082f4:	08008321 	.word	0x08008321
 80082f8:	08008337 	.word	0x08008337
 80082fc:	08008327 	.word	0x08008327
 8008300:	08008337 	.word	0x08008337
 8008304:	08008337 	.word	0x08008337
 8008308:	08008337 	.word	0x08008337
 800830c:	0800832f 	.word	0x0800832f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008310:	f7fe f932 	bl	8006578 <HAL_RCC_GetPCLK1Freq>
 8008314:	61f8      	str	r0, [r7, #28]
        break;
 8008316:	e014      	b.n	8008342 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008318:	f7fe f944 	bl	80065a4 <HAL_RCC_GetPCLK2Freq>
 800831c:	61f8      	str	r0, [r7, #28]
        break;
 800831e:	e010      	b.n	8008342 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008320:	4b1e      	ldr	r3, [pc, #120]	@ (800839c <UART_SetConfig+0x56c>)
 8008322:	61fb      	str	r3, [r7, #28]
        break;
 8008324:	e00d      	b.n	8008342 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008326:	f7fe f88f 	bl	8006448 <HAL_RCC_GetSysClockFreq>
 800832a:	61f8      	str	r0, [r7, #28]
        break;
 800832c:	e009      	b.n	8008342 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800832e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008332:	61fb      	str	r3, [r7, #28]
        break;
 8008334:	e005      	b.n	8008342 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8008336:	2300      	movs	r3, #0
 8008338:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800833a:	2301      	movs	r3, #1
 800833c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008340:	bf00      	nop
    }

    if (pclk != 0U)
 8008342:	69fb      	ldr	r3, [r7, #28]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d019      	beq.n	800837c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	685b      	ldr	r3, [r3, #4]
 800834c:	085a      	lsrs	r2, r3, #1
 800834e:	69fb      	ldr	r3, [r7, #28]
 8008350:	441a      	add	r2, r3
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	685b      	ldr	r3, [r3, #4]
 8008356:	fbb2 f3f3 	udiv	r3, r2, r3
 800835a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800835c:	69bb      	ldr	r3, [r7, #24]
 800835e:	2b0f      	cmp	r3, #15
 8008360:	d909      	bls.n	8008376 <UART_SetConfig+0x546>
 8008362:	69bb      	ldr	r3, [r7, #24]
 8008364:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008368:	d205      	bcs.n	8008376 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800836a:	69bb      	ldr	r3, [r7, #24]
 800836c:	b29a      	uxth	r2, r3
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	60da      	str	r2, [r3, #12]
 8008374:	e002      	b.n	800837c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008376:	2301      	movs	r3, #1
 8008378:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	2200      	movs	r2, #0
 8008380:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	2200      	movs	r2, #0
 8008386:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8008388:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800838c:	4618      	mov	r0, r3
 800838e:	3728      	adds	r7, #40	@ 0x28
 8008390:	46bd      	mov	sp, r7
 8008392:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008396:	bf00      	nop
 8008398:	40008000 	.word	0x40008000
 800839c:	00f42400 	.word	0x00f42400

080083a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80083a0:	b480      	push	{r7}
 80083a2:	b083      	sub	sp, #12
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083ac:	f003 0308 	and.w	r3, r3, #8
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d00a      	beq.n	80083ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	685b      	ldr	r3, [r3, #4]
 80083ba:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	430a      	orrs	r2, r1
 80083c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083ce:	f003 0301 	and.w	r3, r3, #1
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d00a      	beq.n	80083ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	685b      	ldr	r3, [r3, #4]
 80083dc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	430a      	orrs	r2, r1
 80083ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083f0:	f003 0302 	and.w	r3, r3, #2
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d00a      	beq.n	800840e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	685b      	ldr	r3, [r3, #4]
 80083fe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	430a      	orrs	r2, r1
 800840c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008412:	f003 0304 	and.w	r3, r3, #4
 8008416:	2b00      	cmp	r3, #0
 8008418:	d00a      	beq.n	8008430 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	685b      	ldr	r3, [r3, #4]
 8008420:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	430a      	orrs	r2, r1
 800842e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008434:	f003 0310 	and.w	r3, r3, #16
 8008438:	2b00      	cmp	r3, #0
 800843a:	d00a      	beq.n	8008452 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	689b      	ldr	r3, [r3, #8]
 8008442:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	430a      	orrs	r2, r1
 8008450:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008456:	f003 0320 	and.w	r3, r3, #32
 800845a:	2b00      	cmp	r3, #0
 800845c:	d00a      	beq.n	8008474 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	689b      	ldr	r3, [r3, #8]
 8008464:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	430a      	orrs	r2, r1
 8008472:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008478:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800847c:	2b00      	cmp	r3, #0
 800847e:	d01a      	beq.n	80084b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	685b      	ldr	r3, [r3, #4]
 8008486:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	430a      	orrs	r2, r1
 8008494:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800849a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800849e:	d10a      	bne.n	80084b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	685b      	ldr	r3, [r3, #4]
 80084a6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	430a      	orrs	r2, r1
 80084b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d00a      	beq.n	80084d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	685b      	ldr	r3, [r3, #4]
 80084c8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	430a      	orrs	r2, r1
 80084d6:	605a      	str	r2, [r3, #4]
  }
}
 80084d8:	bf00      	nop
 80084da:	370c      	adds	r7, #12
 80084dc:	46bd      	mov	sp, r7
 80084de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e2:	4770      	bx	lr

080084e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b098      	sub	sp, #96	@ 0x60
 80084e8:	af02      	add	r7, sp, #8
 80084ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2200      	movs	r2, #0
 80084f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80084f4:	f7f9 ff40 	bl	8002378 <HAL_GetTick>
 80084f8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f003 0308 	and.w	r3, r3, #8
 8008504:	2b08      	cmp	r3, #8
 8008506:	d12e      	bne.n	8008566 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008508:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800850c:	9300      	str	r3, [sp, #0]
 800850e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008510:	2200      	movs	r2, #0
 8008512:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f000 f88c 	bl	8008634 <UART_WaitOnFlagUntilTimeout>
 800851c:	4603      	mov	r3, r0
 800851e:	2b00      	cmp	r3, #0
 8008520:	d021      	beq.n	8008566 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008528:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800852a:	e853 3f00 	ldrex	r3, [r3]
 800852e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008530:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008532:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008536:	653b      	str	r3, [r7, #80]	@ 0x50
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	461a      	mov	r2, r3
 800853e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008540:	647b      	str	r3, [r7, #68]	@ 0x44
 8008542:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008544:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008546:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008548:	e841 2300 	strex	r3, r2, [r1]
 800854c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800854e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008550:	2b00      	cmp	r3, #0
 8008552:	d1e6      	bne.n	8008522 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2220      	movs	r2, #32
 8008558:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2200      	movs	r2, #0
 800855e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008562:	2303      	movs	r3, #3
 8008564:	e062      	b.n	800862c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f003 0304 	and.w	r3, r3, #4
 8008570:	2b04      	cmp	r3, #4
 8008572:	d149      	bne.n	8008608 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008574:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008578:	9300      	str	r3, [sp, #0]
 800857a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800857c:	2200      	movs	r2, #0
 800857e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	f000 f856 	bl	8008634 <UART_WaitOnFlagUntilTimeout>
 8008588:	4603      	mov	r3, r0
 800858a:	2b00      	cmp	r3, #0
 800858c:	d03c      	beq.n	8008608 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008596:	e853 3f00 	ldrex	r3, [r3]
 800859a:	623b      	str	r3, [r7, #32]
   return(result);
 800859c:	6a3b      	ldr	r3, [r7, #32]
 800859e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80085a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	461a      	mov	r2, r3
 80085aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80085ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80085ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085b0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80085b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80085b4:	e841 2300 	strex	r3, r2, [r1]
 80085b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80085ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d1e6      	bne.n	800858e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	3308      	adds	r3, #8
 80085c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085c8:	693b      	ldr	r3, [r7, #16]
 80085ca:	e853 3f00 	ldrex	r3, [r3]
 80085ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	f023 0301 	bic.w	r3, r3, #1
 80085d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	3308      	adds	r3, #8
 80085de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80085e0:	61fa      	str	r2, [r7, #28]
 80085e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085e4:	69b9      	ldr	r1, [r7, #24]
 80085e6:	69fa      	ldr	r2, [r7, #28]
 80085e8:	e841 2300 	strex	r3, r2, [r1]
 80085ec:	617b      	str	r3, [r7, #20]
   return(result);
 80085ee:	697b      	ldr	r3, [r7, #20]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d1e5      	bne.n	80085c0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2220      	movs	r2, #32
 80085f8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2200      	movs	r2, #0
 8008600:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008604:	2303      	movs	r3, #3
 8008606:	e011      	b.n	800862c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2220      	movs	r2, #32
 800860c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2220      	movs	r2, #32
 8008612:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2200      	movs	r2, #0
 800861a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2200      	movs	r2, #0
 8008620:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2200      	movs	r2, #0
 8008626:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800862a:	2300      	movs	r3, #0
}
 800862c:	4618      	mov	r0, r3
 800862e:	3758      	adds	r7, #88	@ 0x58
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}

08008634 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b084      	sub	sp, #16
 8008638:	af00      	add	r7, sp, #0
 800863a:	60f8      	str	r0, [r7, #12]
 800863c:	60b9      	str	r1, [r7, #8]
 800863e:	603b      	str	r3, [r7, #0]
 8008640:	4613      	mov	r3, r2
 8008642:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008644:	e049      	b.n	80086da <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008646:	69bb      	ldr	r3, [r7, #24]
 8008648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800864c:	d045      	beq.n	80086da <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800864e:	f7f9 fe93 	bl	8002378 <HAL_GetTick>
 8008652:	4602      	mov	r2, r0
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	1ad3      	subs	r3, r2, r3
 8008658:	69ba      	ldr	r2, [r7, #24]
 800865a:	429a      	cmp	r2, r3
 800865c:	d302      	bcc.n	8008664 <UART_WaitOnFlagUntilTimeout+0x30>
 800865e:	69bb      	ldr	r3, [r7, #24]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d101      	bne.n	8008668 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008664:	2303      	movs	r3, #3
 8008666:	e048      	b.n	80086fa <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f003 0304 	and.w	r3, r3, #4
 8008672:	2b00      	cmp	r3, #0
 8008674:	d031      	beq.n	80086da <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	69db      	ldr	r3, [r3, #28]
 800867c:	f003 0308 	and.w	r3, r3, #8
 8008680:	2b08      	cmp	r3, #8
 8008682:	d110      	bne.n	80086a6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	2208      	movs	r2, #8
 800868a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800868c:	68f8      	ldr	r0, [r7, #12]
 800868e:	f000 f838 	bl	8008702 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	2208      	movs	r2, #8
 8008696:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	2200      	movs	r2, #0
 800869e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80086a2:	2301      	movs	r3, #1
 80086a4:	e029      	b.n	80086fa <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	69db      	ldr	r3, [r3, #28]
 80086ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80086b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80086b4:	d111      	bne.n	80086da <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80086be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80086c0:	68f8      	ldr	r0, [r7, #12]
 80086c2:	f000 f81e 	bl	8008702 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	2220      	movs	r2, #32
 80086ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	2200      	movs	r2, #0
 80086d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80086d6:	2303      	movs	r3, #3
 80086d8:	e00f      	b.n	80086fa <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	69da      	ldr	r2, [r3, #28]
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	4013      	ands	r3, r2
 80086e4:	68ba      	ldr	r2, [r7, #8]
 80086e6:	429a      	cmp	r2, r3
 80086e8:	bf0c      	ite	eq
 80086ea:	2301      	moveq	r3, #1
 80086ec:	2300      	movne	r3, #0
 80086ee:	b2db      	uxtb	r3, r3
 80086f0:	461a      	mov	r2, r3
 80086f2:	79fb      	ldrb	r3, [r7, #7]
 80086f4:	429a      	cmp	r2, r3
 80086f6:	d0a6      	beq.n	8008646 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80086f8:	2300      	movs	r3, #0
}
 80086fa:	4618      	mov	r0, r3
 80086fc:	3710      	adds	r7, #16
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}

08008702 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008702:	b480      	push	{r7}
 8008704:	b095      	sub	sp, #84	@ 0x54
 8008706:	af00      	add	r7, sp, #0
 8008708:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008710:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008712:	e853 3f00 	ldrex	r3, [r3]
 8008716:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800871a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800871e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	461a      	mov	r2, r3
 8008726:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008728:	643b      	str	r3, [r7, #64]	@ 0x40
 800872a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800872c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800872e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008730:	e841 2300 	strex	r3, r2, [r1]
 8008734:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008738:	2b00      	cmp	r3, #0
 800873a:	d1e6      	bne.n	800870a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	3308      	adds	r3, #8
 8008742:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008744:	6a3b      	ldr	r3, [r7, #32]
 8008746:	e853 3f00 	ldrex	r3, [r3]
 800874a:	61fb      	str	r3, [r7, #28]
   return(result);
 800874c:	69fb      	ldr	r3, [r7, #28]
 800874e:	f023 0301 	bic.w	r3, r3, #1
 8008752:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	3308      	adds	r3, #8
 800875a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800875c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800875e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008760:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008762:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008764:	e841 2300 	strex	r3, r2, [r1]
 8008768:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800876a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800876c:	2b00      	cmp	r3, #0
 800876e:	d1e5      	bne.n	800873c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008774:	2b01      	cmp	r3, #1
 8008776:	d118      	bne.n	80087aa <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	e853 3f00 	ldrex	r3, [r3]
 8008784:	60bb      	str	r3, [r7, #8]
   return(result);
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	f023 0310 	bic.w	r3, r3, #16
 800878c:	647b      	str	r3, [r7, #68]	@ 0x44
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	461a      	mov	r2, r3
 8008794:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008796:	61bb      	str	r3, [r7, #24]
 8008798:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800879a:	6979      	ldr	r1, [r7, #20]
 800879c:	69ba      	ldr	r2, [r7, #24]
 800879e:	e841 2300 	strex	r3, r2, [r1]
 80087a2:	613b      	str	r3, [r7, #16]
   return(result);
 80087a4:	693b      	ldr	r3, [r7, #16]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d1e6      	bne.n	8008778 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2220      	movs	r2, #32
 80087ae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2200      	movs	r2, #0
 80087b6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2200      	movs	r2, #0
 80087bc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80087be:	bf00      	nop
 80087c0:	3754      	adds	r7, #84	@ 0x54
 80087c2:	46bd      	mov	sp, r7
 80087c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c8:	4770      	bx	lr

080087ca <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80087ca:	b580      	push	{r7, lr}
 80087cc:	b084      	sub	sp, #16
 80087ce:	af00      	add	r7, sp, #0
 80087d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	2200      	movs	r2, #0
 80087dc:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	2200      	movs	r2, #0
 80087e4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80087e8:	68f8      	ldr	r0, [r7, #12]
 80087ea:	f7ff fb0b 	bl	8007e04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80087ee:	bf00      	nop
 80087f0:	3710      	adds	r7, #16
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}

080087f6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80087f6:	b580      	push	{r7, lr}
 80087f8:	b088      	sub	sp, #32
 80087fa:	af00      	add	r7, sp, #0
 80087fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	e853 3f00 	ldrex	r3, [r3]
 800880a:	60bb      	str	r3, [r7, #8]
   return(result);
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008812:	61fb      	str	r3, [r7, #28]
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	461a      	mov	r2, r3
 800881a:	69fb      	ldr	r3, [r7, #28]
 800881c:	61bb      	str	r3, [r7, #24]
 800881e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008820:	6979      	ldr	r1, [r7, #20]
 8008822:	69ba      	ldr	r2, [r7, #24]
 8008824:	e841 2300 	strex	r3, r2, [r1]
 8008828:	613b      	str	r3, [r7, #16]
   return(result);
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d1e6      	bne.n	80087fe <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2220      	movs	r2, #32
 8008834:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2200      	movs	r2, #0
 800883a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f7ff fad7 	bl	8007df0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008842:	bf00      	nop
 8008844:	3720      	adds	r7, #32
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}

0800884a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800884a:	b480      	push	{r7}
 800884c:	b083      	sub	sp, #12
 800884e:	af00      	add	r7, sp, #0
 8008850:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008852:	bf00      	nop
 8008854:	370c      	adds	r7, #12
 8008856:	46bd      	mov	sp, r7
 8008858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885c:	4770      	bx	lr
	...

08008860 <siprintf>:
 8008860:	b40e      	push	{r1, r2, r3}
 8008862:	b500      	push	{lr}
 8008864:	b09c      	sub	sp, #112	@ 0x70
 8008866:	ab1d      	add	r3, sp, #116	@ 0x74
 8008868:	9002      	str	r0, [sp, #8]
 800886a:	9006      	str	r0, [sp, #24]
 800886c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008870:	4809      	ldr	r0, [pc, #36]	@ (8008898 <siprintf+0x38>)
 8008872:	9107      	str	r1, [sp, #28]
 8008874:	9104      	str	r1, [sp, #16]
 8008876:	4909      	ldr	r1, [pc, #36]	@ (800889c <siprintf+0x3c>)
 8008878:	f853 2b04 	ldr.w	r2, [r3], #4
 800887c:	9105      	str	r1, [sp, #20]
 800887e:	6800      	ldr	r0, [r0, #0]
 8008880:	9301      	str	r3, [sp, #4]
 8008882:	a902      	add	r1, sp, #8
 8008884:	f000 f994 	bl	8008bb0 <_svfiprintf_r>
 8008888:	9b02      	ldr	r3, [sp, #8]
 800888a:	2200      	movs	r2, #0
 800888c:	701a      	strb	r2, [r3, #0]
 800888e:	b01c      	add	sp, #112	@ 0x70
 8008890:	f85d eb04 	ldr.w	lr, [sp], #4
 8008894:	b003      	add	sp, #12
 8008896:	4770      	bx	lr
 8008898:	20000020 	.word	0x20000020
 800889c:	ffff0208 	.word	0xffff0208

080088a0 <memset>:
 80088a0:	4402      	add	r2, r0
 80088a2:	4603      	mov	r3, r0
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d100      	bne.n	80088aa <memset+0xa>
 80088a8:	4770      	bx	lr
 80088aa:	f803 1b01 	strb.w	r1, [r3], #1
 80088ae:	e7f9      	b.n	80088a4 <memset+0x4>

080088b0 <__errno>:
 80088b0:	4b01      	ldr	r3, [pc, #4]	@ (80088b8 <__errno+0x8>)
 80088b2:	6818      	ldr	r0, [r3, #0]
 80088b4:	4770      	bx	lr
 80088b6:	bf00      	nop
 80088b8:	20000020 	.word	0x20000020

080088bc <__libc_init_array>:
 80088bc:	b570      	push	{r4, r5, r6, lr}
 80088be:	4d0d      	ldr	r5, [pc, #52]	@ (80088f4 <__libc_init_array+0x38>)
 80088c0:	4c0d      	ldr	r4, [pc, #52]	@ (80088f8 <__libc_init_array+0x3c>)
 80088c2:	1b64      	subs	r4, r4, r5
 80088c4:	10a4      	asrs	r4, r4, #2
 80088c6:	2600      	movs	r6, #0
 80088c8:	42a6      	cmp	r6, r4
 80088ca:	d109      	bne.n	80088e0 <__libc_init_array+0x24>
 80088cc:	4d0b      	ldr	r5, [pc, #44]	@ (80088fc <__libc_init_array+0x40>)
 80088ce:	4c0c      	ldr	r4, [pc, #48]	@ (8008900 <__libc_init_array+0x44>)
 80088d0:	f000 fc66 	bl	80091a0 <_init>
 80088d4:	1b64      	subs	r4, r4, r5
 80088d6:	10a4      	asrs	r4, r4, #2
 80088d8:	2600      	movs	r6, #0
 80088da:	42a6      	cmp	r6, r4
 80088dc:	d105      	bne.n	80088ea <__libc_init_array+0x2e>
 80088de:	bd70      	pop	{r4, r5, r6, pc}
 80088e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80088e4:	4798      	blx	r3
 80088e6:	3601      	adds	r6, #1
 80088e8:	e7ee      	b.n	80088c8 <__libc_init_array+0xc>
 80088ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80088ee:	4798      	blx	r3
 80088f0:	3601      	adds	r6, #1
 80088f2:	e7f2      	b.n	80088da <__libc_init_array+0x1e>
 80088f4:	08009384 	.word	0x08009384
 80088f8:	08009384 	.word	0x08009384
 80088fc:	08009384 	.word	0x08009384
 8008900:	08009388 	.word	0x08009388

08008904 <__retarget_lock_acquire_recursive>:
 8008904:	4770      	bx	lr

08008906 <__retarget_lock_release_recursive>:
 8008906:	4770      	bx	lr

08008908 <_free_r>:
 8008908:	b538      	push	{r3, r4, r5, lr}
 800890a:	4605      	mov	r5, r0
 800890c:	2900      	cmp	r1, #0
 800890e:	d041      	beq.n	8008994 <_free_r+0x8c>
 8008910:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008914:	1f0c      	subs	r4, r1, #4
 8008916:	2b00      	cmp	r3, #0
 8008918:	bfb8      	it	lt
 800891a:	18e4      	addlt	r4, r4, r3
 800891c:	f000 f8e0 	bl	8008ae0 <__malloc_lock>
 8008920:	4a1d      	ldr	r2, [pc, #116]	@ (8008998 <_free_r+0x90>)
 8008922:	6813      	ldr	r3, [r2, #0]
 8008924:	b933      	cbnz	r3, 8008934 <_free_r+0x2c>
 8008926:	6063      	str	r3, [r4, #4]
 8008928:	6014      	str	r4, [r2, #0]
 800892a:	4628      	mov	r0, r5
 800892c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008930:	f000 b8dc 	b.w	8008aec <__malloc_unlock>
 8008934:	42a3      	cmp	r3, r4
 8008936:	d908      	bls.n	800894a <_free_r+0x42>
 8008938:	6820      	ldr	r0, [r4, #0]
 800893a:	1821      	adds	r1, r4, r0
 800893c:	428b      	cmp	r3, r1
 800893e:	bf01      	itttt	eq
 8008940:	6819      	ldreq	r1, [r3, #0]
 8008942:	685b      	ldreq	r3, [r3, #4]
 8008944:	1809      	addeq	r1, r1, r0
 8008946:	6021      	streq	r1, [r4, #0]
 8008948:	e7ed      	b.n	8008926 <_free_r+0x1e>
 800894a:	461a      	mov	r2, r3
 800894c:	685b      	ldr	r3, [r3, #4]
 800894e:	b10b      	cbz	r3, 8008954 <_free_r+0x4c>
 8008950:	42a3      	cmp	r3, r4
 8008952:	d9fa      	bls.n	800894a <_free_r+0x42>
 8008954:	6811      	ldr	r1, [r2, #0]
 8008956:	1850      	adds	r0, r2, r1
 8008958:	42a0      	cmp	r0, r4
 800895a:	d10b      	bne.n	8008974 <_free_r+0x6c>
 800895c:	6820      	ldr	r0, [r4, #0]
 800895e:	4401      	add	r1, r0
 8008960:	1850      	adds	r0, r2, r1
 8008962:	4283      	cmp	r3, r0
 8008964:	6011      	str	r1, [r2, #0]
 8008966:	d1e0      	bne.n	800892a <_free_r+0x22>
 8008968:	6818      	ldr	r0, [r3, #0]
 800896a:	685b      	ldr	r3, [r3, #4]
 800896c:	6053      	str	r3, [r2, #4]
 800896e:	4408      	add	r0, r1
 8008970:	6010      	str	r0, [r2, #0]
 8008972:	e7da      	b.n	800892a <_free_r+0x22>
 8008974:	d902      	bls.n	800897c <_free_r+0x74>
 8008976:	230c      	movs	r3, #12
 8008978:	602b      	str	r3, [r5, #0]
 800897a:	e7d6      	b.n	800892a <_free_r+0x22>
 800897c:	6820      	ldr	r0, [r4, #0]
 800897e:	1821      	adds	r1, r4, r0
 8008980:	428b      	cmp	r3, r1
 8008982:	bf04      	itt	eq
 8008984:	6819      	ldreq	r1, [r3, #0]
 8008986:	685b      	ldreq	r3, [r3, #4]
 8008988:	6063      	str	r3, [r4, #4]
 800898a:	bf04      	itt	eq
 800898c:	1809      	addeq	r1, r1, r0
 800898e:	6021      	streq	r1, [r4, #0]
 8008990:	6054      	str	r4, [r2, #4]
 8008992:	e7ca      	b.n	800892a <_free_r+0x22>
 8008994:	bd38      	pop	{r3, r4, r5, pc}
 8008996:	bf00      	nop
 8008998:	2000048c 	.word	0x2000048c

0800899c <sbrk_aligned>:
 800899c:	b570      	push	{r4, r5, r6, lr}
 800899e:	4e0f      	ldr	r6, [pc, #60]	@ (80089dc <sbrk_aligned+0x40>)
 80089a0:	460c      	mov	r4, r1
 80089a2:	6831      	ldr	r1, [r6, #0]
 80089a4:	4605      	mov	r5, r0
 80089a6:	b911      	cbnz	r1, 80089ae <sbrk_aligned+0x12>
 80089a8:	f000 fba6 	bl	80090f8 <_sbrk_r>
 80089ac:	6030      	str	r0, [r6, #0]
 80089ae:	4621      	mov	r1, r4
 80089b0:	4628      	mov	r0, r5
 80089b2:	f000 fba1 	bl	80090f8 <_sbrk_r>
 80089b6:	1c43      	adds	r3, r0, #1
 80089b8:	d103      	bne.n	80089c2 <sbrk_aligned+0x26>
 80089ba:	f04f 34ff 	mov.w	r4, #4294967295
 80089be:	4620      	mov	r0, r4
 80089c0:	bd70      	pop	{r4, r5, r6, pc}
 80089c2:	1cc4      	adds	r4, r0, #3
 80089c4:	f024 0403 	bic.w	r4, r4, #3
 80089c8:	42a0      	cmp	r0, r4
 80089ca:	d0f8      	beq.n	80089be <sbrk_aligned+0x22>
 80089cc:	1a21      	subs	r1, r4, r0
 80089ce:	4628      	mov	r0, r5
 80089d0:	f000 fb92 	bl	80090f8 <_sbrk_r>
 80089d4:	3001      	adds	r0, #1
 80089d6:	d1f2      	bne.n	80089be <sbrk_aligned+0x22>
 80089d8:	e7ef      	b.n	80089ba <sbrk_aligned+0x1e>
 80089da:	bf00      	nop
 80089dc:	20000488 	.word	0x20000488

080089e0 <_malloc_r>:
 80089e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089e4:	1ccd      	adds	r5, r1, #3
 80089e6:	f025 0503 	bic.w	r5, r5, #3
 80089ea:	3508      	adds	r5, #8
 80089ec:	2d0c      	cmp	r5, #12
 80089ee:	bf38      	it	cc
 80089f0:	250c      	movcc	r5, #12
 80089f2:	2d00      	cmp	r5, #0
 80089f4:	4606      	mov	r6, r0
 80089f6:	db01      	blt.n	80089fc <_malloc_r+0x1c>
 80089f8:	42a9      	cmp	r1, r5
 80089fa:	d904      	bls.n	8008a06 <_malloc_r+0x26>
 80089fc:	230c      	movs	r3, #12
 80089fe:	6033      	str	r3, [r6, #0]
 8008a00:	2000      	movs	r0, #0
 8008a02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a06:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008adc <_malloc_r+0xfc>
 8008a0a:	f000 f869 	bl	8008ae0 <__malloc_lock>
 8008a0e:	f8d8 3000 	ldr.w	r3, [r8]
 8008a12:	461c      	mov	r4, r3
 8008a14:	bb44      	cbnz	r4, 8008a68 <_malloc_r+0x88>
 8008a16:	4629      	mov	r1, r5
 8008a18:	4630      	mov	r0, r6
 8008a1a:	f7ff ffbf 	bl	800899c <sbrk_aligned>
 8008a1e:	1c43      	adds	r3, r0, #1
 8008a20:	4604      	mov	r4, r0
 8008a22:	d158      	bne.n	8008ad6 <_malloc_r+0xf6>
 8008a24:	f8d8 4000 	ldr.w	r4, [r8]
 8008a28:	4627      	mov	r7, r4
 8008a2a:	2f00      	cmp	r7, #0
 8008a2c:	d143      	bne.n	8008ab6 <_malloc_r+0xd6>
 8008a2e:	2c00      	cmp	r4, #0
 8008a30:	d04b      	beq.n	8008aca <_malloc_r+0xea>
 8008a32:	6823      	ldr	r3, [r4, #0]
 8008a34:	4639      	mov	r1, r7
 8008a36:	4630      	mov	r0, r6
 8008a38:	eb04 0903 	add.w	r9, r4, r3
 8008a3c:	f000 fb5c 	bl	80090f8 <_sbrk_r>
 8008a40:	4581      	cmp	r9, r0
 8008a42:	d142      	bne.n	8008aca <_malloc_r+0xea>
 8008a44:	6821      	ldr	r1, [r4, #0]
 8008a46:	1a6d      	subs	r5, r5, r1
 8008a48:	4629      	mov	r1, r5
 8008a4a:	4630      	mov	r0, r6
 8008a4c:	f7ff ffa6 	bl	800899c <sbrk_aligned>
 8008a50:	3001      	adds	r0, #1
 8008a52:	d03a      	beq.n	8008aca <_malloc_r+0xea>
 8008a54:	6823      	ldr	r3, [r4, #0]
 8008a56:	442b      	add	r3, r5
 8008a58:	6023      	str	r3, [r4, #0]
 8008a5a:	f8d8 3000 	ldr.w	r3, [r8]
 8008a5e:	685a      	ldr	r2, [r3, #4]
 8008a60:	bb62      	cbnz	r2, 8008abc <_malloc_r+0xdc>
 8008a62:	f8c8 7000 	str.w	r7, [r8]
 8008a66:	e00f      	b.n	8008a88 <_malloc_r+0xa8>
 8008a68:	6822      	ldr	r2, [r4, #0]
 8008a6a:	1b52      	subs	r2, r2, r5
 8008a6c:	d420      	bmi.n	8008ab0 <_malloc_r+0xd0>
 8008a6e:	2a0b      	cmp	r2, #11
 8008a70:	d917      	bls.n	8008aa2 <_malloc_r+0xc2>
 8008a72:	1961      	adds	r1, r4, r5
 8008a74:	42a3      	cmp	r3, r4
 8008a76:	6025      	str	r5, [r4, #0]
 8008a78:	bf18      	it	ne
 8008a7a:	6059      	strne	r1, [r3, #4]
 8008a7c:	6863      	ldr	r3, [r4, #4]
 8008a7e:	bf08      	it	eq
 8008a80:	f8c8 1000 	streq.w	r1, [r8]
 8008a84:	5162      	str	r2, [r4, r5]
 8008a86:	604b      	str	r3, [r1, #4]
 8008a88:	4630      	mov	r0, r6
 8008a8a:	f000 f82f 	bl	8008aec <__malloc_unlock>
 8008a8e:	f104 000b 	add.w	r0, r4, #11
 8008a92:	1d23      	adds	r3, r4, #4
 8008a94:	f020 0007 	bic.w	r0, r0, #7
 8008a98:	1ac2      	subs	r2, r0, r3
 8008a9a:	bf1c      	itt	ne
 8008a9c:	1a1b      	subne	r3, r3, r0
 8008a9e:	50a3      	strne	r3, [r4, r2]
 8008aa0:	e7af      	b.n	8008a02 <_malloc_r+0x22>
 8008aa2:	6862      	ldr	r2, [r4, #4]
 8008aa4:	42a3      	cmp	r3, r4
 8008aa6:	bf0c      	ite	eq
 8008aa8:	f8c8 2000 	streq.w	r2, [r8]
 8008aac:	605a      	strne	r2, [r3, #4]
 8008aae:	e7eb      	b.n	8008a88 <_malloc_r+0xa8>
 8008ab0:	4623      	mov	r3, r4
 8008ab2:	6864      	ldr	r4, [r4, #4]
 8008ab4:	e7ae      	b.n	8008a14 <_malloc_r+0x34>
 8008ab6:	463c      	mov	r4, r7
 8008ab8:	687f      	ldr	r7, [r7, #4]
 8008aba:	e7b6      	b.n	8008a2a <_malloc_r+0x4a>
 8008abc:	461a      	mov	r2, r3
 8008abe:	685b      	ldr	r3, [r3, #4]
 8008ac0:	42a3      	cmp	r3, r4
 8008ac2:	d1fb      	bne.n	8008abc <_malloc_r+0xdc>
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	6053      	str	r3, [r2, #4]
 8008ac8:	e7de      	b.n	8008a88 <_malloc_r+0xa8>
 8008aca:	230c      	movs	r3, #12
 8008acc:	6033      	str	r3, [r6, #0]
 8008ace:	4630      	mov	r0, r6
 8008ad0:	f000 f80c 	bl	8008aec <__malloc_unlock>
 8008ad4:	e794      	b.n	8008a00 <_malloc_r+0x20>
 8008ad6:	6005      	str	r5, [r0, #0]
 8008ad8:	e7d6      	b.n	8008a88 <_malloc_r+0xa8>
 8008ada:	bf00      	nop
 8008adc:	2000048c 	.word	0x2000048c

08008ae0 <__malloc_lock>:
 8008ae0:	4801      	ldr	r0, [pc, #4]	@ (8008ae8 <__malloc_lock+0x8>)
 8008ae2:	f7ff bf0f 	b.w	8008904 <__retarget_lock_acquire_recursive>
 8008ae6:	bf00      	nop
 8008ae8:	20000484 	.word	0x20000484

08008aec <__malloc_unlock>:
 8008aec:	4801      	ldr	r0, [pc, #4]	@ (8008af4 <__malloc_unlock+0x8>)
 8008aee:	f7ff bf0a 	b.w	8008906 <__retarget_lock_release_recursive>
 8008af2:	bf00      	nop
 8008af4:	20000484 	.word	0x20000484

08008af8 <__ssputs_r>:
 8008af8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008afc:	688e      	ldr	r6, [r1, #8]
 8008afe:	461f      	mov	r7, r3
 8008b00:	42be      	cmp	r6, r7
 8008b02:	680b      	ldr	r3, [r1, #0]
 8008b04:	4682      	mov	sl, r0
 8008b06:	460c      	mov	r4, r1
 8008b08:	4690      	mov	r8, r2
 8008b0a:	d82d      	bhi.n	8008b68 <__ssputs_r+0x70>
 8008b0c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008b10:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008b14:	d026      	beq.n	8008b64 <__ssputs_r+0x6c>
 8008b16:	6965      	ldr	r5, [r4, #20]
 8008b18:	6909      	ldr	r1, [r1, #16]
 8008b1a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008b1e:	eba3 0901 	sub.w	r9, r3, r1
 8008b22:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008b26:	1c7b      	adds	r3, r7, #1
 8008b28:	444b      	add	r3, r9
 8008b2a:	106d      	asrs	r5, r5, #1
 8008b2c:	429d      	cmp	r5, r3
 8008b2e:	bf38      	it	cc
 8008b30:	461d      	movcc	r5, r3
 8008b32:	0553      	lsls	r3, r2, #21
 8008b34:	d527      	bpl.n	8008b86 <__ssputs_r+0x8e>
 8008b36:	4629      	mov	r1, r5
 8008b38:	f7ff ff52 	bl	80089e0 <_malloc_r>
 8008b3c:	4606      	mov	r6, r0
 8008b3e:	b360      	cbz	r0, 8008b9a <__ssputs_r+0xa2>
 8008b40:	6921      	ldr	r1, [r4, #16]
 8008b42:	464a      	mov	r2, r9
 8008b44:	f000 fae8 	bl	8009118 <memcpy>
 8008b48:	89a3      	ldrh	r3, [r4, #12]
 8008b4a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008b4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b52:	81a3      	strh	r3, [r4, #12]
 8008b54:	6126      	str	r6, [r4, #16]
 8008b56:	6165      	str	r5, [r4, #20]
 8008b58:	444e      	add	r6, r9
 8008b5a:	eba5 0509 	sub.w	r5, r5, r9
 8008b5e:	6026      	str	r6, [r4, #0]
 8008b60:	60a5      	str	r5, [r4, #8]
 8008b62:	463e      	mov	r6, r7
 8008b64:	42be      	cmp	r6, r7
 8008b66:	d900      	bls.n	8008b6a <__ssputs_r+0x72>
 8008b68:	463e      	mov	r6, r7
 8008b6a:	6820      	ldr	r0, [r4, #0]
 8008b6c:	4632      	mov	r2, r6
 8008b6e:	4641      	mov	r1, r8
 8008b70:	f000 faa8 	bl	80090c4 <memmove>
 8008b74:	68a3      	ldr	r3, [r4, #8]
 8008b76:	1b9b      	subs	r3, r3, r6
 8008b78:	60a3      	str	r3, [r4, #8]
 8008b7a:	6823      	ldr	r3, [r4, #0]
 8008b7c:	4433      	add	r3, r6
 8008b7e:	6023      	str	r3, [r4, #0]
 8008b80:	2000      	movs	r0, #0
 8008b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b86:	462a      	mov	r2, r5
 8008b88:	f000 fad4 	bl	8009134 <_realloc_r>
 8008b8c:	4606      	mov	r6, r0
 8008b8e:	2800      	cmp	r0, #0
 8008b90:	d1e0      	bne.n	8008b54 <__ssputs_r+0x5c>
 8008b92:	6921      	ldr	r1, [r4, #16]
 8008b94:	4650      	mov	r0, sl
 8008b96:	f7ff feb7 	bl	8008908 <_free_r>
 8008b9a:	230c      	movs	r3, #12
 8008b9c:	f8ca 3000 	str.w	r3, [sl]
 8008ba0:	89a3      	ldrh	r3, [r4, #12]
 8008ba2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ba6:	81a3      	strh	r3, [r4, #12]
 8008ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8008bac:	e7e9      	b.n	8008b82 <__ssputs_r+0x8a>
	...

08008bb0 <_svfiprintf_r>:
 8008bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bb4:	4698      	mov	r8, r3
 8008bb6:	898b      	ldrh	r3, [r1, #12]
 8008bb8:	061b      	lsls	r3, r3, #24
 8008bba:	b09d      	sub	sp, #116	@ 0x74
 8008bbc:	4607      	mov	r7, r0
 8008bbe:	460d      	mov	r5, r1
 8008bc0:	4614      	mov	r4, r2
 8008bc2:	d510      	bpl.n	8008be6 <_svfiprintf_r+0x36>
 8008bc4:	690b      	ldr	r3, [r1, #16]
 8008bc6:	b973      	cbnz	r3, 8008be6 <_svfiprintf_r+0x36>
 8008bc8:	2140      	movs	r1, #64	@ 0x40
 8008bca:	f7ff ff09 	bl	80089e0 <_malloc_r>
 8008bce:	6028      	str	r0, [r5, #0]
 8008bd0:	6128      	str	r0, [r5, #16]
 8008bd2:	b930      	cbnz	r0, 8008be2 <_svfiprintf_r+0x32>
 8008bd4:	230c      	movs	r3, #12
 8008bd6:	603b      	str	r3, [r7, #0]
 8008bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8008bdc:	b01d      	add	sp, #116	@ 0x74
 8008bde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008be2:	2340      	movs	r3, #64	@ 0x40
 8008be4:	616b      	str	r3, [r5, #20]
 8008be6:	2300      	movs	r3, #0
 8008be8:	9309      	str	r3, [sp, #36]	@ 0x24
 8008bea:	2320      	movs	r3, #32
 8008bec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008bf0:	f8cd 800c 	str.w	r8, [sp, #12]
 8008bf4:	2330      	movs	r3, #48	@ 0x30
 8008bf6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008d94 <_svfiprintf_r+0x1e4>
 8008bfa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008bfe:	f04f 0901 	mov.w	r9, #1
 8008c02:	4623      	mov	r3, r4
 8008c04:	469a      	mov	sl, r3
 8008c06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c0a:	b10a      	cbz	r2, 8008c10 <_svfiprintf_r+0x60>
 8008c0c:	2a25      	cmp	r2, #37	@ 0x25
 8008c0e:	d1f9      	bne.n	8008c04 <_svfiprintf_r+0x54>
 8008c10:	ebba 0b04 	subs.w	fp, sl, r4
 8008c14:	d00b      	beq.n	8008c2e <_svfiprintf_r+0x7e>
 8008c16:	465b      	mov	r3, fp
 8008c18:	4622      	mov	r2, r4
 8008c1a:	4629      	mov	r1, r5
 8008c1c:	4638      	mov	r0, r7
 8008c1e:	f7ff ff6b 	bl	8008af8 <__ssputs_r>
 8008c22:	3001      	adds	r0, #1
 8008c24:	f000 80a7 	beq.w	8008d76 <_svfiprintf_r+0x1c6>
 8008c28:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008c2a:	445a      	add	r2, fp
 8008c2c:	9209      	str	r2, [sp, #36]	@ 0x24
 8008c2e:	f89a 3000 	ldrb.w	r3, [sl]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	f000 809f 	beq.w	8008d76 <_svfiprintf_r+0x1c6>
 8008c38:	2300      	movs	r3, #0
 8008c3a:	f04f 32ff 	mov.w	r2, #4294967295
 8008c3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c42:	f10a 0a01 	add.w	sl, sl, #1
 8008c46:	9304      	str	r3, [sp, #16]
 8008c48:	9307      	str	r3, [sp, #28]
 8008c4a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008c4e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008c50:	4654      	mov	r4, sl
 8008c52:	2205      	movs	r2, #5
 8008c54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c58:	484e      	ldr	r0, [pc, #312]	@ (8008d94 <_svfiprintf_r+0x1e4>)
 8008c5a:	f7f7 fac1 	bl	80001e0 <memchr>
 8008c5e:	9a04      	ldr	r2, [sp, #16]
 8008c60:	b9d8      	cbnz	r0, 8008c9a <_svfiprintf_r+0xea>
 8008c62:	06d0      	lsls	r0, r2, #27
 8008c64:	bf44      	itt	mi
 8008c66:	2320      	movmi	r3, #32
 8008c68:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008c6c:	0711      	lsls	r1, r2, #28
 8008c6e:	bf44      	itt	mi
 8008c70:	232b      	movmi	r3, #43	@ 0x2b
 8008c72:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008c76:	f89a 3000 	ldrb.w	r3, [sl]
 8008c7a:	2b2a      	cmp	r3, #42	@ 0x2a
 8008c7c:	d015      	beq.n	8008caa <_svfiprintf_r+0xfa>
 8008c7e:	9a07      	ldr	r2, [sp, #28]
 8008c80:	4654      	mov	r4, sl
 8008c82:	2000      	movs	r0, #0
 8008c84:	f04f 0c0a 	mov.w	ip, #10
 8008c88:	4621      	mov	r1, r4
 8008c8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c8e:	3b30      	subs	r3, #48	@ 0x30
 8008c90:	2b09      	cmp	r3, #9
 8008c92:	d94b      	bls.n	8008d2c <_svfiprintf_r+0x17c>
 8008c94:	b1b0      	cbz	r0, 8008cc4 <_svfiprintf_r+0x114>
 8008c96:	9207      	str	r2, [sp, #28]
 8008c98:	e014      	b.n	8008cc4 <_svfiprintf_r+0x114>
 8008c9a:	eba0 0308 	sub.w	r3, r0, r8
 8008c9e:	fa09 f303 	lsl.w	r3, r9, r3
 8008ca2:	4313      	orrs	r3, r2
 8008ca4:	9304      	str	r3, [sp, #16]
 8008ca6:	46a2      	mov	sl, r4
 8008ca8:	e7d2      	b.n	8008c50 <_svfiprintf_r+0xa0>
 8008caa:	9b03      	ldr	r3, [sp, #12]
 8008cac:	1d19      	adds	r1, r3, #4
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	9103      	str	r1, [sp, #12]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	bfbb      	ittet	lt
 8008cb6:	425b      	neglt	r3, r3
 8008cb8:	f042 0202 	orrlt.w	r2, r2, #2
 8008cbc:	9307      	strge	r3, [sp, #28]
 8008cbe:	9307      	strlt	r3, [sp, #28]
 8008cc0:	bfb8      	it	lt
 8008cc2:	9204      	strlt	r2, [sp, #16]
 8008cc4:	7823      	ldrb	r3, [r4, #0]
 8008cc6:	2b2e      	cmp	r3, #46	@ 0x2e
 8008cc8:	d10a      	bne.n	8008ce0 <_svfiprintf_r+0x130>
 8008cca:	7863      	ldrb	r3, [r4, #1]
 8008ccc:	2b2a      	cmp	r3, #42	@ 0x2a
 8008cce:	d132      	bne.n	8008d36 <_svfiprintf_r+0x186>
 8008cd0:	9b03      	ldr	r3, [sp, #12]
 8008cd2:	1d1a      	adds	r2, r3, #4
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	9203      	str	r2, [sp, #12]
 8008cd8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008cdc:	3402      	adds	r4, #2
 8008cde:	9305      	str	r3, [sp, #20]
 8008ce0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008da4 <_svfiprintf_r+0x1f4>
 8008ce4:	7821      	ldrb	r1, [r4, #0]
 8008ce6:	2203      	movs	r2, #3
 8008ce8:	4650      	mov	r0, sl
 8008cea:	f7f7 fa79 	bl	80001e0 <memchr>
 8008cee:	b138      	cbz	r0, 8008d00 <_svfiprintf_r+0x150>
 8008cf0:	9b04      	ldr	r3, [sp, #16]
 8008cf2:	eba0 000a 	sub.w	r0, r0, sl
 8008cf6:	2240      	movs	r2, #64	@ 0x40
 8008cf8:	4082      	lsls	r2, r0
 8008cfa:	4313      	orrs	r3, r2
 8008cfc:	3401      	adds	r4, #1
 8008cfe:	9304      	str	r3, [sp, #16]
 8008d00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d04:	4824      	ldr	r0, [pc, #144]	@ (8008d98 <_svfiprintf_r+0x1e8>)
 8008d06:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008d0a:	2206      	movs	r2, #6
 8008d0c:	f7f7 fa68 	bl	80001e0 <memchr>
 8008d10:	2800      	cmp	r0, #0
 8008d12:	d036      	beq.n	8008d82 <_svfiprintf_r+0x1d2>
 8008d14:	4b21      	ldr	r3, [pc, #132]	@ (8008d9c <_svfiprintf_r+0x1ec>)
 8008d16:	bb1b      	cbnz	r3, 8008d60 <_svfiprintf_r+0x1b0>
 8008d18:	9b03      	ldr	r3, [sp, #12]
 8008d1a:	3307      	adds	r3, #7
 8008d1c:	f023 0307 	bic.w	r3, r3, #7
 8008d20:	3308      	adds	r3, #8
 8008d22:	9303      	str	r3, [sp, #12]
 8008d24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d26:	4433      	add	r3, r6
 8008d28:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d2a:	e76a      	b.n	8008c02 <_svfiprintf_r+0x52>
 8008d2c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d30:	460c      	mov	r4, r1
 8008d32:	2001      	movs	r0, #1
 8008d34:	e7a8      	b.n	8008c88 <_svfiprintf_r+0xd8>
 8008d36:	2300      	movs	r3, #0
 8008d38:	3401      	adds	r4, #1
 8008d3a:	9305      	str	r3, [sp, #20]
 8008d3c:	4619      	mov	r1, r3
 8008d3e:	f04f 0c0a 	mov.w	ip, #10
 8008d42:	4620      	mov	r0, r4
 8008d44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d48:	3a30      	subs	r2, #48	@ 0x30
 8008d4a:	2a09      	cmp	r2, #9
 8008d4c:	d903      	bls.n	8008d56 <_svfiprintf_r+0x1a6>
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d0c6      	beq.n	8008ce0 <_svfiprintf_r+0x130>
 8008d52:	9105      	str	r1, [sp, #20]
 8008d54:	e7c4      	b.n	8008ce0 <_svfiprintf_r+0x130>
 8008d56:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d5a:	4604      	mov	r4, r0
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	e7f0      	b.n	8008d42 <_svfiprintf_r+0x192>
 8008d60:	ab03      	add	r3, sp, #12
 8008d62:	9300      	str	r3, [sp, #0]
 8008d64:	462a      	mov	r2, r5
 8008d66:	4b0e      	ldr	r3, [pc, #56]	@ (8008da0 <_svfiprintf_r+0x1f0>)
 8008d68:	a904      	add	r1, sp, #16
 8008d6a:	4638      	mov	r0, r7
 8008d6c:	f3af 8000 	nop.w
 8008d70:	1c42      	adds	r2, r0, #1
 8008d72:	4606      	mov	r6, r0
 8008d74:	d1d6      	bne.n	8008d24 <_svfiprintf_r+0x174>
 8008d76:	89ab      	ldrh	r3, [r5, #12]
 8008d78:	065b      	lsls	r3, r3, #25
 8008d7a:	f53f af2d 	bmi.w	8008bd8 <_svfiprintf_r+0x28>
 8008d7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008d80:	e72c      	b.n	8008bdc <_svfiprintf_r+0x2c>
 8008d82:	ab03      	add	r3, sp, #12
 8008d84:	9300      	str	r3, [sp, #0]
 8008d86:	462a      	mov	r2, r5
 8008d88:	4b05      	ldr	r3, [pc, #20]	@ (8008da0 <_svfiprintf_r+0x1f0>)
 8008d8a:	a904      	add	r1, sp, #16
 8008d8c:	4638      	mov	r0, r7
 8008d8e:	f000 f879 	bl	8008e84 <_printf_i>
 8008d92:	e7ed      	b.n	8008d70 <_svfiprintf_r+0x1c0>
 8008d94:	08009348 	.word	0x08009348
 8008d98:	08009352 	.word	0x08009352
 8008d9c:	00000000 	.word	0x00000000
 8008da0:	08008af9 	.word	0x08008af9
 8008da4:	0800934e 	.word	0x0800934e

08008da8 <_printf_common>:
 8008da8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008dac:	4616      	mov	r6, r2
 8008dae:	4698      	mov	r8, r3
 8008db0:	688a      	ldr	r2, [r1, #8]
 8008db2:	690b      	ldr	r3, [r1, #16]
 8008db4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008db8:	4293      	cmp	r3, r2
 8008dba:	bfb8      	it	lt
 8008dbc:	4613      	movlt	r3, r2
 8008dbe:	6033      	str	r3, [r6, #0]
 8008dc0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008dc4:	4607      	mov	r7, r0
 8008dc6:	460c      	mov	r4, r1
 8008dc8:	b10a      	cbz	r2, 8008dce <_printf_common+0x26>
 8008dca:	3301      	adds	r3, #1
 8008dcc:	6033      	str	r3, [r6, #0]
 8008dce:	6823      	ldr	r3, [r4, #0]
 8008dd0:	0699      	lsls	r1, r3, #26
 8008dd2:	bf42      	ittt	mi
 8008dd4:	6833      	ldrmi	r3, [r6, #0]
 8008dd6:	3302      	addmi	r3, #2
 8008dd8:	6033      	strmi	r3, [r6, #0]
 8008dda:	6825      	ldr	r5, [r4, #0]
 8008ddc:	f015 0506 	ands.w	r5, r5, #6
 8008de0:	d106      	bne.n	8008df0 <_printf_common+0x48>
 8008de2:	f104 0a19 	add.w	sl, r4, #25
 8008de6:	68e3      	ldr	r3, [r4, #12]
 8008de8:	6832      	ldr	r2, [r6, #0]
 8008dea:	1a9b      	subs	r3, r3, r2
 8008dec:	42ab      	cmp	r3, r5
 8008dee:	dc26      	bgt.n	8008e3e <_printf_common+0x96>
 8008df0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008df4:	6822      	ldr	r2, [r4, #0]
 8008df6:	3b00      	subs	r3, #0
 8008df8:	bf18      	it	ne
 8008dfa:	2301      	movne	r3, #1
 8008dfc:	0692      	lsls	r2, r2, #26
 8008dfe:	d42b      	bmi.n	8008e58 <_printf_common+0xb0>
 8008e00:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008e04:	4641      	mov	r1, r8
 8008e06:	4638      	mov	r0, r7
 8008e08:	47c8      	blx	r9
 8008e0a:	3001      	adds	r0, #1
 8008e0c:	d01e      	beq.n	8008e4c <_printf_common+0xa4>
 8008e0e:	6823      	ldr	r3, [r4, #0]
 8008e10:	6922      	ldr	r2, [r4, #16]
 8008e12:	f003 0306 	and.w	r3, r3, #6
 8008e16:	2b04      	cmp	r3, #4
 8008e18:	bf02      	ittt	eq
 8008e1a:	68e5      	ldreq	r5, [r4, #12]
 8008e1c:	6833      	ldreq	r3, [r6, #0]
 8008e1e:	1aed      	subeq	r5, r5, r3
 8008e20:	68a3      	ldr	r3, [r4, #8]
 8008e22:	bf0c      	ite	eq
 8008e24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008e28:	2500      	movne	r5, #0
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	bfc4      	itt	gt
 8008e2e:	1a9b      	subgt	r3, r3, r2
 8008e30:	18ed      	addgt	r5, r5, r3
 8008e32:	2600      	movs	r6, #0
 8008e34:	341a      	adds	r4, #26
 8008e36:	42b5      	cmp	r5, r6
 8008e38:	d11a      	bne.n	8008e70 <_printf_common+0xc8>
 8008e3a:	2000      	movs	r0, #0
 8008e3c:	e008      	b.n	8008e50 <_printf_common+0xa8>
 8008e3e:	2301      	movs	r3, #1
 8008e40:	4652      	mov	r2, sl
 8008e42:	4641      	mov	r1, r8
 8008e44:	4638      	mov	r0, r7
 8008e46:	47c8      	blx	r9
 8008e48:	3001      	adds	r0, #1
 8008e4a:	d103      	bne.n	8008e54 <_printf_common+0xac>
 8008e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e54:	3501      	adds	r5, #1
 8008e56:	e7c6      	b.n	8008de6 <_printf_common+0x3e>
 8008e58:	18e1      	adds	r1, r4, r3
 8008e5a:	1c5a      	adds	r2, r3, #1
 8008e5c:	2030      	movs	r0, #48	@ 0x30
 8008e5e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008e62:	4422      	add	r2, r4
 8008e64:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008e68:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008e6c:	3302      	adds	r3, #2
 8008e6e:	e7c7      	b.n	8008e00 <_printf_common+0x58>
 8008e70:	2301      	movs	r3, #1
 8008e72:	4622      	mov	r2, r4
 8008e74:	4641      	mov	r1, r8
 8008e76:	4638      	mov	r0, r7
 8008e78:	47c8      	blx	r9
 8008e7a:	3001      	adds	r0, #1
 8008e7c:	d0e6      	beq.n	8008e4c <_printf_common+0xa4>
 8008e7e:	3601      	adds	r6, #1
 8008e80:	e7d9      	b.n	8008e36 <_printf_common+0x8e>
	...

08008e84 <_printf_i>:
 8008e84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e88:	7e0f      	ldrb	r7, [r1, #24]
 8008e8a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008e8c:	2f78      	cmp	r7, #120	@ 0x78
 8008e8e:	4691      	mov	r9, r2
 8008e90:	4680      	mov	r8, r0
 8008e92:	460c      	mov	r4, r1
 8008e94:	469a      	mov	sl, r3
 8008e96:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008e9a:	d807      	bhi.n	8008eac <_printf_i+0x28>
 8008e9c:	2f62      	cmp	r7, #98	@ 0x62
 8008e9e:	d80a      	bhi.n	8008eb6 <_printf_i+0x32>
 8008ea0:	2f00      	cmp	r7, #0
 8008ea2:	f000 80d2 	beq.w	800904a <_printf_i+0x1c6>
 8008ea6:	2f58      	cmp	r7, #88	@ 0x58
 8008ea8:	f000 80b9 	beq.w	800901e <_printf_i+0x19a>
 8008eac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008eb0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008eb4:	e03a      	b.n	8008f2c <_printf_i+0xa8>
 8008eb6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008eba:	2b15      	cmp	r3, #21
 8008ebc:	d8f6      	bhi.n	8008eac <_printf_i+0x28>
 8008ebe:	a101      	add	r1, pc, #4	@ (adr r1, 8008ec4 <_printf_i+0x40>)
 8008ec0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008ec4:	08008f1d 	.word	0x08008f1d
 8008ec8:	08008f31 	.word	0x08008f31
 8008ecc:	08008ead 	.word	0x08008ead
 8008ed0:	08008ead 	.word	0x08008ead
 8008ed4:	08008ead 	.word	0x08008ead
 8008ed8:	08008ead 	.word	0x08008ead
 8008edc:	08008f31 	.word	0x08008f31
 8008ee0:	08008ead 	.word	0x08008ead
 8008ee4:	08008ead 	.word	0x08008ead
 8008ee8:	08008ead 	.word	0x08008ead
 8008eec:	08008ead 	.word	0x08008ead
 8008ef0:	08009031 	.word	0x08009031
 8008ef4:	08008f5b 	.word	0x08008f5b
 8008ef8:	08008feb 	.word	0x08008feb
 8008efc:	08008ead 	.word	0x08008ead
 8008f00:	08008ead 	.word	0x08008ead
 8008f04:	08009053 	.word	0x08009053
 8008f08:	08008ead 	.word	0x08008ead
 8008f0c:	08008f5b 	.word	0x08008f5b
 8008f10:	08008ead 	.word	0x08008ead
 8008f14:	08008ead 	.word	0x08008ead
 8008f18:	08008ff3 	.word	0x08008ff3
 8008f1c:	6833      	ldr	r3, [r6, #0]
 8008f1e:	1d1a      	adds	r2, r3, #4
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	6032      	str	r2, [r6, #0]
 8008f24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008f28:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	e09d      	b.n	800906c <_printf_i+0x1e8>
 8008f30:	6833      	ldr	r3, [r6, #0]
 8008f32:	6820      	ldr	r0, [r4, #0]
 8008f34:	1d19      	adds	r1, r3, #4
 8008f36:	6031      	str	r1, [r6, #0]
 8008f38:	0606      	lsls	r6, r0, #24
 8008f3a:	d501      	bpl.n	8008f40 <_printf_i+0xbc>
 8008f3c:	681d      	ldr	r5, [r3, #0]
 8008f3e:	e003      	b.n	8008f48 <_printf_i+0xc4>
 8008f40:	0645      	lsls	r5, r0, #25
 8008f42:	d5fb      	bpl.n	8008f3c <_printf_i+0xb8>
 8008f44:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008f48:	2d00      	cmp	r5, #0
 8008f4a:	da03      	bge.n	8008f54 <_printf_i+0xd0>
 8008f4c:	232d      	movs	r3, #45	@ 0x2d
 8008f4e:	426d      	negs	r5, r5
 8008f50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008f54:	4859      	ldr	r0, [pc, #356]	@ (80090bc <_printf_i+0x238>)
 8008f56:	230a      	movs	r3, #10
 8008f58:	e011      	b.n	8008f7e <_printf_i+0xfa>
 8008f5a:	6821      	ldr	r1, [r4, #0]
 8008f5c:	6833      	ldr	r3, [r6, #0]
 8008f5e:	0608      	lsls	r0, r1, #24
 8008f60:	f853 5b04 	ldr.w	r5, [r3], #4
 8008f64:	d402      	bmi.n	8008f6c <_printf_i+0xe8>
 8008f66:	0649      	lsls	r1, r1, #25
 8008f68:	bf48      	it	mi
 8008f6a:	b2ad      	uxthmi	r5, r5
 8008f6c:	2f6f      	cmp	r7, #111	@ 0x6f
 8008f6e:	4853      	ldr	r0, [pc, #332]	@ (80090bc <_printf_i+0x238>)
 8008f70:	6033      	str	r3, [r6, #0]
 8008f72:	bf14      	ite	ne
 8008f74:	230a      	movne	r3, #10
 8008f76:	2308      	moveq	r3, #8
 8008f78:	2100      	movs	r1, #0
 8008f7a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008f7e:	6866      	ldr	r6, [r4, #4]
 8008f80:	60a6      	str	r6, [r4, #8]
 8008f82:	2e00      	cmp	r6, #0
 8008f84:	bfa2      	ittt	ge
 8008f86:	6821      	ldrge	r1, [r4, #0]
 8008f88:	f021 0104 	bicge.w	r1, r1, #4
 8008f8c:	6021      	strge	r1, [r4, #0]
 8008f8e:	b90d      	cbnz	r5, 8008f94 <_printf_i+0x110>
 8008f90:	2e00      	cmp	r6, #0
 8008f92:	d04b      	beq.n	800902c <_printf_i+0x1a8>
 8008f94:	4616      	mov	r6, r2
 8008f96:	fbb5 f1f3 	udiv	r1, r5, r3
 8008f9a:	fb03 5711 	mls	r7, r3, r1, r5
 8008f9e:	5dc7      	ldrb	r7, [r0, r7]
 8008fa0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008fa4:	462f      	mov	r7, r5
 8008fa6:	42bb      	cmp	r3, r7
 8008fa8:	460d      	mov	r5, r1
 8008faa:	d9f4      	bls.n	8008f96 <_printf_i+0x112>
 8008fac:	2b08      	cmp	r3, #8
 8008fae:	d10b      	bne.n	8008fc8 <_printf_i+0x144>
 8008fb0:	6823      	ldr	r3, [r4, #0]
 8008fb2:	07df      	lsls	r7, r3, #31
 8008fb4:	d508      	bpl.n	8008fc8 <_printf_i+0x144>
 8008fb6:	6923      	ldr	r3, [r4, #16]
 8008fb8:	6861      	ldr	r1, [r4, #4]
 8008fba:	4299      	cmp	r1, r3
 8008fbc:	bfde      	ittt	le
 8008fbe:	2330      	movle	r3, #48	@ 0x30
 8008fc0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008fc4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008fc8:	1b92      	subs	r2, r2, r6
 8008fca:	6122      	str	r2, [r4, #16]
 8008fcc:	f8cd a000 	str.w	sl, [sp]
 8008fd0:	464b      	mov	r3, r9
 8008fd2:	aa03      	add	r2, sp, #12
 8008fd4:	4621      	mov	r1, r4
 8008fd6:	4640      	mov	r0, r8
 8008fd8:	f7ff fee6 	bl	8008da8 <_printf_common>
 8008fdc:	3001      	adds	r0, #1
 8008fde:	d14a      	bne.n	8009076 <_printf_i+0x1f2>
 8008fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8008fe4:	b004      	add	sp, #16
 8008fe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fea:	6823      	ldr	r3, [r4, #0]
 8008fec:	f043 0320 	orr.w	r3, r3, #32
 8008ff0:	6023      	str	r3, [r4, #0]
 8008ff2:	4833      	ldr	r0, [pc, #204]	@ (80090c0 <_printf_i+0x23c>)
 8008ff4:	2778      	movs	r7, #120	@ 0x78
 8008ff6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008ffa:	6823      	ldr	r3, [r4, #0]
 8008ffc:	6831      	ldr	r1, [r6, #0]
 8008ffe:	061f      	lsls	r7, r3, #24
 8009000:	f851 5b04 	ldr.w	r5, [r1], #4
 8009004:	d402      	bmi.n	800900c <_printf_i+0x188>
 8009006:	065f      	lsls	r7, r3, #25
 8009008:	bf48      	it	mi
 800900a:	b2ad      	uxthmi	r5, r5
 800900c:	6031      	str	r1, [r6, #0]
 800900e:	07d9      	lsls	r1, r3, #31
 8009010:	bf44      	itt	mi
 8009012:	f043 0320 	orrmi.w	r3, r3, #32
 8009016:	6023      	strmi	r3, [r4, #0]
 8009018:	b11d      	cbz	r5, 8009022 <_printf_i+0x19e>
 800901a:	2310      	movs	r3, #16
 800901c:	e7ac      	b.n	8008f78 <_printf_i+0xf4>
 800901e:	4827      	ldr	r0, [pc, #156]	@ (80090bc <_printf_i+0x238>)
 8009020:	e7e9      	b.n	8008ff6 <_printf_i+0x172>
 8009022:	6823      	ldr	r3, [r4, #0]
 8009024:	f023 0320 	bic.w	r3, r3, #32
 8009028:	6023      	str	r3, [r4, #0]
 800902a:	e7f6      	b.n	800901a <_printf_i+0x196>
 800902c:	4616      	mov	r6, r2
 800902e:	e7bd      	b.n	8008fac <_printf_i+0x128>
 8009030:	6833      	ldr	r3, [r6, #0]
 8009032:	6825      	ldr	r5, [r4, #0]
 8009034:	6961      	ldr	r1, [r4, #20]
 8009036:	1d18      	adds	r0, r3, #4
 8009038:	6030      	str	r0, [r6, #0]
 800903a:	062e      	lsls	r6, r5, #24
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	d501      	bpl.n	8009044 <_printf_i+0x1c0>
 8009040:	6019      	str	r1, [r3, #0]
 8009042:	e002      	b.n	800904a <_printf_i+0x1c6>
 8009044:	0668      	lsls	r0, r5, #25
 8009046:	d5fb      	bpl.n	8009040 <_printf_i+0x1bc>
 8009048:	8019      	strh	r1, [r3, #0]
 800904a:	2300      	movs	r3, #0
 800904c:	6123      	str	r3, [r4, #16]
 800904e:	4616      	mov	r6, r2
 8009050:	e7bc      	b.n	8008fcc <_printf_i+0x148>
 8009052:	6833      	ldr	r3, [r6, #0]
 8009054:	1d1a      	adds	r2, r3, #4
 8009056:	6032      	str	r2, [r6, #0]
 8009058:	681e      	ldr	r6, [r3, #0]
 800905a:	6862      	ldr	r2, [r4, #4]
 800905c:	2100      	movs	r1, #0
 800905e:	4630      	mov	r0, r6
 8009060:	f7f7 f8be 	bl	80001e0 <memchr>
 8009064:	b108      	cbz	r0, 800906a <_printf_i+0x1e6>
 8009066:	1b80      	subs	r0, r0, r6
 8009068:	6060      	str	r0, [r4, #4]
 800906a:	6863      	ldr	r3, [r4, #4]
 800906c:	6123      	str	r3, [r4, #16]
 800906e:	2300      	movs	r3, #0
 8009070:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009074:	e7aa      	b.n	8008fcc <_printf_i+0x148>
 8009076:	6923      	ldr	r3, [r4, #16]
 8009078:	4632      	mov	r2, r6
 800907a:	4649      	mov	r1, r9
 800907c:	4640      	mov	r0, r8
 800907e:	47d0      	blx	sl
 8009080:	3001      	adds	r0, #1
 8009082:	d0ad      	beq.n	8008fe0 <_printf_i+0x15c>
 8009084:	6823      	ldr	r3, [r4, #0]
 8009086:	079b      	lsls	r3, r3, #30
 8009088:	d413      	bmi.n	80090b2 <_printf_i+0x22e>
 800908a:	68e0      	ldr	r0, [r4, #12]
 800908c:	9b03      	ldr	r3, [sp, #12]
 800908e:	4298      	cmp	r0, r3
 8009090:	bfb8      	it	lt
 8009092:	4618      	movlt	r0, r3
 8009094:	e7a6      	b.n	8008fe4 <_printf_i+0x160>
 8009096:	2301      	movs	r3, #1
 8009098:	4632      	mov	r2, r6
 800909a:	4649      	mov	r1, r9
 800909c:	4640      	mov	r0, r8
 800909e:	47d0      	blx	sl
 80090a0:	3001      	adds	r0, #1
 80090a2:	d09d      	beq.n	8008fe0 <_printf_i+0x15c>
 80090a4:	3501      	adds	r5, #1
 80090a6:	68e3      	ldr	r3, [r4, #12]
 80090a8:	9903      	ldr	r1, [sp, #12]
 80090aa:	1a5b      	subs	r3, r3, r1
 80090ac:	42ab      	cmp	r3, r5
 80090ae:	dcf2      	bgt.n	8009096 <_printf_i+0x212>
 80090b0:	e7eb      	b.n	800908a <_printf_i+0x206>
 80090b2:	2500      	movs	r5, #0
 80090b4:	f104 0619 	add.w	r6, r4, #25
 80090b8:	e7f5      	b.n	80090a6 <_printf_i+0x222>
 80090ba:	bf00      	nop
 80090bc:	08009359 	.word	0x08009359
 80090c0:	0800936a 	.word	0x0800936a

080090c4 <memmove>:
 80090c4:	4288      	cmp	r0, r1
 80090c6:	b510      	push	{r4, lr}
 80090c8:	eb01 0402 	add.w	r4, r1, r2
 80090cc:	d902      	bls.n	80090d4 <memmove+0x10>
 80090ce:	4284      	cmp	r4, r0
 80090d0:	4623      	mov	r3, r4
 80090d2:	d807      	bhi.n	80090e4 <memmove+0x20>
 80090d4:	1e43      	subs	r3, r0, #1
 80090d6:	42a1      	cmp	r1, r4
 80090d8:	d008      	beq.n	80090ec <memmove+0x28>
 80090da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80090de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80090e2:	e7f8      	b.n	80090d6 <memmove+0x12>
 80090e4:	4402      	add	r2, r0
 80090e6:	4601      	mov	r1, r0
 80090e8:	428a      	cmp	r2, r1
 80090ea:	d100      	bne.n	80090ee <memmove+0x2a>
 80090ec:	bd10      	pop	{r4, pc}
 80090ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80090f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80090f6:	e7f7      	b.n	80090e8 <memmove+0x24>

080090f8 <_sbrk_r>:
 80090f8:	b538      	push	{r3, r4, r5, lr}
 80090fa:	4d06      	ldr	r5, [pc, #24]	@ (8009114 <_sbrk_r+0x1c>)
 80090fc:	2300      	movs	r3, #0
 80090fe:	4604      	mov	r4, r0
 8009100:	4608      	mov	r0, r1
 8009102:	602b      	str	r3, [r5, #0]
 8009104:	f7f9 f856 	bl	80021b4 <_sbrk>
 8009108:	1c43      	adds	r3, r0, #1
 800910a:	d102      	bne.n	8009112 <_sbrk_r+0x1a>
 800910c:	682b      	ldr	r3, [r5, #0]
 800910e:	b103      	cbz	r3, 8009112 <_sbrk_r+0x1a>
 8009110:	6023      	str	r3, [r4, #0]
 8009112:	bd38      	pop	{r3, r4, r5, pc}
 8009114:	20000480 	.word	0x20000480

08009118 <memcpy>:
 8009118:	440a      	add	r2, r1
 800911a:	4291      	cmp	r1, r2
 800911c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009120:	d100      	bne.n	8009124 <memcpy+0xc>
 8009122:	4770      	bx	lr
 8009124:	b510      	push	{r4, lr}
 8009126:	f811 4b01 	ldrb.w	r4, [r1], #1
 800912a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800912e:	4291      	cmp	r1, r2
 8009130:	d1f9      	bne.n	8009126 <memcpy+0xe>
 8009132:	bd10      	pop	{r4, pc}

08009134 <_realloc_r>:
 8009134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009138:	4680      	mov	r8, r0
 800913a:	4615      	mov	r5, r2
 800913c:	460c      	mov	r4, r1
 800913e:	b921      	cbnz	r1, 800914a <_realloc_r+0x16>
 8009140:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009144:	4611      	mov	r1, r2
 8009146:	f7ff bc4b 	b.w	80089e0 <_malloc_r>
 800914a:	b92a      	cbnz	r2, 8009158 <_realloc_r+0x24>
 800914c:	f7ff fbdc 	bl	8008908 <_free_r>
 8009150:	2400      	movs	r4, #0
 8009152:	4620      	mov	r0, r4
 8009154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009158:	f000 f81a 	bl	8009190 <_malloc_usable_size_r>
 800915c:	4285      	cmp	r5, r0
 800915e:	4606      	mov	r6, r0
 8009160:	d802      	bhi.n	8009168 <_realloc_r+0x34>
 8009162:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009166:	d8f4      	bhi.n	8009152 <_realloc_r+0x1e>
 8009168:	4629      	mov	r1, r5
 800916a:	4640      	mov	r0, r8
 800916c:	f7ff fc38 	bl	80089e0 <_malloc_r>
 8009170:	4607      	mov	r7, r0
 8009172:	2800      	cmp	r0, #0
 8009174:	d0ec      	beq.n	8009150 <_realloc_r+0x1c>
 8009176:	42b5      	cmp	r5, r6
 8009178:	462a      	mov	r2, r5
 800917a:	4621      	mov	r1, r4
 800917c:	bf28      	it	cs
 800917e:	4632      	movcs	r2, r6
 8009180:	f7ff ffca 	bl	8009118 <memcpy>
 8009184:	4621      	mov	r1, r4
 8009186:	4640      	mov	r0, r8
 8009188:	f7ff fbbe 	bl	8008908 <_free_r>
 800918c:	463c      	mov	r4, r7
 800918e:	e7e0      	b.n	8009152 <_realloc_r+0x1e>

08009190 <_malloc_usable_size_r>:
 8009190:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009194:	1f18      	subs	r0, r3, #4
 8009196:	2b00      	cmp	r3, #0
 8009198:	bfbc      	itt	lt
 800919a:	580b      	ldrlt	r3, [r1, r0]
 800919c:	18c0      	addlt	r0, r0, r3
 800919e:	4770      	bx	lr

080091a0 <_init>:
 80091a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091a2:	bf00      	nop
 80091a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091a6:	bc08      	pop	{r3}
 80091a8:	469e      	mov	lr, r3
 80091aa:	4770      	bx	lr

080091ac <_fini>:
 80091ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ae:	bf00      	nop
 80091b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091b2:	bc08      	pop	{r3}
 80091b4:	469e      	mov	lr, r3
 80091b6:	4770      	bx	lr
